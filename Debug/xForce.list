
C:\Users\ellca\OneDrive\IFCE Stuff\Semestre 7\SEMB2\xForce\STM32-Acc\Debug\xForce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080030f0  080030f0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  080030f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          0000012c  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000154  20000154  00020028  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b321  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f62  00000000  00000000  0002b373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d98  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c78  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e30  00000000  00000000  0002ece8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000041ff  00000000  00000000  00033b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00037d17  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003940  00000000  00000000  00037d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030d8 	.word	0x080030d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080030d8 	.word	0x080030d8

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b26      	ldr	r3, [pc, #152]	; (8000280 <NVIC_Init+0xb8>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <NVIC_Init+0xbc>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a13      	ldr	r2, [pc, #76]	; (8000284 <NVIC_Init+0xbc>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490b      	ldr	r1, [pc, #44]	; (8000284 <NVIC_Init+0xbc>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	e000e100 	.word	0xe000e100

08000288 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <DAC_SetChannel1Data+0x30>)
 800029a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	3308      	adds	r3, #8
 80002a4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	461a      	mov	r2, r3
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40007400 	.word	0x40007400

080002bc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	4b24      	ldr	r3, [pc, #144]	; (8000364 <DMA_Init+0xa8>)
 80002d4:	4013      	ands	r3, r2
 80002d6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000304:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800030a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000310:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4313      	orrs	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 0307 	bic.w	r3, r3, #7
 800032a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4313      	orrs	r3, r2
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	691a      	ldr	r2, [r3, #16]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	60da      	str	r2, [r3, #12]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	f01c803f 	.word	0xf01c803f

08000368 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d006      	beq.n	8000388 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000386:	e005      	b.n	8000394 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f023 0201 	bic.w	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	601a      	str	r2, [r3, #0]
  }
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
 80003bc:	e001      	b.n	80003c2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <DMA_GetFlagStatus+0x68>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d802      	bhi.n	80003f0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <DMA_GetFlagStatus+0x6c>)
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	e001      	b.n	80003f4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <DMA_GetFlagStatus+0x70>)
 80003f2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d003      	beq.n	8000406 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e002      	b.n	800040c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000412:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000416:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000422:	2301      	movs	r3, #1
 8000424:	75fb      	strb	r3, [r7, #23]
 8000426:	e001      	b.n	800042c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800042c:	7dfb      	ldrb	r3, [r7, #23]
}
 800042e:	4618      	mov	r0, r3
 8000430:	371c      	adds	r7, #28
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	4002640f 	.word	0x4002640f
 800043c:	40026000 	.word	0x40026000
 8000440:	40026400 	.word	0x40026400

08000444 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <DMA_ClearFlag+0x50>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d802      	bhi.n	800045c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <DMA_ClearFlag+0x54>)
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e001      	b.n	8000460 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <DMA_ClearFlag+0x58>)
 800045e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d007      	beq.n	800047a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000470:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000478:	e006      	b.n	8000488 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	6093      	str	r3, [r2, #8]
  }    
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	4002640f 	.word	0x4002640f
 8000498:	40026000 	.word	0x40026000
 800049c:	40026400 	.word	0x40026400

080004a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e076      	b.n	80005aa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004bc:	2201      	movs	r2, #1
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d165      	bne.n	80005a4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	2103      	movs	r1, #3
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	401a      	ands	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	4619      	mov	r1, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d003      	beq.n	8000516 <GPIO_Init+0x76>
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d12e      	bne.n	8000574 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2103      	movs	r1, #3
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	401a      	ands	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	4619      	mov	r1, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	431a      	orrs	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	b29b      	uxth	r3, r3
 800054c:	2101      	movs	r1, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	401a      	ands	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	4619      	mov	r1, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	b29b      	uxth	r3, r3
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	b29b      	uxth	r3, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	401a      	ands	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68da      	ldr	r2, [r3, #12]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	4619      	mov	r1, r3
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d985      	bls.n	80004bc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80005b0:	bf00      	nop
 80005b2:	371c      	adds	r7, #28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
 80005c8:	4613      	mov	r3, r2
 80005ca:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005d4:	787a      	ldrb	r2, [r7, #1]
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3208      	adds	r2, #8
 80005f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	210f      	movs	r1, #15
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	ea02 0103 	and.w	r1, r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f100 0208 	add.w	r2, r0, #8
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b29b      	uxth	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3208      	adds	r2, #8
 8000626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b29b      	uxth	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3208      	adds	r2, #8
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800066c:	4b48      	ldr	r3, [pc, #288]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f003 030c 	and.w	r3, r3, #12
 8000674:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d007      	beq.n	800068c <RCC_GetClocksFreq+0x40>
 800067c:	2b08      	cmp	r3, #8
 800067e:	d009      	beq.n	8000694 <RCC_GetClocksFreq+0x48>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d13f      	bne.n	8000704 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a43      	ldr	r2, [pc, #268]	; (8000794 <RCC_GetClocksFreq+0x148>)
 8000688:	601a      	str	r2, [r3, #0]
      break;
 800068a:	e03f      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a42      	ldr	r2, [pc, #264]	; (8000798 <RCC_GetClocksFreq+0x14c>)
 8000690:	601a      	str	r2, [r3, #0]
      break;
 8000692:	e03b      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <RCC_GetClocksFreq+0x144>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069c:	0d9b      	lsrs	r3, r3, #22
 800069e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006b0:	4a39      	ldr	r2, [pc, #228]	; (8000798 <RCC_GetClocksFreq+0x14c>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006ba:	6859      	ldr	r1, [r3, #4]
 80006bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80006c0:	400b      	ands	r3, r1
 80006c2:	099b      	lsrs	r3, r3, #6
 80006c4:	fb03 f302 	mul.w	r3, r3, r2
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	e00c      	b.n	80006e6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <RCC_GetClocksFreq+0x148>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006d6:	6859      	ldr	r1, [r3, #4]
 80006d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80006dc:	400b      	ands	r3, r1
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	fb03 f302 	mul.w	r3, r3, r2
 80006e4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	3301      	adds	r3, #1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
      break;
 8000702:	e003      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <RCC_GetClocksFreq+0x148>)
 8000708:	601a      	str	r2, [r3, #0]
      break;
 800070a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000714:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <RCC_GetClocksFreq+0x150>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <RCC_GetClocksFreq+0x144>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800073c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	0a9b      	lsrs	r3, r3, #10
 8000742:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <RCC_GetClocksFreq+0x150>)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	40da      	lsrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000764:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	0b5b      	lsrs	r3, r3, #13
 800076a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <RCC_GetClocksFreq+0x150>)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	40da      	lsrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	60da      	str	r2, [r3, #12]
}
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	00f42400 	.word	0x00f42400
 8000798:	007a1200 	.word	0x007a1200
 800079c:	20000000 	.word	0x20000000

080007a0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007be:	e006      	b.n	80007ce <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007c0:	4905      	ldr	r1, [pc, #20]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007ee:	4909      	ldr	r1, [pc, #36]	; (8000814 <RCC_APB1PeriphClockCmd+0x38>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <RCC_APB1PeriphClockCmd+0x38>)
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007fa:	e006      	b.n	800080a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007fc:	4905      	ldr	r1, [pc, #20]	; (8000814 <RCC_APB1PeriphClockCmd+0x38>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <RCC_APB1PeriphClockCmd+0x38>)
 8000800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	43db      	mvns	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800

08000818 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800082a:	4909      	ldr	r1, [pc, #36]	; (8000850 <RCC_APB2PeriphClockCmd+0x38>)
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <RCC_APB2PeriphClockCmd+0x38>)
 800082e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000836:	e006      	b.n	8000846 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000838:	4905      	ldr	r1, [pc, #20]	; (8000850 <RCC_APB2PeriphClockCmd+0x38>)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <RCC_APB2PeriphClockCmd+0x38>)
 800083c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	43db      	mvns	r3, r3
 8000842:	4013      	ands	r3, r2
 8000844:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800

08000854 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800086e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	881a      	ldrh	r2, [r3, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	885b      	ldrh	r3, [r3, #2]
 8000878:	4313      	orrs	r3, r2
 800087a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000880:	4313      	orrs	r3, r2
 8000882:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000888:	4313      	orrs	r3, r2
 800088a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000890:	4313      	orrs	r3, r2
 8000892:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000898:	4313      	orrs	r3, r2
 800089a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	89fa      	ldrh	r2, [r7, #14]
 80008b6:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	8b9b      	ldrh	r3, [r3, #28]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	8a1a      	ldrh	r2, [r3, #16]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	821a      	strh	r2, [r3, #16]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2207      	movs	r2, #7
 8000918:	821a      	strh	r2, [r3, #16]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	887a      	ldrh	r2, [r7, #2]
 8000934:	819a      	strh	r2, [r3, #12]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	891b      	ldrh	r3, [r3, #8]
 8000954:	b29a      	uxth	r2, r3
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	4013      	ands	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e001      	b.n	800096a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <TIM_TimeBaseInit+0xb8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d013      	beq.n	80009bc <TIM_TimeBaseInit+0x44>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <TIM_TimeBaseInit+0xbc>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d00f      	beq.n	80009bc <TIM_TimeBaseInit+0x44>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a2:	d00b      	beq.n	80009bc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <TIM_TimeBaseInit+0xc0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d007      	beq.n	80009bc <TIM_TimeBaseInit+0x44>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <TIM_TimeBaseInit+0xc4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d003      	beq.n	80009bc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <TIM_TimeBaseInit+0xc8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d108      	bne.n	80009ce <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	885a      	ldrh	r2, [r3, #2]
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <TIM_TimeBaseInit+0xcc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00c      	beq.n	80009f0 <TIM_TimeBaseInit+0x78>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <TIM_TimeBaseInit+0xd0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d008      	beq.n	80009f0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	891a      	ldrh	r2, [r3, #8]
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	89fa      	ldrh	r2, [r7, #14]
 80009f4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <TIM_TimeBaseInit+0xb8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d003      	beq.n	8000a16 <TIM_TimeBaseInit+0x9e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <TIM_TimeBaseInit+0xbc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d104      	bne.n	8000a20 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	7a9b      	ldrb	r3, [r3, #10]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	829a      	strh	r2, [r3, #20]
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40010000 	.word	0x40010000
 8000a34:	40010400 	.word	0x40010400
 8000a38:	40000400 	.word	0x40000400
 8000a3c:	40000800 	.word	0x40000800
 8000a40:	40000c00 	.word	0x40000c00
 8000a44:	40001000 	.word	0x40001000
 8000a48:	40001400 	.word	0x40001400

08000a4c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000aa6:	e007      	b.n	8000ab8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	801a      	strh	r2, [r3, #0]
  }
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000ae6:	e007      	b.n	8000af8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	801a      	strh	r2, [r3, #0]
  }
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	817b      	strh	r3, [r7, #10]
 8000b12:	2300      	movs	r3, #0
 8000b14:	81fb      	strh	r3, [r7, #14]
 8000b16:	2300      	movs	r3, #0
 8000b18:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8c1b      	ldrh	r3, [r3, #32]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f023 0301 	bic.w	r3, r3, #1
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8c1b      	ldrh	r3, [r3, #32]
 8000b2e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	8b1b      	ldrh	r3, [r3, #24]
 8000b3a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8000b3c:	897b      	ldrh	r3, [r7, #10]
 8000b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b42:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000b44:	897b      	ldrh	r3, [r7, #10]
 8000b46:	f023 0303 	bic.w	r3, r3, #3
 8000b4a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	897b      	ldrh	r3, [r7, #10]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	f023 0302 	bic.w	r3, r3, #2
 8000b5c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	899a      	ldrh	r2, [r3, #12]
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	885a      	ldrh	r2, [r3, #2]
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <TIM_OC1Init+0xec>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d003      	beq.n	8000b82 <TIM_OC1Init+0x7e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <TIM_OC1Init+0xf0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d123      	bne.n	8000bca <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	f023 0308 	bic.w	r3, r3, #8
 8000b88:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	89da      	ldrh	r2, [r3, #14]
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	f023 0304 	bic.w	r3, r3, #4
 8000b9a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	889a      	ldrh	r2, [r3, #4]
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bac:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bb4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	8a1a      	ldrh	r2, [r3, #16]
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	8a5a      	ldrh	r2, [r3, #18]
 8000bc4:	89bb      	ldrh	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	89ba      	ldrh	r2, [r7, #12]
 8000bce:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	897a      	ldrh	r2, [r7, #10]
 8000bd4:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	89fa      	ldrh	r2, [r7, #14]
 8000be2:	841a      	strh	r2, [r3, #32]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3318      	adds	r3, #24
 8000c18:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8c1b      	ldrh	r3, [r3, #32]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	897b      	ldrh	r3, [r7, #10]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <TIM_SelectOCxM+0x4c>
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d114      	bne.n	8000c6e <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6819      	ldr	r1, [r3, #0]
 8000c58:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	6811      	ldr	r1, [r2, #0]
 8000c66:	883a      	ldrh	r2, [r7, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	e017      	b.n	8000c9e <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	3b04      	subs	r3, #4
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	8839      	ldrh	r1, [r7, #0]
 8000c96:	0209      	lsls	r1, r1, #8
 8000c98:	b289      	uxth	r1, r1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	8b1b      	ldrh	r3, [r3, #24]
 8000cd8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	f023 0308 	bic.w	r3, r3, #8
 8000ce0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000ce2:	89fa      	ldrh	r2, [r7, #14]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	89fa      	ldrh	r2, [r7, #14]
 8000cee:	831a      	strh	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	2201      	movs	r2, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	8c1b      	ldrh	r3, [r3, #32]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4013      	ands	r3, r2
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	8c1b      	ldrh	r3, [r3, #32]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	8839      	ldrh	r1, [r7, #0]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	841a      	strh	r2, [r3, #32]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	899b      	ldrh	r3, [r3, #12]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000d7a:	e009      	b.n	8000d90 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	899b      	ldrh	r3, [r3, #12]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	819a      	strh	r2, [r3, #12]
  }
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	821a      	strh	r2, [r3, #16]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	809a      	strh	r2, [r3, #4]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	e011      	b.n	8000e52 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d107      	bne.n	8000e44 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	8a1b      	ldrh	r3, [r3, #16]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e006      	b.n	8000e52 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8a9b      	ldrh	r3, [r3, #20]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <USART_GetITStatus+0xa4>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	74fb      	strb	r3, [r7, #19]
 8000e82:	e001      	b.n	8000e88 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e88:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <Audio_MAL_IRQHandler+0xe8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f7ff fa94 	bl	80003d0 <DMA_GetFlagStatus>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d062      	beq.n	8000f74 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d04a      	beq.n	8000f4c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000eb6:	bf00      	nop
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fa6f 	bl	80003a0 <DMA_GetCmdStatus>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f7      	bne.n	8000eb8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <Audio_MAL_IRQHandler+0xe8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f7ff fab6 	bl	8000444 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <Audio_MAL_IRQHandler+0xf0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <Audio_MAL_IRQHandler+0xf4>)
 8000ee0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	4293      	cmp	r3, r2
 8000eec:	bf28      	it	cs
 8000eee:	4613      	movcs	r3, r2
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <Audio_MAL_IRQHandler+0xf4>)
 8000ef2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4923      	ldr	r1, [pc, #140]	; (8000f88 <Audio_MAL_IRQHandler+0xf4>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f9de 	bl	80002bc <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fa2e 	bl	8000368 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <Audio_MAL_IRQHandler+0xf0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	bf28      	it	cs
 8000f1c:	460b      	movcs	r3, r1
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <Audio_MAL_IRQHandler+0xf0>)
 8000f24:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf28      	it	cs
 8000f36:	460b      	movcs	r3, r1
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <Audio_MAL_IRQHandler+0xec>)
 8000f3c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2101      	movs	r1, #1
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa0f 	bl	8000368 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000f4a:	e013      	b.n	8000f74 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa08 	bl	8000368 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <Audio_MAL_IRQHandler+0xe4>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <Audio_MAL_IRQHandler+0xe8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff fa6e 	bl	8000444 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <Audio_MAL_IRQHandler+0xf0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f942 	bl	80021f8 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	2000001c 	.word	0x2000001c
 8000f80:	20000010 	.word	0x20000010
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	200000f4 	.word	0x200000f4

08000f8c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000f90:	f7ff ff80 	bl	8000e94 <Audio_MAL_IRQHandler>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000f9c:	f7ff ff7a 	bl	8000e94 <Audio_MAL_IRQHandler>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000fa8:	2102      	movs	r1, #2
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <SPI3_IRQHandler+0x3c>)
 8000fac:	f7ff fcc8 	bl	8000940 <SPI_I2S_GetFlagStatus>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d011      	beq.n	8000fda <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <SPI3_IRQHandler+0x40>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d106      	bne.n	8000fcc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000fbe:	f001 f925 	bl	800220c <EVAL_AUDIO_GetSampleCallBack>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2004      	movs	r0, #4
 8000fc8:	f7ff f95e 	bl	8000288 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000fcc:	f001 f91e 	bl	800220c <EVAL_AUDIO_GetSampleCallBack>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <SPI3_IRQHandler+0x3c>)
 8000fd6:	f7ff fca5 	bl	8000924 <SPI_I2S_SendData>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40003c00 	.word	0x40003c00
 8000fe4:	20000014 	.word	0x20000014

08000fe8 <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]

	while(*s){
 8000ff2:	e013      	b.n	800101c <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8000ff4:	bf00      	nop
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f8      	beq.n	8000ff6 <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fed4 	bl	8000dbc <USART_SendData>
		*s++;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	603a      	str	r2, [r7, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e6      	bne.n	8000ff4 <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8001036:	f240 5125 	movw	r1, #1317	; 0x525
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <USART1_IRQHandler+0x5c>)
 800103c:	f7ff fed0 	bl	8000de0 <USART_GetITStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d01e      	beq.n	8001084 <USART1_IRQHandler+0x54>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <USART1_IRQHandler+0x5c>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	b29b      	uxth	r3, r3
 800104c:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d010      	beq.n	8001076 <USART1_IRQHandler+0x46>
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <USART1_IRQHandler+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b0b      	cmp	r3, #11
 800105a:	d80c      	bhi.n	8001076 <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <USART1_IRQHandler+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <USART1_IRQHandler+0x64>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	5453      	strb	r3, [r2, r1]
			cnt++;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <USART1_IRQHandler+0x60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <USART1_IRQHandler+0x60>)
 8001072:	701a      	strb	r2, [r3, #0]
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}
 8001074:	e006      	b.n	8001084 <USART1_IRQHandler+0x54>
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <USART1_IRQHandler+0x60>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
			USART_puts(USART1, received_string);
 800107c:	4905      	ldr	r1, [pc, #20]	; (8001094 <USART1_IRQHandler+0x64>)
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <USART1_IRQHandler+0x5c>)
 8001080:	f7ff ffb2 	bl	8000fe8 <USART_puts>
		}
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40011000 	.word	0x40011000
 8001090:	20000044 	.word	0x20000044
 8001094:	20000130 	.word	0x20000130

08001098 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	da0b      	bge.n	80010c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80010ac:	490d      	ldr	r1, [pc, #52]	; (80010e4 <NVIC_SetPriority+0x4c>)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	3b04      	subs	r3, #4
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80010c2:	e009      	b.n	80010d8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <NVIC_SetPriority+0x50>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	e000e100 	.word	0xe000e100

080010ec <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fa:	d301      	bcc.n	8001100 <SysTick_Config+0x14>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e011      	b.n	8001124 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001108:	3b01      	subs	r3, #1
 800110a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800110c:	210f      	movs	r1, #15
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	f7ff ffc1 	bl	8001098 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <SysTick_Config+0x40>)
 800111e:	2207      	movs	r2, #7
 8001120:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	e000e010 	.word	0xe000e010

08001130 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <SysTick_Handler+0xe4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a35      	ldr	r2, [pc, #212]	; (8001214 <SysTick_Handler+0xe4>)
 800113e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <SysTick_Handler+0xe8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <SysTick_Handler+0x22>
		TM_Time2--;
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <SysTick_Handler+0xe8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <SysTick_Handler+0xe8>)
 8001150:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001152:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	e052      	b.n	8001202 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <SysTick_Handler+0xec>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8001166:	2b00      	cmp	r3, #0
 8001168:	d048      	beq.n	80011fc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4a2b      	ldr	r2, [pc, #172]	; (800121c <SysTick_Handler+0xec>)
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001176:	2b00      	cmp	r3, #0
 8001178:	d040      	beq.n	80011fc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <SysTick_Handler+0xec>)
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8001186:	2b00      	cmp	r3, #0
 8001188:	d038      	beq.n	80011fc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <SysTick_Handler+0xec>)
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	3a01      	subs	r2, #1
 8001198:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4a1f      	ldr	r2, [pc, #124]	; (800121c <SysTick_Handler+0xec>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d128      	bne.n	80011fc <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <SysTick_Handler+0xec>)
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4918      	ldr	r1, [pc, #96]	; (800121c <SysTick_Handler+0xec>)
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4618      	mov	r0, r3
 80011c4:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <SysTick_Handler+0xec>)
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4912      	ldr	r1, [pc, #72]	; (800121c <SysTick_Handler+0xec>)
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <SysTick_Handler+0xec>)
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Handler+0xec>)
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3301      	adds	r3, #1
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <SysTick_Handler+0xec>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3a7      	bcc.n	800115c <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000048 	.word	0x20000048
 8001218:	2000004c 	.word	0x2000004c
 800121c:	20000054 	.word	0x20000054

08001220 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <TM_DELAY_Init+0x3c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <TM_DELAY_Init+0x40>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5b 	bl	80010ec <SysTick_Config>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d000      	beq.n	800123e <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 800123c:	e7fe      	b.n	800123c <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <TM_DELAY_Init+0x3c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	099b      	lsrs	r3, r3, #6
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <TM_DELAY_Init+0x44>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <TM_DELAY_Init+0x48>)
 800124e:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <TM_DELAY_Init+0x4c>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000020 	.word	0x20000020
 8001260:	10624dd3 	.word	0x10624dd3
 8001264:	02659117 	.word	0x02659117
 8001268:	20000140 	.word	0x20000140
 800126c:	20000050 	.word	0x20000050

08001270 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8001276:	2303      	movs	r3, #3
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <TM_DISCO_LedInit+0x2c>)
 8001288:	f000 f81c 	bl	80012c4 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <TM_DISCO_LedInit+0x2c>)
 800128e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001292:	835a      	strh	r2, [r3, #26]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020c00 	.word	0x40020c00

080012a0 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 80012a6:	2300      	movs	r3, #0
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2101      	movs	r1, #1
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TM_DISCO_ButtonInit+0x20>)
 80012b6:	f000 f805 	bl	80012c4 <TM_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020000 	.word	0x40020000

080012c4 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	460b      	mov	r3, r1
 80012d8:	707b      	strb	r3, [r7, #1]
 80012da:	4613      	mov	r3, r2
 80012dc:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00e      	beq.n	8001302 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f875 	bl	80013d4 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80012ea:	7838      	ldrb	r0, [r7, #0]
 80012ec:	787a      	ldrb	r2, [r7, #1]
 80012ee:	8879      	ldrh	r1, [r7, #2]
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	7c3b      	ldrb	r3, [r7, #16]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4603      	mov	r3, r0
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f882 	bl	8001404 <TM_GPIO_INT_Init>
 8001300:	e000      	b.n	8001304 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001302:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop

0800130c <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	807b      	strh	r3, [r7, #2]
 800131e:	460b      	mov	r3, r1
 8001320:	707b      	strb	r3, [r7, #1]
 8001322:	4613      	mov	r3, r2
 8001324:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d03e      	beq.n	80013aa <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f851 	bl	80013d4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e029      	b.n	800138c <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	fa42 f303 	asr.w	r3, r2, r3
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01d      	beq.n	8001384 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	08d9      	lsrs	r1, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3108      	adds	r1, #8
 8001354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	f001 0107 	and.w	r1, r1, #7
 800135e:	0089      	lsls	r1, r1, #2
 8001360:	200f      	movs	r0, #15
 8001362:	fa00 f101 	lsl.w	r1, r0, r1
 8001366:	43c9      	mvns	r1, r1
 8001368:	400b      	ands	r3, r1
 800136a:	7f38      	ldrb	r0, [r7, #28]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	f001 0107 	and.w	r1, r1, #7
 8001372:	0089      	lsls	r1, r1, #2
 8001374:	fa00 f101 	lsl.w	r1, r0, r1
 8001378:	4319      	orrs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001382:	e000      	b.n	8001386 <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001384:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	d9d2      	bls.n	8001338 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001392:	787a      	ldrb	r2, [r7, #1]
 8001394:	8879      	ldrh	r1, [r7, #2]
 8001396:	7e3b      	ldrb	r3, [r7, #24]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	783b      	ldrb	r3, [r7, #0]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	2202      	movs	r2, #2
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f82e 	bl	8001404 <TM_GPIO_INT_Init>
 80013a8:	e000      	b.n	80013ac <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 80013aa:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop

080013b4 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80013c2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	b29b      	uxth	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe9 	bl	80013b4 <TM_GPIO_GetPortSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	fa03 f102 	lsl.w	r1, r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <TM_GPIO_INT_EnableClock+0x2c>)
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <TM_GPIO_INT_EnableClock+0x2c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4603      	mov	r3, r0
 8001414:	807b      	strh	r3, [r7, #2]
 8001416:	460b      	mov	r3, r1
 8001418:	707b      	strb	r3, [r7, #1]
 800141a:	4613      	mov	r3, r2
 800141c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffc8 	bl	80013b4 <TM_GPIO_GetPortSource>
 8001424:	4603      	mov	r3, r0
 8001426:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e067      	b.n	80014fe <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	fa42 f303 	asr.w	r3, r2, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d05b      	beq.n	80014f6 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	7bba      	ldrb	r2, [r7, #14]
 8001442:	4932      	ldr	r1, [pc, #200]	; (800150c <TM_GPIO_INT_Init+0x108>)
 8001444:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001448:	b211      	sxth	r1, r2
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	b212      	sxth	r2, r2
 8001454:	430a      	orrs	r2, r1
 8001456:	b212      	sxth	r2, r2
 8001458:	b291      	uxth	r1, r2
 800145a:	4a2c      	ldr	r2, [pc, #176]	; (800150c <TM_GPIO_INT_Init+0x108>)
 800145c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	0052      	lsls	r2, r2, #1
 8001468:	2103      	movs	r1, #3
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	43d2      	mvns	r2, r2
 8001470:	4013      	ands	r3, r2
 8001472:	7e39      	ldrb	r1, [r7, #24]
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	0052      	lsls	r2, r2, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2103      	movs	r1, #3
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	4013      	ands	r3, r2
 8001494:	7879      	ldrb	r1, [r7, #1]
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	0052      	lsls	r2, r2, #1
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <TM_GPIO_INT_Init+0xac>
 80014aa:	787b      	ldrb	r3, [r7, #1]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	b292      	uxth	r2, r2
 80014be:	43d2      	mvns	r2, r2
 80014c0:	401a      	ands	r2, r3
 80014c2:	7839      	ldrb	r1, [r7, #0]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2103      	movs	r1, #3
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	7f39      	ldrb	r1, [r7, #28]
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	0052      	lsls	r2, r2, #1
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e000      	b.n	80014f8 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80014f6:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	3301      	adds	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d994      	bls.n	800142e <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000006c 	.word	0x2000006c

08001510 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <TM_SPI_Send+0x1e>
 800152a:	2300      	movs	r3, #0
 800152c:	e025      	b.n	800157a <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800152e:	bf00      	nop
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	891b      	ldrh	r3, [r3, #8]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f8      	beq.n	8001530 <TM_SPI_Send+0x20>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	891b      	ldrh	r3, [r3, #8]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f1      	bne.n	8001530 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001554:	bf00      	nop
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	b29b      	uxth	r3, r3
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f8      	beq.n	8001556 <TM_SPI_Send+0x46>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	891b      	ldrh	r3, [r3, #8]
 8001568:	b29b      	uxth	r3, r3
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f1      	bne.n	8001556 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	899b      	ldrh	r3, [r3, #12]
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 800158a:	f000 f9db 	bl	8001944 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 800158e:	f000 f84d 	bl	800162c <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	2201      	movs	r2, #1
 8001596:	210f      	movs	r1, #15
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8a5 	bl	80016e8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b3b      	cmp	r3, #59	; 0x3b
 80015a2:	d104      	bne.n	80015ae <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e008      	b.n	80015c0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b3f      	cmp	r3, #63	; 0x3f
 80015b2:	d104      	bne.n	80015be <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80015ba:	2302      	movs	r3, #2
 80015bc:	e000      	b.n	80015c0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000082 	.word	0x20000082

080015cc <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80015dc:	f000 f826 	bl	800162c <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 80015e0:	f000 f9b0 	bl	8001944 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80015e4:	f7ff ffce 	bl	8001584 <TM_LIS302DL_LIS3DSH_Detect>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f927 	bl	8001848 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e010      	b.n	8001620 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80015fe:	f7ff ffc1 	bl	8001584 <TM_LIS302DL_LIS3DSH_Detect>
 8001602:	4603      	mov	r3, r0
 8001604:	2b02      	cmp	r3, #2
 8001606:	d107      	bne.n	8001618 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f896 	bl	8001740 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001614:	2302      	movs	r3, #2
 8001616:	e003      	b.n	8001620 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000082 	.word	0x20000082

0800162c <TM_LIS302DL_LIS3DSH_INT_InitPins>:
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
}

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11d      	bne.n	8001676 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 800163a:	2100      	movs	r1, #0
 800163c:	4811      	ldr	r0, [pc, #68]	; (8001684 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 800163e:	f000 f993 	bl	8001968 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8001642:	2101      	movs	r1, #1
 8001644:	2010      	movs	r0, #16
 8001646:	f7ff f8ab 	bl	80007a0 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 800164a:	2308      	movs	r3, #8
 800164c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800164e:	2301      	movs	r3, #1
 8001650:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001656:	2301      	movs	r3, #1
 8001658:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 800165a:	2301      	movs	r3, #1
 800165c:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 800165e:	463b      	mov	r3, r7
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001664:	f7fe ff1c 	bl	80004a0 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 800166a:	2208      	movs	r2, #8
 800166c:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e000      	b.n	8001678 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 8001676:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000083 	.word	0x20000083
 8001684:	40013000 	.word	0x40013000
 8001688:	40021000 	.word	0x40021000

0800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
 8001698:	4613      	mov	r3, r2
 800169a:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 800169e:	2208      	movs	r2, #8
 80016a0:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80016a2:	78bb      	ldrb	r3, [r7, #2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d907      	bls.n	80016b8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d103      	bne.n	80016b8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80016be:	f7ff ff27 	bl	8001510 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	461a      	mov	r2, r3
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80016ca:	f000 f9bd 	bl	8001a48 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80016ce:	4b03      	ldr	r3, [pc, #12]	; (80016dc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80016d0:	2208      	movs	r2, #8
 80016d2:	831a      	strh	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	20000082 	.word	0x20000082
 80016e4:	40013000 	.word	0x40013000

080016e8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 80016fa:	2208      	movs	r2, #8
 80016fc:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001704:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d903      	bls.n	8001714 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001712:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	4619      	mov	r1, r3
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 800171a:	f7ff fef9 	bl	8001510 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001726:	f000 f9d3 	bl	8001ad0 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 800172a:	4b03      	ldr	r3, [pc, #12]	; (8001738 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 800172c:	2208      	movs	r2, #8
 800172e:	831a      	strh	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40013000 	.word	0x40013000

08001740 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8001750:	2367      	movs	r3, #103	; 0x67
 8001752:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800175c:	4a35      	ldr	r2, [pc, #212]	; (8001834 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e02a      	b.n	80017b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	f043 0308 	orr.w	r3, r3, #8
 800176e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e01f      	b.n	80017b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d107      	bne.n	800178e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e014      	b.n	80017b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d107      	bne.n	80017a4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	f043 0318 	orr.w	r3, r3, #24
 800179a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e009      	b.n	80017b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d13b      	bne.n	8001822 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80017b4:	4a23      	ldr	r2, [pc, #140]	; (8001844 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 80017b6:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01a      	beq.n	80017f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ca:	81fb      	strh	r3, [r7, #14]
 80017cc:	e012      	b.n	80017f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d106      	bne.n	80017e2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017de:	81fb      	strh	r3, [r7, #14]
 80017e0:	e008      	b.n	80017f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d11e      	bne.n	8001826 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80017ee:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80017f2:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 80017fa:	f107 030d 	add.w	r3, r7, #13
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff42 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001812:	f107 030d 	add.w	r3, r7, #13
 8001816:	2201      	movs	r2, #1
 8001818:	2124      	movs	r1, #36	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff36 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001820:	e002      	b.n	8001828 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 8001822:	bf00      	nop
 8001824:	e000      	b.n	8001828 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8001826:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000144 	.word	0x20000144
 8001834:	3d75c28f 	.word	0x3d75c28f
 8001838:	3df5c28f 	.word	0x3df5c28f
 800183c:	3e3851ec 	.word	0x3e3851ec
 8001840:	3e75c28f 	.word	0x3e75c28f
 8001844:	3f3ae148 	.word	0x3f3ae148

08001848 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001858:	f107 030e 	add.w	r3, r7, #14
 800185c:	2201      	movs	r2, #1
 800185e:	2121      	movs	r1, #33	; 0x21
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff41 	bl	80016e8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186c:	b29b      	uxth	r3, r3
 800186e:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001870:	f107 030e 	add.w	r3, r7, #14
 8001874:	2201      	movs	r2, #1
 8001876:	2121      	movs	r1, #33	; 0x21
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff07 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 800187e:	2347      	movs	r3, #71	; 0x47
 8001880:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d105      	bne.n	8001894 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 800188e:	4a2b      	ldr	r2, [pc, #172]	; (800193c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e00a      	b.n	80018aa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d147      	bne.n	800192a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80018a6:	4a26      	ldr	r2, [pc, #152]	; (8001940 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 80018a8:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80018aa:	f107 030e 	add.w	r3, r7, #14
 80018ae:	2201      	movs	r2, #1
 80018b0:	2120      	movs	r1, #32
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff feea 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80018b8:	f107 030e 	add.w	r3, r7, #14
 80018bc:	2201      	movs	r2, #1
 80018be:	2121      	movs	r1, #33	; 0x21
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fee3 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d102      	bne.n	80018e6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	81fb      	strh	r3, [r7, #14]
 80018e4:	e019      	b.n	800191a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d105      	bne.n	80018f8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	81fb      	strh	r3, [r7, #14]
 80018f6:	e010      	b.n	800191a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d105      	bne.n	800190a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	b29b      	uxth	r3, r3
 8001906:	81fb      	strh	r3, [r7, #14]
 8001908:	e007      	b.n	800191a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d10e      	bne.n	800192e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	f043 0303 	orr.w	r3, r3, #3
 8001916:	b29b      	uxth	r3, r3
 8001918:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800191a:	f107 030e 	add.w	r3, r7, #14
 800191e:	2201      	movs	r2, #1
 8001920:	2121      	movs	r1, #33	; 0x21
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff feb2 	bl	800168c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001928:	e002      	b.n	8001930 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 800192a:	bf00      	nop
 800192c:	e000      	b.n	8001930 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 800192e:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000144 	.word	0x20000144
 800193c:	41900000 	.word	0x41900000
 8001940:	42900000 	.word	0x42900000

08001944 <TM_LIS302DL_LIS3DSH_INT_Delay>:
	SwitchXY  = Axes_Data->X;
	Axes_Data->X = Axes_Data->Y;
	Axes_Data->X = -SwitchXY;
}

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 800194c:	607b      	str	r3, [r7, #4]
	while (delay--);
 800194e:	bf00      	nop
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1e5a      	subs	r2, r3, #1
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1fa      	bne.n	8001950 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	000f4240 	.word	0x000f4240

08001968 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af02      	add	r7, sp, #8
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a2e      	ldr	r2, [pc, #184]	; (8001a30 <TM_SPI_Init+0xc8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d10a      	bne.n	8001992 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 800197c:	78f9      	ldrb	r1, [r7, #3]
 800197e:	2300      	movs	r3, #0
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2320      	movs	r3, #32
 800198a:	2200      	movs	r2, #0
 800198c:	4828      	ldr	r0, [pc, #160]	; (8001a30 <TM_SPI_Init+0xc8>)
 800198e:	f000 f8f5 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <TM_SPI_Init+0xcc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10a      	bne.n	80019b0 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 800199a:	78f9      	ldrb	r1, [r7, #3]
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2320      	movs	r3, #32
 80019a8:	2200      	movs	r2, #0
 80019aa:	4822      	ldr	r0, [pc, #136]	; (8001a34 <TM_SPI_Init+0xcc>)
 80019ac:	f000 f8e6 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <TM_SPI_Init+0xd0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d10a      	bne.n	80019ce <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 80019b8:	78f9      	ldrb	r1, [r7, #3]
 80019ba:	2300      	movs	r3, #0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2320      	movs	r3, #32
 80019c6:	2200      	movs	r2, #0
 80019c8:	481b      	ldr	r0, [pc, #108]	; (8001a38 <TM_SPI_Init+0xd0>)
 80019ca:	f000 f8d7 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <TM_SPI_Init+0xd4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 80019d6:	78f9      	ldrb	r1, [r7, #3]
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2320      	movs	r3, #32
 80019e4:	2200      	movs	r2, #0
 80019e6:	4815      	ldr	r0, [pc, #84]	; (8001a3c <TM_SPI_Init+0xd4>)
 80019e8:	f000 f8c8 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <TM_SPI_Init+0xd8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d10a      	bne.n	8001a0a <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 80019f4:	78f9      	ldrb	r1, [r7, #3]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2320      	movs	r3, #32
 8001a02:	2200      	movs	r2, #0
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <TM_SPI_Init+0xd8>)
 8001a06:	f000 f8b9 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <TM_SPI_Init+0xdc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10a      	bne.n	8001a28 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8001a12:	78f9      	ldrb	r1, [r7, #3]
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2320      	movs	r3, #32
 8001a20:	2200      	movs	r2, #0
 8001a22:	4808      	ldr	r0, [pc, #32]	; (8001a44 <TM_SPI_Init+0xdc>)
 8001a24:	f000 f8aa 	bl	8001b7c <TM_SPIx_Init>
	}
#endif
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013000 	.word	0x40013000
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40003c00 	.word	0x40003c00
 8001a3c:	40013400 	.word	0x40013400
 8001a40:	40015000 	.word	0x40015000
 8001a44:	40015400 	.word	0x40015400

08001a48 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d031      	beq.n	8001ac6 <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001a62:	bf00      	nop
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	891b      	ldrh	r3, [r3, #8]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f8      	beq.n	8001a64 <TM_SPI_WriteMulti+0x1c>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	891b      	ldrh	r3, [r3, #8]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f1      	bne.n	8001a64 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e01a      	b.n	8001abc <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8001a94:	bf00      	nop
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	891b      	ldrh	r3, [r3, #8]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f8      	beq.n	8001a96 <TM_SPI_WriteMulti+0x4e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	891b      	ldrh	r3, [r3, #8]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f1      	bne.n	8001a96 <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3e0      	bcc.n	8001a86 <TM_SPI_WriteMulti+0x3e>
 8001ac4:	e000      	b.n	8001ac8 <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001ac6:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d034      	beq.n	8001b58 <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001aee:	bf00      	nop
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	891b      	ldrh	r3, [r3, #8]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f8      	beq.n	8001af0 <TM_SPI_ReadMulti+0x20>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	891b      	ldrh	r3, [r3, #8]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f1      	bne.n	8001af0 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e01d      	b.n	8001b4e <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8001b1a:	bf00      	nop
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	891b      	ldrh	r3, [r3, #8]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f8      	beq.n	8001b1c <TM_SPI_ReadMulti+0x4c>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	891b      	ldrh	r3, [r3, #8]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f1      	bne.n	8001b1c <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	8992      	ldrh	r2, [r2, #12]
 8001b42:	b292      	uxth	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3dd      	bcc.n	8001b12 <TM_SPI_ReadMulti+0x42>
 8001b56:	e000      	b.n	8001b5a <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001b58:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop

08001b7c <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70bb      	strb	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fe9e 	bl	80008dc <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <TM_SPIx_Init+0x16c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10b      	bne.n	8001bc0 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <TM_SPIx_Init+0x170>)
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <TM_SPIx_Init+0x170>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb2:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f8a4 	bl	8001d04 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <TM_SPIx_Init+0x174>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d10b      	bne.n	8001be0 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001bc8:	4a48      	ldr	r2, [pc, #288]	; (8001cec <TM_SPIx_Init+0x170>)
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <TM_SPIx_Init+0x170>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f8c4 	bl	8001d64 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <TM_SPIx_Init+0x178>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d10b      	bne.n	8001c00 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001be8:	4a40      	ldr	r2, [pc, #256]	; (8001cec <TM_SPIx_Init+0x170>)
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <TM_SPIx_Init+0x170>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f900 	bl	8001dfc <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3d      	ldr	r2, [pc, #244]	; (8001cf8 <TM_SPIx_Init+0x17c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10b      	bne.n	8001c20 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8001c08:	4a38      	ldr	r2, [pc, #224]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c12:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f922 	bl	8001e60 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <TM_SPIx_Init+0x180>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10b      	bne.n	8001c40 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8001c28:	4a30      	ldr	r2, [pc, #192]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c32:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f942 	bl	8001ec0 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <TM_SPIx_Init+0x184>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d10b      	bne.n	8001c60 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <TM_SPIx_Init+0x170>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c52:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f96e 	bl	8001f38 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001c64:	2300      	movs	r3, #0
 8001c66:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8001c68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c6a:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8001c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c6e:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c74:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8001c76:	78bb      	ldrb	r3, [r7, #2]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001c80:	2300      	movs	r3, #0
 8001c82:	82bb      	strh	r3, [r7, #20]
 8001c84:	e016      	b.n	8001cb4 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d104      	bne.n	8001c96 <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001c90:	2301      	movs	r3, #1
 8001c92:	82bb      	strh	r3, [r7, #20]
 8001c94:	e00e      	b.n	8001cb4 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d104      	bne.n	8001ca6 <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	82bb      	strh	r3, [r7, #20]
 8001ca4:	e006      	b.n	8001cb4 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8001ca6:	78bb      	ldrb	r3, [r7, #2]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d103      	bne.n	8001cb4 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001cac:	2302      	movs	r3, #2
 8001cae:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fdc2 	bl	8000854 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	801a      	strh	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40003800 	.word	0x40003800
 8001cf4:	40003c00 	.word	0x40003c00
 8001cf8:	40013400 	.word	0x40013400
 8001cfc:	40015000 	.word	0x40015000
 8001d00:	40015400 	.word	0x40015400

08001d04 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001d14:	2305      	movs	r3, #5
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2303      	movs	r3, #3
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2200      	movs	r2, #0
 8001d20:	21e0      	movs	r1, #224	; 0xe0
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <TM_SPI1_INT_InitPins+0x54>)
 8001d24:	f7ff faf2 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d109      	bne.n	8001d42 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001d2e:	2305      	movs	r3, #5
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2303      	movs	r3, #3
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2138      	movs	r1, #56	; 0x38
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <TM_SPI1_INT_InitPins+0x58>)
 8001d3e:	f7ff fae5 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d103      	bne.n	8001d50 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <TM_SPI1_INT_InitPins+0x5c>)
 8001d4c:	f7ff ff0a 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40013000 	.word	0x40013000

08001d64 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d114      	bne.n	8001d9e <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001d74:	2305      	movs	r3, #5
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	2303      	movs	r3, #3
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d84:	4819      	ldr	r0, [pc, #100]	; (8001dec <TM_SPI2_INT_InitPins+0x88>)
 8001d86:	f7ff fac1 	bl	800130c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2303      	movs	r3, #3
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	210c      	movs	r1, #12
 8001d98:	4815      	ldr	r0, [pc, #84]	; (8001df0 <TM_SPI2_INT_InitPins+0x8c>)
 8001d9a:	f7ff fab7 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10a      	bne.n	8001dba <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001da4:	2305      	movs	r3, #5
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2303      	movs	r3, #3
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2300      	movs	r3, #0
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <TM_SPI2_INT_InitPins+0x88>)
 8001db6:	f7ff faa9 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d109      	bne.n	8001dd4 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2200      	movs	r2, #0
 8001dcc:	210d      	movs	r1, #13
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <TM_SPI2_INT_InitPins+0x90>)
 8001dd0:	f7ff fa9c 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d103      	bne.n	8001de2 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8001dda:	2105      	movs	r1, #5
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <TM_SPI2_INT_InitPins+0x94>)
 8001dde:	f7ff fec1 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40003800 	.word	0x40003800

08001dfc <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2303      	movs	r3, #3
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	2200      	movs	r2, #0
 8001e18:	2138      	movs	r1, #56	; 0x38
 8001e1a:	480e      	ldr	r0, [pc, #56]	; (8001e54 <TM_SPI3_INT_InitPins+0x58>)
 8001e1c:	f7ff fa76 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10a      	bne.n	8001e3c <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001e26:	2306      	movs	r3, #6
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001e36:	4808      	ldr	r0, [pc, #32]	; (8001e58 <TM_SPI3_INT_InitPins+0x5c>)
 8001e38:	f7ff fa68 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d103      	bne.n	8001e4a <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8001e42:	2106      	movs	r1, #6
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <TM_SPI3_INT_InitPins+0x60>)
 8001e46:	f7ff fe8d 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40003c00 	.word	0x40003c00

08001e60 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001e70:	2305      	movs	r3, #5
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2303      	movs	r3, #3
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2164      	movs	r1, #100	; 0x64
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <TM_SPI4_INT_InitPins+0x58>)
 8001e80:	f7ff fa44 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10a      	bne.n	8001ea0 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2303      	movs	r3, #3
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <TM_SPI4_INT_InitPins+0x58>)
 8001e9c:	f7ff fa36 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d103      	bne.n	8001eae <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <TM_SPI4_INT_InitPins+0x5c>)
 8001eaa:	f7ff fe5b 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40013400 	.word	0x40013400

08001ec0 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ee0:	4812      	ldr	r0, [pc, #72]	; (8001f2c <TM_SPI5_INT_InitPins+0x6c>)
 8001ee2:	f7ff fa13 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d114      	bne.n	8001f16 <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001eec:	2305      	movs	r3, #5
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <TM_SPI5_INT_InitPins+0x6c>)
 8001efe:	f7ff fa05 	bl	800130c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001f02:	2305      	movs	r3, #5
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	2303      	movs	r3, #3
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	21c0      	movs	r1, #192	; 0xc0
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <TM_SPI5_INT_InitPins+0x70>)
 8001f12:	f7ff f9fb 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d103      	bne.n	8001f24 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <TM_SPI5_INT_InitPins+0x74>)
 8001f20:	f7ff fe20 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	40015000 	.word	0x40015000

08001f38 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8001f48:	2305      	movs	r3, #5
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <TM_SPI6_INT_InitPins+0x3c>)
 8001f5a:	f7ff f9d7 	bl	800130c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d103      	bne.n	8001f6c <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8001f64:	2105      	movs	r1, #5
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <TM_SPI6_INT_InitPins+0x40>)
 8001f68:	f7ff fdfc 	bl	8001b64 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40015400 	.word	0x40015400

08001f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr  r2, =_sbss
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fa6:	f000 f813 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f001 f86f 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fae:	f000 f909 	bl	80021c4 <main>
  bx  lr    
 8001fb2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001fb8:	080030f8 	.word	0x080030f8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fc0:	20000028 	.word	0x20000028
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001fc4:	20000028 	.word	0x20000028
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc8:	20000154 	.word	0x20000154

08001fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC_IRQHandler>
	...

08001fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <SystemInit+0x50>)
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <SystemInit+0x50>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <SystemInit+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <SystemInit+0x50>)
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <SystemInit+0x50>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <SystemInit+0x50>)
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SystemInit+0x54>)
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ffc:	4a08      	ldr	r2, [pc, #32]	; (8002020 <SystemInit+0x50>)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <SystemInit+0x50>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SystemInit+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800200e:	f000 f80d 	bl	800202c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SystemInit+0x58>)
 8002014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002018:	609a      	str	r2, [r3, #8]
#endif
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	24003010 	.word	0x24003010
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800203a:	4a35      	ldr	r2, [pc, #212]	; (8002110 <SetSysClock+0xe4>)
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <SetSysClock+0xe4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <SetSysClock+0xe4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <SetSysClock+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002062:	d1f0      	bne.n	8002046 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <SetSysClock+0xe4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002070:	2301      	movs	r3, #1
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	e001      	b.n	800207a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d142      	bne.n	8002106 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <SetSysClock+0xe4>)
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <SetSysClock+0xe4>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800208c:	4a21      	ldr	r2, [pc, #132]	; (8002114 <SetSysClock+0xe8>)
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <SetSysClock+0xe8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002096:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <SetSysClock+0xe4>)
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <SetSysClock+0xe4>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <SetSysClock+0xe4>)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <SetSysClock+0xe4>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020aa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <SetSysClock+0xe4>)
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <SetSysClock+0xe4>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80020b6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <SetSysClock+0xe4>)
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <SetSysClock+0xec>)
 80020bc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <SetSysClock+0xe4>)
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <SetSysClock+0xe4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80020ca:	bf00      	nop
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <SetSysClock+0xe4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f9      	beq.n	80020cc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <SetSysClock+0xf0>)
 80020da:	f240 6205 	movw	r2, #1541	; 0x605
 80020de:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020e0:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <SetSysClock+0xe4>)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <SetSysClock+0xe4>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80020ec:	4a08      	ldr	r2, [pc, #32]	; (8002110 <SetSysClock+0xe4>)
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <SetSysClock+0xe4>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80020f8:	bf00      	nop
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SetSysClock+0xe4>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b08      	cmp	r3, #8
 8002104:	d1f9      	bne.n	80020fa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000
 8002118:	07405408 	.word	0x07405408
 800211c:	40023c00 	.word	0x40023c00

08002120 <setup>:
int i;

IRMP_DATA myInfraData;


void setup() {
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	SystemInit();
 8002124:	f7ff ff54 	bl	8001fd0 <SystemInit>
	TM_DELAY_Init();
 8002128:	f7ff f87a 	bl	8001220 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 800212c:	f7ff f8a0 	bl	8001270 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8002130:	2103      	movs	r1, #3
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff fa4a 	bl	80015cc <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8002138:	f7ff f8b2 	bl	80012a0 <TM_DISCO_ButtonInit>
	UB_IRSND_Init();
 800213c:	f000 ff4a 	bl	8002fd4 <UB_IRSND_Init>
	IR_DATA_Init();
 8002140:	f000 f82a 	bl	8002198 <IR_DATA_Init>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <sendInfraData>:

//will send an specified infrared package
void sendInfraData(IRMP_DATA irData)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	463b      	mov	r3, r7
 8002150:	e883 0003 	stmia.w	r3, {r0, r1}
	int i;
	for(i = 0; i<1000; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e013      	b.n	8002182 <sendInfraData+0x3a>
	{
	   if(i%200==0)
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <sendInfraData+0x4c>)
 800215e:	fb83 1302 	smull	r1, r3, r3, r2
 8002162:	1199      	asrs	r1, r3, #6
 8002164:	17d3      	asrs	r3, r2, #31
 8002166:	1acb      	subs	r3, r1, r3
 8002168:	21c8      	movs	r1, #200	; 0xc8
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <sendInfraData+0x34>
		   UB_IRSND_Write(&irData);
 8002174:	463b      	mov	r3, r7
 8002176:	4618      	mov	r0, r3
 8002178:	f000 ff36 	bl	8002fe8 <UB_IRSND_Write>

//will send an specified infrared package
void sendInfraData(IRMP_DATA irData)
{
	int i;
	for(i = 0; i<1000; i++)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002188:	dbe7      	blt.n	800215a <sendInfraData+0x12>
	{
	   if(i%200==0)
		   UB_IRSND_Write(&irData);
	}
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	51eb851f 	.word	0x51eb851f

08002198 <IR_DATA_Init>:


//Creates a pckage for the infrared
//at the receiving end, the expected value os 0x0x681cded5
void IR_DATA_Init()
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	myInfraData.protocol=IRMP_NEC_PROTOCOL;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <IR_DATA_Init+0x28>)
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
	myInfraData.address=0x00FF;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <IR_DATA_Init+0x28>)
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	805a      	strh	r2, [r3, #2]
	myInfraData.command=0xffff;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <IR_DATA_Init+0x28>)
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	809a      	strh	r2, [r3, #4]
	myInfraData.flags=0;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <IR_DATA_Init+0x28>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	719a      	strb	r2, [r3, #6]
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000014c 	.word	0x2000014c

080021c4 <main>:

}



int main(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

    setup();
 80021c8:	f7ff ffaa 	bl	8002120 <setup>
		TM_DISCO_LedOn(LED_GREEN);
	} else {
		TM_DISCO_LedOn(LED_RED);
	}
	*/
    while(!TM_DISCO_ButtonPressed());
 80021cc:	bf00      	nop
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <main+0x2c>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f9      	beq.n	80021ce <main+0xa>
    sendInfraData(myInfraData);
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <main+0x30>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4611      	mov	r1, r2
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	f7ff ffae 	bl	8002148 <sendInfraData>
	while(1);
 80021ec:	e7fe      	b.n	80021ec <main+0x28>
 80021ee:	bf00      	nop
 80021f0:	40020000 	.word	0x40020000
 80021f4:	2000014c 	.word	0x2000014c

080021f8 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8002202:	bf00      	nop
}
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8002210:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <irsnd_on>:
 *  Switch PWM on
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
irsnd_on (void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    if (! irsnd_is_on)
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <irsnd_on+0x34>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d110      	bne.n	800224c <irsnd_on+0x30>
    {
#ifndef DEBUG
#  if defined(PIC_C18)                                  // PIC C18
        IRSND_PIN = 0; // output mode -> enable PWM outout pin (0=PWM on, 1=PWM off)
#  elif defined (ARM_STM32)                             // STM32
        TIM_SelectOCxM(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_OCMode_PWM1); // enable PWM as OC-mode
 800222a:	2260      	movs	r2, #96	; 0x60
 800222c:	2100      	movs	r1, #0
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <irsnd_on+0x38>)
 8002230:	f7fe fce2 	bl	8000bf8 <TIM_SelectOCxM>
        TIM_CCxCmd(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_CCx_Enable);      // enable OC-output (is being disabled in TIM_SelectOCxM())
 8002234:	2201      	movs	r2, #1
 8002236:	2100      	movs	r1, #0
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <irsnd_on+0x38>)
 800223a:	f7fe fd5f 	bl	8000cfc <TIM_CCxCmd>
        TIM_Cmd(IRSND_TIMER, ENABLE);                   // enable counter
 800223e:	2101      	movs	r1, #1
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <irsnd_on+0x38>)
 8002242:	f7fe fc3f 	bl	8000ac4 <TIM_Cmd>
        {
            (*irsnd_callback_ptr) (TRUE);
        }
#endif // IRSND_USE_CALLBACK == 1

        irsnd_is_on = TRUE;
 8002246:	4b02      	ldr	r3, [pc, #8]	; (8002250 <irsnd_on+0x34>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
    }
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000008f 	.word	0x2000008f
 8002254:	40014400 	.word	0x40014400

08002258 <irsnd_off>:
 *  @details  Switches PWM off
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
irsnd_off (void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    if (irsnd_is_on)
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <irsnd_off+0x3c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d014      	beq.n	8002290 <irsnd_off+0x38>
#ifndef DEBUG
    
#  if defined(PIC_C18)                                  // PIC C18
        IRSND_PIN = 1; //input mode -> disbale PWM output pin (0=PWM on, 1=PWM off)
#  elif defined (ARM_STM32)                             // STM32
        TIM_Cmd(IRSND_TIMER, DISABLE);                  // disable counter
 8002266:	2100      	movs	r1, #0
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <irsnd_off+0x40>)
 800226a:	f7fe fc2b 	bl	8000ac4 <TIM_Cmd>
        TIM_SelectOCxM(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_ForcedAction_InActive);   // force output inactive
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	2100      	movs	r1, #0
 8002272:	4809      	ldr	r0, [pc, #36]	; (8002298 <irsnd_off+0x40>)
 8002274:	f7fe fcc0 	bl	8000bf8 <TIM_SelectOCxM>
        TIM_CCxCmd(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_CCx_Enable);      // enable OC-output (is being disabled in TIM_SelectOCxM())
 8002278:	2201      	movs	r2, #1
 800227a:	2100      	movs	r1, #0
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <irsnd_off+0x40>)
 800227e:	f7fe fd3d 	bl	8000cfc <TIM_CCxCmd>
        TIM_SetCounter(IRSND_TIMER, 0);                 // reset counter value
 8002282:	2100      	movs	r1, #0
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <irsnd_off+0x40>)
 8002286:	f7fe fbe1 	bl	8000a4c <TIM_SetCounter>
        {
           (*irsnd_callback_ptr) (FALSE);
        }
#endif // IRSND_USE_CALLBACK == 1

        irsnd_is_on = FALSE;
 800228a:	4b02      	ldr	r3, [pc, #8]	; (8002294 <irsnd_off+0x3c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    }
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000008f 	.word	0x2000008f
 8002298:	40014400 	.word	0x40014400

0800229c <irsnd_set_freq>:
 *  @details  sets pwm frequency
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
static void
irsnd_set_freq (IRSND_FREQ_TYPE freq)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
         OpenPWM(freq); 
         SetDCPWM( (uint16_t) freq * 2); // freq*2 = Duty cycles 50%
#  elif defined (ARM_STM32)                                                                 // STM32
         static uint32_t      TimeBaseFreq = 0;

         if (TimeBaseFreq == 0)
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <irsnd_set_freq+0x60>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d110      	bne.n	80022ce <irsnd_set_freq+0x32>
         {
            RCC_ClocksTypeDef        RCC_ClocksStructure;
            /* Get system clocks and store timer clock in variable */
            RCC_GetClocksFreq(&RCC_ClocksStructure);
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f9cb 	bl	800064c <RCC_GetClocksFreq>
            else
            {
               TimeBaseFreq = RCC_ClocksStructure.PCLK1_Frequency * 2;
            }
#    else
            if (RCC_ClocksStructure.PCLK2_Frequency == RCC_ClocksStructure.HCLK_Frequency)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d103      	bne.n	80022c6 <irsnd_set_freq+0x2a>
            {
               TimeBaseFreq = RCC_ClocksStructure.PCLK2_Frequency;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <irsnd_set_freq+0x60>)
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e003      	b.n	80022ce <irsnd_set_freq+0x32>
            }
            else
            {
               TimeBaseFreq = RCC_ClocksStructure.PCLK2_Frequency * 2;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <irsnd_set_freq+0x60>)
 80022cc:	6013      	str	r3, [r2, #0]
            }
#    endif
         }

         freq = TimeBaseFreq/freq;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <irsnd_set_freq+0x60>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]

         /* Set frequency */
         TIM_SetAutoreload(IRSND_TIMER, freq - 1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3b01      	subs	r3, #1
 80022de:	4619      	mov	r1, r3
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <irsnd_set_freq+0x64>)
 80022e2:	f7fe fbc1 	bl	8000a68 <TIM_SetAutoreload>
         /* Set duty cycle */
         TIM_SetCompare1(IRSND_TIMER, (freq + 1) / 2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	4619      	mov	r1, r3
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <irsnd_set_freq+0x64>)
 80022f0:	f7fe fcda 	bl	8000ca8 <TIM_SetCompare1>
#    else
#      error wrong value of IRSND_OCx
#    endif
#  endif //PIC_C18
#endif // DEBUG
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000094 	.word	0x20000094
 8002300:	40014400 	.word	0x40014400

08002304 <irsnd_init>:
 *  @details  Configures 0CR0A, 0CR0B and 0CR2B as PWM channels
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
void
irsnd_init (void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#    if defined (ARM_STM32L1XX)
        RCC_AHBPeriphClockCmd(IRSND_PORT_RCC, ENABLE);
#    elif defined (ARM_STM32F10X)
        RCC_APB2PeriphClockCmd(IRSND_PORT_RCC, ENABLE);
#    elif defined (ARM_STM32F4XX)
        RCC_AHB1PeriphClockCmd(IRSND_PORT_RCC, ENABLE);
 800230a:	2101      	movs	r1, #1
 800230c:	2002      	movs	r0, #2
 800230e:	f7fe fa47 	bl	80007a0 <RCC_AHB1PeriphClockCmd>
#    endif

        /* GPIO Configuration */
        GPIO_InitStructure.GPIO_Pin = IRSND_BIT;
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	623b      	str	r3, [r7, #32]
#    if defined (ARM_STM32L1XX) || defined (ARM_STM32F4XX)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002318:	2302      	movs	r3, #2
 800231a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        GPIO_Init(IRSND_PORT, &GPIO_InitStructure);
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	4619      	mov	r1, r3
 8002336:	481c      	ldr	r0, [pc, #112]	; (80023a8 <irsnd_init+0xa4>)
 8002338:	f7fe f8b2 	bl	80004a0 <GPIO_Init>
        GPIO_PinAFConfig(IRSND_PORT, (uint8_t)IRSND_BIT_NUMBER, IRSND_GPIO_AF);
 800233c:	2203      	movs	r2, #3
 800233e:	2108      	movs	r1, #8
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <irsnd_init+0xa4>)
 8002342:	f7fe f93b 	bl	80005bc <GPIO_PinAFConfig>

        /* TIMx clock enable */
#    if ((IRSND_TIMER_NUMBER >= 2) && (IRSND_TIMER_NUMBER <= 5)) || ((IRSND_TIMER_NUMBER >= 12) && (IRSND_TIMER_NUMBER <= 14))
        RCC_APB1PeriphClockCmd(IRSND_TIMER_RCC, ENABLE);
#    else
        RCC_APB2PeriphClockCmd(IRSND_TIMER_RCC, ENABLE);
 8002346:	2101      	movs	r1, #1
 8002348:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800234c:	f7fe fa64 	bl	8000818 <RCC_APB2PeriphClockCmd>
#    endif

        /* Time base configuration */
        TIM_TimeBaseStructure.TIM_Period = -1;     // set dummy value (don't set to 0), will be initialized later
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	61bb      	str	r3, [r7, #24]
        TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	82bb      	strh	r3, [r7, #20]
        TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	83bb      	strh	r3, [r7, #28]
        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800235e:	2300      	movs	r3, #0
 8002360:	82fb      	strh	r3, [r7, #22]
        TIM_TimeBaseInit(IRSND_TIMER, &TIM_TimeBaseStructure);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4810      	ldr	r0, [pc, #64]	; (80023ac <irsnd_init+0xa8>)
 800236a:	f7fe fb05 	bl	8000978 <TIM_TimeBaseInit>

        /* PWM1 Mode configuration */
        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800236e:	2360      	movs	r3, #96	; 0x60
 8002370:	803b      	strh	r3, [r7, #0]
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002372:	2301      	movs	r3, #1
 8002374:	807b      	strh	r3, [r7, #2]
        TIM_OCInitStructure.TIM_Pulse = 0;         // will be initialized later
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800237a:	2300      	movs	r3, #0
 800237c:	81bb      	strh	r3, [r7, #12]
        TIM_OC1Init(IRSND_TIMER, &TIM_OCInitStructure);
 800237e:	463b      	mov	r3, r7
 8002380:	4619      	mov	r1, r3
 8002382:	480a      	ldr	r0, [pc, #40]	; (80023ac <irsnd_init+0xa8>)
 8002384:	f7fe fbbe 	bl	8000b04 <TIM_OC1Init>

        /* Preload configuration */
        TIM_ARRPreloadConfig(IRSND_TIMER, ENABLE);
 8002388:	2101      	movs	r1, #1
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <irsnd_init+0xa8>)
 800238c:	f7fe fb7a 	bl	8000a84 <TIM_ARRPreloadConfig>
        TIM_OC1PreloadConfig(IRSND_TIMER, TIM_OCPreload_Enable);
 8002390:	2108      	movs	r1, #8
 8002392:	4806      	ldr	r0, [pc, #24]	; (80023ac <irsnd_init+0xa8>)
 8002394:	f7fe fc96 	bl	8000cc4 <TIM_OC1PreloadConfig>

        irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // set default frequency
 8002398:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 800239c:	f7ff ff7e 	bl	800229c <irsnd_set_freq>
#      error wrong value of IRSND_OCx
#    endif
        irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // default frequency
#  endif //PIC_C18
#endif // DEBUG
}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40014400 	.word	0x40014400

080023b0 <bitsrevervse>:
    return irsnd_busy;
}

static uint16_t
bitsrevervse (uint16_t x, uint8_t len)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	80fb      	strh	r3, [r7, #6]
 80023bc:	4613      	mov	r3, r2
 80023be:	717b      	strb	r3, [r7, #5]
    uint16_t    xx = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	81fb      	strh	r3, [r7, #14]

    while(len)
 80023c4:	e011      	b.n	80023ea <bitsrevervse+0x3a>
    {
        xx <<= 1;
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	81fb      	strh	r3, [r7, #14]
        if (x & 1)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <bitsrevervse+0x2e>
        {
            xx |= 1;
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	81fb      	strh	r3, [r7, #14]
        }
        x >>= 1;
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	80fb      	strh	r3, [r7, #6]
        len--;
 80023e4:	797b      	ldrb	r3, [r7, #5]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	717b      	strb	r3, [r7, #5]
static uint16_t
bitsrevervse (uint16_t x, uint8_t len)
{
    uint16_t    xx = 0;

    while(len)
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ea      	bne.n	80023c6 <bitsrevervse+0x16>
            xx |= 1;
        }
        x >>= 1;
        len--;
    }
    return xx;
 80023f0:	89fb      	ldrh	r3, [r7, #14]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <irsnd_send_data>:
static uint8_t  sircs_additional_bitlen;
#endif // IRSND_SUPPORT_SIRCS_PROTOCOL == 1

uint8_t
irsnd_send_data (IRMP_DATA * irmp_data_p, uint8_t do_wait)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
    static uint8_t  toggle_bit_thomson;
#endif
    uint16_t        address;
    uint16_t        command;

    if (do_wait)
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <irsnd_send_data+0x20>
    {
        while (irsnd_busy)
 800240e:	bf00      	nop
 8002410:	4b95      	ldr	r3, [pc, #596]	; (8002668 <irsnd_send_data+0x26c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1fa      	bne.n	8002410 <irsnd_send_data+0x14>
 800241a:	e006      	b.n	800242a <irsnd_send_data+0x2e>
        {
            // do nothing;
        }
    }
    else if (irsnd_busy)
 800241c:	4b92      	ldr	r3, [pc, #584]	; (8002668 <irsnd_send_data+0x26c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <irsnd_send_data+0x2e>
    {
        return (FALSE);
 8002426:	2300      	movs	r3, #0
 8002428:	e220      	b.n	800286c <irsnd_send_data+0x470>
    }

    irsnd_protocol  = irmp_data_p->protocol;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b8f      	ldr	r3, [pc, #572]	; (800266c <irsnd_send_data+0x270>)
 8002430:	701a      	strb	r2, [r3, #0]
    irsnd_repeat    = irmp_data_p->flags & IRSND_REPETITION_MASK;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	799b      	ldrb	r3, [r3, #6]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <irsnd_send_data+0x274>)
 800243e:	701a      	strb	r2, [r3, #0]

    switch (irsnd_protocol)
 8002440:	4b8a      	ldr	r3, [pc, #552]	; (800266c <irsnd_send_data+0x270>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	2b0a      	cmp	r3, #10
 800244a:	f200 820b 	bhi.w	8002864 <irsnd_send_data+0x468>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <irsnd_send_data+0x58>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002481 	.word	0x08002481
 8002458:	08002579 	.word	0x08002579
 800245c:	080025d1 	.word	0x080025d1
 8002460:	080026cd 	.word	0x080026cd
 8002464:	08002723 	.word	0x08002723
 8002468:	08002865 	.word	0x08002865
 800246c:	08002865 	.word	0x08002865
 8002470:	08002801 	.word	0x08002801
 8002474:	08002865 	.word	0x08002865
 8002478:	0800267d 	.word	0x0800267d
 800247c:	0800250f 	.word	0x0800250f
        case IRMP_SIRCS_PROTOCOL:
        {
            // uint8_t  sircs_additional_command_len;
            uint8_t  sircs_additional_address_len;

            sircs_additional_bitlen = (irmp_data_p->address & 0xFF00) >> 8;                             // additional bitlen
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	885b      	ldrh	r3, [r3, #2]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b29b      	uxth	r3, r3
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <irsnd_send_data+0x278>)
 800248c:	701a      	strb	r2, [r3, #0]

            if (sircs_additional_bitlen > 15 - SIRCS_MINIMUM_DATA_LEN)
 800248e:	4b79      	ldr	r3, [pc, #484]	; (8002674 <irsnd_send_data+0x278>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d904      	bls.n	80024a0 <irsnd_send_data+0xa4>
            {
                // sircs_additional_command_len = 15 - SIRCS_MINIMUM_DATA_LEN;
                sircs_additional_address_len = sircs_additional_bitlen - (15 - SIRCS_MINIMUM_DATA_LEN);
 8002496:	4b77      	ldr	r3, [pc, #476]	; (8002674 <irsnd_send_data+0x278>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	3b03      	subs	r3, #3
 800249c:	75fb      	strb	r3, [r7, #23]
 800249e:	e001      	b.n	80024a4 <irsnd_send_data+0xa8>
            }
            else
            {
                // sircs_additional_command_len = sircs_additional_bitlen;
                sircs_additional_address_len = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
            }

            command = bitsrevervse (irmp_data_p->command, 15);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	210f      	movs	r1, #15
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff80 	bl	80023b0 <bitsrevervse>
 80024b0:	4603      	mov	r3, r0
 80024b2:	82bb      	strh	r3, [r7, #20]

            irsnd_buffer[0] = (command & 0x7F80) >> 7;                                                  // CCCCCCCC
 80024b4:	8abb      	ldrh	r3, [r7, #20]
 80024b6:	11db      	asrs	r3, r3, #7
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <irsnd_send_data+0x27c>)
 80024bc:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (command & 0x007F) << 1;                                                  // CCCC****
 80024be:	8abb      	ldrh	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b6c      	ldr	r3, [pc, #432]	; (8002678 <irsnd_send_data+0x27c>)
 80024c6:	705a      	strb	r2, [r3, #1]

            if (sircs_additional_address_len > 0)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01b      	beq.n	8002506 <irsnd_send_data+0x10a>
            {
                address = bitsrevervse (irmp_data_p->address, 5);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	885b      	ldrh	r3, [r3, #2]
 80024d2:	2105      	movs	r1, #5
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff6b 	bl	80023b0 <bitsrevervse>
 80024da:	4603      	mov	r3, r0
 80024dc:	827b      	strh	r3, [r7, #18]
                irsnd_buffer[1] |= (address & 0x0010) >> 4;
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <irsnd_send_data+0x27c>)
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	b25a      	sxtb	r2, r3
 80024e6:	8a7b      	ldrh	r3, [r7, #18]
 80024e8:	111b      	asrs	r3, r3, #4
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b5f      	ldr	r3, [pc, #380]	; (8002678 <irsnd_send_data+0x27c>)
 80024fa:	705a      	strb	r2, [r3, #1]
                irsnd_buffer[2] =  (address & 0x000F) << 4;
 80024fc:	8a7b      	ldrh	r3, [r7, #18]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <irsnd_send_data+0x27c>)
 8002504:	709a      	strb	r2, [r3, #2]
            }
            irsnd_busy      = TRUE;
 8002506:	4b58      	ldr	r3, [pc, #352]	; (8002668 <irsnd_send_data+0x26c>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
            break;
 800250c:	e1ab      	b.n	8002866 <irsnd_send_data+0x46a>
        }
#endif
#if IRSND_SUPPORT_NEC_PROTOCOL == 1
        case IRMP_APPLE_PROTOCOL:
        {
            command = irmp_data_p->command | (irmp_data_p->address << 8);                               // store address as ID in upper byte of command
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	b21a      	sxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	885b      	ldrh	r3, [r3, #2]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	82bb      	strh	r3, [r7, #20]
            address = 0x87EE;                                                                           // set fixed NEC-lookalike address (customer ID of apple)
 8002522:	f248 73ee 	movw	r3, #34798	; 0x87ee
 8002526:	827b      	strh	r3, [r7, #18]

            address = bitsrevervse (address, NEC_ADDRESS_LEN);
 8002528:	8a7b      	ldrh	r3, [r7, #18]
 800252a:	2110      	movs	r1, #16
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff3f 	bl	80023b0 <bitsrevervse>
 8002532:	4603      	mov	r3, r0
 8002534:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (command, NEC_COMMAND_LEN);
 8002536:	8abb      	ldrh	r3, [r7, #20]
 8002538:	2110      	movs	r1, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff38 	bl	80023b0 <bitsrevervse>
 8002540:	4603      	mov	r3, r0
 8002542:	82bb      	strh	r3, [r7, #20]

            irsnd_protocol = IRMP_NEC_PROTOCOL;                                                         // APPLE protocol is NEC with id instead of inverted command
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <irsnd_send_data+0x270>)
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]

            irsnd_buffer[0] = (address & 0xFF00) >> 8;                                                          // AAAAAAAA
 800254a:	8a7b      	ldrh	r3, [r7, #18]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <irsnd_send_data+0x27c>)
 8002554:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (address & 0x00FF);                                                               // AAAAAAAA
 8002556:	8a7b      	ldrh	r3, [r7, #18]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <irsnd_send_data+0x27c>)
 800255c:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = (command & 0xFF00) >> 8;                                                          // CCCCCCCC
 800255e:	8abb      	ldrh	r3, [r7, #20]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29b      	uxth	r3, r3
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b44      	ldr	r3, [pc, #272]	; (8002678 <irsnd_send_data+0x27c>)
 8002568:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = 0x8B;                                                                             // 10001011 (id)
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <irsnd_send_data+0x27c>)
 800256c:	228b      	movs	r2, #139	; 0x8b
 800256e:	70da      	strb	r2, [r3, #3]
            irsnd_busy      = TRUE;
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <irsnd_send_data+0x26c>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
            break;
 8002576:	e176      	b.n	8002866 <irsnd_send_data+0x46a>
        }
        case IRMP_NEC_PROTOCOL:
        {
            address = bitsrevervse (irmp_data_p->address, NEC_ADDRESS_LEN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	885b      	ldrh	r3, [r3, #2]
 800257c:	2110      	movs	r1, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff16 	bl	80023b0 <bitsrevervse>
 8002584:	4603      	mov	r3, r0
 8002586:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (irmp_data_p->command, NEC_COMMAND_LEN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	889b      	ldrh	r3, [r3, #4]
 800258c:	2110      	movs	r1, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff0e 	bl	80023b0 <bitsrevervse>
 8002594:	4603      	mov	r3, r0
 8002596:	82bb      	strh	r3, [r7, #20]

            irsnd_buffer[0] = (address & 0xFF00) >> 8;                                                          // AAAAAAAA
 8002598:	8a7b      	ldrh	r3, [r7, #18]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29b      	uxth	r3, r3
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <irsnd_send_data+0x27c>)
 80025a2:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (address & 0x00FF);                                                               // AAAAAAAA
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <irsnd_send_data+0x27c>)
 80025aa:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = (command & 0xFF00) >> 8;                                                          // CCCCCCCC
 80025ac:	8abb      	ldrh	r3, [r7, #20]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <irsnd_send_data+0x27c>)
 80025b6:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = ~((command & 0xFF00) >> 8);                                                       // cccccccc
 80025b8:	8abb      	ldrh	r3, [r7, #20]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <irsnd_send_data+0x27c>)
 80025c6:	70da      	strb	r2, [r3, #3]
            irsnd_busy      = TRUE;
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <irsnd_send_data+0x26c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
            break;
 80025ce:	e14a      	b.n	8002866 <irsnd_send_data+0x46a>
        }
#endif
#if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
        case IRMP_SAMSUNG_PROTOCOL:
        {
            address = bitsrevervse (irmp_data_p->address, SAMSUNG_ADDRESS_LEN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	2110      	movs	r1, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff feea 	bl	80023b0 <bitsrevervse>
 80025dc:	4603      	mov	r3, r0
 80025de:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (irmp_data_p->command, SAMSUNG_COMMAND_LEN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	2110      	movs	r1, #16
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fee2 	bl	80023b0 <bitsrevervse>
 80025ec:	4603      	mov	r3, r0
 80025ee:	82bb      	strh	r3, [r7, #20]

            irsnd_buffer[0] =  (address & 0xFF00) >> 8;                                                         // AAAAAAAA
 80025f0:	8a7b      	ldrh	r3, [r7, #18]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <irsnd_send_data+0x27c>)
 80025fa:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] =  (address & 0x00FF);                                                              // AAAAAAAA
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <irsnd_send_data+0x27c>)
 8002602:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] =  (command & 0x00F0) | ((command & 0xF000) >> 12);                                 // IIIICCCC
 8002604:	8abb      	ldrh	r3, [r7, #20]
 8002606:	b25b      	sxtb	r3, r3
 8002608:	f023 030f 	bic.w	r3, r3, #15
 800260c:	b25a      	sxtb	r2, r3
 800260e:	8abb      	ldrh	r3, [r7, #20]
 8002610:	0b1b      	lsrs	r3, r3, #12
 8002612:	b29b      	uxth	r3, r3
 8002614:	b25b      	sxtb	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b25b      	sxtb	r3, r3
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <irsnd_send_data+0x27c>)
 800261e:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = ((command & 0x0F00) >> 4) | ((~(command & 0xF000) >> 12) & 0x0F);                 // CCCCcccc
 8002620:	8abb      	ldrh	r3, [r7, #20]
 8002622:	111b      	asrs	r3, r3, #4
 8002624:	b25b      	sxtb	r3, r3
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	b25a      	sxtb	r2, r3
 800262c:	8abb      	ldrh	r3, [r7, #20]
 800262e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002632:	43db      	mvns	r3, r3
 8002634:	131b      	asrs	r3, r3, #12
 8002636:	b25b      	sxtb	r3, r3
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	b25b      	sxtb	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b25b      	sxtb	r3, r3
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <irsnd_send_data+0x27c>)
 8002646:	70da      	strb	r2, [r3, #3]
            irsnd_buffer[4] = (~(command & 0x0F00) >> 4) & 0xF0;                                                // cccc0000
 8002648:	8abb      	ldrh	r3, [r7, #20]
 800264a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800264e:	43db      	mvns	r3, r3
 8002650:	111b      	asrs	r3, r3, #4
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f023 030f 	bic.w	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <irsnd_send_data+0x27c>)
 800265c:	711a      	strb	r2, [r3, #4]
            irsnd_busy      = TRUE;
 800265e:	4b02      	ldr	r3, [pc, #8]	; (8002668 <irsnd_send_data+0x26c>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
            break;
 8002664:	e0ff      	b.n	8002866 <irsnd_send_data+0x46a>
 8002666:	bf00      	nop
 8002668:	20000084 	.word	0x20000084
 800266c:	20000085 	.word	0x20000085
 8002670:	2000008e 	.word	0x2000008e
 8002674:	20000090 	.word	0x20000090
 8002678:	20000088 	.word	0x20000088
        }
        case IRMP_SAMSUNG32_PROTOCOL:
        {
            address = bitsrevervse (irmp_data_p->address, SAMSUNG_ADDRESS_LEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	885b      	ldrh	r3, [r3, #2]
 8002680:	2110      	movs	r1, #16
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe94 	bl	80023b0 <bitsrevervse>
 8002688:	4603      	mov	r3, r0
 800268a:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (irmp_data_p->command, SAMSUNG32_COMMAND_LEN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	889b      	ldrh	r3, [r3, #4]
 8002690:	2110      	movs	r1, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fe8c 	bl	80023b0 <bitsrevervse>
 8002698:	4603      	mov	r3, r0
 800269a:	82bb      	strh	r3, [r7, #20]

            irsnd_buffer[0] = (address & 0xFF00) >> 8;                                                          // AAAAAAAA
 800269c:	8a7b      	ldrh	r3, [r7, #18]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b73      	ldr	r3, [pc, #460]	; (8002874 <irsnd_send_data+0x478>)
 80026a6:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (address & 0x00FF);                                                               // AAAAAAAA
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b71      	ldr	r3, [pc, #452]	; (8002874 <irsnd_send_data+0x478>)
 80026ae:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = (command & 0xFF00) >> 8;                                                          // CCCCCCCC
 80026b0:	8abb      	ldrh	r3, [r7, #20]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <irsnd_send_data+0x478>)
 80026ba:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = (command & 0x00FF);                                                               // CCCCCCCC
 80026bc:	8abb      	ldrh	r3, [r7, #20]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b6c      	ldr	r3, [pc, #432]	; (8002874 <irsnd_send_data+0x478>)
 80026c2:	70da      	strb	r2, [r3, #3]
            irsnd_busy      = TRUE;
 80026c4:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <irsnd_send_data+0x47c>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
            break;
 80026ca:	e0cc      	b.n	8002866 <irsnd_send_data+0x46a>
        }
#endif
#if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
        case IRMP_MATSUSHITA_PROTOCOL:
        {
            address = bitsrevervse (irmp_data_p->address, MATSUSHITA_ADDRESS_LEN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	885b      	ldrh	r3, [r3, #2]
 80026d0:	210c      	movs	r1, #12
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fe6c 	bl	80023b0 <bitsrevervse>
 80026d8:	4603      	mov	r3, r0
 80026da:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (irmp_data_p->command, MATSUSHITA_COMMAND_LEN);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	210c      	movs	r1, #12
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fe64 	bl	80023b0 <bitsrevervse>
 80026e8:	4603      	mov	r3, r0
 80026ea:	82bb      	strh	r3, [r7, #20]

            irsnd_buffer[0] = (command & 0x0FF0) >> 4;                                                          // CCCCCCCC
 80026ec:	8abb      	ldrh	r3, [r7, #20]
 80026ee:	111b      	asrs	r3, r3, #4
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b60      	ldr	r3, [pc, #384]	; (8002874 <irsnd_send_data+0x478>)
 80026f4:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = ((command & 0x000F) << 4) | ((address & 0x0F00) >> 8);                            // CCCCAAAA
 80026f6:	8abb      	ldrh	r3, [r7, #20]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	b25a      	sxtb	r2, r3
 80026fc:	8a7b      	ldrh	r3, [r7, #18]
 80026fe:	121b      	asrs	r3, r3, #8
 8002700:	b25b      	sxtb	r3, r3
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b25b      	sxtb	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b25b      	sxtb	r3, r3
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b59      	ldr	r3, [pc, #356]	; (8002874 <irsnd_send_data+0x478>)
 8002710:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = (address & 0x00FF);                                                               // AAAAAAAA
 8002712:	8a7b      	ldrh	r3, [r7, #18]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <irsnd_send_data+0x478>)
 8002718:	709a      	strb	r2, [r3, #2]
            irsnd_busy      = TRUE;
 800271a:	4b57      	ldr	r3, [pc, #348]	; (8002878 <irsnd_send_data+0x47c>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
            break;
 8002720:	e0a1      	b.n	8002866 <irsnd_send_data+0x46a>
        case IRMP_KASEIKYO_PROTOCOL:
        {
            uint8_t xor_value;
            uint16_t genre2;

            address = bitsrevervse (irmp_data_p->address, KASEIKYO_ADDRESS_LEN);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	885b      	ldrh	r3, [r3, #2]
 8002726:	2110      	movs	r1, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe41 	bl	80023b0 <bitsrevervse>
 800272e:	4603      	mov	r3, r0
 8002730:	827b      	strh	r3, [r7, #18]
            command = bitsrevervse (irmp_data_p->command, KASEIKYO_COMMAND_LEN + 4);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	889b      	ldrh	r3, [r3, #4]
 8002736:	2110      	movs	r1, #16
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe39 	bl	80023b0 <bitsrevervse>
 800273e:	4603      	mov	r3, r0
 8002740:	82bb      	strh	r3, [r7, #20]
            genre2 = bitsrevervse ((irmp_data_p->flags & ~IRSND_REPETITION_MASK) >> 4, 4);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	799b      	ldrb	r3, [r3, #6]
 8002746:	111b      	asrs	r3, r3, #4
 8002748:	b29b      	uxth	r3, r3
 800274a:	2104      	movs	r1, #4
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fe2f 	bl	80023b0 <bitsrevervse>
 8002752:	4603      	mov	r3, r0
 8002754:	823b      	strh	r3, [r7, #16]

            xor_value = ((address & 0x000F) ^ ((address & 0x00F0) >> 4) ^ ((address & 0x0F00) >> 8) ^ ((address & 0xF000) >> 12)) & 0x0F;
 8002756:	8a7b      	ldrh	r3, [r7, #18]
 8002758:	b25a      	sxtb	r2, r3
 800275a:	8a7b      	ldrh	r3, [r7, #18]
 800275c:	111b      	asrs	r3, r3, #4
 800275e:	b25b      	sxtb	r3, r3
 8002760:	4053      	eors	r3, r2
 8002762:	b25a      	sxtb	r2, r3
 8002764:	8a7b      	ldrh	r3, [r7, #18]
 8002766:	121b      	asrs	r3, r3, #8
 8002768:	b25b      	sxtb	r3, r3
 800276a:	4053      	eors	r3, r2
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	b25a      	sxtb	r2, r3
 8002774:	8a7b      	ldrh	r3, [r7, #18]
 8002776:	0b1b      	lsrs	r3, r3, #12
 8002778:	b29b      	uxth	r3, r3
 800277a:	b25b      	sxtb	r3, r3
 800277c:	4053      	eors	r3, r2
 800277e:	b25b      	sxtb	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	73fb      	strb	r3, [r7, #15]

            irsnd_buffer[0] = (address & 0xFF00) >> 8;                                                          // AAAAAAAA
 8002788:	8a7b      	ldrh	r3, [r7, #18]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b29b      	uxth	r3, r3
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b38      	ldr	r3, [pc, #224]	; (8002874 <irsnd_send_data+0x478>)
 8002792:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (address & 0x00FF);                                                               // AAAAAAAA
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <irsnd_send_data+0x478>)
 800279a:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = xor_value << 4 | (command & 0x000F);                                              // XXXXCCCC
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	b25a      	sxtb	r2, r3
 80027a2:	8abb      	ldrh	r3, [r7, #20]
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <irsnd_send_data+0x478>)
 80027b4:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = (genre2 << 4) | (command & 0xF000) >> 12;                                         // ggggCCCC
 80027b6:	8a3b      	ldrh	r3, [r7, #16]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	b25a      	sxtb	r2, r3
 80027bc:	8abb      	ldrh	r3, [r7, #20]
 80027be:	0b1b      	lsrs	r3, r3, #12
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <irsnd_send_data+0x478>)
 80027cc:	70da      	strb	r2, [r3, #3]
            irsnd_buffer[4] = (command & 0x0FF0) >> 4;                                                          // CCCCCCCC
 80027ce:	8abb      	ldrh	r3, [r7, #20]
 80027d0:	111b      	asrs	r3, r3, #4
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <irsnd_send_data+0x478>)
 80027d6:	711a      	strb	r2, [r3, #4]

            xor_value = irsnd_buffer[2] ^ irsnd_buffer[3] ^ irsnd_buffer[4];
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <irsnd_send_data+0x478>)
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <irsnd_send_data+0x478>)
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4053      	eors	r3, r2
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <irsnd_send_data+0x478>)
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4053      	eors	r3, r2
 80027f0:	73fb      	strb	r3, [r7, #15]

            irsnd_buffer[5] = xor_value;
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <irsnd_send_data+0x478>)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	7153      	strb	r3, [r2, #5]
            irsnd_busy      = TRUE;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <irsnd_send_data+0x47c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
            break;
 80027fe:	e032      	b.n	8002866 <irsnd_send_data+0x46a>
        }
#endif
#if IRSND_SUPPORT_DENON_PROTOCOL == 1
        case IRMP_DENON_PROTOCOL:
        {
            irsnd_buffer[0] = ((irmp_data_p->address & 0x1F) << 3) | ((irmp_data_p->command & 0x0380) >> 7);    // AAAAACCC (1st frame)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	885b      	ldrh	r3, [r3, #2]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	b25a      	sxtb	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	11db      	asrs	r3, r3, #7
 800280e:	b25b      	sxtb	r3, r3
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	b25b      	sxtb	r3, r3
 8002816:	4313      	orrs	r3, r2
 8002818:	b25b      	sxtb	r3, r3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <irsnd_send_data+0x478>)
 800281e:	701a      	strb	r2, [r3, #0]
            irsnd_buffer[1] = (irmp_data_p->command & 0x7F) << 1;                                               // CCCCCCC
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <irsnd_send_data+0x478>)
 800282a:	705a      	strb	r2, [r3, #1]
            irsnd_buffer[2] = ((irmp_data_p->address & 0x1F) << 3) | (((~irmp_data_p->command) & 0x0380) >> 7); // AAAAAccc (2nd frame)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	885b      	ldrh	r3, [r3, #2]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	b25a      	sxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	889b      	ldrh	r3, [r3, #4]
 8002838:	43db      	mvns	r3, r3
 800283a:	11db      	asrs	r3, r3, #7
 800283c:	b25b      	sxtb	r3, r3
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	b25b      	sxtb	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b25b      	sxtb	r3, r3
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <irsnd_send_data+0x478>)
 800284c:	709a      	strb	r2, [r3, #2]
            irsnd_buffer[3] = (~(irmp_data_p->command) & 0x7F) << 1;                                            // ccccccc
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	889b      	ldrh	r3, [r3, #4]
 8002852:	43db      	mvns	r3, r3
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <irsnd_send_data+0x478>)
 800285a:	70da      	strb	r2, [r3, #3]
            irsnd_busy      = TRUE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <irsnd_send_data+0x47c>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
            break;
 8002862:	e000      	b.n	8002866 <irsnd_send_data+0x46a>
            break;
        }
#endif
        default:
        {
            break;
 8002864:	bf00      	nop
        }
    }

    return irsnd_busy;
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <irsnd_send_data+0x47c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000088 	.word	0x20000088
 8002878:	20000084 	.word	0x20000084

0800287c <irsnd_ISR>:
 *  @details  ISR routine, called 10000 times per second
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint8_t
irsnd_ISR (void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
    static uint8_t              last_bit_value;
#endif
    static uint8_t              pulse_len = 0xFF;
    static IRSND_PAUSE_LEN      pause_len = 0xFF;

    if (irsnd_busy)
 8002882:	4ba0      	ldr	r3, [pc, #640]	; (8002b04 <irsnd_ISR+0x288>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 837c 	beq.w	8002f86 <irsnd_ISR+0x70a>
    {
        if (current_bit == 0xFF && new_frame)                                       // start of transmission...
 800288e:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <irsnd_ISR+0x28c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	f040 81e9 	bne.w	8002c6a <irsnd_ISR+0x3ee>
 8002898:	4b9c      	ldr	r3, [pc, #624]	; (8002b0c <irsnd_ISR+0x290>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 81e4 	beq.w	8002c6a <irsnd_ISR+0x3ee>
        {
            if (auto_repetition_counter > 0)
 80028a2:	4b9b      	ldr	r3, [pc, #620]	; (8002b10 <irsnd_ISR+0x294>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d029      	beq.n	80028fe <irsnd_ISR+0x82>
            {
                auto_repetition_pause_counter++;
 80028aa:	4b9a      	ldr	r3, [pc, #616]	; (8002b14 <irsnd_ISR+0x298>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4b98      	ldr	r3, [pc, #608]	; (8002b14 <irsnd_ISR+0x298>)
 80028b4:	801a      	strh	r2, [r3, #0]

#if IRSND_SUPPORT_DENON_PROTOCOL == 1
                if (repeat_frame_pause_len > 0)                                     // frame repeat distance counts from beginning of 1st frame!
 80028b6:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <irsnd_ISR+0x29c>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <irsnd_ISR+0x4e>
                {
                    repeat_frame_pause_len--;
 80028be:	4b96      	ldr	r3, [pc, #600]	; (8002b18 <irsnd_ISR+0x29c>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <irsnd_ISR+0x29c>)
 80028c8:	801a      	strh	r2, [r3, #0]
                }
#endif

                if (auto_repetition_pause_counter >= auto_repetition_pause_len)
 80028ca:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <irsnd_ISR+0x298>)
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	4b93      	ldr	r3, [pc, #588]	; (8002b1c <irsnd_ISR+0x2a0>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d30f      	bcc.n	80028f6 <irsnd_ISR+0x7a>
                {
                    auto_repetition_pause_counter = 0;
 80028d6:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <irsnd_ISR+0x298>)
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]

#if IRSND_SUPPORT_DENON_PROTOCOL == 1
                    if (irsnd_protocol == IRMP_DENON_PROTOCOL)                              // n'th denon frame
 80028dc:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <irsnd_ISR+0x2a4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	f040 81c1 	bne.w	8002c6a <irsnd_ISR+0x3ee>
                    {
                        current_bit = 16;
 80028e8:	4b87      	ldr	r3, [pc, #540]	; (8002b08 <irsnd_ISR+0x28c>)
 80028ea:	2210      	movs	r2, #16
 80028ec:	701a      	strb	r2, [r3, #0]
                        complete_data_len   = 2 * DENON_COMPLETE_DATA_LEN + 1;
 80028ee:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <irsnd_ISR+0x2a8>)
 80028f0:	221f      	movs	r2, #31
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e1b9      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    else
                    {
                        putchar ('1');
                    }
#endif
                    return irsnd_busy;
 80028f6:	4b83      	ldr	r3, [pc, #524]	; (8002b04 <irsnd_ISR+0x288>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e346      	b.n	8002f8c <irsnd_ISR+0x710>
                }
            }
#if 0
            else if (repeat_counter > 0 && packet_repeat_pause_counter < repeat_frame_pause_len)
#else
            else if (packet_repeat_pause_counter < repeat_frame_pause_len)
 80028fe:	4b8a      	ldr	r3, [pc, #552]	; (8002b28 <irsnd_ISR+0x2ac>)
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <irsnd_ISR+0x29c>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d209      	bcs.n	800291e <irsnd_ISR+0xa2>
#endif
            {
                packet_repeat_pause_counter++;
 800290a:	4b87      	ldr	r3, [pc, #540]	; (8002b28 <irsnd_ISR+0x2ac>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <irsnd_ISR+0x2ac>)
 8002914:	801a      	strh	r2, [r3, #0]
                else
                {
                    putchar ('1');
                }
#endif
                return irsnd_busy;
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <irsnd_ISR+0x288>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e336      	b.n	8002f8c <irsnd_ISR+0x710>
            }
            else
            {
                if (send_trailer)
 800291e:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <irsnd_ISR+0x2b0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <irsnd_ISR+0xbe>
                {
                    irsnd_busy = FALSE;
 8002926:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <irsnd_ISR+0x288>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
                    send_trailer = FALSE;
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <irsnd_ISR+0x2b0>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
                    return irsnd_busy;
 8002932:	4b74      	ldr	r3, [pc, #464]	; (8002b04 <irsnd_ISR+0x288>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e328      	b.n	8002f8c <irsnd_ISR+0x710>
                }
                
                n_repeat_frames             = irsnd_repeat;
 800293a:	4b7d      	ldr	r3, [pc, #500]	; (8002b30 <irsnd_ISR+0x2b4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b7c      	ldr	r3, [pc, #496]	; (8002b34 <irsnd_ISR+0x2b8>)
 8002942:	701a      	strb	r2, [r3, #0]

                if (n_repeat_frames == IRSND_ENDLESS_REPETITION)
 8002944:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <irsnd_ISR+0x2b8>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d102      	bne.n	8002952 <irsnd_ISR+0xd6>
                {
                    n_repeat_frames = 255;
 800294c:	4b79      	ldr	r3, [pc, #484]	; (8002b34 <irsnd_ISR+0x2b8>)
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	701a      	strb	r2, [r3, #0]
                }

                packet_repeat_pause_counter = 0;
 8002952:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <irsnd_ISR+0x2ac>)
 8002954:	2200      	movs	r2, #0
 8002956:	801a      	strh	r2, [r3, #0]
                pulse_counter               = 0;
 8002958:	4b77      	ldr	r3, [pc, #476]	; (8002b38 <irsnd_ISR+0x2bc>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
                pause_counter               = 0;
 800295e:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <irsnd_ISR+0x2c0>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

                switch (irsnd_protocol)
 8002964:	4b6e      	ldr	r3, [pc, #440]	; (8002b20 <irsnd_ISR+0x2a4>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	2b09      	cmp	r3, #9
 800296e:	f200 8178 	bhi.w	8002c62 <irsnd_ISR+0x3e6>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <irsnd_ISR+0xfc>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029a1 	.word	0x080029a1
 800297c:	08002a03 	.word	0x08002a03
 8002980:	08002a67 	.word	0x08002a67
 8002984:	08002b69 	.word	0x08002b69
 8002988:	08002bb7 	.word	0x08002bb7
 800298c:	08002c63 	.word	0x08002c63
 8002990:	08002c63 	.word	0x08002c63
 8002994:	08002c13 	.word	0x08002c13
 8002998:	08002c63 	.word	0x08002c63
 800299c:	08002ab5 	.word	0x08002ab5
                {
#if IRSND_SUPPORT_SIRCS_PROTOCOL == 1
                    case IRMP_SIRCS_PROTOCOL:
                    {
                        startbit_pulse_len          = SIRCS_START_BIT_PULSE_LEN;
 80029a0:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <irsnd_ISR+0x2c4>)
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = SIRCS_START_BIT_PAUSE_LEN - 1;
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <irsnd_ISR+0x2c8>)
 80029a8:	2208      	movs	r2, #8
 80029aa:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = SIRCS_1_PULSE_LEN;
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <irsnd_ISR+0x2cc>)
 80029ae:	2212      	movs	r2, #18
 80029b0:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = SIRCS_PAUSE_LEN - 1;
 80029b2:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <irsnd_ISR+0x2d0>)
 80029b4:	2208      	movs	r2, #8
 80029b6:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = SIRCS_0_PULSE_LEN;
 80029b8:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <irsnd_ISR+0x2d4>)
 80029ba:	2209      	movs	r2, #9
 80029bc:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = SIRCS_PAUSE_LEN - 1;
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <irsnd_ISR+0x2d8>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = SIRCS_STOP_BIT;
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <irsnd_ISR+0x2dc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = SIRCS_MINIMUM_DATA_LEN + sircs_additional_bitlen;
 80029ca:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <irsnd_ISR+0x2e0>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <irsnd_ISR+0x2a8>)
 80029d4:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = (repeat_counter == 0) ? SIRCS_FRAMES : 1;     // 3 frames auto repetition if first frame
 80029d6:	4b62      	ldr	r3, [pc, #392]	; (8002b60 <irsnd_ISR+0x2e4>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <irsnd_ISR+0x166>
 80029de:	2203      	movs	r2, #3
 80029e0:	e000      	b.n	80029e4 <irsnd_ISR+0x168>
 80029e2:	2201      	movs	r2, #1
 80029e4:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <irsnd_ISR+0x2e8>)
 80029e6:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = SIRCS_AUTO_REPETITION_PAUSE_LEN;              // 25ms pause
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <irsnd_ISR+0x2a0>)
 80029ea:	f240 1277 	movw	r2, #375	; 0x177
 80029ee:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = SIRCS_FRAME_REPEAT_PAUSE_LEN;
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <irsnd_ISR+0x29c>)
 80029f2:	f240 1277 	movw	r2, #375	; 0x177
 80029f6:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_40_KHZ);
 80029f8:	f649 4040 	movw	r0, #40000	; 0x9c40
 80029fc:	f7ff fc4e 	bl	800229c <irsnd_set_freq>
                        break;
 8002a00:	e133      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    }
#endif
#if IRSND_SUPPORT_NEC_PROTOCOL == 1
                    case IRMP_NEC_PROTOCOL:
                    {
                        startbit_pulse_len          = NEC_START_BIT_PULSE_LEN;
 8002a02:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <irsnd_ISR+0x2c4>)
 8002a04:	2287      	movs	r2, #135	; 0x87
 8002a06:	701a      	strb	r2, [r3, #0]

                        if (repeat_counter > 0)
 8002a08:	4b55      	ldr	r3, [pc, #340]	; (8002b60 <irsnd_ISR+0x2e4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <irsnd_ISR+0x1a2>
                        {
                            startbit_pause_len      = NEC_REPEAT_START_BIT_PAUSE_LEN - 1;
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <irsnd_ISR+0x2c8>)
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	701a      	strb	r2, [r3, #0]
                            complete_data_len       = 0;
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <irsnd_ISR+0x2a8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <irsnd_ISR+0x1ae>
                        }
                        else
                        {
                            startbit_pause_len      = NEC_START_BIT_PAUSE_LEN - 1;
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <irsnd_ISR+0x2c8>)
 8002a20:	2243      	movs	r2, #67	; 0x43
 8002a22:	701a      	strb	r2, [r3, #0]
                            complete_data_len       = NEC_COMPLETE_DATA_LEN;
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <irsnd_ISR+0x2a8>)
 8002a26:	2220      	movs	r2, #32
 8002a28:	701a      	strb	r2, [r3, #0]
                        }

                        pulse_1_len                 = NEC_PULSE_LEN;
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <irsnd_ISR+0x2cc>)
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = NEC_1_PAUSE_LEN - 1;
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <irsnd_ISR+0x2d0>)
 8002a32:	2218      	movs	r2, #24
 8002a34:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = NEC_PULSE_LEN;
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <irsnd_ISR+0x2d4>)
 8002a38:	2208      	movs	r2, #8
 8002a3a:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = NEC_0_PAUSE_LEN - 1;
 8002a3c:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <irsnd_ISR+0x2d8>)
 8002a3e:	2207      	movs	r2, #7
 8002a40:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = NEC_STOP_BIT;
 8002a42:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <irsnd_ISR+0x2dc>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = 1;                                            // 1 frame
 8002a48:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <irsnd_ISR+0x2e8>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = 0;
 8002a4e:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <irsnd_ISR+0x2a0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = NEC_FRAME_REPEAT_PAUSE_LEN;
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <irsnd_ISR+0x29c>)
 8002a56:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a5a:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_38_KHZ);
 8002a5c:	f249 4070 	movw	r0, #38000	; 0x9470
 8002a60:	f7ff fc1c 	bl	800229c <irsnd_set_freq>
                        break;
 8002a64:	e101      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    }
#endif
#if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
                    case IRMP_SAMSUNG_PROTOCOL:
                    {
                        startbit_pulse_len          = SAMSUNG_START_BIT_PULSE_LEN;
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <irsnd_ISR+0x2c4>)
 8002a68:	2244      	movs	r2, #68	; 0x44
 8002a6a:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = SAMSUNG_START_BIT_PAUSE_LEN - 1;
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <irsnd_ISR+0x2c8>)
 8002a6e:	2243      	movs	r2, #67	; 0x43
 8002a70:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = SAMSUNG_PULSE_LEN;
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <irsnd_ISR+0x2cc>)
 8002a74:	2208      	movs	r2, #8
 8002a76:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = SAMSUNG_1_PAUSE_LEN - 1;
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <irsnd_ISR+0x2d0>)
 8002a7a:	2218      	movs	r2, #24
 8002a7c:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = SAMSUNG_PULSE_LEN;
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <irsnd_ISR+0x2d4>)
 8002a80:	2208      	movs	r2, #8
 8002a82:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = SAMSUNG_0_PAUSE_LEN - 1;
 8002a84:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <irsnd_ISR+0x2d8>)
 8002a86:	2207      	movs	r2, #7
 8002a88:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = SAMSUNG_STOP_BIT;
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <irsnd_ISR+0x2dc>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = SAMSUNG_COMPLETE_DATA_LEN;
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <irsnd_ISR+0x2a8>)
 8002a92:	2225      	movs	r2, #37	; 0x25
 8002a94:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = 1;                                            // 1 frame
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <irsnd_ISR+0x2e8>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = 0;
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <irsnd_ISR+0x2a0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = SAMSUNG_FRAME_REPEAT_PAUSE_LEN;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <irsnd_ISR+0x29c>)
 8002aa4:	f240 1277 	movw	r2, #375	; 0x177
 8002aa8:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_38_KHZ);
 8002aaa:	f249 4070 	movw	r0, #38000	; 0x9470
 8002aae:	f7ff fbf5 	bl	800229c <irsnd_set_freq>
                        break;
 8002ab2:	e0da      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    }

                    case IRMP_SAMSUNG32_PROTOCOL:
                    {
                        startbit_pulse_len          = SAMSUNG_START_BIT_PULSE_LEN;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <irsnd_ISR+0x2c4>)
 8002ab6:	2244      	movs	r2, #68	; 0x44
 8002ab8:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = SAMSUNG_START_BIT_PAUSE_LEN - 1;
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <irsnd_ISR+0x2c8>)
 8002abc:	2243      	movs	r2, #67	; 0x43
 8002abe:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = SAMSUNG_PULSE_LEN;
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <irsnd_ISR+0x2cc>)
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = SAMSUNG_1_PAUSE_LEN - 1;
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <irsnd_ISR+0x2d0>)
 8002ac8:	2218      	movs	r2, #24
 8002aca:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = SAMSUNG_PULSE_LEN;
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <irsnd_ISR+0x2d4>)
 8002ace:	2208      	movs	r2, #8
 8002ad0:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = SAMSUNG_0_PAUSE_LEN - 1;
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <irsnd_ISR+0x2d8>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = SAMSUNG_STOP_BIT;
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <irsnd_ISR+0x2dc>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = SAMSUNG32_COMPLETE_DATA_LEN;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <irsnd_ISR+0x2a8>)
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = SAMSUNG32_FRAMES;                             // 2 frames
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <irsnd_ISR+0x2e8>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = SAMSUNG32_AUTO_REPETITION_PAUSE_LEN;          // 47 ms pause
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <irsnd_ISR+0x2a0>)
 8002aec:	f240 22c1 	movw	r2, #705	; 0x2c1
 8002af0:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = SAMSUNG32_FRAME_REPEAT_PAUSE_LEN;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <irsnd_ISR+0x29c>)
 8002af4:	f240 22c1 	movw	r2, #705	; 0x2c1
 8002af8:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_38_KHZ);
 8002afa:	f249 4070 	movw	r0, #38000	; 0x9470
 8002afe:	f7ff fbcd 	bl	800229c <irsnd_set_freq>
                        break;
 8002b02:	e0b2      	b.n	8002c6a <irsnd_ISR+0x3ee>
 8002b04:	20000084 	.word	0x20000084
 8002b08:	20000024 	.word	0x20000024
 8002b0c:	20000025 	.word	0x20000025
 8002b10:	20000098 	.word	0x20000098
 8002b14:	2000009a 	.word	0x2000009a
 8002b18:	2000009c 	.word	0x2000009c
 8002b1c:	2000009e 	.word	0x2000009e
 8002b20:	20000085 	.word	0x20000085
 8002b24:	200000a0 	.word	0x200000a0
 8002b28:	200000a2 	.word	0x200000a2
 8002b2c:	200000a4 	.word	0x200000a4
 8002b30:	2000008e 	.word	0x2000008e
 8002b34:	200000a5 	.word	0x200000a5
 8002b38:	200000a6 	.word	0x200000a6
 8002b3c:	200000a7 	.word	0x200000a7
 8002b40:	200000a8 	.word	0x200000a8
 8002b44:	200000a9 	.word	0x200000a9
 8002b48:	200000aa 	.word	0x200000aa
 8002b4c:	200000ab 	.word	0x200000ab
 8002b50:	200000ac 	.word	0x200000ac
 8002b54:	200000ad 	.word	0x200000ad
 8002b58:	200000ae 	.word	0x200000ae
 8002b5c:	20000090 	.word	0x20000090
 8002b60:	200000af 	.word	0x200000af
 8002b64:	200000b0 	.word	0x200000b0
                    }
#endif
#if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
                    case IRMP_MATSUSHITA_PROTOCOL:
                    {
                        startbit_pulse_len          = MATSUSHITA_START_BIT_PULSE_LEN;
 8002b68:	4baa      	ldr	r3, [pc, #680]	; (8002e14 <irsnd_ISR+0x598>)
 8002b6a:	2234      	movs	r2, #52	; 0x34
 8002b6c:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = MATSUSHITA_START_BIT_PAUSE_LEN - 1;
 8002b6e:	4baa      	ldr	r3, [pc, #680]	; (8002e18 <irsnd_ISR+0x59c>)
 8002b70:	2233      	movs	r2, #51	; 0x33
 8002b72:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = MATSUSHITA_PULSE_LEN;
 8002b74:	4ba9      	ldr	r3, [pc, #676]	; (8002e1c <irsnd_ISR+0x5a0>)
 8002b76:	220d      	movs	r2, #13
 8002b78:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = MATSUSHITA_1_PAUSE_LEN - 1;
 8002b7a:	4ba9      	ldr	r3, [pc, #676]	; (8002e20 <irsnd_ISR+0x5a4>)
 8002b7c:	2226      	movs	r2, #38	; 0x26
 8002b7e:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = MATSUSHITA_PULSE_LEN;
 8002b80:	4ba8      	ldr	r3, [pc, #672]	; (8002e24 <irsnd_ISR+0x5a8>)
 8002b82:	220d      	movs	r2, #13
 8002b84:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = MATSUSHITA_0_PAUSE_LEN - 1;
 8002b86:	4ba8      	ldr	r3, [pc, #672]	; (8002e28 <irsnd_ISR+0x5ac>)
 8002b88:	220c      	movs	r2, #12
 8002b8a:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = MATSUSHITA_STOP_BIT;
 8002b8c:	4ba7      	ldr	r3, [pc, #668]	; (8002e2c <irsnd_ISR+0x5b0>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = MATSUSHITA_COMPLETE_DATA_LEN;
 8002b92:	4ba7      	ldr	r3, [pc, #668]	; (8002e30 <irsnd_ISR+0x5b4>)
 8002b94:	2218      	movs	r2, #24
 8002b96:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = 1;                                            // 1 frame
 8002b98:	4ba6      	ldr	r3, [pc, #664]	; (8002e34 <irsnd_ISR+0x5b8>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = 0;
 8002b9e:	4ba6      	ldr	r3, [pc, #664]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = MATSUSHITA_FRAME_REPEAT_PAUSE_LEN;
 8002ba4:	4ba5      	ldr	r3, [pc, #660]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002ba6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002baa:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_36_KHZ);
 8002bac:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8002bb0:	f7ff fb74 	bl	800229c <irsnd_set_freq>
                        break;
 8002bb4:	e059      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    }
#endif
#if IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1
                    case IRMP_KASEIKYO_PROTOCOL:
                    {
                        startbit_pulse_len          = KASEIKYO_START_BIT_PULSE_LEN;
 8002bb6:	4b97      	ldr	r3, [pc, #604]	; (8002e14 <irsnd_ISR+0x598>)
 8002bb8:	2233      	movs	r2, #51	; 0x33
 8002bba:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = KASEIKYO_START_BIT_PAUSE_LEN - 1;
 8002bbc:	4b96      	ldr	r3, [pc, #600]	; (8002e18 <irsnd_ISR+0x59c>)
 8002bbe:	2218      	movs	r2, #24
 8002bc0:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = KASEIKYO_PULSE_LEN;
 8002bc2:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <irsnd_ISR+0x5a0>)
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = KASEIKYO_1_PAUSE_LEN - 1;
 8002bc8:	4b95      	ldr	r3, [pc, #596]	; (8002e20 <irsnd_ISR+0x5a4>)
 8002bca:	2212      	movs	r2, #18
 8002bcc:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = KASEIKYO_PULSE_LEN;
 8002bce:	4b95      	ldr	r3, [pc, #596]	; (8002e24 <irsnd_ISR+0x5a8>)
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = KASEIKYO_0_PAUSE_LEN - 1;
 8002bd4:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <irsnd_ISR+0x5ac>)
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = KASEIKYO_STOP_BIT;
 8002bda:	4b94      	ldr	r3, [pc, #592]	; (8002e2c <irsnd_ISR+0x5b0>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = KASEIKYO_COMPLETE_DATA_LEN;
 8002be0:	4b93      	ldr	r3, [pc, #588]	; (8002e30 <irsnd_ISR+0x5b4>)
 8002be2:	2230      	movs	r2, #48	; 0x30
 8002be4:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = (repeat_counter == 0) ? KASEIKYO_FRAMES : 1;  // 2 frames auto repetition if first frame
 8002be6:	4b96      	ldr	r3, [pc, #600]	; (8002e40 <irsnd_ISR+0x5c4>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <irsnd_ISR+0x376>
 8002bee:	2202      	movs	r2, #2
 8002bf0:	e000      	b.n	8002bf4 <irsnd_ISR+0x378>
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <irsnd_ISR+0x5b8>)
 8002bf6:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = KASEIKYO_AUTO_REPETITION_PAUSE_LEN;           // 75 ms pause
 8002bf8:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002bfa:	f240 4256 	movw	r2, #1110	; 0x456
 8002bfe:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = KASEIKYO_FRAME_REPEAT_PAUSE_LEN;
 8002c00:	4b8e      	ldr	r3, [pc, #568]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002c02:	f240 4256 	movw	r2, #1110	; 0x456
 8002c06:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_38_KHZ);
 8002c08:	f249 4070 	movw	r0, #38000	; 0x9470
 8002c0c:	f7ff fb46 	bl	800229c <irsnd_set_freq>
                        break;
 8002c10:	e02b      	b.n	8002c6a <irsnd_ISR+0x3ee>
                    }
#endif
#if IRSND_SUPPORT_DENON_PROTOCOL == 1
                    case IRMP_DENON_PROTOCOL:
                    {
                        startbit_pulse_len          = 0x00;
 8002c12:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <irsnd_ISR+0x598>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
                        startbit_pause_len          = 0x00;
 8002c18:	4b7f      	ldr	r3, [pc, #508]	; (8002e18 <irsnd_ISR+0x59c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
                        pulse_1_len                 = DENON_PULSE_LEN;
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <irsnd_ISR+0x5a0>)
 8002c20:	2205      	movs	r2, #5
 8002c22:	701a      	strb	r2, [r3, #0]
                        pause_1_len                 = DENON_1_PAUSE_LEN - 1;
 8002c24:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <irsnd_ISR+0x5a4>)
 8002c26:	221a      	movs	r2, #26
 8002c28:	701a      	strb	r2, [r3, #0]
                        pulse_0_len                 = DENON_PULSE_LEN;
 8002c2a:	4b7e      	ldr	r3, [pc, #504]	; (8002e24 <irsnd_ISR+0x5a8>)
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	701a      	strb	r2, [r3, #0]
                        pause_0_len                 = DENON_0_PAUSE_LEN - 1;
 8002c30:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <irsnd_ISR+0x5ac>)
 8002c32:	220a      	movs	r2, #10
 8002c34:	701a      	strb	r2, [r3, #0]
                        has_stop_bit                = DENON_STOP_BIT;
 8002c36:	4b7d      	ldr	r3, [pc, #500]	; (8002e2c <irsnd_ISR+0x5b0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
                        complete_data_len           = DENON_COMPLETE_DATA_LEN;
 8002c3c:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <irsnd_ISR+0x5b4>)
 8002c3e:	220f      	movs	r2, #15
 8002c40:	701a      	strb	r2, [r3, #0]
                        n_auto_repetitions          = DENON_FRAMES;                                 // 2 frames, 2nd with inverted command
 8002c42:	4b7c      	ldr	r3, [pc, #496]	; (8002e34 <irsnd_ISR+0x5b8>)
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
                        auto_repetition_pause_len   = DENON_AUTO_REPETITION_PAUSE_LEN;              // 65 ms pause after 1st frame
 8002c48:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002c4a:	f240 32cf 	movw	r2, #975	; 0x3cf
 8002c4e:	801a      	strh	r2, [r3, #0]
                        repeat_frame_pause_len      = DENON_FRAME_REPEAT_PAUSE_LEN;
 8002c50:	4b7a      	ldr	r3, [pc, #488]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002c52:	f240 729e 	movw	r2, #1950	; 0x79e
 8002c56:	801a      	strh	r2, [r3, #0]
                        irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // in theory 32kHz, in practice 36kHz is better
 8002c58:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8002c5c:	f7ff fb1e 	bl	800229c <irsnd_set_freq>
                        break;
 8002c60:	e003      	b.n	8002c6a <irsnd_ISR+0x3ee>
                        break;
                    }
#endif
                    default:
                    {
                        irsnd_busy = FALSE;
 8002c62:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <irsnd_ISR+0x5c8>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
                        break;
 8002c68:	bf00      	nop
                    }
                }
            }
        }

        if (irsnd_busy)
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <irsnd_ISR+0x5c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8167 	beq.w	8002f44 <irsnd_ISR+0x6c8>
        {
            new_frame = FALSE;
 8002c76:	4b74      	ldr	r3, [pc, #464]	; (8002e48 <irsnd_ISR+0x5cc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

            switch (irsnd_protocol)
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <irsnd_ISR+0x5d0>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	2b09      	cmp	r3, #9
 8002c86:	f200 8159 	bhi.w	8002f3c <irsnd_ISR+0x6c0>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <irsnd_ISR+0x414>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002cb9 	.word	0x08002cb9
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	08002cb9 	.word	0x08002cb9
 8002ca4:	08002f3d 	.word	0x08002f3d
 8002ca8:	08002f3d 	.word	0x08002f3d
 8002cac:	08002cb9 	.word	0x08002cb9
 8002cb0:	08002f3d 	.word	0x08002f3d
 8002cb4:	08002cb9 	.word	0x08002cb9
    IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1 || IRSND_SUPPORT_RECS80_PROTOCOL == 1 || IRSND_SUPPORT_RECS80EXT_PROTOCOL == 1 || IRSND_SUPPORT_DENON_PROTOCOL == 1 || \
    IRSND_SUPPORT_NUBERT_PROTOCOL == 1 || IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1 || IRSND_SUPPORT_FDC_PROTOCOL == 1 || IRSND_SUPPORT_RCCAR_PROTOCOL == 1 ||   \
    IRSND_SUPPORT_JVC_PROTOCOL == 1 || IRSND_SUPPORT_NIKON_PROTOCOL == 1 || IRSND_SUPPORT_LEGO_PROTOCOL == 1 || IRSND_SUPPORT_THOMSON_PROTOCOL == 1 
                {
#if IRSND_SUPPORT_DENON_PROTOCOL == 1
                    if (irsnd_protocol == IRMP_DENON_PROTOCOL)
 8002cb8:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <irsnd_ISR+0x5d0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d113      	bne.n	8002cea <irsnd_ISR+0x46e>
                    {
                        if (auto_repetition_pause_len > 0)                                          // 2nd frame distance counts from beginning of 1st frame!
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <irsnd_ISR+0x45a>
                        {
                            auto_repetition_pause_len--;
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <irsnd_ISR+0x5bc>)
 8002cd4:	801a      	strh	r2, [r3, #0]
                        }

                        if (repeat_frame_pause_len > 0)                                             // frame repeat distance counts from beginning of 1st frame!
 8002cd6:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <irsnd_ISR+0x46e>
                        {
                            repeat_frame_pause_len--;
 8002cde:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <irsnd_ISR+0x5c0>)
 8002ce8:	801a      	strh	r2, [r3, #0]
                        }
                    }
#endif

                    if (pulse_counter == 0)
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <irsnd_ISR+0x5d4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80ce 	bne.w	8002e90 <irsnd_ISR+0x614>
                    {
                        if (current_bit == 0xFF)                                                    // send start bit
 8002cf4:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2bff      	cmp	r3, #255	; 0xff
 8002cfa:	d108      	bne.n	8002d0e <irsnd_ISR+0x492>
                        {
                            pulse_len = startbit_pulse_len;
 8002cfc:	4b45      	ldr	r3, [pc, #276]	; (8002e14 <irsnd_ISR+0x598>)
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002d02:	701a      	strb	r2, [r3, #0]
                            pause_len = startbit_pause_len;
 8002d04:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <irsnd_ISR+0x59c>)
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e0c0      	b.n	8002e90 <irsnd_ISR+0x614>
                        }
                        else if (current_bit < complete_data_len)                                   // send n'th bit
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <irsnd_ISR+0x5b4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	f080 80a4 	bcs.w	8002e64 <irsnd_ISR+0x5e8>
                        {
#if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
                            if (irsnd_protocol == IRMP_SAMSUNG_PROTOCOL)
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <irsnd_ISR+0x5d0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d14f      	bne.n	8002dc6 <irsnd_ISR+0x54a>
                            {
                                if (current_bit < SAMSUNG_ADDRESS_LEN)                              // send address bits
 8002d26:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d81c      	bhi.n	8002d68 <irsnd_ISR+0x4ec>
                                {
                                    pulse_len = SAMSUNG_PULSE_LEN;
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002d30:	2208      	movs	r2, #8
 8002d32:	701a      	strb	r2, [r3, #0]
                                    pause_len = (irsnd_buffer[current_bit / 8] & (1<<(7-(current_bit % 8)))) ?
 8002d34:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <irsnd_ISR+0x5e4>)
 8002d40:	5c9b      	ldrb	r3, [r3, r2]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	fa42 f303 	asr.w	r3, r2, r3
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <irsnd_ISR+0x4e4>
 8002d5c:	2218      	movs	r2, #24
 8002d5e:	e000      	b.n	8002d62 <irsnd_ISR+0x4e6>
 8002d60:	2207      	movs	r2, #7
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e093      	b.n	8002e90 <irsnd_ISR+0x614>
                                                    (SAMSUNG_1_PAUSE_LEN - 1) : (SAMSUNG_0_PAUSE_LEN - 1);
                                }
                                else if (current_bit == SAMSUNG_ADDRESS_LEN)                        // send SYNC bit (16th bit)
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d106      	bne.n	8002d7e <irsnd_ISR+0x502>
                                {
                                    pulse_len = SAMSUNG_PULSE_LEN;
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002d72:	2208      	movs	r2, #8
 8002d74:	701a      	strb	r2, [r3, #0]
                                    pause_len = SAMSUNG_START_BIT_PAUSE_LEN - 1;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002d78:	2243      	movs	r2, #67	; 0x43
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e088      	b.n	8002e90 <irsnd_ISR+0x614>
                                }
                                else if (current_bit < SAMSUNG_COMPLETE_DATA_LEN)                   // send n'th bit
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b24      	cmp	r3, #36	; 0x24
 8002d84:	f200 8084 	bhi.w	8002e90 <irsnd_ISR+0x614>
                                {
                                    uint8_t cur_bit = current_bit - 1;                              // sync skipped, offset = -1 !
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	71fb      	strb	r3, [r7, #7]

                                    pulse_len = SAMSUNG_PULSE_LEN;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002d92:	2208      	movs	r2, #8
 8002d94:	701a      	strb	r2, [r3, #0]
                                    pause_len = (irsnd_buffer[cur_bit / 8] & (1<<(7-(cur_bit % 8)))) ?
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	08db      	lsrs	r3, r3, #3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <irsnd_ISR+0x5e4>)
 8002da0:	5c9b      	ldrb	r3, [r3, r2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	fa42 f303 	asr.w	r3, r2, r3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <irsnd_ISR+0x542>
 8002dba:	2218      	movs	r2, #24
 8002dbc:	e000      	b.n	8002dc0 <irsnd_ISR+0x544>
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e064      	b.n	8002e90 <irsnd_ISR+0x614>
                                    }
                                }
                            }
                            else
#endif
                            if (irsnd_buffer[current_bit / 8] & (1<<(7-(current_bit % 8))))
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	08db      	lsrs	r3, r3, #3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <irsnd_ISR+0x5e4>)
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <irsnd_ISR+0x5d8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	fa42 f303 	asr.w	r3, r2, r3
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <irsnd_ISR+0x584>
                            {
                                pulse_len = pulse_1_len;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <irsnd_ISR+0x5a0>)
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002df4:	701a      	strb	r2, [r3, #0]
                                pause_len = pause_1_len;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <irsnd_ISR+0x5a4>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e047      	b.n	8002e90 <irsnd_ISR+0x614>
                            }
                            else
                            {
                                pulse_len = pulse_0_len;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <irsnd_ISR+0x5a8>)
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <irsnd_ISR+0x5dc>)
 8002e06:	701a      	strb	r2, [r3, #0]
                                pause_len = pause_0_len;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <irsnd_ISR+0x5ac>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <irsnd_ISR+0x5e0>)
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e03e      	b.n	8002e90 <irsnd_ISR+0x614>
 8002e12:	bf00      	nop
 8002e14:	200000a8 	.word	0x200000a8
 8002e18:	200000a9 	.word	0x200000a9
 8002e1c:	200000aa 	.word	0x200000aa
 8002e20:	200000ab 	.word	0x200000ab
 8002e24:	200000ac 	.word	0x200000ac
 8002e28:	200000ad 	.word	0x200000ad
 8002e2c:	200000ae 	.word	0x200000ae
 8002e30:	200000a0 	.word	0x200000a0
 8002e34:	200000b0 	.word	0x200000b0
 8002e38:	2000009e 	.word	0x2000009e
 8002e3c:	2000009c 	.word	0x2000009c
 8002e40:	200000af 	.word	0x200000af
 8002e44:	20000084 	.word	0x20000084
 8002e48:	20000025 	.word	0x20000025
 8002e4c:	20000085 	.word	0x20000085
 8002e50:	200000a6 	.word	0x200000a6
 8002e54:	20000024 	.word	0x20000024
 8002e58:	20000026 	.word	0x20000026
 8002e5c:	20000027 	.word	0x20000027
 8002e60:	20000088 	.word	0x20000088
                            }
                        }
                        else if (has_stop_bit)                                                                      // send stop bit
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <irsnd_ISR+0x718>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <irsnd_ISR+0x614>
                        {
                            pulse_len = pulse_0_len;
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <irsnd_ISR+0x71c>)
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <irsnd_ISR+0x720>)
 8002e72:	701a      	strb	r2, [r3, #0]

                            if (auto_repetition_counter < n_auto_repetitions)
 8002e74:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <irsnd_ISR+0x724>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <irsnd_ISR+0x728>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d204      	bcs.n	8002e8a <irsnd_ISR+0x60e>
                            {
                                pause_len = pause_0_len;
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <irsnd_ISR+0x72c>)
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b49      	ldr	r3, [pc, #292]	; (8002fac <irsnd_ISR+0x730>)
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e002      	b.n	8002e90 <irsnd_ISR+0x614>
                            }
                            else
                            {
                                pause_len = 255;                                        // last frame: pause of 255
 8002e8a:	4b48      	ldr	r3, [pc, #288]	; (8002fac <irsnd_ISR+0x730>)
 8002e8c:	22ff      	movs	r2, #255	; 0xff
 8002e8e:	701a      	strb	r2, [r3, #0]
                            }
                        }
                    }

                    if (pulse_counter < pulse_len)
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <irsnd_ISR+0x734>)
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <irsnd_ISR+0x720>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d20c      	bcs.n	8002eb6 <irsnd_ISR+0x63a>
                    {
                        if (pulse_counter == 0)
 8002e9c:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <irsnd_ISR+0x734>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <irsnd_ISR+0x62c>
                        {
                            irsnd_on ();
 8002ea4:	f7ff f9ba 	bl	800221c <irsnd_on>
                        }
                        pulse_counter++;
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <irsnd_ISR+0x734>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <irsnd_ISR+0x734>)
 8002eb2:	701a      	strb	r2, [r3, #0]
                        }

                        pulse_counter = 0;
                        pause_counter = 0;
                    }
                    break;
 8002eb4:	e046      	b.n	8002f44 <irsnd_ISR+0x6c8>
                        {
                            irsnd_on ();
                        }
                        pulse_counter++;
                    }
                    else if (pause_counter < pause_len)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <irsnd_ISR+0x738>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <irsnd_ISR+0x730>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d20c      	bcs.n	8002edc <irsnd_ISR+0x660>
                    {
                        if (pause_counter == 0)
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <irsnd_ISR+0x738>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <irsnd_ISR+0x652>
                        {
                            irsnd_off ();
 8002eca:	f7ff f9c5 	bl	8002258 <irsnd_off>
                        }
                        pause_counter++;
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <irsnd_ISR+0x738>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <irsnd_ISR+0x738>)
 8002ed8:	701a      	strb	r2, [r3, #0]
                        }

                        pulse_counter = 0;
                        pause_counter = 0;
                    }
                    break;
 8002eda:	e033      	b.n	8002f44 <irsnd_ISR+0x6c8>
                        }
                        pause_counter++;
                    }
                    else
                    {
                        current_bit++;
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <irsnd_ISR+0x73c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <irsnd_ISR+0x73c>)
 8002ee6:	701a      	strb	r2, [r3, #0]

                        if (current_bit >= complete_data_len + has_stop_bit)
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <irsnd_ISR+0x73c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <irsnd_ISR+0x740>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <irsnd_ISR+0x718>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	440b      	add	r3, r1
 8002efa:	429a      	cmp	r2, r3
 8002efc:	db17      	blt.n	8002f2e <irsnd_ISR+0x6b2>
                        {
                            current_bit = 0xFF;
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <irsnd_ISR+0x73c>)
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	701a      	strb	r2, [r3, #0]
                            auto_repetition_counter++;
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <irsnd_ISR+0x724>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <irsnd_ISR+0x724>)
 8002f0e:	701a      	strb	r2, [r3, #0]

                            if (auto_repetition_counter == n_auto_repetitions)
 8002f10:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <irsnd_ISR+0x724>)
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <irsnd_ISR+0x728>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d105      	bne.n	8002f28 <irsnd_ISR+0x6ac>
                            {
                                irsnd_busy = FALSE;
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
                                auto_repetition_counter = 0;
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <irsnd_ISR+0x724>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
                            }
                            new_frame = TRUE;
 8002f28:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <irsnd_ISR+0x748>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
                        }

                        pulse_counter = 0;
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <irsnd_ISR+0x734>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
                        pause_counter = 0;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <irsnd_ISR+0x738>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8002f3a:	e003      	b.n	8002f44 <irsnd_ISR+0x6c8>
#endif // IRSND_SUPPORT_RC5_PROTOCOL == 1 || IRSND_SUPPORT_RC6_PROTOCOL == 1 || || IRSND_SUPPORT_RC6A_PROTOCOL == 1 || IRSND_SUPPORT_SIEMENS_PROTOCOL == 1 ||
       // IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1 || IRSND_SUPPORT_IR60_PROTOCOL == 1 || IRSND_SUPPORT_NOKIA_PROTOCOL == 1

                default:
                {
                    irsnd_busy = FALSE;
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
                    break;
 8002f42:	bf00      	nop
                }
            }
        }

        if (! irsnd_busy)
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11b      	bne.n	8002f86 <irsnd_ISR+0x70a>
        {
            if (repeat_counter < n_repeat_frames)
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <irsnd_ISR+0x74c>)
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <irsnd_ISR+0x750>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d209      	bcs.n	8002f6e <irsnd_ISR+0x6f2>
                if (irsnd_protocol == IRMP_FDC_PROTOCOL)
                {
                    irsnd_buffer[2] |= 0x0F;
                }
#endif
                repeat_counter++;
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <irsnd_ISR+0x74c>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <irsnd_ISR+0x74c>)
 8002f64:	701a      	strb	r2, [r3, #0]
                irsnd_busy = TRUE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e00b      	b.n	8002f86 <irsnd_ISR+0x70a>
            }
            else
            {
                irsnd_busy = TRUE; //Rainer
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
                send_trailer = TRUE;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <irsnd_ISR+0x754>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
                n_repeat_frames = 0;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <irsnd_ISR+0x750>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
                repeat_counter = 0;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <irsnd_ISR+0x74c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
    {
        putchar ('1');
    }
#endif

    return irsnd_busy;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <irsnd_ISR+0x744>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200000ae 	.word	0x200000ae
 8002f98:	200000ac 	.word	0x200000ac
 8002f9c:	20000026 	.word	0x20000026
 8002fa0:	20000098 	.word	0x20000098
 8002fa4:	200000b0 	.word	0x200000b0
 8002fa8:	200000ad 	.word	0x200000ad
 8002fac:	20000027 	.word	0x20000027
 8002fb0:	200000a6 	.word	0x200000a6
 8002fb4:	200000a7 	.word	0x200000a7
 8002fb8:	20000024 	.word	0x20000024
 8002fbc:	200000a0 	.word	0x200000a0
 8002fc0:	20000084 	.word	0x20000084
 8002fc4:	20000025 	.word	0x20000025
 8002fc8:	200000af 	.word	0x200000af
 8002fcc:	200000a5 	.word	0x200000a5
 8002fd0:	200000a4 	.word	0x200000a4

08002fd4 <UB_IRSND_Init>:

//--------------------------------------------------------------
// init vom IRSND-Modul
//--------------------------------------------------------------
void UB_IRSND_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  // Init vom Timer
  P_IRSND_InitTIM();
 8002fd8:	f000 f812 	bl	8003000 <P_IRSND_InitTIM>
  // Init vom Interrupt
  P_IRSND_InitNVIC();
 8002fdc:	f000 f836 	bl	800304c <P_IRSND_InitNVIC>
  // init vom IRSND
  irsnd_init();
 8002fe0:	f7ff f990 	bl	8002304 <irsnd_init>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UB_IRSND_Write>:
//   .command = Commando-Nr           [0...65535]
//   .flags   = Flag-Bits             [0...255]
//                Bit0 = Tastenwiederholung
//--------------------------------------------------------------
void UB_IRSND_Write(IRMP_DATA * irmp_data_p)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  // sende Daten und warte bis senden fertig
  irsnd_send_data(irmp_data_p, TRUE);
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fa02 	bl	80023fc <irsnd_send_data>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <P_IRSND_InitTIM>:
//--------------------------------------------------------------
// interne Funktion
// init vom Timer
//--------------------------------------------------------------
void P_IRSND_InitTIM(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003006:	2101      	movs	r1, #1
 8003008:	2001      	movs	r0, #1
 800300a:	f7fd fbe7 	bl	80007dc <RCC_APB1PeriphClockCmd>

  // Timer Init
  TIM_TimeBaseStructure.TIM_Period = IRSND_TIM2_PERIODE;
 800300e:	2307      	movs	r3, #7
 8003010:	60bb      	str	r3, [r7, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = IRSND_TIM2_PRESCALE;
 8003012:	f240 23bb 	movw	r3, #699	; 0x2bb
 8003016:	80bb      	strh	r3, [r7, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003018:	2300      	movs	r3, #0
 800301a:	81bb      	strh	r3, [r7, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800301c:	2300      	movs	r3, #0
 800301e:	80fb      	strh	r3, [r7, #6]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003028:	f7fd fca6 	bl	8000978 <TIM_TimeBaseInit>

  // Timer Interrupt Enable
  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800302c:	2201      	movs	r2, #1
 800302e:	2101      	movs	r1, #1
 8003030:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003034:	f7fd fe8e 	bl	8000d54 <TIM_ITConfig>

  // Timer enable
  TIM_Cmd(TIM2, ENABLE);
 8003038:	2101      	movs	r1, #1
 800303a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800303e:	f7fd fd41 	bl	8000ac4 <TIM_Cmd>
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop

0800304c <P_IRSND_InitNVIC>:
//--------------------------------------------------------------
// interne Funktion
// init vom Interrupt
//--------------------------------------------------------------
void P_IRSND_InitNVIC(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  // NVIC konfig
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003052:	231c      	movs	r3, #28
 8003054:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003056:	2301      	movs	r3, #1
 8003058:	71fb      	strb	r3, [r7, #7]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800305a:	230f      	movs	r3, #15
 800305c:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800305e:	230f      	movs	r3, #15
 8003060:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&NVIC_InitStructure);
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd f8af 	bl	80001c8 <NVIC_Init>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <TIM2_IRQHandler>:
//--------------------------------------------------------------
// Interrupt
// wird bei Timer2 Interrupt aufgerufen
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003078:	2101      	movs	r1, #1
 800307a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800307e:	f7fd fe8d 	bl	8000d9c <TIM_ClearITPendingBit>

  // IRSND ISR aufrufen
  irsnd_ISR();
 8003082:	f7ff fbfb 	bl	800287c <irsnd_ISR>
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <__libc_init_array+0x3c>)
 8003090:	4c0e      	ldr	r4, [pc, #56]	; (80030cc <__libc_init_array+0x40>)
 8003092:	1ae4      	subs	r4, r4, r3
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	2500      	movs	r5, #0
 8003098:	461e      	mov	r6, r3
 800309a:	42a5      	cmp	r5, r4
 800309c:	d004      	beq.n	80030a8 <__libc_init_array+0x1c>
 800309e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a2:	4798      	blx	r3
 80030a4:	3501      	adds	r5, #1
 80030a6:	e7f8      	b.n	800309a <__libc_init_array+0xe>
 80030a8:	f000 f816 	bl	80030d8 <_init>
 80030ac:	4c08      	ldr	r4, [pc, #32]	; (80030d0 <__libc_init_array+0x44>)
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <__libc_init_array+0x48>)
 80030b0:	1ae4      	subs	r4, r4, r3
 80030b2:	10a4      	asrs	r4, r4, #2
 80030b4:	2500      	movs	r5, #0
 80030b6:	461e      	mov	r6, r3
 80030b8:	42a5      	cmp	r5, r4
 80030ba:	d004      	beq.n	80030c6 <__libc_init_array+0x3a>
 80030bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c0:	4798      	blx	r3
 80030c2:	3501      	adds	r5, #1
 80030c4:	e7f8      	b.n	80030b8 <__libc_init_array+0x2c>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	080030f0 	.word	0x080030f0
 80030cc:	080030f0 	.word	0x080030f0
 80030d0:	080030f4 	.word	0x080030f4
 80030d4:	080030f0 	.word	0x080030f0

080030d8 <_init>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr

080030e4 <_fini>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr
