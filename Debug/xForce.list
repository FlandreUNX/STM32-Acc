
C:\Users\Alan\Desktop\xForce\Debug\xForce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005738  08005738  00015738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000518  20000000  08005830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020518  2**0
                  CONTENTS
  7 .bss          00000100  20000518  20000518  00020518  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000618  20000618  00020518  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 10 .debug_info   000099af  00000000  00000000  00020542  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e0d  00000000  00000000  00029ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b68  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0002c868  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000430f  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000371c  00000000  00000000  000315bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00034cdb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003344  00000000  00000000  00034d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000518 	.word	0x20000518
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005720 	.word	0x08005720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000051c 	.word	0x2000051c
 80001c4:	08005720 	.word	0x08005720

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_frsub>:
 8000b38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	e002      	b.n	8000b44 <__addsf3>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fsub>:
 8000b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b44 <__addsf3>:
 8000b44:	0042      	lsls	r2, r0, #1
 8000b46:	bf1f      	itttt	ne
 8000b48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b4c:	ea92 0f03 	teqne	r2, r3
 8000b50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b58:	d06a      	beq.n	8000c30 <__addsf3+0xec>
 8000b5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b62:	bfc1      	itttt	gt
 8000b64:	18d2      	addgt	r2, r2, r3
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	4048      	eorgt	r0, r1
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	bfb8      	it	lt
 8000b6e:	425b      	neglt	r3, r3
 8000b70:	2b19      	cmp	r3, #25
 8000b72:	bf88      	it	hi
 8000b74:	4770      	bxhi	lr
 8000b76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4249      	negne	r1, r1
 8000b96:	ea92 0f03 	teq	r2, r3
 8000b9a:	d03f      	beq.n	8000c1c <__addsf3+0xd8>
 8000b9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba4:	eb10 000c 	adds.w	r0, r0, ip
 8000ba8:	f1c3 0320 	rsb	r3, r3, #32
 8000bac:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__addsf3+0x78>
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc0:	d313      	bcc.n	8000bea <__addsf3+0xa6>
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d306      	bcc.n	8000bd6 <__addsf3+0x92>
 8000bc8:	0840      	lsrs	r0, r0, #1
 8000bca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bce:	f102 0201 	add.w	r2, r2, #1
 8000bd2:	2afe      	cmp	r2, #254	; 0xfe
 8000bd4:	d251      	bcs.n	8000c7a <__addsf3+0x136>
 8000bd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bde:	bf08      	it	eq
 8000be0:	f020 0001 	biceq.w	r0, r0, #1
 8000be4:	ea40 0003 	orr.w	r0, r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	0049      	lsls	r1, r1, #1
 8000bec:	eb40 0000 	adc.w	r0, r0, r0
 8000bf0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	d1ed      	bne.n	8000bd6 <__addsf3+0x92>
 8000bfa:	fab0 fc80 	clz	ip, r0
 8000bfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c02:	ebb2 020c 	subs.w	r2, r2, ip
 8000c06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0a:	bfaa      	itet	ge
 8000c0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c10:	4252      	neglt	r2, r2
 8000c12:	4318      	orrge	r0, r3
 8000c14:	bfbc      	itt	lt
 8000c16:	40d0      	lsrlt	r0, r2
 8000c18:	4318      	orrlt	r0, r3
 8000c1a:	4770      	bx	lr
 8000c1c:	f092 0f00 	teq	r2, #0
 8000c20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c24:	bf06      	itte	eq
 8000c26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2a:	3201      	addeq	r2, #1
 8000c2c:	3b01      	subne	r3, #1
 8000c2e:	e7b5      	b.n	8000b9c <__addsf3+0x58>
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d021      	beq.n	8000c84 <__addsf3+0x140>
 8000c40:	ea92 0f03 	teq	r2, r3
 8000c44:	d004      	beq.n	8000c50 <__addsf3+0x10c>
 8000c46:	f092 0f00 	teq	r2, #0
 8000c4a:	bf08      	it	eq
 8000c4c:	4608      	moveq	r0, r1
 8000c4e:	4770      	bx	lr
 8000c50:	ea90 0f01 	teq	r0, r1
 8000c54:	bf1c      	itt	ne
 8000c56:	2000      	movne	r0, #0
 8000c58:	4770      	bxne	lr
 8000c5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5e:	d104      	bne.n	8000c6a <__addsf3+0x126>
 8000c60:	0040      	lsls	r0, r0, #1
 8000c62:	bf28      	it	cs
 8000c64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6e:	bf3c      	itt	cc
 8000c70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bxcc	lr
 8000c76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	4770      	bx	lr
 8000c84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c88:	bf16      	itet	ne
 8000c8a:	4608      	movne	r0, r1
 8000c8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c90:	4601      	movne	r1, r0
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	bf06      	itte	eq
 8000c96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9a:	ea90 0f01 	teqeq	r0, r1
 8000c9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_ui2f>:
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e004      	b.n	8000cb4 <__aeabi_i2f+0x8>
 8000caa:	bf00      	nop

08000cac <__aeabi_i2f>:
 8000cac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb0:	bf48      	it	mi
 8000cb2:	4240      	negmi	r0, r0
 8000cb4:	ea5f 0c00 	movs.w	ip, r0
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	e01c      	b.n	8000d02 <__aeabi_l2f+0x2a>

08000cc8 <__aeabi_ul2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e00a      	b.n	8000cec <__aeabi_l2f+0x14>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_l2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_l2f+0x14>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	ea5f 0c01 	movs.w	ip, r1
 8000cf0:	bf02      	ittt	eq
 8000cf2:	4684      	moveq	ip, r0
 8000cf4:	4601      	moveq	r1, r0
 8000cf6:	2000      	moveq	r0, #0
 8000cf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cfc:	bf08      	it	eq
 8000cfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d06:	fabc f28c 	clz	r2, ip
 8000d0a:	3a08      	subs	r2, #8
 8000d0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d10:	db10      	blt.n	8000d34 <__aeabi_l2f+0x5c>
 8000d12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d16:	4463      	add	r3, ip
 8000d18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d24:	fa20 f202 	lsr.w	r2, r0, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	f020 0001 	biceq.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	f102 0220 	add.w	r2, r2, #32
 8000d38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d44:	fa21 f202 	lsr.w	r2, r1, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_fmul>:
 8000d54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d62:	ea92 0f0c 	teqne	r2, ip
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d06f      	beq.n	8000e4c <__aeabi_fmul+0xf8>
 8000d6c:	441a      	add	r2, r3
 8000d6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d72:	0240      	lsls	r0, r0, #9
 8000d74:	bf18      	it	ne
 8000d76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7a:	d01e      	beq.n	8000dba <__aeabi_fmul+0x66>
 8000d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d88:	fba0 3101 	umull	r3, r1, r0, r1
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d94:	bf3e      	ittt	cc
 8000d96:	0049      	lslcc	r1, r1, #1
 8000d98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	ea40 0001 	orr.w	r0, r0, r1
 8000da2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da6:	2afd      	cmp	r2, #253	; 0xfd
 8000da8:	d81d      	bhi.n	8000de6 <__aeabi_fmul+0x92>
 8000daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db2:	bf08      	it	eq
 8000db4:	f020 0001 	biceq.w	r0, r0, #1
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	0249      	lsleq	r1, r1, #9
 8000dc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dce:	3a7f      	subs	r2, #127	; 0x7f
 8000dd0:	bfc2      	ittt	gt
 8000dd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dda:	4770      	bxgt	lr
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	3a01      	subs	r2, #1
 8000de6:	dc5d      	bgt.n	8000ea4 <__aeabi_fmul+0x150>
 8000de8:	f112 0f19 	cmn.w	r2, #25
 8000dec:	bfdc      	itt	le
 8000dee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	4770      	bxle	lr
 8000df4:	f1c2 0200 	rsb	r2, r2, #0
 8000df8:	0041      	lsls	r1, r0, #1
 8000dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfe:	f1c2 0220 	rsb	r2, r2, #32
 8000e02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0a:	f140 0000 	adc.w	r0, r0, #0
 8000e0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e12:	bf08      	it	eq
 8000e14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e18:	4770      	bx	lr
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xce>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xe6>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e78f      	b.n	8000d6c <__aeabi_fmul+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	bf18      	it	ne
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d00a      	beq.n	8000e72 <__aeabi_fmul+0x11e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1d8      	bne.n	8000e1a <__aeabi_fmul+0xc6>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	bf17      	itett	ne
 8000e78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	f091 0f00 	teqne	r1, #0
 8000e82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e86:	d014      	beq.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_fmul+0x13e>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d10f      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e92:	ea93 0f0c 	teq	r3, ip
 8000e96:	d103      	bne.n	8000ea0 <__aeabi_fmul+0x14c>
 8000e98:	024b      	lsls	r3, r1, #9
 8000e9a:	bf18      	it	ne
 8000e9c:	4608      	movne	r0, r1
 8000e9e:	d108      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ea0:	ea80 0001 	eor.w	r0, r0, r1
 8000ea4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	4770      	bx	lr
 8000eb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_fdiv>:
 8000ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec4:	bf1e      	ittt	ne
 8000ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eca:	ea92 0f0c 	teqne	r2, ip
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d069      	beq.n	8000fa8 <__aeabi_fdiv+0xec>
 8000ed4:	eba2 0203 	sub.w	r2, r2, r3
 8000ed8:	ea80 0c01 	eor.w	ip, r0, r1
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee2:	d037      	beq.n	8000f54 <__aeabi_fdiv+0x98>
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	bf38      	it	cc
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f02:	428b      	cmp	r3, r1
 8000f04:	bf24      	itt	cs
 8000f06:	1a5b      	subcs	r3, r3, r1
 8000f08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1e:	bf24      	itt	cs
 8000f20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f2c:	bf24      	itt	cs
 8000f2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	bf18      	it	ne
 8000f3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3e:	d1e0      	bne.n	8000f02 <__aeabi_fdiv+0x46>
 8000f40:	2afd      	cmp	r2, #253	; 0xfd
 8000f42:	f63f af50 	bhi.w	8000de6 <__aeabi_fmul+0x92>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f4c:	bf08      	it	eq
 8000f4e:	f020 0001 	biceq.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5c:	327f      	adds	r2, #127	; 0x7f
 8000f5e:	bfc2      	ittt	gt
 8000f60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f68:	4770      	bxgt	lr
 8000f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	3a01      	subs	r2, #1
 8000f74:	e737      	b.n	8000de6 <__aeabi_fmul+0x92>
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xc2>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xda>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e795      	b.n	8000ed4 <__aeabi_fdiv+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d108      	bne.n	8000fc4 <__aeabi_fdiv+0x108>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	f47f af7d 	bne.w	8000eb2 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	f47f af70 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e776      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_fdiv+0x118>
 8000fca:	024b      	lsls	r3, r1, #9
 8000fcc:	f43f af4c 	beq.w	8000e68 <__aeabi_fmul+0x114>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e76e      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd8:	bf18      	it	ne
 8000fda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fde:	d1ca      	bne.n	8000f76 <__aeabi_fdiv+0xba>
 8000fe0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe4:	f47f af5c 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fe8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fec:	f47f af3c 	bne.w	8000e68 <__aeabi_fmul+0x114>
 8000ff0:	e75f      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ff2:	bf00      	nop

08000ff4 <__gesf2>:
 8000ff4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff8:	e006      	b.n	8001008 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__lesf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	e002      	b.n	8001008 <__cmpsf2+0x4>
 8001002:	bf00      	nop

08001004 <__cmpsf2>:
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	f84d cd04 	str.w	ip, [sp, #-4]!
 800100c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001010:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	bf18      	it	ne
 800101a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800101e:	d011      	beq.n	8001044 <__cmpsf2+0x40>
 8001020:	b001      	add	sp, #4
 8001022:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001026:	bf18      	it	ne
 8001028:	ea90 0f01 	teqne	r0, r1
 800102c:	bf58      	it	pl
 800102e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001032:	bf88      	it	hi
 8001034:	17c8      	asrhi	r0, r1, #31
 8001036:	bf38      	it	cc
 8001038:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800103c:	bf18      	it	ne
 800103e:	f040 0001 	orrne.w	r0, r0, #1
 8001042:	4770      	bx	lr
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__cmpsf2+0x4c>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d105      	bne.n	800105c <__cmpsf2+0x58>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d1e4      	bne.n	8001020 <__cmpsf2+0x1c>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d0e1      	beq.n	8001020 <__cmpsf2+0x1c>
 800105c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_cfrcmple>:
 8001064:	4684      	mov	ip, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4661      	mov	r1, ip
 800106a:	e7ff      	b.n	800106c <__aeabi_cfcmpeq>

0800106c <__aeabi_cfcmpeq>:
 800106c:	b50f      	push	{r0, r1, r2, r3, lr}
 800106e:	f7ff ffc9 	bl	8001004 <__cmpsf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	bf48      	it	mi
 8001076:	f110 0f00 	cmnmi.w	r0, #0
 800107a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800107c <__aeabi_fcmpeq>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff fff4 	bl	800106c <__aeabi_cfcmpeq>
 8001084:	bf0c      	ite	eq
 8001086:	2001      	moveq	r0, #1
 8001088:	2000      	movne	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmplt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffea 	bl	800106c <__aeabi_cfcmpeq>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmple>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffe0 	bl	800106c <__aeabi_cfcmpeq>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpge>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffd2 	bl	8001064 <__aeabi_cfrcmple>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpgt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffc8 	bl	8001064 <__aeabi_cfrcmple>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_f2iz>:
 80010e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e8:	d30f      	bcc.n	800110a <__aeabi_f2iz+0x2a>
 80010ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d90d      	bls.n	8001110 <__aeabi_f2iz+0x30>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	bf18      	it	ne
 8001106:	4240      	negne	r0, r0
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr
 8001110:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001114:	d101      	bne.n	800111a <__aeabi_f2iz+0x3a>
 8001116:	0242      	lsls	r2, r0, #9
 8001118:	d105      	bne.n	8001126 <__aeabi_f2iz+0x46>
 800111a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111e:	bf08      	it	eq
 8001120:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr

0800112c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	2300      	movs	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
 800113c:	230f      	movs	r3, #15
 800113e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d038      	beq.n	80011ba <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <NVIC_Init+0xb8>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	f1c3 0304 	rsb	r3, r3, #4
 800115c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800115e:	7b7a      	ldrb	r2, [r7, #13]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	fa42 f303 	asr.w	r3, r2, r3
 8001166:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	461a      	mov	r2, r3
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	789a      	ldrb	r2, [r3, #2]
 800117a:	7b7b      	ldrb	r3, [r7, #13]
 800117c:	4013      	ands	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4313      	orrs	r3, r2
 8001184:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <NVIC_Init+0xbc>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <NVIC_Init+0xbc>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80011b8:	e00f      	b.n	80011da <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ba:	490b      	ldr	r1, [pc, #44]	; (80011e8 <NVIC_Init+0xbc>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	2201      	movs	r2, #1
 80011d0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011d2:	f100 0320 	add.w	r3, r0, #32
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	e000e100 	.word	0xe000e100

080011ec <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <DAC_SetChannel1Data+0x30>)
 80011fe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	3308      	adds	r3, #8
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	461a      	mov	r2, r3
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40007400 	.word	0x40007400

08001220 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <DMA_Init+0xa8>)
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800124a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001262:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800126e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4313      	orrs	r3, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60da      	str	r2, [r3, #12]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	f01c803f 	.word	0xf01c803f

080012cc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80012ea:	e005      	b.n	80012f8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 0201 	bic.w	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
  }
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <DMA_GetFlagStatus+0x68>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d802      	bhi.n	8001354 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <DMA_GetFlagStatus+0x6c>)
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	e001      	b.n	8001358 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <DMA_GetFlagStatus+0x70>)
 8001356:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e002      	b.n	8001370 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001376:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800137a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
 800138a:	e001      	b.n	8001390 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	4002640f 	.word	0x4002640f
 80013a0:	40026000 	.word	0x40026000
 80013a4:	40026400 	.word	0x40026400

080013a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <DMA_ClearFlag+0x50>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d802      	bhi.n	80013c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <DMA_ClearFlag+0x54>)
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e001      	b.n	80013c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <DMA_ClearFlag+0x58>)
 80013c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80013d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80013dc:	e006      	b.n	80013ec <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80013e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	6093      	str	r3, [r2, #8]
  }    
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	4002640f 	.word	0x4002640f
 80013fc:	40026000 	.word	0x40026000
 8001400:	40026400 	.word	0x40026400

08001404 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e076      	b.n	800150e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001420:	2201      	movs	r2, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d165      	bne.n	8001508 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2103      	movs	r1, #3
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	401a      	ands	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <GPIO_Init+0x76>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	791b      	ldrb	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d12e      	bne.n	80014d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2103      	movs	r1, #3
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	795b      	ldrb	r3, [r3, #5]
 8001498:	4619      	mov	r1, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	799b      	ldrb	r3, [r3, #6]
 80014c6:	4619      	mov	r1, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2103      	movs	r1, #3
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	79db      	ldrb	r3, [r3, #7]
 80014f8:	4619      	mov	r1, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d985      	bls.n	8001420 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001538:	787a      	ldrb	r2, [r7, #1]
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	210f      	movs	r1, #15
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	ea02 0103 	and.w	r1, r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f100 0208 	add.w	r2, r0, #8
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	2302      	movs	r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d007      	beq.n	80015f0 <RCC_GetClocksFreq+0x40>
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d009      	beq.n	80015f8 <RCC_GetClocksFreq+0x48>
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d13f      	bne.n	8001668 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <RCC_GetClocksFreq+0x148>)
 80015ec:	601a      	str	r2, [r3, #0]
      break;
 80015ee:	e03f      	b.n	8001670 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a42      	ldr	r2, [pc, #264]	; (80016fc <RCC_GetClocksFreq+0x14c>)
 80015f4:	601a      	str	r2, [r3, #0]
      break;
 80015f6:	e03b      	b.n	8001670 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001600:	0d9b      	lsrs	r3, r3, #22
 8001602:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001604:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00d      	beq.n	8001630 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <RCC_GetClocksFreq+0x14c>)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	fbb2 f2f3 	udiv	r2, r2, r3
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001624:	400b      	ands	r3, r1
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	fb03 f302 	mul.w	r3, r3, r2
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e00c      	b.n	800164a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001630:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <RCC_GetClocksFreq+0x148>)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	fbb2 f2f3 	udiv	r2, r2, r3
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001640:	400b      	ands	r3, r1
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	fb03 f302 	mul.w	r3, r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001652:	0c1b      	lsrs	r3, r3, #16
 8001654:	3301      	adds	r3, #1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
      break;
 8001666:	e003      	b.n	8001670 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <RCC_GetClocksFreq+0x148>)
 800166c:	601a      	str	r2, [r3, #0]
      break;
 800166e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001678:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <RCC_GetClocksFreq+0x150>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	40da      	lsrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80016a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	0a9b      	lsrs	r3, r3, #10
 80016a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80016a8:	4a15      	ldr	r2, [pc, #84]	; (8001700 <RCC_GetClocksFreq+0x150>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	40da      	lsrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <RCC_GetClocksFreq+0x144>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016c8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	0b5b      	lsrs	r3, r3, #13
 80016ce:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <RCC_GetClocksFreq+0x150>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	40da      	lsrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	20000000 	.word	0x20000000

08001704 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001716:	4909      	ldr	r1, [pc, #36]	; (800173c <RCC_AHB1PeriphClockCmd+0x38>)
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <RCC_AHB1PeriphClockCmd+0x38>)
 800171a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001722:	e006      	b.n	8001732 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001724:	4905      	ldr	r1, [pc, #20]	; (800173c <RCC_AHB1PeriphClockCmd+0x38>)
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <RCC_AHB1PeriphClockCmd+0x38>)
 8001728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	43db      	mvns	r3, r3
 800172e:	4013      	ands	r3, r2
 8001730:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40023800 	.word	0x40023800

08001740 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <RCC_APB2PeriphClockCmd+0x38>)
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <RCC_APB2PeriphClockCmd+0x38>)
 8001756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800175e:	e006      	b.n	800176e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001760:	4905      	ldr	r1, [pc, #20]	; (8001778 <RCC_APB2PeriphClockCmd+0x38>)
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <RCC_APB2PeriphClockCmd+0x38>)
 8001764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	43db      	mvns	r3, r3
 800176a:	4013      	ands	r3, r2
 800176c:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800

0800177c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001796:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8b9b      	ldrh	r3, [r3, #28]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	8a1a      	ldrh	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	821a      	strh	r2, [r3, #16]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2207      	movs	r2, #7
 8001840:	821a      	strh	r2, [r3, #16]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	819a      	strh	r2, [r3, #12]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	891b      	ldrh	r3, [r3, #8]
 800187c:	b29a      	uxth	r2, r3
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	4013      	ands	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	8a1b      	ldrh	r3, [r3, #16]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	88db      	ldrh	r3, [r3, #6]
 80018ce:	461a      	mov	r2, r3
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	4313      	orrs	r3, r2
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	899b      	ldrh	r3, [r3, #12]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018ec:	f023 030c 	bic.w	r3, r3, #12
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	889a      	ldrh	r2, [r3, #4]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	891b      	ldrh	r3, [r3, #8]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001902:	4313      	orrs	r3, r2
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	4313      	orrs	r3, r2
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8a9b      	ldrh	r3, [r3, #20]
 800191a:	b29b      	uxth	r3, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	899b      	ldrh	r3, [r3, #12]
 800192a:	461a      	mov	r2, r3
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	4313      	orrs	r3, r2
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe36 	bl	80015b0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <USART_Init+0x168>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d003      	beq.n	8001954 <USART_Init+0xb4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <USART_Init+0x16c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	e001      	b.n	800195e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	899b      	ldrh	r3, [r3, #12]
 8001962:	b29b      	uxth	r3, r3
 8001964:	b21b      	sxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	da0c      	bge.n	8001984 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009a      	lsls	r2, r3, #2
 8001974:	441a      	add	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e00b      	b.n	800199c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001984:	6a3a      	ldr	r2, [r7, #32]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009a      	lsls	r2, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <USART_Init+0x170>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	2264      	movs	r2, #100	; 0x64
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	899b      	ldrh	r3, [r3, #12]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da0c      	bge.n	80019e0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	3332      	adds	r3, #50	; 0x32
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <USART_Init+0x170>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	4313      	orrs	r3, r2
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	e00b      	b.n	80019f8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	3332      	adds	r3, #50	; 0x32
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <USART_Init+0x170>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	4313      	orrs	r3, r2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	811a      	strh	r2, [r3, #8]
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	51eb851f 	.word	0x51eb851f

08001a14 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	899b      	ldrh	r3, [r3, #12]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a36:	e007      	b.n	8001a48 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	899b      	ldrh	r3, [r3, #12]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	819a      	strh	r2, [r3, #12]
  }
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	809a      	strh	r2, [r3, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d103      	bne.n	8001ac6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d103      	bne.n	8001ad4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3310      	adds	r3, #16
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e002      	b.n	8001ada <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001aec:	e006      	b.n	8001afc <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	43d2      	mvns	r2, r2
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
  }
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	899b      	ldrh	r3, [r3, #12]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e011      	b.n	8001b7a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d107      	bne.n	8001b6c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	8a1b      	ldrh	r3, [r3, #16]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	4013      	ands	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e006      	b.n	8001b7a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8a9b      	ldrh	r3, [r3, #20]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4013      	ands	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001b82:	2201      	movs	r2, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <USART_GetITStatus+0xa4>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	74fb      	strb	r3, [r7, #19]
 8001baa:	e001      	b.n	8001bb0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <Audio_MAL_IRQHandler+0xe8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f7ff fbb2 	bl	8001334 <DMA_GetFlagStatus>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d062      	beq.n	8001c9c <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d04a      	beq.n	8001c74 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001bde:	bf00      	nop
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb8d 	bl	8001304 <DMA_GetCmdStatus>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f7      	bne.n	8001be0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <Audio_MAL_IRQHandler+0xe8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7ff fbd4 	bl	80013a8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <Audio_MAL_IRQHandler+0xf0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <Audio_MAL_IRQHandler+0xf4>)
 8001c08:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c12:	4293      	cmp	r3, r2
 8001c14:	bf28      	it	cs
 8001c16:	4613      	movcs	r3, r2
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <Audio_MAL_IRQHandler+0xf4>)
 8001c1a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <Audio_MAL_IRQHandler+0xf4>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fafc 	bl	8001220 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fb4c 	bl	80012cc <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <Audio_MAL_IRQHandler+0xf0>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c40:	428b      	cmp	r3, r1
 8001c42:	bf28      	it	cs
 8001c44:	460b      	movcs	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <Audio_MAL_IRQHandler+0xf0>)
 8001c4c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c5a:	428b      	cmp	r3, r1
 8001c5c:	bf28      	it	cs
 8001c5e:	460b      	movcs	r3, r1
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <Audio_MAL_IRQHandler+0xec>)
 8001c64:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb2d 	bl	80012cc <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001c72:	e013      	b.n	8001c9c <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb26 	bl	80012cc <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <Audio_MAL_IRQHandler+0xe4>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <Audio_MAL_IRQHandler+0xe8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f7ff fb8c 	bl	80013a8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <Audio_MAL_IRQHandler+0xf0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fbc6 	bl	8004428 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000018 	.word	0x20000018
 8001ca4:	2000001c 	.word	0x2000001c
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	20000580 	.word	0x20000580
 8001cb0:	200005c0 	.word	0x200005c0

08001cb4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001cb8:	f7ff ff80 	bl	8001bbc <Audio_MAL_IRQHandler>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001cc4:	f7ff ff7a 	bl	8001bbc <Audio_MAL_IRQHandler>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <SPI3_IRQHandler+0x3c>)
 8001cd4:	f7ff fdc8 	bl	8001868 <SPI_I2S_GetFlagStatus>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d011      	beq.n	8001d02 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <SPI3_IRQHandler+0x40>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d106      	bne.n	8001cf4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001ce6:	f002 fba9 	bl	800443c <EVAL_AUDIO_GetSampleCallBack>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	2004      	movs	r0, #4
 8001cf0:	f7ff fa7c 	bl	80011ec <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001cf4:	f002 fba2 	bl	800443c <EVAL_AUDIO_GetSampleCallBack>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <SPI3_IRQHandler+0x3c>)
 8001cfe:	f7ff fda5 	bl	800184c <SPI_I2S_SendData>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40003c00 	.word	0x40003c00
 8001d0c:	20000014 	.word	0x20000014

08001d10 <init_USART1>:
/* This funcion initializes the USART1 peripheral
 *
 * Arguments: baudrate --> the baudrate at which the USART is
 * 						   supposed to operate
 */
void init_USART1(uint32_t baudrate){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2010      	movs	r0, #16
 8001d1c:	f7ff fd10 	bl	8001740 <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d20:	2101      	movs	r1, #1
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff fcee 	bl	8001704 <RCC_AHB1PeriphClockCmd>

	/* This sequence sets up the TX and RX pins
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 8001d32:	2302      	movs	r3, #2
 8001d34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481d      	ldr	r0, [pc, #116]	; (8001dc0 <init_USART1+0xb0>)
 8001d4c:	f7ff fb5a 	bl	8001404 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 8001d50:	2207      	movs	r2, #7
 8001d52:	2106      	movs	r1, #6
 8001d54:	481a      	ldr	r0, [pc, #104]	; (8001dc0 <init_USART1+0xb0>)
 8001d56:	f7ff fbe3 	bl	8001520 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <init_USART1+0xb0>)
 8001d60:	f7ff fbde 	bl	8001520 <GPIO_PinAFConfig>

	/* Now the USART_InitStruct is used to define the
	 * properties of USART1
	 */
	USART_InitStruct.USART_BaudRate = baudrate;				// the baudrate is set to the value we passed into this init function
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001d70:	2300      	movs	r3, #0
 8001d72:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001d74:	2300      	movs	r3, #0
 8001d76:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001d78:	230c      	movs	r3, #12
 8001d7a:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <init_USART1+0xb4>)
 8001d84:	f7ff fd8c 	bl	80018a0 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f240 5125 	movw	r1, #1317	; 0x525
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <init_USART1+0xb4>)
 8001d90:	f7ff fe72 	bl	8001a78 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 8001d94:	2325      	movs	r3, #37	; 0x25
 8001d96:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
 8001d98:	2300      	movs	r3, #0
 8001d9a:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f9bf 	bl	800112c <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8001dae:	2101      	movs	r1, #1
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <init_USART1+0xb4>)
 8001db2:	f7ff fe2f 	bl	8001a14 <USART_Cmd>
}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40011000 	.word	0x40011000

08001dc8 <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]

	while(*s){
 8001dd2:	e013      	b.n	8001dfc <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8001dd4:	bf00      	nop
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f8      	beq.n	8001dd6 <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fe30 	bl	8001a54 <USART_SendData>
		*s++;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	603a      	str	r2, [r7, #0]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e6      	bne.n	8001dd4 <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8001e16:	f240 5125 	movw	r1, #1317	; 0x525
 8001e1a:	4814      	ldr	r0, [pc, #80]	; (8001e6c <USART1_IRQHandler+0x5c>)
 8001e1c:	f7ff fe74 	bl	8001b08 <USART_GetITStatus>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01e      	beq.n	8001e64 <USART1_IRQHandler+0x54>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <USART1_IRQHandler+0x5c>)
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b0a      	cmp	r3, #10
 8001e32:	d010      	beq.n	8001e56 <USART1_IRQHandler+0x46>
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <USART1_IRQHandler+0x60>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b0b      	cmp	r3, #11
 8001e3a:	d80c      	bhi.n	8001e56 <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <USART1_IRQHandler+0x60>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <USART1_IRQHandler+0x64>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	5453      	strb	r3, [r2, r1]
			cnt++;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <USART1_IRQHandler+0x60>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <USART1_IRQHandler+0x60>)
 8001e52:	701a      	strb	r2, [r3, #0]
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}
 8001e54:	e006      	b.n	8001e64 <USART1_IRQHandler+0x54>
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <USART1_IRQHandler+0x60>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
			USART_puts(USART1, received_string);
 8001e5c:	4905      	ldr	r1, [pc, #20]	; (8001e74 <USART1_IRQHandler+0x64>)
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <USART1_IRQHandler+0x5c>)
 8001e60:	f7ff ffb2 	bl	8001dc8 <USART_puts>
		}
	}
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	20000534 	.word	0x20000534
 8001e74:	200005fc 	.word	0x200005fc

08001e78 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da0b      	bge.n	8001ea4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e8c:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <NVIC_SetPriority+0x4c>)
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	3b04      	subs	r3, #4
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001ea2:	e009      	b.n	8001eb8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001ea4:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <NVIC_SetPriority+0x50>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eda:	d301      	bcc.n	8001ee0 <SysTick_Config+0x14>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e011      	b.n	8001f04 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001eec:	210f      	movs	r1, #15
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef2:	f7ff ffc1 	bl	8001e78 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <SysTick_Config+0x40>)
 8001efe:	2207      	movs	r2, #7
 8001f00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8001f16:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <SysTick_Handler+0xe4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <SysTick_Handler+0xe4>)
 8001f1e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <SysTick_Handler+0xe8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <SysTick_Handler+0x22>
		TM_Time2--;
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <SysTick_Handler+0xe8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	4a32      	ldr	r2, [pc, #200]	; (8001ff8 <SysTick_Handler+0xe8>)
 8001f30:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001f32:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e052      	b.n	8001fe2 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <SysTick_Handler+0xec>)
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d048      	beq.n	8001fdc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <SysTick_Handler+0xec>)
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d040      	beq.n	8001fdc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <SysTick_Handler+0xec>)
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d038      	beq.n	8001fdc <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <SysTick_Handler+0xec>)
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	3a01      	subs	r2, #1
 8001f78:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <SysTick_Handler+0xec>)
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d128      	bne.n	8001fdc <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <SysTick_Handler+0xec>)
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4918      	ldr	r1, [pc, #96]	; (8001ffc <SysTick_Handler+0xec>)
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <SysTick_Handler+0xec>)
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4912      	ldr	r1, [pc, #72]	; (8001ffc <SysTick_Handler+0xec>)
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <SysTick_Handler+0xec>)
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Handler+0xec>)
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <SysTick_Handler+0xec>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3a7      	bcc.n	8001f3c <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000538 	.word	0x20000538
 8001ff8:	2000053c 	.word	0x2000053c
 8001ffc:	20000544 	.word	0x20000544

08002000 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <TM_DELAY_Init+0x3c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <TM_DELAY_Init+0x40>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5b 	bl	8001ecc <SysTick_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d000      	beq.n	800201e <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 800201c:	e7fe      	b.n	800201c <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <TM_DELAY_Init+0x3c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <TM_DELAY_Init+0x44>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <TM_DELAY_Init+0x48>)
 800202e:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <TM_DELAY_Init+0x4c>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000020 	.word	0x20000020
 8002040:	10624dd3 	.word	0x10624dd3
 8002044:	02659117 	.word	0x02659117
 8002048:	2000060c 	.word	0x2000060c
 800204c:	20000540 	.word	0x20000540

08002050 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8002056:	2303      	movs	r3, #3
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2201      	movs	r2, #1
 8002062:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <TM_DISCO_LedInit+0x2c>)
 8002068:	f000 f81c 	bl	80020a4 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <TM_DISCO_LedInit+0x2c>)
 800206e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002072:	835a      	strh	r2, [r3, #26]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020c00 	.word	0x40020c00

08002080 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 8002086:	2300      	movs	r3, #0
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2200      	movs	r2, #0
 8002092:	2101      	movs	r1, #1
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TM_DISCO_ButtonInit+0x20>)
 8002096:	f000 f805 	bl	80020a4 <TM_GPIO_Init>
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020000 	.word	0x40020000

080020a4 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	807b      	strh	r3, [r7, #2]
 80020b6:	460b      	mov	r3, r1
 80020b8:	707b      	strb	r3, [r7, #1]
 80020ba:	4613      	mov	r3, r2
 80020bc:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f875 	bl	80021b4 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80020ca:	7838      	ldrb	r0, [r7, #0]
 80020cc:	787a      	ldrb	r2, [r7, #1]
 80020ce:	8879      	ldrh	r1, [r7, #2]
 80020d0:	7d3b      	ldrb	r3, [r7, #20]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	7c3b      	ldrb	r3, [r7, #16]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4603      	mov	r3, r0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f882 	bl	80021e4 <TM_GPIO_INT_Init>
 80020e0:	e000      	b.n	80020e4 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 80020e2:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop

080020ec <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	4608      	mov	r0, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	807b      	strh	r3, [r7, #2]
 80020fe:	460b      	mov	r3, r1
 8002100:	707b      	strb	r3, [r7, #1]
 8002102:	4613      	mov	r3, r2
 8002104:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03e      	beq.n	800218a <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f851 	bl	80021b4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e029      	b.n	800216c <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	fa42 f303 	asr.w	r3, r2, r3
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01d      	beq.n	8002164 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	08d9      	lsrs	r1, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3108      	adds	r1, #8
 8002134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	f001 0107 	and.w	r1, r1, #7
 800213e:	0089      	lsls	r1, r1, #2
 8002140:	200f      	movs	r0, #15
 8002142:	fa00 f101 	lsl.w	r1, r0, r1
 8002146:	43c9      	mvns	r1, r1
 8002148:	400b      	ands	r3, r1
 800214a:	7f38      	ldrb	r0, [r7, #28]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	f001 0107 	and.w	r1, r1, #7
 8002152:	0089      	lsls	r1, r1, #2
 8002154:	fa00 f101 	lsl.w	r1, r0, r1
 8002158:	4319      	orrs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002162:	e000      	b.n	8002166 <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8002164:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d9d2      	bls.n	8002118 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002172:	787a      	ldrb	r2, [r7, #1]
 8002174:	8879      	ldrh	r1, [r7, #2]
 8002176:	7e3b      	ldrb	r3, [r7, #24]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	783b      	ldrb	r3, [r7, #0]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	2202      	movs	r2, #2
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f82e 	bl	80021e4 <TM_GPIO_INT_Init>
 8002188:	e000      	b.n	800218c <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 800218a:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80021a2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	b29b      	uxth	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffe9 	bl	8002194 <TM_GPIO_GetPortSource>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	2301      	movs	r3, #1
 80021c8:	fa03 f102 	lsl.w	r1, r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <TM_GPIO_INT_EnableClock+0x2c>)
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <TM_GPIO_INT_EnableClock+0x2c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	430b      	orrs	r3, r1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	460b      	mov	r3, r1
 80021f8:	707b      	strb	r3, [r7, #1]
 80021fa:	4613      	mov	r3, r2
 80021fc:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffc8 	bl	8002194 <TM_GPIO_GetPortSource>
 8002204:	4603      	mov	r3, r0
 8002206:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e067      	b.n	80022de <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	fa42 f303 	asr.w	r3, r2, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d05b      	beq.n	80022d6 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	7bba      	ldrb	r2, [r7, #14]
 8002222:	4932      	ldr	r1, [pc, #200]	; (80022ec <TM_GPIO_INT_Init+0x108>)
 8002224:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002228:	b211      	sxth	r1, r2
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	b212      	sxth	r2, r2
 8002234:	430a      	orrs	r2, r1
 8002236:	b212      	sxth	r2, r2
 8002238:	b291      	uxth	r1, r2
 800223a:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <TM_GPIO_INT_Init+0x108>)
 800223c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	0052      	lsls	r2, r2, #1
 8002248:	2103      	movs	r1, #3
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	43d2      	mvns	r2, r2
 8002250:	4013      	ands	r3, r2
 8002252:	7e39      	ldrb	r1, [r7, #24]
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	0052      	lsls	r2, r2, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2103      	movs	r1, #3
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4013      	ands	r3, r2
 8002274:	7879      	ldrb	r1, [r7, #1]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	0052      	lsls	r2, r2, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <TM_GPIO_INT_Init+0xac>
 800228a:	787b      	ldrb	r3, [r7, #1]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	b292      	uxth	r2, r2
 800229e:	43d2      	mvns	r2, r2
 80022a0:	401a      	ands	r2, r3
 80022a2:	7839      	ldrb	r1, [r7, #0]
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2103      	movs	r1, #3
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4013      	ands	r3, r2
 80022c4:	7f39      	ldrb	r1, [r7, #28]
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	0052      	lsls	r2, r2, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e000      	b.n	80022d8 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80022d6:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	3301      	adds	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d994      	bls.n	800220e <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000055c 	.word	0x2000055c

080022f0 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <TM_SPI_Send+0x1e>
 800230a:	2300      	movs	r3, #0
 800230c:	e025      	b.n	800235a <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800230e:	bf00      	nop
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	891b      	ldrh	r3, [r3, #8]
 8002314:	b29b      	uxth	r3, r3
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f8      	beq.n	8002310 <TM_SPI_Send+0x20>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	891b      	ldrh	r3, [r3, #8]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f1      	bne.n	8002310 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8002334:	bf00      	nop
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	891b      	ldrh	r3, [r3, #8]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f8      	beq.n	8002336 <TM_SPI_Send+0x46>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	891b      	ldrh	r3, [r3, #8]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f1      	bne.n	8002336 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	899b      	ldrh	r3, [r3, #12]
 8002356:	b29b      	uxth	r3, r3
 8002358:	b2db      	uxtb	r3, r3
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 800236a:	f000 faf5 	bl	8002958 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 800236e:	f000 f86b 	bl	8002448 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	2201      	movs	r2, #1
 8002376:	210f      	movs	r1, #15
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f8c3 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b3b      	cmp	r3, #59	; 0x3b
 8002382:	d104      	bne.n	800238e <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800238a:	2301      	movs	r3, #1
 800238c:	e008      	b.n	80023a0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b3f      	cmp	r3, #63	; 0x3f
 8002392:	d104      	bne.n	800239e <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8002396:	2202      	movs	r2, #2
 8002398:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 800239a:	2302      	movs	r3, #2
 800239c:	e000      	b.n	80023a0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000572 	.word	0x20000572

080023ac <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80023bc:	f000 f844 	bl	8002448 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 80023c0:	f000 faca 	bl	8002958 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80023c4:	f7ff ffce 	bl	8002364 <TM_LIS302DL_LIS3DSH_Detect>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 80023ce:	79ba      	ldrb	r2, [r7, #6]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f945 	bl	8002664 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80023da:	2301      	movs	r3, #1
 80023dc:	e010      	b.n	8002400 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80023de:	f7ff ffc1 	bl	8002364 <TM_LIS302DL_LIS3DSH_Detect>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d107      	bne.n	80023f8 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 80023e8:	79ba      	ldrb	r2, [r7, #6]
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8b4 	bl	800255c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80023f4:	2302      	movs	r3, #2
 80023f6:	e003      	b.n	8002400 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000572 	.word	0x20000572

0800240c <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d104      	bne.n	8002426 <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa2f 	bl	8002880 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8002422:	2301      	movs	r3, #1
 8002424:	e009      	b.n	800243a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d104      	bne.n	8002438 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f996 	bl	8002760 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8002434:	2302      	movs	r3, #2
 8002436:	e000      	b.n	800243a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000572 	.word	0x20000572

08002448 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8002456:	2100      	movs	r1, #0
 8002458:	4811      	ldr	r0, [pc, #68]	; (80024a0 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 800245a:	f000 fa8f 	bl	800297c <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 800245e:	2101      	movs	r1, #1
 8002460:	2010      	movs	r0, #16
 8002462:	f7ff f94f 	bl	8001704 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 8002466:	2308      	movs	r3, #8
 8002468:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800246a:	2301      	movs	r3, #1
 800246c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800246e:	2300      	movs	r3, #0
 8002470:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002472:	2301      	movs	r3, #1
 8002474:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8002476:	2301      	movs	r3, #1
 8002478:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 800247a:	463b      	mov	r3, r7
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8002480:	f7fe ffc0 	bl	8001404 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8002486:	2208      	movs	r2, #8
 8002488:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e000      	b.n	8002494 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 8002492:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000573 	.word	0x20000573
 80024a0:	40013000 	.word	0x40013000
 80024a4:	40021000 	.word	0x40021000

080024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
 80024b4:	4613      	mov	r3, r2
 80024b6:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80024ba:	2208      	movs	r2, #8
 80024bc:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80024be:	78bb      	ldrb	r3, [r7, #2]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d907      	bls.n	80024d4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d103      	bne.n	80024d4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	4619      	mov	r1, r3
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80024da:	f7ff ff09 	bl	80022f0 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 80024de:	78bb      	ldrb	r3, [r7, #2]
 80024e0:	461a      	mov	r2, r3
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4806      	ldr	r0, [pc, #24]	; (8002500 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80024e6:	f000 fab9 	bl	8002a5c <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80024ec:	2208      	movs	r2, #8
 80024ee:	831a      	strh	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	20000572 	.word	0x20000572
 8002500:	40013000 	.word	0x40013000

08002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
 8002510:	4613      	mov	r3, r2
 8002512:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8002516:	2208      	movs	r2, #8
 8002518:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002520:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8002522:	78bb      	ldrb	r3, [r7, #2]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d903      	bls.n	8002530 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	4619      	mov	r1, r3
 8002534:	4808      	ldr	r0, [pc, #32]	; (8002558 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8002536:	f7ff fedb 	bl	80022f0 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8002542:	f000 facf 	bl	8002ae4 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8002548:	2208      	movs	r2, #8
 800254a:	831a      	strh	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40013000 	.word	0x40013000

0800255c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	460a      	mov	r2, r1
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	4613      	mov	r3, r2
 800256a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 800256c:	2367      	movs	r3, #103	; 0x67
 800256e:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002576:	4b35      	ldr	r3, [pc, #212]	; (800264c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8002578:	4a35      	ldr	r2, [pc, #212]	; (8002650 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e02a      	b.n	80025d4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800258e:	4a31      	ldr	r2, [pc, #196]	; (8002654 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e01f      	b.n	80025d4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80025a4:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e014      	b.n	80025d4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d107      	bne.n	80025c0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 80025b0:	89fb      	ldrh	r3, [r7, #14]
 80025b2:	f043 0318 	orr.w	r3, r3, #24
 80025b6:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80025ba:	4a28      	ldr	r2, [pc, #160]	; (800265c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e009      	b.n	80025d4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d13b      	bne.n	800263e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	f043 0320 	orr.w	r3, r3, #32
 80025cc:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80025d0:	4a23      	ldr	r2, [pc, #140]	; (8002660 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 80025d2:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01a      	beq.n	8002610 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d104      	bne.n	80025ea <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e6:	81fb      	strh	r3, [r7, #14]
 80025e8:	e012      	b.n	8002610 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d106      	bne.n	80025fe <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	e008      	b.n	8002610 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d11e      	bne.n	8002642 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800260a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800260e:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8002616:	f107 030d 	add.w	r3, r7, #13
 800261a:	2201      	movs	r2, #1
 800261c:	2120      	movs	r1, #32
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff42 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 800262e:	f107 030d 	add.w	r3, r7, #13
 8002632:	2201      	movs	r2, #1
 8002634:	2124      	movs	r1, #36	; 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff36 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 800263c:	e002      	b.n	8002644 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8002642:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000610 	.word	0x20000610
 8002650:	3d75c28f 	.word	0x3d75c28f
 8002654:	3df5c28f 	.word	0x3df5c28f
 8002658:	3e3851ec 	.word	0x3e3851ec
 800265c:	3e75c28f 	.word	0x3e75c28f
 8002660:	3f3ae148 	.word	0x3f3ae148

08002664 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	460a      	mov	r2, r1
 800266e:	71fb      	strb	r3, [r7, #7]
 8002670:	4613      	mov	r3, r2
 8002672:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002674:	f107 030e 	add.w	r3, r7, #14
 8002678:	2201      	movs	r2, #1
 800267a:	2121      	movs	r1, #33	; 0x21
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff41 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002688:	b29b      	uxth	r3, r3
 800268a:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800268c:	f107 030e 	add.w	r3, r7, #14
 8002690:	2201      	movs	r2, #1
 8002692:	2121      	movs	r1, #33	; 0x21
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff07 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 800269a:	2347      	movs	r3, #71	; 0x47
 800269c:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d105      	bne.n	80026b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e00a      	b.n	80026c6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d147      	bne.n	8002746 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	f043 0320 	orr.w	r3, r3, #32
 80026bc:	b29b      	uxth	r3, r3
 80026be:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 80026c4:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80026c6:	f107 030e 	add.w	r3, r7, #14
 80026ca:	2201      	movs	r2, #1
 80026cc:	2120      	movs	r1, #32
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff feea 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80026d4:	f107 030e 	add.w	r3, r7, #14
 80026d8:	2201      	movs	r2, #1
 80026da:	2121      	movs	r1, #33	; 0x21
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fee3 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 80026e2:	89fb      	ldrh	r3, [r7, #14]
 80026e4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 80026ec:	89fb      	ldrh	r3, [r7, #14]
 80026ee:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d102      	bne.n	8002702 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 80026fc:	89fb      	ldrh	r3, [r7, #14]
 80026fe:	81fb      	strh	r3, [r7, #14]
 8002700:	e019      	b.n	8002736 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d105      	bne.n	8002714 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	81fb      	strh	r3, [r7, #14]
 8002712:	e010      	b.n	8002736 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d105      	bne.n	8002726 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	b29b      	uxth	r3, r3
 8002722:	81fb      	strh	r3, [r7, #14]
 8002724:	e007      	b.n	8002736 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	2b07      	cmp	r3, #7
 800272a:	d10e      	bne.n	800274a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 800272c:	89fb      	ldrh	r3, [r7, #14]
 800272e:	f043 0303 	orr.w	r3, r3, #3
 8002732:	b29b      	uxth	r3, r3
 8002734:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002736:	f107 030e 	add.w	r3, r7, #14
 800273a:	2201      	movs	r2, #1
 800273c:	2121      	movs	r1, #33	; 0x21
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff feb2 	bl	80024a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8002744:	e002      	b.n	800274c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 800274a:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000610 	.word	0x20000610
 8002758:	41900000 	.word	0x41900000
 800275c:	42900000 	.word	0x42900000

08002760 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	2201      	movs	r2, #1
 800276e:	2128      	movs	r1, #40	; 0x28
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fec7 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	3301      	adds	r3, #1
 800277c:	2201      	movs	r2, #1
 800277e:	2129      	movs	r1, #41	; 0x29
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff febf 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	3302      	adds	r3, #2
 800278c:	2201      	movs	r2, #1
 800278e:	212a      	movs	r1, #42	; 0x2a
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff feb7 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	3303      	adds	r3, #3
 800279c:	2201      	movs	r2, #1
 800279e:	212b      	movs	r1, #43	; 0x2b
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff feaf 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	3304      	adds	r3, #4
 80027ac:	2201      	movs	r2, #1
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fea7 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	3305      	adds	r3, #5
 80027bc:	2201      	movs	r2, #1
 80027be:	212d      	movs	r1, #45	; 0x2d
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe9f 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 80027c6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b21b      	sxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa65 	bl	8000cac <__aeabi_i2f>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f7fe fab2 	bl	8000d54 <__aeabi_fmul>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fc74 	bl	80010e0 <__aeabi_f2iz>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8002800:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002804:	b29b      	uxth	r3, r3
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b29a      	uxth	r2, r3
 800280a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4413      	add	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	b21b      	sxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fa48 	bl	8000cac <__aeabi_i2f>
 800281c:	4602      	mov	r2, r0
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7fe fa95 	bl	8000d54 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fc57 	bl	80010e0 <__aeabi_f2iz>
 8002832:	4603      	mov	r3, r0
 8002834:	b21a      	sxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 800283a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800283e:	b29b      	uxth	r3, r3
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b29a      	uxth	r2, r3
 8002844:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	b21b      	sxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fa2b 	bl	8000cac <__aeabi_i2f>
 8002856:	4602      	mov	r2, r0
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7fe fa78 	bl	8000d54 <__aeabi_fmul>
 8002864:	4603      	mov	r3, r0
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc3a 	bl	80010e0 <__aeabi_f2iz>
 800286c:	4603      	mov	r3, r0
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	809a      	strh	r2, [r3, #4]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000610 	.word	0x20000610

08002880 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	2201      	movs	r2, #1
 800288e:	2129      	movs	r1, #41	; 0x29
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fe37 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	3301      	adds	r3, #1
 800289c:	2201      	movs	r2, #1
 800289e:	212b      	movs	r1, #43	; 0x2b
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe2f 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	3302      	adds	r3, #2
 80028ac:	2201      	movs	r2, #1
 80028ae:	212d      	movs	r1, #45	; 0x2d
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fe27 	bl	8002504 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 80028b6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f9f6 	bl	8000cac <__aeabi_i2f>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7fe fa43 	bl	8000d54 <__aeabi_fmul>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fc05 	bl	80010e0 <__aeabi_f2iz>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b21a      	sxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 80028de:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe f9e2 	bl	8000cac <__aeabi_i2f>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7fe fa2f 	bl	8000d54 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fbf1 	bl	80010e0 <__aeabi_f2iz>
 80028fe:	4603      	mov	r3, r0
 8002900:	b21a      	sxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 8002906:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f9ce 	bl	8000cac <__aeabi_i2f>
 8002910:	4602      	mov	r2, r0
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7fe fa1b 	bl	8000d54 <__aeabi_fmul>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fbdd 	bl	80010e0 <__aeabi_f2iz>
 8002926:	4603      	mov	r3, r0
 8002928:	b21a      	sxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	425b      	negs	r3, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	b21a      	sxth	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	801a      	strh	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000610 	.word	0x20000610

08002958 <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 8002960:	607b      	str	r3, [r7, #4]
	while (delay--);
 8002962:	bf00      	nop
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1fa      	bne.n	8002964 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	000f4240 	.word	0x000f4240

0800297c <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af02      	add	r7, sp, #8
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <TM_SPI_Init+0xc8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d10a      	bne.n	80029a6 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8002990:	78f9      	ldrb	r1, [r7, #3]
 8002992:	2300      	movs	r3, #0
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	f44f 7382 	mov.w	r3, #260	; 0x104
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2320      	movs	r3, #32
 800299e:	2200      	movs	r2, #0
 80029a0:	4828      	ldr	r0, [pc, #160]	; (8002a44 <TM_SPI_Init+0xc8>)
 80029a2:	f000 f8f5 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <TM_SPI_Init+0xcc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10a      	bne.n	80029c4 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 80029ae:	78f9      	ldrb	r1, [r7, #3]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2320      	movs	r3, #32
 80029bc:	2200      	movs	r2, #0
 80029be:	4822      	ldr	r0, [pc, #136]	; (8002a48 <TM_SPI_Init+0xcc>)
 80029c0:	f000 f8e6 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <TM_SPI_Init+0xd0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10a      	bne.n	80029e2 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 80029cc:	78f9      	ldrb	r1, [r7, #3]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2320      	movs	r3, #32
 80029da:	2200      	movs	r2, #0
 80029dc:	481b      	ldr	r0, [pc, #108]	; (8002a4c <TM_SPI_Init+0xd0>)
 80029de:	f000 f8d7 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <TM_SPI_Init+0xd4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10a      	bne.n	8002a00 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 80029ea:	78f9      	ldrb	r1, [r7, #3]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2320      	movs	r3, #32
 80029f8:	2200      	movs	r2, #0
 80029fa:	4815      	ldr	r0, [pc, #84]	; (8002a50 <TM_SPI_Init+0xd4>)
 80029fc:	f000 f8c8 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <TM_SPI_Init+0xd8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10a      	bne.n	8002a1e <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8002a08:	78f9      	ldrb	r1, [r7, #3]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2320      	movs	r3, #32
 8002a16:	2200      	movs	r2, #0
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <TM_SPI_Init+0xd8>)
 8002a1a:	f000 f8b9 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <TM_SPI_Init+0xdc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10a      	bne.n	8002a3c <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8002a26:	78f9      	ldrb	r1, [r7, #3]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2320      	movs	r3, #32
 8002a34:	2200      	movs	r2, #0
 8002a36:	4808      	ldr	r0, [pc, #32]	; (8002a58 <TM_SPI_Init+0xdc>)
 8002a38:	f000 f8aa 	bl	8002b90 <TM_SPIx_Init>
	}
#endif
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40013000 	.word	0x40013000
 8002a48:	40003800 	.word	0x40003800
 8002a4c:	40003c00 	.word	0x40003c00
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40015000 	.word	0x40015000
 8002a58:	40015400 	.word	0x40015400

08002a5c <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d031      	beq.n	8002ada <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002a76:	bf00      	nop
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	891b      	ldrh	r3, [r3, #8]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f8      	beq.n	8002a78 <TM_SPI_WriteMulti+0x1c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	891b      	ldrh	r3, [r3, #8]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f1      	bne.n	8002a78 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e01a      	b.n	8002ad0 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002aa8:	bf00      	nop
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	891b      	ldrh	r3, [r3, #8]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f8      	beq.n	8002aaa <TM_SPI_WriteMulti+0x4e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	891b      	ldrh	r3, [r3, #8]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f1      	bne.n	8002aaa <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3e0      	bcc.n	8002a9a <TM_SPI_WriteMulti+0x3e>
 8002ad8:	e000      	b.n	8002adc <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002ada:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d034      	beq.n	8002b6c <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002b02:	bf00      	nop
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	891b      	ldrh	r3, [r3, #8]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f8      	beq.n	8002b04 <TM_SPI_ReadMulti+0x20>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	891b      	ldrh	r3, [r3, #8]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f1      	bne.n	8002b04 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e01d      	b.n	8002b62 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002b2e:	bf00      	nop
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	891b      	ldrh	r3, [r3, #8]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f8      	beq.n	8002b30 <TM_SPI_ReadMulti+0x4c>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	891b      	ldrh	r3, [r3, #8]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f1      	bne.n	8002b30 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	8992      	ldrh	r2, [r2, #12]
 8002b56:	b292      	uxth	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d3dd      	bcc.n	8002b26 <TM_SPI_ReadMulti+0x42>
 8002b6a:	e000      	b.n	8002b6e <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002b6c:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70bb      	strb	r3, [r7, #2]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fe28 	bl	8001804 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <TM_SPIx_Init+0x16c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10b      	bne.n	8002bd4 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f8a4 	bl	8002d18 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <TM_SPIx_Init+0x174>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10b      	bne.n	8002bf4 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002bdc:	4a48      	ldr	r2, [pc, #288]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f8c4 	bl	8002d78 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <TM_SPIx_Init+0x178>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10b      	bne.n	8002c14 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002bfc:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f900 	bl	8002e10 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3d      	ldr	r2, [pc, #244]	; (8002d0c <TM_SPIx_Init+0x17c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10b      	bne.n	8002c34 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c26:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f922 	bl	8002e74 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <TM_SPIx_Init+0x180>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10b      	bne.n	8002c54 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8002c3c:	4a30      	ldr	r2, [pc, #192]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f942 	bl	8002ed4 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <TM_SPIx_Init+0x184>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10b      	bne.n	8002c74 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 8002c5c:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <TM_SPIx_Init+0x170>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c66:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f96e 	bl	8002f4c <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8002c74:	883b      	ldrh	r3, [r7, #0]
 8002c76:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8002c7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c7e:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8002c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c82:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8002c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c88:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8002c8a:	78bb      	ldrb	r3, [r7, #2]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002c90:	2300      	movs	r3, #0
 8002c92:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002c94:	2300      	movs	r3, #0
 8002c96:	82bb      	strh	r3, [r7, #20]
 8002c98:	e016      	b.n	8002cc8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d104      	bne.n	8002caa <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	82bb      	strh	r3, [r7, #20]
 8002ca8:	e00e      	b.n	8002cc8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8002caa:	78bb      	ldrb	r3, [r7, #2]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d104      	bne.n	8002cba <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	82bb      	strh	r3, [r7, #20]
 8002cb8:	e006      	b.n	8002cc8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8002cba:	78bb      	ldrb	r3, [r7, #2]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d103      	bne.n	8002cc8 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fd4c 	bl	800177c <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	801a      	strh	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40003800 	.word	0x40003800
 8002d08:	40003c00 	.word	0x40003c00
 8002d0c:	40013400 	.word	0x40013400
 8002d10:	40015000 	.word	0x40015000
 8002d14:	40015400 	.word	0x40015400

08002d18 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002d28:	2305      	movs	r3, #5
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2300      	movs	r3, #0
 8002d32:	2200      	movs	r2, #0
 8002d34:	21e0      	movs	r1, #224	; 0xe0
 8002d36:	480d      	ldr	r0, [pc, #52]	; (8002d6c <TM_SPI1_INT_InitPins+0x54>)
 8002d38:	f7ff f9d8 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d109      	bne.n	8002d56 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002d42:	2305      	movs	r3, #5
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2303      	movs	r3, #3
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2138      	movs	r1, #56	; 0x38
 8002d50:	4807      	ldr	r0, [pc, #28]	; (8002d70 <TM_SPI1_INT_InitPins+0x58>)
 8002d52:	f7ff f9cb 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d103      	bne.n	8002d64 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <TM_SPI1_INT_InitPins+0x5c>)
 8002d60:	f7ff ff0a 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40013000 	.word	0x40013000

08002d78 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d114      	bne.n	8002db2 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002d88:	2305      	movs	r3, #5
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d98:	4819      	ldr	r0, [pc, #100]	; (8002e00 <TM_SPI2_INT_InitPins+0x88>)
 8002d9a:	f7ff f9a7 	bl	80020ec <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002d9e:	2305      	movs	r3, #5
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2303      	movs	r3, #3
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	2200      	movs	r2, #0
 8002daa:	210c      	movs	r1, #12
 8002dac:	4815      	ldr	r0, [pc, #84]	; (8002e04 <TM_SPI2_INT_InitPins+0x8c>)
 8002dae:	f7ff f99d 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10a      	bne.n	8002dce <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002db8:	2305      	movs	r3, #5
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002dc8:	480d      	ldr	r0, [pc, #52]	; (8002e00 <TM_SPI2_INT_InitPins+0x88>)
 8002dca:	f7ff f98f 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d109      	bne.n	8002de8 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2303      	movs	r3, #3
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	210d      	movs	r1, #13
 8002de2:	4809      	ldr	r0, [pc, #36]	; (8002e08 <TM_SPI2_INT_InitPins+0x90>)
 8002de4:	f7ff f982 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d103      	bne.n	8002df6 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8002dee:	2105      	movs	r1, #5
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <TM_SPI2_INT_InitPins+0x94>)
 8002df2:	f7ff fec1 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40003800 	.word	0x40003800

08002e10 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002e20:	2306      	movs	r3, #6
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2303      	movs	r3, #3
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2138      	movs	r1, #56	; 0x38
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <TM_SPI3_INT_InitPins+0x58>)
 8002e30:	f7ff f95c 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10a      	bne.n	8002e50 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2303      	movs	r3, #3
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e4a:	4808      	ldr	r0, [pc, #32]	; (8002e6c <TM_SPI3_INT_InitPins+0x5c>)
 8002e4c:	f7ff f94e 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d103      	bne.n	8002e5e <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8002e56:	2106      	movs	r1, #6
 8002e58:	4805      	ldr	r0, [pc, #20]	; (8002e70 <TM_SPI3_INT_InitPins+0x60>)
 8002e5a:	f7ff fe8d 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40003c00 	.word	0x40003c00

08002e74 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002e84:	2305      	movs	r3, #5
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2303      	movs	r3, #3
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2164      	movs	r1, #100	; 0x64
 8002e92:	480e      	ldr	r0, [pc, #56]	; (8002ecc <TM_SPI4_INT_InitPins+0x58>)
 8002e94:	f7ff f92a 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10a      	bne.n	8002eb4 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002eae:	4807      	ldr	r0, [pc, #28]	; (8002ecc <TM_SPI4_INT_InitPins+0x58>)
 8002eb0:	f7ff f91c 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d103      	bne.n	8002ec2 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8002eba:	2105      	movs	r1, #5
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <TM_SPI4_INT_InitPins+0x5c>)
 8002ebe:	f7ff fe5b 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40013400 	.word	0x40013400

08002ed4 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2303      	movs	r3, #3
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2300      	movs	r3, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002ef4:	4812      	ldr	r0, [pc, #72]	; (8002f40 <TM_SPI5_INT_InitPins+0x6c>)
 8002ef6:	f7ff f8f9 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d114      	bne.n	8002f2a <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002f00:	2305      	movs	r3, #5
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2303      	movs	r3, #3
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f10:	480b      	ldr	r0, [pc, #44]	; (8002f40 <TM_SPI5_INT_InitPins+0x6c>)
 8002f12:	f7ff f8eb 	bl	80020ec <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002f16:	2305      	movs	r3, #5
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2200      	movs	r2, #0
 8002f22:	21c0      	movs	r1, #192	; 0xc0
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <TM_SPI5_INT_InitPins+0x70>)
 8002f26:	f7ff f8e1 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d103      	bne.n	8002f38 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8002f30:	2105      	movs	r1, #5
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <TM_SPI5_INT_InitPins+0x74>)
 8002f34:	f7ff fe20 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021c00 	.word	0x40021c00
 8002f48:	40015000 	.word	0x40015000

08002f4c <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2303      	movs	r3, #3
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	2200      	movs	r2, #0
 8002f68:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002f6c:	4806      	ldr	r0, [pc, #24]	; (8002f88 <TM_SPI6_INT_InitPins+0x3c>)
 8002f6e:	f7ff f8bd 	bl	80020ec <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d103      	bne.n	8002f80 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8002f78:	2105      	movs	r1, #5
 8002f7a:	4804      	ldr	r0, [pc, #16]	; (8002f8c <TM_SPI6_INT_InitPins+0x40>)
 8002f7c:	f7ff fdfc 	bl	8002b78 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	40015400 	.word	0x40015400

08002f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f96:	e003      	b.n	8002fa0 <LoopCopyDataInit>

08002f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f9e:	3104      	adds	r1, #4

08002fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fa8:	d3f6      	bcc.n	8002f98 <CopyDataInit>
  ldr  r2, =_sbss
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fac:	e002      	b.n	8002fb4 <LoopFillZerobss>

08002fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fb0:	f842 3b04 	str.w	r3, [r2], #4

08002fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fb8:	d3f9      	bcc.n	8002fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fba:	f000 f847 	bl	800304c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fbe:	f001 fa45 	bl	800444c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc2:	f000 ff1d 	bl	8003e00 <main>
  bx  lr    
 8002fc6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fc8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002fcc:	08005830 	.word	0x08005830
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fd4:	20000518 	.word	0x20000518
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002fd8:	20000518 	.word	0x20000518
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fdc:	20000618 	.word	0x20000618

08002fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>
	...

08002fe4 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <_sbrk+0x58>)
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <_sbrk+0x5c>)
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <_sbrk+0x60>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x1e>
    heap_end = &end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <_sbrk+0x60>)
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	; (800303c <_sbrk+0x58>)
 8003000:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <_sbrk+0x60>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <_sbrk+0x60>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	441a      	add	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d905      	bls.n	8003022 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <_sbrk+0x64>)
 8003018:	220c      	movs	r2, #12
 800301a:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	e006      	b.n	8003030 <_sbrk+0x4c>
  }

  heap_end += incr;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_sbrk+0x60>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a06      	ldr	r2, [pc, #24]	; (8003044 <_sbrk+0x60>)
 800302c:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 800302e:	68bb      	ldr	r3, [r7, #8]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000618 	.word	0x20000618
 8003040:	00005000 	.word	0x00005000
 8003044:	20000574 	.word	0x20000574
 8003048:	20000614 	.word	0x20000614

0800304c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <SystemInit+0x50>)
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <SystemInit+0x50>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <SystemInit+0x50>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <SystemInit+0x50>)
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <SystemInit+0x50>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <SystemInit+0x50>)
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SystemInit+0x54>)
 8003076:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <SystemInit+0x50>)
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <SystemInit+0x50>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003082:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <SystemInit+0x50>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800308a:	f000 f80d 	bl	80030a8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <SystemInit+0x58>)
 8003090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003094:	609a      	str	r2, [r3, #8]
#endif
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	24003010 	.word	0x24003010
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	2300      	movs	r3, #0
 80030b4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030b6:	4a35      	ldr	r2, [pc, #212]	; (800318c <SetSysClock+0xe4>)
 80030b8:	4b34      	ldr	r3, [pc, #208]	; (800318c <SetSysClock+0xe4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <SetSysClock+0xe4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <SetSysClock+0x38>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80030de:	d1f0      	bne.n	80030c2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <SetSysClock+0xe4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80030ec:	2301      	movs	r3, #1
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	e001      	b.n	80030f6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d142      	bne.n	8003182 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <SetSysClock+0xe4>)
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <SetSysClock+0xe4>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003108:	4a21      	ldr	r2, [pc, #132]	; (8003190 <SetSysClock+0xe8>)
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <SetSysClock+0xe8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003112:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <SetSysClock+0xe4>)
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <SetSysClock+0xe4>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <SetSysClock+0xe4>)
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <SetSysClock+0xe4>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <SetSysClock+0xe4>)
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <SetSysClock+0xe4>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003132:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <SetSysClock+0xe4>)
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <SetSysClock+0xec>)
 8003138:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <SetSysClock+0xe4>)
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <SetSysClock+0xe4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003144:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003146:	bf00      	nop
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <SetSysClock+0xe4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f9      	beq.n	8003148 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <SetSysClock+0xf0>)
 8003156:	f240 6205 	movw	r2, #1541	; 0x605
 800315a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <SetSysClock+0xe4>)
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <SetSysClock+0xe4>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <SetSysClock+0xe4>)
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <SetSysClock+0xe4>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003174:	bf00      	nop
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <SetSysClock+0xe4>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d1f9      	bne.n	8003176 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	07405408 	.word	0x07405408
 8003198:	40023c00 	.word	0x40023c00

0800319c <min>:

float lightDownX[23] = {0.457999974, 0.461599976, 0.500119984, 0.503084004, 0.511158824, 0.594811201, 0.926367879, 1.14045751, 1.23032022, 0.987224162, 0.793056905, 0.735139847, 0.790597916, 0.637418568, 0.239192992, 0.107435092, 0.0302045625, -0.00285680569, -0.0409997627, -0.157699838, -0.353389889, -0.154372916, 0.0629389584};
float lightDownY[23] = {-4.8463335, -4.85343361, -4.92740345, -4.84418249, -4.84292793, -4.76404953, -4.77183485, -4.6632843, -4.50629902, -4.24340916, -3.99038649, -3.77127051, -3.53688931, -3.24982238, -3.01587558, -2.91811299, -2.84667921, -2.75767541, -2.73137283, -2.65296102, -2.43907261, -2.41235089, -2.38764572};
float lightDownZ[23] = {-7.07266665, -7.34786654, -7.21650648, -6.78555441, -6.49588823, -6.26612186, -6.09628534, -6.0223999, -6.07268, -6.38687611, -6.69681311, -7.02476931, -7.49433851, -8.3240366, -9.30682564, -10.042778, -10.5459442, -10.7631607, -10.8282127, -10.975749, -10.965024, -11.0175171, -10.9762621};

float min(float a, float b) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd ff71 	bl	8001090 <__aeabi_fcmplt>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <min+0x1c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	e000      	b.n	80031ba <min+0x1e>
 80031b8:	683b      	ldr	r3, [r7, #0]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <minArray>:

float max(float a, float b) {
	return a > b ? a : b;
}

float minArray(float *array, int begin, int end) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	float min = array[begin];
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]
	for (int i = begin + 1; i < end; i++) {
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3301      	adds	r3, #1
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e014      	b.n	800320e <minArray+0x4a>
		if(array[i] < min) { min = array[i]; }
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd ff4d 	bl	8001090 <__aeabi_fcmplt>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <minArray+0x44>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]
	return a > b ? a : b;
}

float minArray(float *array, int begin, int end) {
	float min = array[begin];
	for (int i = begin + 1; i < end; i++) {
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3301      	adds	r3, #1
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	dbe6      	blt.n	80031e4 <minArray+0x20>
		if(array[i] < min) { min = array[i]; }
	}
	return min;
 8003216:	697b      	ldr	r3, [r7, #20]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <maxArray>:

float maxArray(float *array, int begin, int end) {
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
	double max = array[begin];
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f92a 	bl	8000490 <__aeabi_f2d>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for (int i = begin + 1; i < end; i++) {
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e01d      	b.n	8003288 <maxArray+0x68>
		if(array[i] > max) { max = array[i]; }
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f91a 	bl	8000490 <__aeabi_f2d>
 800325c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003260:	f7fd fbfa 	bl	8000a58 <__aeabi_dcmpgt>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <maxArray+0x62>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f90b 	bl	8000490 <__aeabi_f2d>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	return min;
}

float maxArray(float *array, int begin, int end) {
	double max = array[begin];
	for (int i = begin + 1; i < end; i++) {
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbdd      	blt.n	800324c <maxArray+0x2c>
		if(array[i] > max) { max = array[i]; }
	}
	return max;
 8003290:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003294:	f7fd fc00 	bl	8000a98 <__aeabi_d2f>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	bf00      	nop

080032a4 <average>:

float average(float *array, int begin, int end) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
	float sum = 0;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
	int i;
	for(i = begin; i < end; i++) {
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	e00d      	b.n	80032d8 <average+0x34>
		sum += array[i];
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	f7fd fc3b 	bl	8000b44 <__addsf3>
 80032ce:	4603      	mov	r3, r0
 80032d0:	617b      	str	r3, [r7, #20]
}

float average(float *array, int begin, int end) {
	float sum = 0;
	int i;
	for(i = begin; i < end; i++) {
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3301      	adds	r3, #1
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbed      	blt.n	80032bc <average+0x18>
		sum += array[i];
	}
	return sum / (float) (end - begin);
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fce0 	bl	8000cac <__aeabi_i2f>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4619      	mov	r1, r3
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7fd fde3 	bl	8000ebc <__aeabi_fdiv>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <dtwDistance1>:
		result[i - 1] = smoothed;
	}

}

double dtwDistance1(float *ax, float *ay, float *az, int sa, float *bx, float *by, float *bz, int sb, int window) {
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	b093      	sub	sp, #76	; 0x4c
 8003306:	af00      	add	r7, sp, #0
 8003308:	61f8      	str	r0, [r7, #28]
 800330a:	61b9      	str	r1, [r7, #24]
 800330c:	617a      	str	r2, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	466b      	mov	r3, sp
 8003312:	607b      	str	r3, [r7, #4]

	float acc[sb][sa];
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	461a      	mov	r2, r3
 8003318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331a:	4619      	mov	r1, r3
 800331c:	4613      	mov	r3, r2
 800331e:	3b01      	subs	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	4613      	mov	r3, r2
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 800332c:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8003330:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8003334:	4613      	mov	r3, r2
 8003336:	009c      	lsls	r4, r3, #2
 8003338:	60f9      	str	r1, [r7, #12]
 800333a:	460b      	mov	r3, r1
 800333c:	3b01      	subs	r3, #1
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
 8003340:	60ba      	str	r2, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	461a      	mov	r2, r3
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	fb02 fc01 	mul.w	ip, r2, r1
 8003356:	fb00 fe03 	mul.w	lr, r0, r3
 800335a:	44e6      	add	lr, ip
 800335c:	fba0 2302 	umull	r2, r3, r0, r2
 8003360:	eb0e 0103 	add.w	r1, lr, r3
 8003364:	460b      	mov	r3, r1
 8003366:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800336a:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800336e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	461a      	mov	r2, r3
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	fb02 fc01 	mul.w	ip, r2, r1
 8003386:	fb00 fe03 	mul.w	lr, r0, r3
 800338a:	44e6      	add	lr, ip
 800338c:	fba0 2302 	umull	r2, r3, r0, r2
 8003390:	eb0e 0103 	add.w	r1, lr, r3
 8003394:	460b      	mov	r3, r1
 8003396:	015e      	lsls	r6, r3, #5
 8003398:	ea46 66d2 	orr.w	r6, r6, r2, lsr #27
 800339c:	0155      	lsls	r5, r2, #5
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	3303      	adds	r3, #3
 80033aa:	3307      	adds	r3, #7
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	ebad 0d03 	sub.w	sp, sp, r3
 80033b4:	466b      	mov	r3, sp
 80033b6:	3303      	adds	r3, #3
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7fd fbb9 	bl	8000b40 <__aeabi_fsub>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f85d 	bl	8000490 <__aeabi_f2d>
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033de:	f001 f929 	bl	8004634 <pow>
 80033e2:	4605      	mov	r5, r0
 80033e4:	460e      	mov	r6, r1
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f7fd fba5 	bl	8000b40 <__aeabi_fsub>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f849 	bl	8000490 <__aeabi_f2d>
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003406:	f001 f915 	bl	8004634 <pow>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4628      	mov	r0, r5
 8003410:	4631      	mov	r1, r6
 8003412:	f7fc fedf 	bl	80001d4 <__adddf3>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4615      	mov	r5, r2
 800341c:	461e      	mov	r6, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7fd fb89 	bl	8000b40 <__aeabi_fsub>
 800342e:	4603      	mov	r3, r0
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f82d 	bl	8000490 <__aeabi_f2d>
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800343e:	f001 f8f9 	bl	8004634 <pow>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4628      	mov	r0, r5
 8003448:	4631      	mov	r1, r6
 800344a:	f7fc fec3 	bl	80001d4 <__adddf3>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fb1f 	bl	8000a98 <__aeabi_d2f>
 800345a:	4602      	mov	r2, r0
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	601a      	str	r2, [r3, #0]

	// Accumulated distance - Row 0
	for (int i = 1; i < sa; i++) {
 8003460:	2301      	movs	r3, #1
 8003462:	647b      	str	r3, [r7, #68]	; 0x44
 8003464:	e06a      	b.n	800353c <dtwDistance1+0x23c>
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
 8003466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fd fb62 	bl	8000b40 <__aeabi_fsub>
 800347c:	4603      	mov	r3, r0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f806 	bl	8000490 <__aeabi_f2d>
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800348c:	f001 f8d2 	bl	8004634 <pow>
 8003490:	4605      	mov	r5, r0
 8003492:	460e      	mov	r6, r1
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fd fb4b 	bl	8000b40 <__aeabi_fsub>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc ffef 	bl	8000490 <__aeabi_f2d>
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ba:	f001 f8bb 	bl	8004634 <pow>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4628      	mov	r0, r5
 80034c4:	4631      	mov	r1, r6
 80034c6:	f7fc fe85 	bl	80001d4 <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4615      	mov	r5, r2
 80034d0:	461e      	mov	r6, r3
 80034d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4413      	add	r3, r2
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7fd fb2c 	bl	8000b40 <__aeabi_fsub>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc ffd0 	bl	8000490 <__aeabi_f2d>
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f8:	f001 f89c 	bl	8004634 <pow>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4628      	mov	r0, r5
 8003502:	4631      	mov	r1, r6
 8003504:	f7fc fe66 	bl	80001d4 <__adddf3>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f7fd fac2 	bl	8000a98 <__aeabi_d2f>
 8003514:	4603      	mov	r3, r0
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
		acc[0][i] = acc[0][i - 1] + dist;
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd fb0d 	bl	8000b44 <__addsf3>
 800352a:	4603      	mov	r3, r0
 800352c:	4619      	mov	r1, r3
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);

	// Accumulated distance - Row 0
	for (int i = 1; i < sa; i++) {
 8003536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003538:	3301      	adds	r3, #1
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
 800353c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	db90      	blt.n	8003466 <dtwDistance1+0x166>
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
		acc[0][i] = acc[0][i - 1] + dist;
	}

	// Accumulated distance - Row 0
	for (int i = 1; i < sb; i++) {
 8003544:	2301      	movs	r3, #1
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
 8003548:	e06d      	b.n	8003626 <dtwDistance1+0x326>
		dist = pow(ax[0] - bx[i], 2.0) + pow(ay[0] - by[i], 2.0) + pow(az[0] - bz[i], 2.0);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003554:	4413      	add	r3, r2
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd faf1 	bl	8000b40 <__aeabi_fsub>
 800355e:	4603      	mov	r3, r0
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff95 	bl	8000490 <__aeabi_f2d>
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800356e:	f001 f861 	bl	8004634 <pow>
 8003572:	4605      	mov	r5, r0
 8003574:	460e      	mov	r6, r1
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003580:	4413      	add	r3, r2
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4619      	mov	r1, r3
 8003586:	f7fd fadb 	bl	8000b40 <__aeabi_fsub>
 800358a:	4603      	mov	r3, r0
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc ff7f 	bl	8000490 <__aeabi_f2d>
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800359a:	f001 f84b 	bl	8004634 <pow>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4628      	mov	r0, r5
 80035a4:	4631      	mov	r1, r6
 80035a6:	f7fc fe15 	bl	80001d4 <__adddf3>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4615      	mov	r5, r2
 80035b0:	461e      	mov	r6, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd fabd 	bl	8000b40 <__aeabi_fsub>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc ff61 	bl	8000490 <__aeabi_f2d>
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d6:	f001 f82d 	bl	8004634 <pow>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4628      	mov	r0, r5
 80035e0:	4631      	mov	r1, r6
 80035e2:	f7fc fdf7 	bl	80001d4 <__adddf3>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fa53 	bl	8000a98 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
		acc[i][0] = acc[i - 1][0] + dist;
 80035f6:	08a5      	lsrs	r5, r4, #2
 80035f8:	08a2      	lsrs	r2, r4, #2
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	1e59      	subs	r1, r3, #1
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	fb01 f202 	mul.w	r2, r1, r2
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fa9a 	bl	8000b44 <__addsf3>
 8003610:	4603      	mov	r3, r0
 8003612:	4619      	mov	r1, r3
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003618:	fb02 f205 	mul.w	r2, r2, r5
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
		acc[0][i] = acc[0][i - 1] + dist;
	}

	// Accumulated distance - Row 0
	for (int i = 1; i < sb; i++) {
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	3301      	adds	r3, #1
 8003624:	643b      	str	r3, [r7, #64]	; 0x40
 8003626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800362a:	429a      	cmp	r2, r3
 800362c:	db8d      	blt.n	800354a <dtwDistance1+0x24a>
		acc[i][0] = acc[i - 1][0] + dist;
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
 800362e:	2301      	movs	r3, #1
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	e0a3      	b.n	800377c <dtwDistance1+0x47c>
		for (int j = 1; j < sa; j++) {
 8003634:	2301      	movs	r3, #1
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38
 8003638:	e098      	b.n	800376c <dtwDistance1+0x46c>
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800364a:	4413      	add	r3, r2
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fa76 	bl	8000b40 <__aeabi_fsub>
 8003654:	4603      	mov	r3, r0
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ff1a 	bl	8000490 <__aeabi_f2d>
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003664:	f000 ffe6 	bl	8004634 <pow>
 8003668:	4605      	mov	r5, r0
 800366a:	460e      	mov	r6, r1
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f7fd fa5d 	bl	8000b40 <__aeabi_fsub>
 8003686:	4603      	mov	r3, r0
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc ff01 	bl	8000490 <__aeabi_f2d>
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003696:	f000 ffcd 	bl	8004634 <pow>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4628      	mov	r0, r5
 80036a0:	4631      	mov	r1, r6
 80036a2:	f7fc fd97 	bl	80001d4 <__adddf3>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4615      	mov	r5, r2
 80036ac:	461e      	mov	r6, r3
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036be:	4413      	add	r3, r2
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f7fd fa3c 	bl	8000b40 <__aeabi_fsub>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc fee0 	bl	8000490 <__aeabi_f2d>
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036d8:	f000 ffac 	bl	8004634 <pow>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4628      	mov	r0, r5
 80036e2:	4631      	mov	r1, r6
 80036e4:	f7fc fd76 	bl	80001d4 <__adddf3>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f7fd f9d2 	bl	8000a98 <__aeabi_d2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
			m = min(min(acc[i - 1][j - 1],
 80036f8:	08a1      	lsrs	r1, r4, #2
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	1e58      	subs	r0, r3, #1
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	fb00 f101 	mul.w	r1, r0, r1
 8003708:	440a      	add	r2, r1
 800370a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800370e:	08a2      	lsrs	r2, r4, #2
					acc[i - 1][j]),
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	1e59      	subs	r1, r3, #1
	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
			m = min(min(acc[i - 1][j - 1],
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	fb01 f102 	mul.w	r1, r1, r2
 800371a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800371c:	440a      	add	r2, r1
 800371e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003722:	4619      	mov	r1, r3
 8003724:	f7ff fd3a 	bl	800319c <min>
 8003728:	4605      	mov	r5, r0
 800372a:	08a1      	lsrs	r1, r4, #2
					acc[i - 1][j]),
					acc[i][j - 1]);
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	1e5a      	subs	r2, r3, #1
	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
			m = min(min(acc[i - 1][j - 1],
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003734:	fb00 f101 	mul.w	r1, r0, r1
 8003738:	440a      	add	r2, r1
 800373a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373e:	4619      	mov	r1, r3
 8003740:	4628      	mov	r0, r5
 8003742:	f7ff fd2b 	bl	800319c <min>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24
					acc[i - 1][j]),
					acc[i][j - 1]);
			acc[i][j] = m + dist;
 8003748:	08a5      	lsrs	r5, r4, #2
 800374a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800374e:	f7fd f9f9 	bl	8000b44 <__addsf3>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800375a:	fb02 f105 	mul.w	r1, r2, r5
 800375e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003760:	440a      	add	r2, r1
 8003762:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	3301      	adds	r3, #1
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
 800376c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	f6ff af62 	blt.w	800363a <dtwDistance1+0x33a>
		acc[i][0] = acc[i - 1][0] + dist;
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	3301      	adds	r3, #1
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800377e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003780:	429a      	cmp	r2, r3
 8003782:	f6ff af57 	blt.w	8003634 <dtwDistance1+0x334>
					acc[i][j - 1]);
			acc[i][j] = m + dist;
		}
	}

	return sqrt(acc[sb - 1][sa - 1]);
 8003786:	08a1      	lsrs	r1, r4, #2
 8003788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	fb00 f101 	mul.w	r1, r0, r1
 8003796:	440a      	add	r2, r1
 8003798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fe77 	bl	8000490 <__aeabi_f2d>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	4618      	mov	r0, r3
 80037a8:	4621      	mov	r1, r4
 80037aa:	f001 f8a9 	bl	8004900 <sqrt>
 80037ae:	4603      	mov	r3, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 80037b6:	4618      	mov	r0, r3
 80037b8:	4621      	mov	r1, r4
 80037ba:	374c      	adds	r7, #76	; 0x4c
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c2:	bf00      	nop

080037c4 <LBKeogh>:

	return sqrt(acc[sa - 1][sb - 1]);

}

float LBKeogh(float *x, int sx, float *y, int sy, int r) {
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b08f      	sub	sp, #60	; 0x3c
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]

	double sum = 0;
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f04f 0400 	mov.w	r4, #0
 80037da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int li, mi;
	double lowerBound, upperBound;

	for (int i = 0; i < sx; i++) {
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	e08d      	b.n	8003900 <LBKeogh+0x13c>

		li = (i - r) >= 0 ? (i - r) : 0;
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
		mi = (i + r) <= sy ? (i + r) : sy;
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f4:	441a      	add	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bfa8      	it	ge
 80037fc:	4613      	movge	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24

		lowerBound = minArray(y, li, mi);
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff fcdd 	bl	80031c4 <minArray>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe3f 	bl	8000490 <__aeabi_f2d>
 8003812:	4603      	mov	r3, r0
 8003814:	460c      	mov	r4, r1
 8003816:	e9c7 3406 	strd	r3, r4, [r7, #24]
		upperBound = maxArray(y, li, mi);
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fcfe 	bl	8003220 <maxArray>
 8003824:	4603      	mov	r3, r0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe32 	bl	8000490 <__aeabi_f2d>
 800382c:	4603      	mov	r3, r0
 800382e:	460c      	mov	r4, r1
 8003830:	e9c7 3404 	strd	r3, r4, [r7, #16]

		if(x[i] > upperBound) {
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe26 	bl	8000490 <__aeabi_f2d>
 8003844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003848:	f7fd f906 	bl	8000a58 <__aeabi_dcmpgt>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <LBKeogh+0xd4>
			sum += pow(x[i] - upperBound, 2);
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fc fe17 	bl	8000490 <__aeabi_f2d>
 8003862:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003866:	f7fc fcb3 	bl	80001d0 <__aeabi_dsub>
 800386a:	4603      	mov	r3, r0
 800386c:	460c      	mov	r4, r1
 800386e:	4618      	mov	r0, r3
 8003870:	4621      	mov	r1, r4
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800387a:	f000 fedb 	bl	8004634 <pow>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	461a      	mov	r2, r3
 8003884:	4623      	mov	r3, r4
 8003886:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800388a:	f7fc fca3 	bl	80001d4 <__adddf3>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8003896:	e030      	b.n	80038fa <LBKeogh+0x136>
		} else if(x[i] < lowerBound) {
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fdf4 	bl	8000490 <__aeabi_f2d>
 80038a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ac:	f7fd f8b6 	bl	8000a1c <__aeabi_dcmplt>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d021      	beq.n	80038fa <LBKeogh+0x136>
			sum += pow(x[i] - lowerBound, 2);
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fc fde5 	bl	8000490 <__aeabi_f2d>
 80038c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ca:	f7fc fc81 	bl	80001d0 <__aeabi_dsub>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	4618      	mov	r0, r3
 80038d4:	4621      	mov	r1, r4
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038de:	f000 fea9 	bl	8004634 <pow>
 80038e2:	4603      	mov	r3, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038ee:	f7fc fc71 	bl	80001d4 <__adddf3>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	double sum = 0;
	int li, mi;
	double lowerBound, upperBound;

	for (int i = 0; i < sx; i++) {
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	3301      	adds	r3, #1
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	f6ff af6d 	blt.w	80037e4 <LBKeogh+0x20>
			sum += pow(x[i] - lowerBound, 2);
		}

	}

	return sqrt(sum);
 800390a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800390e:	f000 fff7 	bl	8004900 <sqrt>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	4618      	mov	r0, r3
 8003918:	4621      	mov	r1, r4
 800391a:	f7fd f8bd 	bl	8000a98 <__aeabi_d2f>
 800391e:	4603      	mov	r3, r0
}
 8003920:	4618      	mov	r0, r3
 8003922:	373c      	adds	r7, #60	; 0x3c
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}

08003928 <LBKeogh3D>:

float LBKeogh3D(float *ax, float *ay, float *az, int sa, float *bx, float *by, float *bz, int sb, int r) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	float lx = LBKeogh(ax, sa, bx, sb, r);
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff3f 	bl	80037c4 <LBKeogh>
 8003946:	61f8      	str	r0, [r7, #28]
	float ly = LBKeogh(ay, sa, by, sb, r);
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f7ff ff36 	bl	80037c4 <LBKeogh>
 8003958:	61b8      	str	r0, [r7, #24]
	float lz = LBKeogh(az, sa, bz, sb, r);
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff2d 	bl	80037c4 <LBKeogh>
 800396a:	6178      	str	r0, [r7, #20]
	return lx + ly + lz;
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	69f8      	ldr	r0, [r7, #28]
 8003970:	f7fd f8e8 	bl	8000b44 <__addsf3>
 8003974:	4603      	mov	r3, r0
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd f8e3 	bl	8000b44 <__addsf3>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <knn>:

int knn(float inputX[], float inputY[], float inputZ[], int size) {
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b0a1      	sub	sp, #132	; 0x84
 800398c:	af06      	add	r7, sp, #24
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]

	int answer;
	float distance = INFINITY;
 8003996:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800399a:	65bb      	str	r3, [r7, #88]	; 0x58
	float minDistance = INFINITY;
 800399c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80039a0:	663b      	str	r3, [r7, #96]	; 0x60
	int lbr = 30;
 80039a2:	231e      	movs	r3, #30
 80039a4:	657b      	str	r3, [r7, #84]	; 0x54

	float* pointersX[NUMBER_OF_GESTURES] = {doorOpenX, doorCloseX, lightUpX, lightDownX};
 80039a6:	4b49      	ldr	r3, [pc, #292]	; (8003acc <knn+0x144>)
 80039a8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80039ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float* pointersY[NUMBER_OF_GESTURES] = {doorOpenY, doorCloseY, lightUpY, lightDownY};
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <knn+0x148>)
 80039b4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80039b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float* pointersZ[NUMBER_OF_GESTURES] = {doorOpenZ, doorCloseZ, lightUpZ, lightDownZ};
 80039be:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <knn+0x14c>)
 80039c0:	f107 0420 	add.w	r4, r7, #32
 80039c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int sizes[NUMBER_OF_GESTURES] = {24, 29, 21, 23};//{29, 43, 27, 39};
 80039ca:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <knn+0x150>)
 80039cc:	f107 0410 	add.w	r4, r7, #16
 80039d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int window = 4; // Does not matter for DTW1
 80039d6:	2304      	movs	r3, #4
 80039d8:	653b      	str	r3, [r7, #80]	; 0x50

	for(int i = 0; i < NUMBER_OF_GESTURES; i++) {
 80039da:	2300      	movs	r3, #0
 80039dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039de:	e06d      	b.n	8003abc <knn+0x134>
		if(LBKeogh3D(inputX, inputY, inputZ, size, pointersX[i], pointersY[i], pointersZ[i], sizes[i], lbr) < minDistance) {
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80039e8:	4413      	add	r3, r2
 80039ea:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80039ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80039f6:	440b      	add	r3, r1
 80039f8:	f853 1c38 	ldr.w	r1, [r3, #-56]
 80039fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003a04:	4403      	add	r3, r0
 8003a06:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003a12:	4423      	add	r3, r4
 8003a14:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003a18:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003a1a:	9404      	str	r4, [sp, #16]
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	9002      	str	r0, [sp, #8]
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	9200      	str	r2, [sp, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff ff7c 	bl	8003928 <LBKeogh3D>
 8003a30:	4603      	mov	r3, r0
 8003a32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fb2b 	bl	8001090 <__aeabi_fcmplt>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03a      	beq.n	8003ab6 <knn+0x12e>
			distance = dtwDistance1(inputX, inputY, inputZ, size, pointersX[i], pointersY[i], pointersZ[i], sizes[i], window);
 8003a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a48:	4413      	add	r3, r2
 8003a4a:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a56:	440b      	add	r3, r1
 8003a58:	f853 1c38 	ldr.w	r1, [r3, #-56]
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003a64:	4403      	add	r3, r0
 8003a66:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003a72:	4423      	add	r3, r4
 8003a74:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003a78:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003a7a:	9404      	str	r4, [sp, #16]
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	9002      	str	r0, [sp, #8]
 8003a80:	9101      	str	r1, [sp, #4]
 8003a82:	9200      	str	r2, [sp, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff fc38 	bl	8003300 <dtwDistance1>
 8003a90:	4603      	mov	r3, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4618      	mov	r0, r3
 8003a96:	4621      	mov	r1, r4
 8003a98:	f7fc fffe 	bl	8000a98 <__aeabi_d2f>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	65bb      	str	r3, [r7, #88]	; 0x58
			if(distance < minDistance) {
 8003aa0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003aa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003aa4:	f7fd faf4 	bl	8001090 <__aeabi_fcmplt>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <knn+0x12e>
				minDistance = distance;
 8003aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab0:	663b      	str	r3, [r7, #96]	; 0x60
				answer = i;
 8003ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab4:	667b      	str	r3, [r7, #100]	; 0x64
	float* pointersZ[NUMBER_OF_GESTURES] = {doorOpenZ, doorCloseZ, lightUpZ, lightDownZ};

	int sizes[NUMBER_OF_GESTURES] = {24, 29, 21, 23};//{29, 43, 27, 39};
	int window = 4; // Does not matter for DTW1

	for(int i = 0; i < NUMBER_OF_GESTURES; i++) {
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab8:	3301      	adds	r3, #1
 8003aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	dd8e      	ble.n	80039e0 <knn+0x58>
//	}
//
//	// Negative if the distance is infinity
//	return answer * (minDistance == INFINITY ? -1 : 1);

	return answer;
 8003ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64

}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	376c      	adds	r7, #108	; 0x6c
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	08005738 	.word	0x08005738
 8003ad0:	08005748 	.word	0x08005748
 8003ad4:	08005758 	.word	0x08005758
 8003ad8:	08005768 	.word	0x08005768

08003adc <newLinkedList>:
 *      Author: Alan
 */

#include "LinkedList.h"

LinkedList * newLinkedList() {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
    LinkedList *list = (LinkedList *) malloc(sizeof(LinkedList));
 8003ae2:	2008      	movs	r0, #8
 8003ae4:	f000 fcd8 	bl	8004498 <malloc>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	607b      	str	r3, [r7, #4]
    list->value = 0.0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
    list->next = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	605a      	str	r2, [r3, #4]
    return list;
 8003afa:	687b      	ldr	r3, [r7, #4]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prependToLinkedList>:
        head = head->next;
    }
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]

    if(!head) { return; }
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <prependToLinkedList+0x2c>

    LinkedList *new = newLinkedList();
 8003b14:	f7ff ffe2 	bl	8003adc <newLinkedList>
 8003b18:	60f8      	str	r0, [r7, #12]
    new->value = value;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	601a      	str	r2, [r3, #0]
    new->next = head->next;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	605a      	str	r2, [r3, #4]
    head->next = new;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e000      	b.n	8003b32 <prependToLinkedList+0x2e>
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {

    if(!head) { return; }
 8003b30:	bf00      	nop
    LinkedList *new = newLinkedList();
    new->value = value;
    new->next = head->next;
    head->next = new;

}
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <arrayFromLinkedList>:
    new->value = value;
    head->next = new;

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

    if(!head) { return; }
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <arrayFromLinkedList+0x3e>

    while (head->next && size > 0) {
 8003b4a:	e00c      	b.n	8003b66 <arrayFromLinkedList+0x2e>
        head = head->next;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
        destination[--size] = head->value;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4413      	add	r3, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	601a      	str	r2, [r3, #0]

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }

    while (head->next && size > 0) {
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <arrayFromLinkedList+0x40>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	dceb      	bgt.n	8003b4c <arrayFromLinkedList+0x14>
 8003b74:	e000      	b.n	8003b78 <arrayFromLinkedList+0x40>

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }
 8003b76:	bf00      	nop
    while (head->next && size > 0) {
        head = head->next;
        destination[--size] = head->value;
    }

}
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <freeLinkedList>:

void freeLinkedList(LinkedList *head) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

    if(!head) { return; }
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d014      	beq.n	8003bb8 <freeLinkedList+0x38>

    LinkedList *current;
    current = head;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
    head = head->next;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	607b      	str	r3, [r7, #4]
    current->next = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]

    while (head) {
 8003b9e:	e007      	b.n	8003bb0 <freeLinkedList+0x30>
        current = head;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]
        head = head->next;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	607b      	str	r3, [r7, #4]
        free(current);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fc7c 	bl	80044a8 <free>
    LinkedList *current;
    current = head;
    head = head->next;
    current->next = NULL;

    while (head) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f4      	bne.n	8003ba0 <freeLinkedList+0x20>
 8003bb6:	e000      	b.n	8003bba <freeLinkedList+0x3a>

}

void freeLinkedList(LinkedList *head) {

    if(!head) { return; }
 8003bb8:	bf00      	nop
        current = head;
        head = head->next;
        free(current);
    }

}
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <Delayms+0x50>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bce:	f3ef 8305 	mrs	r3, IPSR
 8003bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bd4:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d111      	bne.n	8003bfe <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8003bda:	bf00      	nop
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <Delayms+0x50>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d3f8      	bcc.n	8003bdc <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8003bea:	e00b      	b.n	8003c04 <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <Delayms+0x54>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <Delayms+0x3e>
				millis--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f3      	bne.n	8003bec <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000538 	.word	0x20000538
 8003c14:	e000e010 	.word	0xe000e010

08003c18 <setup>:

#define SIZE 10 //5 10
#define AVG_SIZE 6
#define OFFSET 5000//2500 //1300 //1000

void setup() {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	SystemInit();
 8003c1c:	f7ff fa16 	bl	800304c <SystemInit>
	TM_DELAY_Init();
 8003c20:	f7fe f9ee 	bl	8002000 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 8003c24:	f7fe fa14 	bl	8002050 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8003c28:	2103      	movs	r1, #3
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7fe fbbe 	bl	80023ac <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8003c30:	f7fe fa26 	bl	8002080 <TM_DISCO_ButtonInit>
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <variance>:
		ms[l] = TM_DELAY_Time();
	}
	ms[0] += 0; // Just to avoid the unused warning
}

float variance(float *array, int begin, int end) {
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
	float avg = average(array, begin, end);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fb2b 	bl	80032a4 <average>
 8003c4e:	6178      	str	r0, [r7, #20]
	float sum = 0.0;
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
	for(int i = begin; i < end; i++) {
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e026      	b.n	8003caa <variance+0x72>
		sum += pow(array[i] - avg, 2.0);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc ff69 	bl	8000b40 <__aeabi_fsub>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fc0d 	bl	8000490 <__aeabi_f2d>
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c7e:	f000 fcd9 	bl	8004634 <pow>
 8003c82:	4604      	mov	r4, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	69f8      	ldr	r0, [r7, #28]
 8003c88:	f7fc fc02 	bl	8000490 <__aeabi_f2d>
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	462b      	mov	r3, r5
 8003c90:	f7fc faa0 	bl	80001d4 <__adddf3>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	f7fc fefc 	bl	8000a98 <__aeabi_d2f>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	61fb      	str	r3, [r7, #28]
}

float variance(float *array, int begin, int end) {
	float avg = average(array, begin, end);
	float sum = 0.0;
	for(int i = begin; i < end; i++) {
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	dbd4      	blt.n	8003c5c <variance+0x24>
		sum += pow(array[i] - avg, 2.0);
	}
	return sum / (end - begin);
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fff7 	bl	8000cac <__aeabi_i2f>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	69f8      	ldr	r0, [r7, #28]
 8003cc4:	f7fd f8fa 	bl	8000ebc <__aeabi_fdiv>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <recognizeGesture>:

void recognizeGesture(LinkedList *signalX, LinkedList *signalY, LinkedList *signalZ, int size) {
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b08b      	sub	sp, #44	; 0x2c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]

	// Allocating arrays for the smoothed signals
	float *x = (float *) malloc(size * sizeof(float));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbd6 	bl	8004498 <malloc>
 8003cec:	4603      	mov	r3, r0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
	float *y = (float *) malloc(size * sizeof(float));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fbcf 	bl	8004498 <malloc>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	623b      	str	r3, [r7, #32]
	float *z = (float *) malloc(size * sizeof(float));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fbc8 	bl	8004498 <malloc>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	61fb      	str	r3, [r7, #28]
	//		y[i] = 666.666;
	//		z[i] = 666.666;
	//	}

	// Filling up the temporary raw signal arrays
	arrayFromLinkedList(signalX, x, size);
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff ff11 	bl	8003b38 <arrayFromLinkedList>
	arrayFromLinkedList(signalY, y, size);
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68b8      	ldr	r0, [r7, #8]
 8003d1c:	f7ff ff0c 	bl	8003b38 <arrayFromLinkedList>
	arrayFromLinkedList(signalZ, z, size);
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	69f9      	ldr	r1, [r7, #28]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff07 	bl	8003b38 <arrayFromLinkedList>

	double klass = knn(x, y, z, size);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	6a39      	ldr	r1, [r7, #32]
 8003d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d32:	f7ff fe29 	bl	8003988 <knn>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fb97 	bl	800046c <__aeabi_i2d>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if(klass != klass) { //NaN
 8003d46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d4e:	f7fc fe5b 	bl	8000a08 <__aeabi_dcmpeq>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <recognizeGesture+0x8e>
		TM_DISCO_LedOff(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <recognizeGesture+0x120>)
 8003d5a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003d5e:	835a      	strh	r2, [r3, #26]
		Delayms(500);
		TM_DISCO_LedOff(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);

	}

}
 8003d60:	e044      	b.n	8003dec <recognizeGesture+0x118>
		TM_DISCO_LedOff(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);
	} else {

		//TODO:- Handle long distances

		if(klass == 0) { // Door Open
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d6e:	f7fc fe4b 	bl	8000a08 <__aeabi_dcmpeq>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <recognizeGesture+0xae>
			TM_DISCO_LedOn(LED_RED);
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <recognizeGesture+0x120>)
 8003d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d7e:	831a      	strh	r2, [r3, #24]
 8003d80:	e02c      	b.n	8003ddc <recognizeGesture+0x108>
//			USART_puts(USART1, "0");
		} else if(klass == 1) { // Door Close
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <recognizeGesture+0x124>)
 8003d88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d8c:	f7fc fe3c 	bl	8000a08 <__aeabi_dcmpeq>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <recognizeGesture+0xcc>
			TM_DISCO_LedOn(LED_GREEN);
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <recognizeGesture+0x120>)
 8003d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d9c:	831a      	strh	r2, [r3, #24]
 8003d9e:	e01d      	b.n	8003ddc <recognizeGesture+0x108>
//			USART_puts(USART1, "1");
		} else if(klass == 2) { // Light Up
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dac:	f7fc fe2c 	bl	8000a08 <__aeabi_dcmpeq>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <recognizeGesture+0xec>
			TM_DISCO_LedOn(LED_ORANGE);
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <recognizeGesture+0x120>)
 8003db8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dbc:	831a      	strh	r2, [r3, #24]
 8003dbe:	e00d      	b.n	8003ddc <recognizeGesture+0x108>
//			USART_puts(USART1, "2");
		} else if(klass == 3) { // Light Down
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <recognizeGesture+0x128>)
 8003dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dca:	f7fc fe1d 	bl	8000a08 <__aeabi_dcmpeq>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <recognizeGesture+0x108>
			TM_DISCO_LedOn(LED_BLUE);
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <recognizeGesture+0x120>)
 8003dd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dda:	831a      	strh	r2, [r3, #24]
//			USART_puts(USART1, "3");
		}

		Delayms(500);
 8003ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003de0:	f7ff feee 	bl	8003bc0 <Delayms>
		TM_DISCO_LedOff(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <recognizeGesture+0x120>)
 8003de6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003dea:	835a      	strh	r2, [r3, #26]

	}

}
 8003dec:	bf00      	nop
 8003dee:	372c      	adds	r7, #44	; 0x2c
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	3ff00000 	.word	0x3ff00000
 8003dfc:	40080000 	.word	0x40080000

08003e00 <main>:

int main(void) {
 8003e00:	b5b0      	push	{r4, r5, r7, lr}
 8003e02:	b0e2      	sub	sp, #392	; 0x188
 8003e04:	af00      	add	r7, sp, #0

	setup();
 8003e06:	f7ff ff07 	bl	8003c18 <setup>

	init_USART1(9600);
 8003e0a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003e0e:	f7fd ff7f 	bl	8001d10 <init_USART1>

	int count = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	// Signals
	LinkedList *signalX = newLinkedList();
 8003e18:	f7ff fe60 	bl	8003adc <newLinkedList>
 8003e1c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	LinkedList *signalY = newLinkedList();
 8003e20:	f7ff fe5c 	bl	8003adc <newLinkedList>
 8003e24:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
	LinkedList *signalZ = newLinkedList();
 8003e28:	f7ff fe58 	bl	8003adc <newLinkedList>
 8003e2c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

	float x, y, z;
	float ax[AVG_SIZE], ay[AVG_SIZE], az[AVG_SIZE];
	float ex[SIZE], ey[SIZE], ez[SIZE];
	float vx[SIZE], vy[SIZE], vz[SIZE];
	int moving = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	float fx, fy, fz;
	float fvx, fvy, fvz;

	fvx = 1;
 8003e36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e3a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	fvy = 1;
 8003e3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e42:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	fvz = 1;
 8003e46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	int v = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	// Getting values for the initial average
	for(int i = 0; i < AVG_SIZE; i++) {
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003e5a:	e036      	b.n	8003eca <main+0xca>
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8003e5c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fad3 	bl	800240c <TM_LIS302DL_LIS3DSH_ReadAxes>
		ax[i] = (float) Axes_Data.X;
 8003e66:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	; 0x13c
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc ff1e 	bl	8000cac <__aeabi_i2f>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f843 2c64 	str.w	r2, [r3, #-100]
		ay[i] = (float) Axes_Data.Y;
 8003e82:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc ff10 	bl	8000cac <__aeabi_i2f>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8003e98:	440b      	add	r3, r1
 8003e9a:	f843 2c7c 	str.w	r2, [r3, #-124]
		az[i] = (float) Axes_Data.Z;
 8003e9e:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc ff02 	bl	8000cac <__aeabi_i2f>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f843 2c94 	str.w	r2, [r3, #-148]
		Delayms(SAMPLEPERIOD);
 8003eba:	2014      	movs	r0, #20
 8003ebc:	f7ff fe80 	bl	8003bc0 <Delayms>
	fvz = 1;

	int v = 0;

	// Getting values for the initial average
	for(int i = 0; i < AVG_SIZE; i++) {
 8003ec0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003eca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	ddc4      	ble.n	8003e5c <main+0x5c>
		az[i] = (float) Axes_Data.Z;
		Delayms(SAMPLEPERIOD);
	}

	// Calculating the average
	fx = average(ax, 0, AVG_SIZE);
 8003ed2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff f9e2 	bl	80032a4 <average>
 8003ee0:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	fy = average(ay, 0, AVG_SIZE);
 8003ee4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003ee8:	2206      	movs	r2, #6
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f9d9 	bl	80032a4 <average>
 8003ef2:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	fz = average(az, 0, AVG_SIZE);
 8003ef6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003efa:	2206      	movs	r2, #6
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f9d0 	bl	80032a4 <average>
 8003f04:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

	while(1) {

		// Getting accelerometer values
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8003f08:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fa7d 	bl	800240c <TM_LIS302DL_LIS3DSH_ReadAxes>

		x = (float) Axes_Data.X;
 8003f12:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	; 0x13c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fec8 	bl	8000cac <__aeabi_i2f>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		y = (float) Axes_Data.Y;
 8003f22:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fec0 	bl	8000cac <__aeabi_i2f>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		z = (float) Axes_Data.Z;
 8003f32:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc feb8 	bl	8000cac <__aeabi_i2f>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		Delayms(SAMPLEPERIOD);
 8003f42:	2014      	movs	r0, #20
 8003f44:	f7ff fe3c 	bl	8003bc0 <Delayms>

		// Calculating EWMA
		ex[v] = EWMA_ALPHA * x + (1.0 - EWMA_ALPHA) * fx;
 8003f48:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8003f4c:	f7fc faa0 	bl	8000490 <__aeabi_f2d>
 8003f50:	a3cb      	add	r3, pc, #812	; (adr r3, 8004280 <main+0x480>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc faef 	bl	8000538 <__aeabi_dmul>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	4625      	mov	r5, r4
 8003f60:	461c      	mov	r4, r3
 8003f62:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8003f66:	f7fc fa93 	bl	8000490 <__aeabi_f2d>
 8003f6a:	a3c7      	add	r3, pc, #796	; (adr r3, 8004288 <main+0x488>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f7fc fae2 	bl	8000538 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc f92a 	bl	80001d4 <__adddf3>
 8003f80:	4603      	mov	r3, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	4618      	mov	r0, r3
 8003f86:	4621      	mov	r1, r4
 8003f88:	f7fc fd86 	bl	8000a98 <__aeabi_d2f>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8003f98:	440b      	add	r3, r1
 8003f9a:	f843 2cbc 	str.w	r2, [r3, #-188]
		fx = ex[v];
 8003f9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003fa8:	4413      	add	r3, r2
 8003faa:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 8003fae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		ey[v] = EWMA_ALPHA * y + (1.0 - EWMA_ALPHA) * fy;
 8003fb2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8003fb6:	f7fc fa6b 	bl	8000490 <__aeabi_f2d>
 8003fba:	a3b1      	add	r3, pc, #708	; (adr r3, 8004280 <main+0x480>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc faba 	bl	8000538 <__aeabi_dmul>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	4625      	mov	r5, r4
 8003fca:	461c      	mov	r4, r3
 8003fcc:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8003fd0:	f7fc fa5e 	bl	8000490 <__aeabi_f2d>
 8003fd4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004288 <main+0x488>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f7fc faad 	bl	8000538 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc f8f5 	bl	80001d4 <__adddf3>
 8003fea:	4603      	mov	r3, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f7fc fd51 	bl	8000a98 <__aeabi_d2f>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8004002:	440b      	add	r3, r1
 8004004:	f843 2ce4 	str.w	r2, [r3, #-228]
		fy = ey[v];
 8004008:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004012:	4413      	add	r3, r2
 8004014:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8004018:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		ez[v] = EWMA_ALPHA * z + (1.0 - EWMA_ALPHA) * fz;
 800401c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004020:	f7fc fa36 	bl	8000490 <__aeabi_f2d>
 8004024:	a396      	add	r3, pc, #600	; (adr r3, 8004280 <main+0x480>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f7fc fa85 	bl	8000538 <__aeabi_dmul>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	4625      	mov	r5, r4
 8004034:	461c      	mov	r4, r3
 8004036:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 800403a:	f7fc fa29 	bl	8000490 <__aeabi_f2d>
 800403e:	a392      	add	r3, pc, #584	; (adr r3, 8004288 <main+0x488>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fa78 	bl	8000538 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	f7fc f8c0 	bl	80001d4 <__adddf3>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4618      	mov	r0, r3
 800405a:	4621      	mov	r1, r4
 800405c:	f7fc fd1c 	bl	8000a98 <__aeabi_d2f>
 8004060:	4601      	mov	r1, r0
 8004062:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004066:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800406a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		fz = ez[v];
 800406e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004072:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

		// Calculating variance
		vx[v] = variance(ex, 0, v + 1);
 800407e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fdd4 	bl	8003c38 <variance>
 8004090:	4601      	mov	r1, r0
 8004092:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004096:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800409a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		vy[v] = variance(ey, 0, v + 1);
 800409e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fdc4 	bl	8003c38 <variance>
 80040b0:	4601      	mov	r1, r0
 80040b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80040ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		vz[v] = variance(ez, 0, v + 1);
 80040be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fdb4 	bl	8003c38 <variance>
 80040d0:	4601      	mov	r1, r0
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80040d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Calculating EWMA for variance
		vx[v] = EWMA_ALPHA * vx[v] + (1.0 - EWMA_ALPHA) * fvx;
 80040dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040e0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc f9d1 	bl	8000490 <__aeabi_f2d>
 80040ee:	a364      	add	r3, pc, #400	; (adr r3, 8004280 <main+0x480>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc fa20 	bl	8000538 <__aeabi_dmul>
 80040f8:	4603      	mov	r3, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4625      	mov	r5, r4
 80040fe:	461c      	mov	r4, r3
 8004100:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8004104:	f7fc f9c4 	bl	8000490 <__aeabi_f2d>
 8004108:	a35f      	add	r3, pc, #380	; (adr r3, 8004288 <main+0x488>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fa13 	bl	8000538 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4620      	mov	r0, r4
 8004118:	4629      	mov	r1, r5
 800411a:	f7fc f85b 	bl	80001d4 <__adddf3>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	4618      	mov	r0, r3
 8004124:	4621      	mov	r1, r4
 8004126:	f7fc fcb7 	bl	8000a98 <__aeabi_d2f>
 800412a:	4601      	mov	r1, r0
 800412c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004130:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		fvx = vx[v];
 8004138:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800413c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		vy[v] = EWMA_ALPHA * vy[v] + (1.0 - EWMA_ALPHA) * fvy;
 8004148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f99b 	bl	8000490 <__aeabi_f2d>
 800415a:	a349      	add	r3, pc, #292	; (adr r3, 8004280 <main+0x480>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc f9ea 	bl	8000538 <__aeabi_dmul>
 8004164:	4603      	mov	r3, r0
 8004166:	460c      	mov	r4, r1
 8004168:	4625      	mov	r5, r4
 800416a:	461c      	mov	r4, r3
 800416c:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8004170:	f7fc f98e 	bl	8000490 <__aeabi_f2d>
 8004174:	a344      	add	r3, pc, #272	; (adr r3, 8004288 <main+0x488>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f9dd 	bl	8000538 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4620      	mov	r0, r4
 8004184:	4629      	mov	r1, r5
 8004186:	f7fc f825 	bl	80001d4 <__adddf3>
 800418a:	4603      	mov	r3, r0
 800418c:	460c      	mov	r4, r1
 800418e:	4618      	mov	r0, r3
 8004190:	4621      	mov	r1, r4
 8004192:	f7fc fc81 	bl	8000a98 <__aeabi_d2f>
 8004196:	4601      	mov	r1, r0
 8004198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		fvy = vy[v];
 80041a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041a8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80041ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		vz[v] = EWMA_ALPHA * vz[v] + (1.0 - EWMA_ALPHA) * fvz;
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80041ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f966 	bl	8000490 <__aeabi_f2d>
 80041c4:	a32e      	add	r3, pc, #184	; (adr r3, 8004280 <main+0x480>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc f9b5 	bl	8000538 <__aeabi_dmul>
 80041ce:	4603      	mov	r3, r0
 80041d0:	460c      	mov	r4, r1
 80041d2:	4625      	mov	r5, r4
 80041d4:	461c      	mov	r4, r3
 80041d6:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 80041da:	f7fc f959 	bl	8000490 <__aeabi_f2d>
 80041de:	a32a      	add	r3, pc, #168	; (adr r3, 8004288 <main+0x488>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc f9a8 	bl	8000538 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4620      	mov	r0, r4
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7fb fff0 	bl	80001d4 <__adddf3>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4618      	mov	r0, r3
 80041fa:	4621      	mov	r1, r4
 80041fc:	f7fc fc4c 	bl	8000a98 <__aeabi_d2f>
 8004200:	4601      	mov	r1, r0
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		fvz = vz[v];
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004216:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

		// Filled up the arrays
		if((v + 1) < SIZE) {
 800421a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800421e:	3301      	adds	r3, #1
 8004220:	2b09      	cmp	r3, #9
 8004222:	dc05      	bgt.n	8004230 <main+0x430>
			v++;
 8004224:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004228:	3301      	adds	r3, #1
 800422a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800422e:	e66b      	b.n	8003f08 <main+0x108>
		} else {

			// Checking movement
			moving = (vx[v] > OFFSET) || (vy[v] > OFFSET) || (vz[v] > OFFSET);
 8004230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004234:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423c:	4914      	ldr	r1, [pc, #80]	; (8004290 <main+0x490>)
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc ff44 	bl	80010cc <__aeabi_fcmpgt>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <main+0x47c>
 800424a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800424e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004256:	490e      	ldr	r1, [pc, #56]	; (8004290 <main+0x490>)
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc ff37 	bl	80010cc <__aeabi_fcmpgt>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <main+0x47c>
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	4908      	ldr	r1, [pc, #32]	; (8004290 <main+0x490>)
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc ff2b 	bl	80010cc <__aeabi_fcmpgt>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <main+0x494>
 800427c:	2301      	movs	r3, #1
 800427e:	e00a      	b.n	8004296 <main+0x496>
 8004280:	33333333 	.word	0x33333333
 8004284:	3fd33333 	.word	0x3fd33333
 8004288:	66666666 	.word	0x66666666
 800428c:	3fe66666 	.word	0x3fe66666
 8004290:	459c4000 	.word	0x459c4000
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			if(moving) {
 800429a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d039      	beq.n	8004316 <main+0x516>
				prependToLinkedList(signalX, ex[v] / ACCELEROMETER_DATA_DIVIDER);
 80042a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80042ac:	4413      	add	r3, r2
 80042ae:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80042b2:	495c      	ldr	r1, [pc, #368]	; (8004424 <main+0x624>)
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc fe01 	bl	8000ebc <__aeabi_fdiv>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4619      	mov	r1, r3
 80042be:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80042c2:	f7ff fc1f 	bl	8003b04 <prependToLinkedList>
				prependToLinkedList(signalY, ey[v] / ACCELEROMETER_DATA_DIVIDER);
 80042c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80042d0:	4413      	add	r3, r2
 80042d2:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80042d6:	4953      	ldr	r1, [pc, #332]	; (8004424 <main+0x624>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fdef 	bl	8000ebc <__aeabi_fdiv>
 80042de:	4603      	mov	r3, r0
 80042e0:	4619      	mov	r1, r3
 80042e2:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80042e6:	f7ff fc0d 	bl	8003b04 <prependToLinkedList>
				prependToLinkedList(signalZ, ez[v] / ACCELEROMETER_DATA_DIVIDER);
 80042ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042ee:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80042f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f6:	494b      	ldr	r1, [pc, #300]	; (8004424 <main+0x624>)
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc fddf 	bl	8000ebc <__aeabi_fdiv>
 80042fe:	4603      	mov	r3, r0
 8004300:	4619      	mov	r1, r3
 8004302:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004306:	f7ff fbfd 	bl	8003b04 <prependToLinkedList>
				count++;
 800430a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800430e:	3301      	adds	r3, #1
 8004310:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004314:	e024      	b.n	8004360 <main+0x560>
//				TM_DISCO_LedOn(LED_GREEN);
			} else {
				if(count > 10 && count < 100) {
 8004316:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800431a:	2b0a      	cmp	r3, #10
 800431c:	dd0d      	ble.n	800433a <main+0x53a>
 800431e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004322:	2b63      	cmp	r3, #99	; 0x63
 8004324:	dc09      	bgt.n	800433a <main+0x53a>
					recognizeGesture(signalX, signalY, signalZ, count);
 8004326:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800432a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800432e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004332:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8004336:	f7ff fccd 	bl	8003cd4 <recognizeGesture>
				}
				if(count > 0) {
 800433a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800433e:	2b00      	cmp	r3, #0
 8004340:	dd0e      	ble.n	8004360 <main+0x560>
					freeLinkedList(signalX);
 8004342:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8004346:	f7ff fc1b 	bl	8003b80 <freeLinkedList>
					freeLinkedList(signalY);
 800434a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800434e:	f7ff fc17 	bl	8003b80 <freeLinkedList>
					freeLinkedList(signalZ);
 8004352:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004356:	f7ff fc13 	bl	8003b80 <freeLinkedList>
					count = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
				}
//				TM_DISCO_LedOff(LED_GREEN);
			}

			// Pushing guys left
			for(int i = 1; i < SIZE; i++) {
 8004360:	2301      	movs	r3, #1
 8004362:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004366:	e058      	b.n	800441a <main+0x61a>
				ex[i - 1] = ex[i];
 8004368:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800436c:	1e59      	subs	r1, r3, #1
 800436e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004378:	4413      	add	r3, r2
 800437a:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800437e:	008b      	lsls	r3, r1, #2
 8004380:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8004384:	440b      	add	r3, r1
 8004386:	f843 2cbc 	str.w	r2, [r3, #-188]
				ey[i - 1] = ey[i];
 800438a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800438e:	1e59      	subs	r1, r3, #1
 8004390:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800439a:	4413      	add	r3, r2
 800439c:	f853 2ce4 	ldr.w	r2, [r3, #-228]
 80043a0:	008b      	lsls	r3, r1, #2
 80043a2:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 80043a6:	440b      	add	r3, r1
 80043a8:	f843 2ce4 	str.w	r2, [r3, #-228]
				ez[i - 1] = ez[i];
 80043ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043b0:	1e5a      	subs	r2, r3, #1
 80043b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043b6:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80043ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80043be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				vx[i - 1] = vx[i];
 80043c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043d0:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80043d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80043d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				vy[i - 1] = vy[i];
 80043e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ea:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80043ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80043f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				vz[i - 1] = vz[i];
 80043fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8004406:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}
//				TM_DISCO_LedOff(LED_GREEN);
			}

			// Pushing guys left
			for(int i = 1; i < SIZE; i++) {
 8004410:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004414:	3301      	adds	r3, #1
 8004416:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800441a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800441e:	2b09      	cmp	r3, #9
 8004420:	dda2      	ble.n	8004368 <main+0x568>
				vz[i - 1] = vz[i];
			}

		}

	}
 8004422:	e571      	b.n	8003f08 <main+0x108>
 8004424:	42c80000 	.word	0x42c80000

08004428 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8004432:	bf00      	nop
}
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8004440:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <__libc_init_array>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <__libc_init_array+0x3c>)
 8004450:	4c0e      	ldr	r4, [pc, #56]	; (800448c <__libc_init_array+0x40>)
 8004452:	1ae4      	subs	r4, r4, r3
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	2500      	movs	r5, #0
 8004458:	461e      	mov	r6, r3
 800445a:	42a5      	cmp	r5, r4
 800445c:	d004      	beq.n	8004468 <__libc_init_array+0x1c>
 800445e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004462:	4798      	blx	r3
 8004464:	3501      	adds	r5, #1
 8004466:	e7f8      	b.n	800445a <__libc_init_array+0xe>
 8004468:	f001 f95a 	bl	8005720 <_init>
 800446c:	4c08      	ldr	r4, [pc, #32]	; (8004490 <__libc_init_array+0x44>)
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <__libc_init_array+0x48>)
 8004470:	1ae4      	subs	r4, r4, r3
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2500      	movs	r5, #0
 8004476:	461e      	mov	r6, r3
 8004478:	42a5      	cmp	r5, r4
 800447a:	d004      	beq.n	8004486 <__libc_init_array+0x3a>
 800447c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004480:	4798      	blx	r3
 8004482:	3501      	adds	r5, #1
 8004484:	e7f8      	b.n	8004478 <__libc_init_array+0x2c>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	08005828 	.word	0x08005828
 800448c:	08005828 	.word	0x08005828
 8004490:	0800582c 	.word	0x0800582c
 8004494:	08005828 	.word	0x08005828

08004498 <malloc>:
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <malloc+0xc>)
 800449a:	4601      	mov	r1, r0
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f000 b859 	b.w	8004554 <_malloc_r>
 80044a2:	bf00      	nop
 80044a4:	20000510 	.word	0x20000510

080044a8 <free>:
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <free+0xc>)
 80044aa:	4601      	mov	r1, r0
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	f000 b803 	b.w	80044b8 <_free_r>
 80044b2:	bf00      	nop
 80044b4:	20000510 	.word	0x20000510

080044b8 <_free_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4605      	mov	r5, r0
 80044bc:	2900      	cmp	r1, #0
 80044be:	d046      	beq.n	800454e <_free_r+0x96>
 80044c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c4:	1f0c      	subs	r4, r1, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfb8      	it	lt
 80044ca:	18e4      	addlt	r4, r4, r3
 80044cc:	f000 f8b0 	bl	8004630 <__malloc_lock>
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <_free_r+0x98>)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	4611      	mov	r1, r2
 80044d6:	b913      	cbnz	r3, 80044de <_free_r+0x26>
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6014      	str	r4, [r2, #0]
 80044dc:	e032      	b.n	8004544 <_free_r+0x8c>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	d90e      	bls.n	8004500 <_free_r+0x48>
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	18a0      	adds	r0, r4, r2
 80044e6:	4283      	cmp	r3, r0
 80044e8:	bf04      	itt	eq
 80044ea:	6818      	ldreq	r0, [r3, #0]
 80044ec:	685b      	ldreq	r3, [r3, #4]
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	bf04      	itt	eq
 80044f2:	1812      	addeq	r2, r2, r0
 80044f4:	6022      	streq	r2, [r4, #0]
 80044f6:	600c      	str	r4, [r1, #0]
 80044f8:	e024      	b.n	8004544 <_free_r+0x8c>
 80044fa:	42a2      	cmp	r2, r4
 80044fc:	d803      	bhi.n	8004506 <_free_r+0x4e>
 80044fe:	4613      	mov	r3, r2
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	2a00      	cmp	r2, #0
 8004504:	d1f9      	bne.n	80044fa <_free_r+0x42>
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	1819      	adds	r1, r3, r0
 800450a:	42a1      	cmp	r1, r4
 800450c:	d10b      	bne.n	8004526 <_free_r+0x6e>
 800450e:	6821      	ldr	r1, [r4, #0]
 8004510:	4401      	add	r1, r0
 8004512:	1858      	adds	r0, r3, r1
 8004514:	4282      	cmp	r2, r0
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	d114      	bne.n	8004544 <_free_r+0x8c>
 800451a:	6810      	ldr	r0, [r2, #0]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	4401      	add	r1, r0
 8004522:	6019      	str	r1, [r3, #0]
 8004524:	e00e      	b.n	8004544 <_free_r+0x8c>
 8004526:	d902      	bls.n	800452e <_free_r+0x76>
 8004528:	230c      	movs	r3, #12
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	e00a      	b.n	8004544 <_free_r+0x8c>
 800452e:	6821      	ldr	r1, [r4, #0]
 8004530:	1860      	adds	r0, r4, r1
 8004532:	4282      	cmp	r2, r0
 8004534:	bf04      	itt	eq
 8004536:	6810      	ldreq	r0, [r2, #0]
 8004538:	6852      	ldreq	r2, [r2, #4]
 800453a:	6062      	str	r2, [r4, #4]
 800453c:	bf04      	itt	eq
 800453e:	1809      	addeq	r1, r1, r0
 8004540:	6021      	streq	r1, [r4, #0]
 8004542:	605c      	str	r4, [r3, #4]
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454a:	f000 b872 	b.w	8004632 <__malloc_unlock>
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	2000057c 	.word	0x2000057c

08004554 <_malloc_r>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	1ccd      	adds	r5, r1, #3
 8004558:	f025 0503 	bic.w	r5, r5, #3
 800455c:	3508      	adds	r5, #8
 800455e:	2d0c      	cmp	r5, #12
 8004560:	bf38      	it	cc
 8004562:	250c      	movcc	r5, #12
 8004564:	2d00      	cmp	r5, #0
 8004566:	4606      	mov	r6, r0
 8004568:	db01      	blt.n	800456e <_malloc_r+0x1a>
 800456a:	42a9      	cmp	r1, r5
 800456c:	d902      	bls.n	8004574 <_malloc_r+0x20>
 800456e:	230c      	movs	r3, #12
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	e046      	b.n	8004602 <_malloc_r+0xae>
 8004574:	f000 f85c 	bl	8004630 <__malloc_lock>
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <_malloc_r+0xb4>)
 800457a:	681c      	ldr	r4, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	4621      	mov	r1, r4
 8004580:	b1a1      	cbz	r1, 80045ac <_malloc_r+0x58>
 8004582:	680b      	ldr	r3, [r1, #0]
 8004584:	1b5b      	subs	r3, r3, r5
 8004586:	d40e      	bmi.n	80045a6 <_malloc_r+0x52>
 8004588:	2b0b      	cmp	r3, #11
 800458a:	d903      	bls.n	8004594 <_malloc_r+0x40>
 800458c:	600b      	str	r3, [r1, #0]
 800458e:	18cc      	adds	r4, r1, r3
 8004590:	50cd      	str	r5, [r1, r3]
 8004592:	e01e      	b.n	80045d2 <_malloc_r+0x7e>
 8004594:	428c      	cmp	r4, r1
 8004596:	bf0d      	iteet	eq
 8004598:	6863      	ldreq	r3, [r4, #4]
 800459a:	684b      	ldrne	r3, [r1, #4]
 800459c:	6063      	strne	r3, [r4, #4]
 800459e:	6013      	streq	r3, [r2, #0]
 80045a0:	bf18      	it	ne
 80045a2:	460c      	movne	r4, r1
 80045a4:	e015      	b.n	80045d2 <_malloc_r+0x7e>
 80045a6:	460c      	mov	r4, r1
 80045a8:	6849      	ldr	r1, [r1, #4]
 80045aa:	e7e9      	b.n	8004580 <_malloc_r+0x2c>
 80045ac:	4c17      	ldr	r4, [pc, #92]	; (800460c <_malloc_r+0xb8>)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	b91b      	cbnz	r3, 80045ba <_malloc_r+0x66>
 80045b2:	4630      	mov	r0, r6
 80045b4:	f000 f82c 	bl	8004610 <_sbrk_r>
 80045b8:	6020      	str	r0, [r4, #0]
 80045ba:	4629      	mov	r1, r5
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f827 	bl	8004610 <_sbrk_r>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d018      	beq.n	80045f8 <_malloc_r+0xa4>
 80045c6:	1cc4      	adds	r4, r0, #3
 80045c8:	f024 0403 	bic.w	r4, r4, #3
 80045cc:	42a0      	cmp	r0, r4
 80045ce:	d10d      	bne.n	80045ec <_malloc_r+0x98>
 80045d0:	6025      	str	r5, [r4, #0]
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f82d 	bl	8004632 <__malloc_unlock>
 80045d8:	f104 000b 	add.w	r0, r4, #11
 80045dc:	1d23      	adds	r3, r4, #4
 80045de:	f020 0007 	bic.w	r0, r0, #7
 80045e2:	1ac3      	subs	r3, r0, r3
 80045e4:	d00e      	beq.n	8004604 <_malloc_r+0xb0>
 80045e6:	425a      	negs	r2, r3
 80045e8:	50e2      	str	r2, [r4, r3]
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4630      	mov	r0, r6
 80045f0:	f000 f80e 	bl	8004610 <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d1eb      	bne.n	80045d0 <_malloc_r+0x7c>
 80045f8:	230c      	movs	r3, #12
 80045fa:	6033      	str	r3, [r6, #0]
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f818 	bl	8004632 <__malloc_unlock>
 8004602:	2000      	movs	r0, #0
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	bf00      	nop
 8004608:	2000057c 	.word	0x2000057c
 800460c:	20000578 	.word	0x20000578

08004610 <_sbrk_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4c06      	ldr	r4, [pc, #24]	; (800462c <_sbrk_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4605      	mov	r5, r0
 8004618:	4608      	mov	r0, r1
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	f7fe fce2 	bl	8002fe4 <_sbrk>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_sbrk_r+0x1a>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	b103      	cbz	r3, 800462a <_sbrk_r+0x1a>
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000614 	.word	0x20000614

08004630 <__malloc_lock>:
 8004630:	4770      	bx	lr

08004632 <__malloc_unlock>:
 8004632:	4770      	bx	lr

08004634 <pow>:
 8004634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004638:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80048fc <pow+0x2c8>
 800463c:	b08f      	sub	sp, #60	; 0x3c
 800463e:	461d      	mov	r5, r3
 8004640:	4682      	mov	sl, r0
 8004642:	468b      	mov	fp, r1
 8004644:	4614      	mov	r4, r2
 8004646:	f000 f9b3 	bl	80049b0 <__ieee754_pow>
 800464a:	f999 3000 	ldrsb.w	r3, [r9]
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	3301      	adds	r3, #1
 8004652:	e9cd 0100 	strd	r0, r1, [sp]
 8004656:	46c8      	mov	r8, r9
 8004658:	f000 813d 	beq.w	80048d6 <pow+0x2a2>
 800465c:	4622      	mov	r2, r4
 800465e:	462b      	mov	r3, r5
 8004660:	4620      	mov	r0, r4
 8004662:	4629      	mov	r1, r5
 8004664:	f7fc fa02 	bl	8000a6c <__aeabi_dcmpun>
 8004668:	4606      	mov	r6, r0
 800466a:	2800      	cmp	r0, #0
 800466c:	f040 8133 	bne.w	80048d6 <pow+0x2a2>
 8004670:	4652      	mov	r2, sl
 8004672:	465b      	mov	r3, fp
 8004674:	4650      	mov	r0, sl
 8004676:	4659      	mov	r1, fp
 8004678:	f7fc f9f8 	bl	8000a6c <__aeabi_dcmpun>
 800467c:	9003      	str	r0, [sp, #12]
 800467e:	b1d0      	cbz	r0, 80046b6 <pow+0x82>
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	4620      	mov	r0, r4
 8004686:	4629      	mov	r1, r5
 8004688:	f7fc f9be 	bl	8000a08 <__aeabi_dcmpeq>
 800468c:	2800      	cmp	r0, #0
 800468e:	f000 8122 	beq.w	80048d6 <pow+0x2a2>
 8004692:	2301      	movs	r3, #1
 8004694:	9304      	str	r3, [sp, #16]
 8004696:	4b92      	ldr	r3, [pc, #584]	; (80048e0 <pow+0x2ac>)
 8004698:	9305      	str	r3, [sp, #20]
 800469a:	4b92      	ldr	r3, [pc, #584]	; (80048e4 <pow+0x2b0>)
 800469c:	960c      	str	r6, [sp, #48]	; 0x30
 800469e:	2200      	movs	r2, #0
 80046a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80046a4:	9b02      	ldr	r3, [sp, #8]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80046ac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80046b0:	f040 8084 	bne.w	80047bc <pow+0x188>
 80046b4:	e10c      	b.n	80048d0 <pow+0x29c>
 80046b6:	2600      	movs	r6, #0
 80046b8:	2700      	movs	r7, #0
 80046ba:	4632      	mov	r2, r6
 80046bc:	463b      	mov	r3, r7
 80046be:	4650      	mov	r0, sl
 80046c0:	4659      	mov	r1, fp
 80046c2:	f7fc f9a1 	bl	8000a08 <__aeabi_dcmpeq>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d03f      	beq.n	800474a <pow+0x116>
 80046ca:	4632      	mov	r2, r6
 80046cc:	463b      	mov	r3, r7
 80046ce:	4620      	mov	r0, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	f7fc f999 	bl	8000a08 <__aeabi_dcmpeq>
 80046d6:	4680      	mov	r8, r0
 80046d8:	b198      	cbz	r0, 8004702 <pow+0xce>
 80046da:	2301      	movs	r3, #1
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	4b80      	ldr	r3, [pc, #512]	; (80048e0 <pow+0x2ac>)
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	930c      	str	r3, [sp, #48]	; 0x30
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80046ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80046f0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d061      	beq.n	80047bc <pow+0x188>
 80046f8:	4b7a      	ldr	r3, [pc, #488]	; (80048e4 <pow+0x2b0>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004700:	e0e0      	b.n	80048c4 <pow+0x290>
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f000 fef4 	bl	80054f2 <finite>
 800470a:	2800      	cmp	r0, #0
 800470c:	f000 80e3 	beq.w	80048d6 <pow+0x2a2>
 8004710:	4632      	mov	r2, r6
 8004712:	463b      	mov	r3, r7
 8004714:	4620      	mov	r0, r4
 8004716:	4629      	mov	r1, r5
 8004718:	f7fc f980 	bl	8000a1c <__aeabi_dcmplt>
 800471c:	2800      	cmp	r0, #0
 800471e:	f000 80da 	beq.w	80048d6 <pow+0x2a2>
 8004722:	2301      	movs	r3, #1
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	4b6e      	ldr	r3, [pc, #440]	; (80048e0 <pow+0x2ac>)
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	f999 3000 	ldrsb.w	r3, [r9]
 800472e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004732:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004736:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d030      	beq.n	80047a0 <pow+0x16c>
 800473e:	496a      	ldr	r1, [pc, #424]	; (80048e8 <pow+0x2b4>)
 8004740:	2000      	movs	r0, #0
 8004742:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004746:	2b02      	cmp	r3, #2
 8004748:	e037      	b.n	80047ba <pow+0x186>
 800474a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800474e:	f000 fed0 	bl	80054f2 <finite>
 8004752:	9002      	str	r0, [sp, #8]
 8004754:	2800      	cmp	r0, #0
 8004756:	f040 808a 	bne.w	800486e <pow+0x23a>
 800475a:	4650      	mov	r0, sl
 800475c:	4659      	mov	r1, fp
 800475e:	f000 fec8 	bl	80054f2 <finite>
 8004762:	2800      	cmp	r0, #0
 8004764:	f000 8083 	beq.w	800486e <pow+0x23a>
 8004768:	4620      	mov	r0, r4
 800476a:	4629      	mov	r1, r5
 800476c:	f000 fec1 	bl	80054f2 <finite>
 8004770:	2800      	cmp	r0, #0
 8004772:	d07c      	beq.n	800486e <pow+0x23a>
 8004774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f7fc f976 	bl	8000a6c <__aeabi_dcmpun>
 8004780:	f999 9000 	ldrsb.w	r9, [r9]
 8004784:	4b56      	ldr	r3, [pc, #344]	; (80048e0 <pow+0x2ac>)
 8004786:	b310      	cbz	r0, 80047ce <pow+0x19a>
 8004788:	2201      	movs	r2, #1
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	9b02      	ldr	r3, [sp, #8]
 800478e:	9204      	str	r2, [sp, #16]
 8004790:	930c      	str	r3, [sp, #48]	; 0x30
 8004792:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004796:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800479a:	f1b9 0f00 	cmp.w	r9, #0
 800479e:	d102      	bne.n	80047a6 <pow+0x172>
 80047a0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80047a4:	e00a      	b.n	80047bc <pow+0x188>
 80047a6:	4632      	mov	r2, r6
 80047a8:	463b      	mov	r3, r7
 80047aa:	4630      	mov	r0, r6
 80047ac:	4639      	mov	r1, r7
 80047ae:	f7fb ffed 	bl	800078c <__aeabi_ddiv>
 80047b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047b6:	f1b9 0f02 	cmp.w	r9, #2
 80047ba:	d004      	beq.n	80047c6 <pow+0x192>
 80047bc:	a804      	add	r0, sp, #16
 80047be:	f000 fe9e 	bl	80054fe <matherr>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d17e      	bne.n	80048c4 <pow+0x290>
 80047c6:	f000 ffa5 	bl	8005714 <__errno>
 80047ca:	2321      	movs	r3, #33	; 0x21
 80047cc:	e079      	b.n	80048c2 <pow+0x28e>
 80047ce:	2203      	movs	r2, #3
 80047d0:	9204      	str	r2, [sp, #16]
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	900c      	str	r0, [sp, #48]	; 0x30
 80047d6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80047da:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80047de:	f1b9 0f00 	cmp.w	r9, #0
 80047e2:	d122      	bne.n	800482a <pow+0x1f6>
 80047e4:	4b41      	ldr	r3, [pc, #260]	; (80048ec <pow+0x2b8>)
 80047e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80047ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80047ee:	4650      	mov	r0, sl
 80047f0:	4632      	mov	r2, r6
 80047f2:	463b      	mov	r3, r7
 80047f4:	4659      	mov	r1, fp
 80047f6:	f7fc f911 	bl	8000a1c <__aeabi_dcmplt>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d05a      	beq.n	80048b4 <pow+0x280>
 80047fe:	2200      	movs	r2, #0
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <pow+0x2bc>)
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fb fe97 	bl	8000538 <__aeabi_dmul>
 800480a:	4604      	mov	r4, r0
 800480c:	460d      	mov	r5, r1
 800480e:	f000 fe7f 	bl	8005510 <rint>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fc f8f5 	bl	8000a08 <__aeabi_dcmpeq>
 800481e:	2800      	cmp	r0, #0
 8004820:	d144      	bne.n	80048ac <pow+0x278>
 8004822:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <pow+0x2c0>)
 8004828:	e01e      	b.n	8004868 <pow+0x234>
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <pow+0x2c4>)
 800482c:	2200      	movs	r2, #0
 800482e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004832:	4650      	mov	r0, sl
 8004834:	4632      	mov	r2, r6
 8004836:	463b      	mov	r3, r7
 8004838:	4659      	mov	r1, fp
 800483a:	f7fc f8ef 	bl	8000a1c <__aeabi_dcmplt>
 800483e:	2800      	cmp	r0, #0
 8004840:	d034      	beq.n	80048ac <pow+0x278>
 8004842:	2200      	movs	r2, #0
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <pow+0x2bc>)
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fe75 	bl	8000538 <__aeabi_dmul>
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	f000 fe5d 	bl	8005510 <rint>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f7fc f8d3 	bl	8000a08 <__aeabi_dcmpeq>
 8004862:	bb18      	cbnz	r0, 80048ac <pow+0x278>
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <pow+0x2b4>)
 8004866:	2200      	movs	r2, #0
 8004868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800486c:	e01e      	b.n	80048ac <pow+0x278>
 800486e:	2600      	movs	r6, #0
 8004870:	2700      	movs	r7, #0
 8004872:	4632      	mov	r2, r6
 8004874:	463b      	mov	r3, r7
 8004876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800487a:	f7fc f8c5 	bl	8000a08 <__aeabi_dcmpeq>
 800487e:	b350      	cbz	r0, 80048d6 <pow+0x2a2>
 8004880:	4650      	mov	r0, sl
 8004882:	4659      	mov	r1, fp
 8004884:	f000 fe35 	bl	80054f2 <finite>
 8004888:	b328      	cbz	r0, 80048d6 <pow+0x2a2>
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f000 fe30 	bl	80054f2 <finite>
 8004892:	b300      	cbz	r0, 80048d6 <pow+0x2a2>
 8004894:	2304      	movs	r3, #4
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <pow+0x2ac>)
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80048a4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80048a8:	2300      	movs	r3, #0
 80048aa:	930c      	str	r3, [sp, #48]	; 0x30
 80048ac:	f998 3000 	ldrsb.w	r3, [r8]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d003      	beq.n	80048bc <pow+0x288>
 80048b4:	a804      	add	r0, sp, #16
 80048b6:	f000 fe22 	bl	80054fe <matherr>
 80048ba:	b918      	cbnz	r0, 80048c4 <pow+0x290>
 80048bc:	f000 ff2a 	bl	8005714 <__errno>
 80048c0:	2322      	movs	r3, #34	; 0x22
 80048c2:	6003      	str	r3, [r0, #0]
 80048c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048c6:	b11b      	cbz	r3, 80048d0 <pow+0x29c>
 80048c8:	f000 ff24 	bl	8005714 <__errno>
 80048cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ce:	6003      	str	r3, [r0, #0]
 80048d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048d4:	e001      	b.n	80048da <pow+0x2a6>
 80048d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048da:	b00f      	add	sp, #60	; 0x3c
 80048dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e0:	080057da 	.word	0x080057da
 80048e4:	3ff00000 	.word	0x3ff00000
 80048e8:	fff00000 	.word	0xfff00000
 80048ec:	47efffff 	.word	0x47efffff
 80048f0:	3fe00000 	.word	0x3fe00000
 80048f4:	c7efffff 	.word	0xc7efffff
 80048f8:	7ff00000 	.word	0x7ff00000
 80048fc:	20000514 	.word	0x20000514

08004900 <sqrt>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	b08b      	sub	sp, #44	; 0x2c
 8004906:	4606      	mov	r6, r0
 8004908:	460f      	mov	r7, r1
 800490a:	f000 fd45 	bl	8005398 <__ieee754_sqrt>
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <sqrt+0xa8>)
 8004910:	f993 a000 	ldrsb.w	sl, [r3]
 8004914:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	d03f      	beq.n	800499e <sqrt+0x9e>
 800491e:	4632      	mov	r2, r6
 8004920:	463b      	mov	r3, r7
 8004922:	4630      	mov	r0, r6
 8004924:	4639      	mov	r1, r7
 8004926:	f7fc f8a1 	bl	8000a6c <__aeabi_dcmpun>
 800492a:	4683      	mov	fp, r0
 800492c:	2800      	cmp	r0, #0
 800492e:	d136      	bne.n	800499e <sqrt+0x9e>
 8004930:	f04f 0800 	mov.w	r8, #0
 8004934:	f04f 0900 	mov.w	r9, #0
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f7fc f86c 	bl	8000a1c <__aeabi_dcmplt>
 8004944:	b358      	cbz	r0, 800499e <sqrt+0x9e>
 8004946:	2301      	movs	r3, #1
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <sqrt+0xac>)
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	f8cd b020 	str.w	fp, [sp, #32]
 8004952:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004956:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800495a:	f1ba 0f00 	cmp.w	sl, #0
 800495e:	d102      	bne.n	8004966 <sqrt+0x66>
 8004960:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004964:	e00a      	b.n	800497c <sqrt+0x7c>
 8004966:	4642      	mov	r2, r8
 8004968:	464b      	mov	r3, r9
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb ff0d 	bl	800078c <__aeabi_ddiv>
 8004972:	f1ba 0f02 	cmp.w	sl, #2
 8004976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800497a:	d003      	beq.n	8004984 <sqrt+0x84>
 800497c:	4668      	mov	r0, sp
 800497e:	f000 fdbe 	bl	80054fe <matherr>
 8004982:	b918      	cbnz	r0, 800498c <sqrt+0x8c>
 8004984:	f000 fec6 	bl	8005714 <__errno>
 8004988:	2321      	movs	r3, #33	; 0x21
 800498a:	6003      	str	r3, [r0, #0]
 800498c:	9b08      	ldr	r3, [sp, #32]
 800498e:	b11b      	cbz	r3, 8004998 <sqrt+0x98>
 8004990:	f000 fec0 	bl	8005714 <__errno>
 8004994:	9b08      	ldr	r3, [sp, #32]
 8004996:	6003      	str	r3, [r0, #0]
 8004998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800499c:	e001      	b.n	80049a2 <sqrt+0xa2>
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	b00b      	add	sp, #44	; 0x2c
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	20000514 	.word	0x20000514
 80049ac:	080057de 	.word	0x080057de

080049b0 <__ieee754_pow>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	b091      	sub	sp, #68	; 0x44
 80049b6:	e9cd 2300 	strd	r2, r3, [sp]
 80049ba:	e89d 0208 	ldmia.w	sp, {r3, r9}
 80049be:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80049c2:	4607      	mov	r7, r0
 80049c4:	4682      	mov	sl, r0
 80049c6:	ea56 0003 	orrs.w	r0, r6, r3
 80049ca:	460c      	mov	r4, r1
 80049cc:	4688      	mov	r8, r1
 80049ce:	f000 8497 	beq.w	8005300 <__ieee754_pow+0x950>
 80049d2:	4abd      	ldr	r2, [pc, #756]	; (8004cc8 <__ieee754_pow+0x318>)
 80049d4:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80049d8:	4295      	cmp	r5, r2
 80049da:	dc08      	bgt.n	80049ee <__ieee754_pow+0x3e>
 80049dc:	d102      	bne.n	80049e4 <__ieee754_pow+0x34>
 80049de:	b937      	cbnz	r7, 80049ee <__ieee754_pow+0x3e>
 80049e0:	f000 bc99 	b.w	8005316 <__ieee754_pow+0x966>
 80049e4:	4296      	cmp	r6, r2
 80049e6:	dc02      	bgt.n	80049ee <__ieee754_pow+0x3e>
 80049e8:	4296      	cmp	r6, r2
 80049ea:	d10e      	bne.n	8004a0a <__ieee754_pow+0x5a>
 80049ec:	b16b      	cbz	r3, 8004a0a <__ieee754_pow+0x5a>
 80049ee:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80049f2:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80049f6:	ea55 000a 	orrs.w	r0, r5, sl
 80049fa:	f000 8481 	beq.w	8005300 <__ieee754_pow+0x950>
 80049fe:	48b3      	ldr	r0, [pc, #716]	; (8004ccc <__ieee754_pow+0x31c>)
 8004a00:	b011      	add	sp, #68	; 0x44
 8004a02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a06:	f000 bd7d 	b.w	8005504 <nan>
 8004a0a:	f1b8 0f00 	cmp.w	r8, #0
 8004a0e:	da2a      	bge.n	8004a66 <__ieee754_pow+0xb6>
 8004a10:	4aaf      	ldr	r2, [pc, #700]	; (8004cd0 <__ieee754_pow+0x320>)
 8004a12:	4296      	cmp	r6, r2
 8004a14:	dc24      	bgt.n	8004a60 <__ieee754_pow+0xb0>
 8004a16:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8004a1a:	4296      	cmp	r6, r2
 8004a1c:	dd23      	ble.n	8004a66 <__ieee754_pow+0xb6>
 8004a1e:	1532      	asrs	r2, r6, #20
 8004a20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004a24:	2a14      	cmp	r2, #20
 8004a26:	dd0c      	ble.n	8004a42 <__ieee754_pow+0x92>
 8004a28:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8004a2c:	fa23 f102 	lsr.w	r1, r3, r2
 8004a30:	fa01 f202 	lsl.w	r2, r1, r2
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d116      	bne.n	8004a66 <__ieee754_pow+0xb6>
 8004a38:	f001 0101 	and.w	r1, r1, #1
 8004a3c:	f1c1 0b02 	rsb	fp, r1, #2
 8004a40:	e013      	b.n	8004a6a <__ieee754_pow+0xba>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d155      	bne.n	8004af2 <__ieee754_pow+0x142>
 8004a46:	f1c2 0214 	rsb	r2, r2, #20
 8004a4a:	fa46 f102 	asr.w	r1, r6, r2
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	4296      	cmp	r6, r2
 8004a54:	d12a      	bne.n	8004aac <__ieee754_pow+0xfc>
 8004a56:	f001 0101 	and.w	r1, r1, #1
 8004a5a:	f1c1 0b02 	rsb	fp, r1, #2
 8004a5e:	e026      	b.n	8004aae <__ieee754_pow+0xfe>
 8004a60:	f04f 0b02 	mov.w	fp, #2
 8004a64:	e001      	b.n	8004a6a <__ieee754_pow+0xba>
 8004a66:	f04f 0b00 	mov.w	fp, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d143      	bne.n	8004af6 <__ieee754_pow+0x146>
 8004a6e:	4a96      	ldr	r2, [pc, #600]	; (8004cc8 <__ieee754_pow+0x318>)
 8004a70:	4296      	cmp	r6, r2
 8004a72:	d11c      	bne.n	8004aae <__ieee754_pow+0xfe>
 8004a74:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8004a78:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8004a7c:	ea52 020a 	orrs.w	r2, r2, sl
 8004a80:	f000 843f 	beq.w	8005302 <__ieee754_pow+0x952>
 8004a84:	4b93      	ldr	r3, [pc, #588]	; (8004cd4 <__ieee754_pow+0x324>)
 8004a86:	429d      	cmp	r5, r3
 8004a88:	dd07      	ble.n	8004a9a <__ieee754_pow+0xea>
 8004a8a:	f1b9 0f00 	cmp.w	r9, #0
 8004a8e:	f280 843a 	bge.w	8005306 <__ieee754_pow+0x956>
 8004a92:	2300      	movs	r3, #0
 8004a94:	4619      	mov	r1, r3
 8004a96:	f000 bc43 	b.w	8005320 <__ieee754_pow+0x970>
 8004a9a:	f1b9 0f00 	cmp.w	r9, #0
 8004a9e:	daf8      	bge.n	8004a92 <__ieee754_pow+0xe2>
 8004aa0:	9a01      	ldr	r2, [sp, #4]
 8004aa2:	9b00      	ldr	r3, [sp, #0]
 8004aa4:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004aa8:	f000 bc3a 	b.w	8005320 <__ieee754_pow+0x970>
 8004aac:	469b      	mov	fp, r3
 8004aae:	4b8a      	ldr	r3, [pc, #552]	; (8004cd8 <__ieee754_pow+0x328>)
 8004ab0:	429e      	cmp	r6, r3
 8004ab2:	d108      	bne.n	8004ac6 <__ieee754_pow+0x116>
 8004ab4:	f1b9 0f00 	cmp.w	r9, #0
 8004ab8:	f280 8428 	bge.w	800530c <__ieee754_pow+0x95c>
 8004abc:	463a      	mov	r2, r7
 8004abe:	4623      	mov	r3, r4
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4985      	ldr	r1, [pc, #532]	; (8004cd8 <__ieee754_pow+0x328>)
 8004ac4:	e03e      	b.n	8004b44 <__ieee754_pow+0x194>
 8004ac6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004aca:	d105      	bne.n	8004ad8 <__ieee754_pow+0x128>
 8004acc:	463a      	mov	r2, r7
 8004ace:	4623      	mov	r3, r4
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	f000 bc11 	b.w	80052fa <__ieee754_pow+0x94a>
 8004ad8:	4b80      	ldr	r3, [pc, #512]	; (8004cdc <__ieee754_pow+0x32c>)
 8004ada:	4599      	cmp	r9, r3
 8004adc:	d10b      	bne.n	8004af6 <__ieee754_pow+0x146>
 8004ade:	f1b8 0f00 	cmp.w	r8, #0
 8004ae2:	db08      	blt.n	8004af6 <__ieee754_pow+0x146>
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	b011      	add	sp, #68	; 0x44
 8004aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aee:	f000 bc53 	b.w	8005398 <__ieee754_sqrt>
 8004af2:	f04f 0b00 	mov.w	fp, #0
 8004af6:	4638      	mov	r0, r7
 8004af8:	4621      	mov	r1, r4
 8004afa:	f000 fcf7 	bl	80054ec <fabs>
 8004afe:	f1ba 0f00 	cmp.w	sl, #0
 8004b02:	d12a      	bne.n	8004b5a <__ieee754_pow+0x1aa>
 8004b04:	b125      	cbz	r5, 8004b10 <__ieee754_pow+0x160>
 8004b06:	4b74      	ldr	r3, [pc, #464]	; (8004cd8 <__ieee754_pow+0x328>)
 8004b08:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d124      	bne.n	8004b5a <__ieee754_pow+0x1aa>
 8004b10:	f1b9 0f00 	cmp.w	r9, #0
 8004b14:	da05      	bge.n	8004b22 <__ieee754_pow+0x172>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	496e      	ldr	r1, [pc, #440]	; (8004cd8 <__ieee754_pow+0x328>)
 8004b1e:	f7fb fe35 	bl	800078c <__aeabi_ddiv>
 8004b22:	f1b8 0f00 	cmp.w	r8, #0
 8004b26:	f280 83f4 	bge.w	8005312 <__ieee754_pow+0x962>
 8004b2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004b2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004b32:	ea55 030b 	orrs.w	r3, r5, fp
 8004b36:	d108      	bne.n	8004b4a <__ieee754_pow+0x19a>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	f7fb fb48 	bl	80001d0 <__aeabi_dsub>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	f7fb fe22 	bl	800078c <__aeabi_ddiv>
 8004b48:	e3e3      	b.n	8005312 <__ieee754_pow+0x962>
 8004b4a:	f1bb 0f01 	cmp.w	fp, #1
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f040 83e6 	bne.w	8005320 <__ieee754_pow+0x970>
 8004b54:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004b58:	e3e2      	b.n	8005320 <__ieee754_pow+0x970>
 8004b5a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8004b5e:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b62:	930d      	str	r3, [sp, #52]	; 0x34
 8004b64:	ea5b 0303 	orrs.w	r3, fp, r3
 8004b68:	d104      	bne.n	8004b74 <__ieee754_pow+0x1c4>
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	4638      	mov	r0, r7
 8004b70:	4621      	mov	r1, r4
 8004b72:	e7e3      	b.n	8004b3c <__ieee754_pow+0x18c>
 8004b74:	4b5a      	ldr	r3, [pc, #360]	; (8004ce0 <__ieee754_pow+0x330>)
 8004b76:	429e      	cmp	r6, r3
 8004b78:	dd6d      	ble.n	8004c56 <__ieee754_pow+0x2a6>
 8004b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004b7e:	429e      	cmp	r6, r3
 8004b80:	dd0b      	ble.n	8004b9a <__ieee754_pow+0x1ea>
 8004b82:	4b54      	ldr	r3, [pc, #336]	; (8004cd4 <__ieee754_pow+0x324>)
 8004b84:	429d      	cmp	r5, r3
 8004b86:	dc0e      	bgt.n	8004ba6 <__ieee754_pow+0x1f6>
 8004b88:	f1b9 0f00 	cmp.w	r9, #0
 8004b8c:	da81      	bge.n	8004a92 <__ieee754_pow+0xe2>
 8004b8e:	a344      	add	r3, pc, #272	; (adr r3, 8004ca0 <__ieee754_pow+0x2f0>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	e3af      	b.n	80052fa <__ieee754_pow+0x94a>
 8004b9a:	4b52      	ldr	r3, [pc, #328]	; (8004ce4 <__ieee754_pow+0x334>)
 8004b9c:	429d      	cmp	r5, r3
 8004b9e:	ddf3      	ble.n	8004b88 <__ieee754_pow+0x1d8>
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <__ieee754_pow+0x328>)
 8004ba2:	429d      	cmp	r5, r3
 8004ba4:	dd03      	ble.n	8004bae <__ieee754_pow+0x1fe>
 8004ba6:	f1b9 0f00 	cmp.w	r9, #0
 8004baa:	dcf0      	bgt.n	8004b8e <__ieee754_pow+0x1de>
 8004bac:	e771      	b.n	8004a92 <__ieee754_pow+0xe2>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <__ieee754_pow+0x328>)
 8004bb2:	f7fb fb0d 	bl	80001d0 <__aeabi_dsub>
 8004bb6:	a33c      	add	r3, pc, #240	; (adr r3, 8004ca8 <__ieee754_pow+0x2f8>)
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	f7fb fcba 	bl	8000538 <__aeabi_dmul>
 8004bc4:	a33a      	add	r3, pc, #232	; (adr r3, 8004cb0 <__ieee754_pow+0x300>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	4606      	mov	r6, r0
 8004bcc:	460f      	mov	r7, r1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7fb fcb1 	bl	8000538 <__aeabi_dmul>
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bdc:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <__ieee754_pow+0x338>)
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7fb fca9 	bl	8000538 <__aeabi_dmul>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	a133      	add	r1, pc, #204	; (adr r1, 8004cb8 <__ieee754_pow+0x308>)
 8004bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bf0:	f7fb faee 	bl	80001d0 <__aeabi_dsub>
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	f7fb fc9e 	bl	8000538 <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	2000      	movs	r0, #0
 8004c02:	4936      	ldr	r1, [pc, #216]	; (8004cdc <__ieee754_pow+0x32c>)
 8004c04:	f7fb fae4 	bl	80001d0 <__aeabi_dsub>
 8004c08:	4622      	mov	r2, r4
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	4689      	mov	r9, r1
 8004c10:	4620      	mov	r0, r4
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7fb fc90 	bl	8000538 <__aeabi_dmul>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb fc8a 	bl	8000538 <__aeabi_dmul>
 8004c24:	a326      	add	r3, pc, #152	; (adr r3, 8004cc0 <__ieee754_pow+0x310>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fc85 	bl	8000538 <__aeabi_dmul>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c36:	f7fb facb 	bl	80001d0 <__aeabi_dsub>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	f7fb fac5 	bl	80001d4 <__adddf3>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c50:	4632      	mov	r2, r6
 8004c52:	463b      	mov	r3, r7
 8004c54:	e1a7      	b.n	8004fa6 <__ieee754_pow+0x5f6>
 8004c56:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	da05      	bge.n	8004c6c <__ieee754_pow+0x2bc>
 8004c60:	4b22      	ldr	r3, [pc, #136]	; (8004cec <__ieee754_pow+0x33c>)
 8004c62:	f7fb fc69 	bl	8000538 <__aeabi_dmul>
 8004c66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	152b      	asrs	r3, r5, #20
 8004c6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c72:	4413      	add	r3, r2
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <__ieee754_pow+0x340>)
 8004c76:	9307      	str	r3, [sp, #28]
 8004c78:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004c7c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004c86:	dd07      	ble.n	8004c98 <__ieee754_pow+0x2e8>
 8004c88:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <__ieee754_pow+0x344>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	dd34      	ble.n	8004cf8 <__ieee754_pow+0x348>
 8004c8e:	9b07      	ldr	r3, [sp, #28]
 8004c90:	3301      	adds	r3, #1
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004c98:	f04f 0a00 	mov.w	sl, #0
 8004c9c:	e02e      	b.n	8004cfc <__ieee754_pow+0x34c>
 8004c9e:	bf00      	nop
 8004ca0:	8800759c 	.word	0x8800759c
 8004ca4:	7e37e43c 	.word	0x7e37e43c
 8004ca8:	60000000 	.word	0x60000000
 8004cac:	3ff71547 	.word	0x3ff71547
 8004cb0:	f85ddf44 	.word	0xf85ddf44
 8004cb4:	3e54ae0b 	.word	0x3e54ae0b
 8004cb8:	55555555 	.word	0x55555555
 8004cbc:	3fd55555 	.word	0x3fd55555
 8004cc0:	652b82fe 	.word	0x652b82fe
 8004cc4:	3ff71547 	.word	0x3ff71547
 8004cc8:	7ff00000 	.word	0x7ff00000
 8004ccc:	080057d9 	.word	0x080057d9
 8004cd0:	433fffff 	.word	0x433fffff
 8004cd4:	3fefffff 	.word	0x3fefffff
 8004cd8:	3ff00000 	.word	0x3ff00000
 8004cdc:	3fe00000 	.word	0x3fe00000
 8004ce0:	41e00000 	.word	0x41e00000
 8004ce4:	3feffffe 	.word	0x3feffffe
 8004ce8:	3fd00000 	.word	0x3fd00000
 8004cec:	43400000 	.word	0x43400000
 8004cf0:	0003988e 	.word	0x0003988e
 8004cf4:	000bb679 	.word	0x000bb679
 8004cf8:	f04f 0a01 	mov.w	sl, #1
 8004cfc:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004d00:	930c      	str	r3, [sp, #48]	; 0x30
 8004d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d04:	4bd0      	ldr	r3, [pc, #832]	; (8005048 <__ieee754_pow+0x698>)
 8004d06:	4413      	add	r3, r2
 8004d08:	cb18      	ldmia	r3, {r3, r4}
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d18:	f7fb fa5a 	bl	80001d0 <__aeabi_dsub>
 8004d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d28:	f7fb fa54 	bl	80001d4 <__adddf3>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	2000      	movs	r0, #0
 8004d32:	49c6      	ldr	r1, [pc, #792]	; (800504c <__ieee754_pow+0x69c>)
 8004d34:	f7fb fd2a 	bl	800078c <__aeabi_ddiv>
 8004d38:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4630      	mov	r0, r6
 8004d42:	4639      	mov	r1, r7
 8004d44:	f7fb fbf8 	bl	8000538 <__aeabi_dmul>
 8004d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d50:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d54:	2300      	movs	r3, #0
 8004d56:	9302      	str	r3, [sp, #8]
 8004d58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004d5c:	106d      	asrs	r5, r5, #1
 8004d5e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004d62:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004d66:	2200      	movs	r2, #0
 8004d68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	f7fb fbe0 	bl	8000538 <__aeabi_dmul>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fb fa26 	bl	80001d0 <__aeabi_dsub>
 8004d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d88:	4606      	mov	r6, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa1e 	bl	80001d0 <__aeabi_dsub>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d9c:	f7fb fa18 	bl	80001d0 <__aeabi_dsub>
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	f7fb fbc8 	bl	8000538 <__aeabi_dmul>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fa0e 	bl	80001d0 <__aeabi_dsub>
 8004db4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004db8:	f7fb fbbe 	bl	8000538 <__aeabi_dmul>
 8004dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7fb fbb6 	bl	8000538 <__aeabi_dmul>
 8004dcc:	a38c      	add	r3, pc, #560	; (adr r3, 8005000 <__ieee754_pow+0x650>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	460d      	mov	r5, r1
 8004dd6:	f7fb fbaf 	bl	8000538 <__aeabi_dmul>
 8004dda:	a38b      	add	r3, pc, #556	; (adr r3, 8005008 <__ieee754_pow+0x658>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb f9f8 	bl	80001d4 <__adddf3>
 8004de4:	4622      	mov	r2, r4
 8004de6:	462b      	mov	r3, r5
 8004de8:	f7fb fba6 	bl	8000538 <__aeabi_dmul>
 8004dec:	a388      	add	r3, pc, #544	; (adr r3, 8005010 <__ieee754_pow+0x660>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb f9ef 	bl	80001d4 <__adddf3>
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	f7fb fb9d 	bl	8000538 <__aeabi_dmul>
 8004dfe:	a386      	add	r3, pc, #536	; (adr r3, 8005018 <__ieee754_pow+0x668>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb f9e6 	bl	80001d4 <__adddf3>
 8004e08:	4622      	mov	r2, r4
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	f7fb fb94 	bl	8000538 <__aeabi_dmul>
 8004e10:	a383      	add	r3, pc, #524	; (adr r3, 8005020 <__ieee754_pow+0x670>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb f9dd 	bl	80001d4 <__adddf3>
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	f7fb fb8b 	bl	8000538 <__aeabi_dmul>
 8004e22:	a381      	add	r3, pc, #516	; (adr r3, 8005028 <__ieee754_pow+0x678>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f7fb f9d4 	bl	80001d4 <__adddf3>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4606      	mov	r6, r0
 8004e30:	460f      	mov	r7, r1
 8004e32:	462b      	mov	r3, r5
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fb7e 	bl	8000538 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	f7fb fb78 	bl	8000538 <__aeabi_dmul>
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	464b      	mov	r3, r9
 8004e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e54:	f7fb f9be 	bl	80001d4 <__adddf3>
 8004e58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e5c:	f7fb fb6c 	bl	8000538 <__aeabi_dmul>
 8004e60:	4622      	mov	r2, r4
 8004e62:	462b      	mov	r3, r5
 8004e64:	f7fb f9b6 	bl	80001d4 <__adddf3>
 8004e68:	4642      	mov	r2, r8
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	460f      	mov	r7, r1
 8004e6e:	464b      	mov	r3, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fb60 	bl	8000538 <__aeabi_dmul>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4b75      	ldr	r3, [pc, #468]	; (8005050 <__ieee754_pow+0x6a0>)
 8004e7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e80:	f7fb f9a8 	bl	80001d4 <__adddf3>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb f9a4 	bl	80001d4 <__adddf3>
 8004e8c:	9802      	ldr	r0, [sp, #8]
 8004e8e:	460d      	mov	r5, r1
 8004e90:	4604      	mov	r4, r0
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4640      	mov	r0, r8
 8004e98:	4649      	mov	r1, r9
 8004e9a:	f7fb fb4d 	bl	8000538 <__aeabi_dmul>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4689      	mov	r9, r1
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <__ieee754_pow+0x6a0>)
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7fb f991 	bl	80001d0 <__aeabi_dsub>
 8004eae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004eb2:	f7fb f98d 	bl	80001d0 <__aeabi_dsub>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb f987 	bl	80001d0 <__aeabi_dsub>
 8004ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec6:	f7fb fb37 	bl	8000538 <__aeabi_dmul>
 8004eca:	4622      	mov	r2, r4
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ed6:	f7fb fb2f 	bl	8000538 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4630      	mov	r0, r6
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	f7fb f977 	bl	80001d4 <__adddf3>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	460f      	mov	r7, r1
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	f7fb f96f 	bl	80001d4 <__adddf3>
 8004ef6:	9802      	ldr	r0, [sp, #8]
 8004ef8:	a34d      	add	r3, pc, #308	; (adr r3, 8005030 <__ieee754_pow+0x680>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	4604      	mov	r4, r0
 8004f00:	460d      	mov	r5, r1
 8004f02:	f7fb fb19 	bl	8000538 <__aeabi_dmul>
 8004f06:	4642      	mov	r2, r8
 8004f08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	f7fb f95d 	bl	80001d0 <__aeabi_dsub>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb f957 	bl	80001d0 <__aeabi_dsub>
 8004f22:	a345      	add	r3, pc, #276	; (adr r3, 8005038 <__ieee754_pow+0x688>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb fb06 	bl	8000538 <__aeabi_dmul>
 8004f2c:	a344      	add	r3, pc, #272	; (adr r3, 8005040 <__ieee754_pow+0x690>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb fafd 	bl	8000538 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4630      	mov	r0, r6
 8004f44:	4639      	mov	r1, r7
 8004f46:	f7fb f945 	bl	80001d4 <__adddf3>
 8004f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f4c:	4b41      	ldr	r3, [pc, #260]	; (8005054 <__ieee754_pow+0x6a4>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f7fb f93e 	bl	80001d4 <__adddf3>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	9807      	ldr	r0, [sp, #28]
 8004f5c:	460d      	mov	r5, r1
 8004f5e:	f7fb fa85 	bl	800046c <__aeabi_i2d>
 8004f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f64:	4b3c      	ldr	r3, [pc, #240]	; (8005058 <__ieee754_pow+0x6a8>)
 8004f66:	4413      	add	r3, r2
 8004f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f78:	f7fb f92c 	bl	80001d4 <__adddf3>
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	f7fb f928 	bl	80001d4 <__adddf3>
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	f7fb f924 	bl	80001d4 <__adddf3>
 8004f8c:	9802      	ldr	r0, [sp, #8]
 8004f8e:	4632      	mov	r2, r6
 8004f90:	463b      	mov	r3, r7
 8004f92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f96:	f7fb f91b 	bl	80001d0 <__aeabi_dsub>
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	f7fb f917 	bl	80001d0 <__aeabi_dsub>
 8004fa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004fa6:	f7fb f913 	bl	80001d0 <__aeabi_dsub>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f7fb f90d 	bl	80001d0 <__aeabi_dsub>
 8004fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	bf0c      	ite	eq
 8004fc0:	4c26      	ldreq	r4, [pc, #152]	; (800505c <__ieee754_pow+0x6ac>)
 8004fc2:	4c22      	ldrne	r4, [pc, #136]	; (800504c <__ieee754_pow+0x69c>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004fca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004fce:	2400      	movs	r4, #0
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	460f      	mov	r7, r1
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fdc:	f7fb f8f8 	bl	80001d0 <__aeabi_dsub>
 8004fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe4:	f7fb faa8 	bl	8000538 <__aeabi_dmul>
 8004fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fec:	4680      	mov	r8, r0
 8004fee:	4689      	mov	r9, r1
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	f7fb faa0 	bl	8000538 <__aeabi_dmul>
 8004ff8:	e032      	b.n	8005060 <__ieee754_pow+0x6b0>
 8004ffa:	bf00      	nop
 8004ffc:	f3af 8000 	nop.w
 8005000:	4a454eef 	.word	0x4a454eef
 8005004:	3fca7e28 	.word	0x3fca7e28
 8005008:	93c9db65 	.word	0x93c9db65
 800500c:	3fcd864a 	.word	0x3fcd864a
 8005010:	a91d4101 	.word	0xa91d4101
 8005014:	3fd17460 	.word	0x3fd17460
 8005018:	518f264d 	.word	0x518f264d
 800501c:	3fd55555 	.word	0x3fd55555
 8005020:	db6fabff 	.word	0xdb6fabff
 8005024:	3fdb6db6 	.word	0x3fdb6db6
 8005028:	33333303 	.word	0x33333303
 800502c:	3fe33333 	.word	0x3fe33333
 8005030:	e0000000 	.word	0xe0000000
 8005034:	3feec709 	.word	0x3feec709
 8005038:	dc3a03fd 	.word	0xdc3a03fd
 800503c:	3feec709 	.word	0x3feec709
 8005040:	145b01f5 	.word	0x145b01f5
 8005044:	be3e2fe0 	.word	0xbe3e2fe0
 8005048:	08005808 	.word	0x08005808
 800504c:	3ff00000 	.word	0x3ff00000
 8005050:	40080000 	.word	0x40080000
 8005054:	080057f8 	.word	0x080057f8
 8005058:	080057e8 	.word	0x080057e8
 800505c:	bff00000 	.word	0xbff00000
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb f8b4 	bl	80001d4 <__adddf3>
 800506c:	4622      	mov	r2, r4
 800506e:	462b      	mov	r3, r5
 8005070:	4680      	mov	r8, r0
 8005072:	4689      	mov	r9, r1
 8005074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005078:	f7fb fa5e 	bl	8000538 <__aeabi_dmul>
 800507c:	460b      	mov	r3, r1
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
 8005082:	4602      	mov	r2, r0
 8005084:	4649      	mov	r1, r9
 8005086:	4640      	mov	r0, r8
 8005088:	e9cd 4500 	strd	r4, r5, [sp]
 800508c:	f7fb f8a2 	bl	80001d4 <__adddf3>
 8005090:	4bbb      	ldr	r3, [pc, #748]	; (8005380 <__ieee754_pow+0x9d0>)
 8005092:	4299      	cmp	r1, r3
 8005094:	4682      	mov	sl, r0
 8005096:	460f      	mov	r7, r1
 8005098:	460e      	mov	r6, r1
 800509a:	dd26      	ble.n	80050ea <__ieee754_pow+0x73a>
 800509c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80050a0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80050a4:	4303      	orrs	r3, r0
 80050a6:	d115      	bne.n	80050d4 <__ieee754_pow+0x724>
 80050a8:	a39f      	add	r3, pc, #636	; (adr r3, 8005328 <__ieee754_pow+0x978>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb f88f 	bl	80001d4 <__adddf3>
 80050b6:	4622      	mov	r2, r4
 80050b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050bc:	462b      	mov	r3, r5
 80050be:	4650      	mov	r0, sl
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb f885 	bl	80001d0 <__aeabi_dsub>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ce:	f7fb fcc3 	bl	8000a58 <__aeabi_dcmpgt>
 80050d2:	b348      	cbz	r0, 8005128 <__ieee754_pow+0x778>
 80050d4:	a396      	add	r3, pc, #600	; (adr r3, 8005330 <__ieee754_pow+0x980>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050de:	f7fb fa2b 	bl	8000538 <__aeabi_dmul>
 80050e2:	a393      	add	r3, pc, #588	; (adr r3, 8005330 <__ieee754_pow+0x980>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	e107      	b.n	80052fa <__ieee754_pow+0x94a>
 80050ea:	4ba6      	ldr	r3, [pc, #664]	; (8005384 <__ieee754_pow+0x9d4>)
 80050ec:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80050f0:	429f      	cmp	r7, r3
 80050f2:	dd19      	ble.n	8005128 <__ieee754_pow+0x778>
 80050f4:	4ba4      	ldr	r3, [pc, #656]	; (8005388 <__ieee754_pow+0x9d8>)
 80050f6:	440b      	add	r3, r1
 80050f8:	4303      	orrs	r3, r0
 80050fa:	d10a      	bne.n	8005112 <__ieee754_pow+0x762>
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	f7fb f866 	bl	80001d0 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4640      	mov	r0, r8
 800510a:	4649      	mov	r1, r9
 800510c:	f7fb fc90 	bl	8000a30 <__aeabi_dcmple>
 8005110:	b150      	cbz	r0, 8005128 <__ieee754_pow+0x778>
 8005112:	a389      	add	r3, pc, #548	; (adr r3, 8005338 <__ieee754_pow+0x988>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511c:	f7fb fa0c 	bl	8000538 <__aeabi_dmul>
 8005120:	a385      	add	r3, pc, #532	; (adr r3, 8005338 <__ieee754_pow+0x988>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e0e8      	b.n	80052fa <__ieee754_pow+0x94a>
 8005128:	4a98      	ldr	r2, [pc, #608]	; (800538c <__ieee754_pow+0x9dc>)
 800512a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800512e:	4293      	cmp	r3, r2
 8005130:	dd25      	ble.n	800517e <__ieee754_pow+0x7ce>
 8005132:	151b      	asrs	r3, r3, #20
 8005134:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005138:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800513c:	fa4a f303 	asr.w	r3, sl, r3
 8005140:	4433      	add	r3, r6
 8005142:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005146:	4f92      	ldr	r7, [pc, #584]	; (8005390 <__ieee754_pow+0x9e0>)
 8005148:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800514c:	4117      	asrs	r7, r2
 800514e:	ea23 0107 	bic.w	r1, r3, r7
 8005152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005156:	ea43 030a 	orr.w	r3, r3, sl
 800515a:	2000      	movs	r0, #0
 800515c:	f1c2 0a14 	rsb	sl, r2, #20
 8005160:	fa43 fa0a 	asr.w	sl, r3, sl
 8005164:	2e00      	cmp	r6, #0
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	bfb8      	it	lt
 8005170:	f1ca 0a00 	rsblt	sl, sl, #0
 8005174:	f7fb f82c 	bl	80001d0 <__aeabi_dsub>
 8005178:	e9cd 0100 	strd	r0, r1, [sp]
 800517c:	e001      	b.n	8005182 <__ieee754_pow+0x7d2>
 800517e:	f04f 0a00 	mov.w	sl, #0
 8005182:	4642      	mov	r2, r8
 8005184:	464b      	mov	r3, r9
 8005186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800518a:	f7fb f823 	bl	80001d4 <__adddf3>
 800518e:	2000      	movs	r0, #0
 8005190:	a36b      	add	r3, pc, #428	; (adr r3, 8005340 <__ieee754_pow+0x990>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	f7fb f9cd 	bl	8000538 <__aeabi_dmul>
 800519e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a2:	4606      	mov	r6, r0
 80051a4:	460f      	mov	r7, r1
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb f811 	bl	80001d0 <__aeabi_dsub>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb f80b 	bl	80001d0 <__aeabi_dsub>
 80051ba:	a363      	add	r3, pc, #396	; (adr r3, 8005348 <__ieee754_pow+0x998>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb f9ba 	bl	8000538 <__aeabi_dmul>
 80051c4:	a362      	add	r3, pc, #392	; (adr r3, 8005350 <__ieee754_pow+0x9a0>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	4680      	mov	r8, r0
 80051cc:	4689      	mov	r9, r1
 80051ce:	4620      	mov	r0, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	f7fb f9b1 	bl	8000538 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4640      	mov	r0, r8
 80051dc:	4649      	mov	r1, r9
 80051de:	f7fa fff9 	bl	80001d4 <__adddf3>
 80051e2:	4604      	mov	r4, r0
 80051e4:	460d      	mov	r5, r1
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fa fff1 	bl	80001d4 <__adddf3>
 80051f2:	4632      	mov	r2, r6
 80051f4:	463b      	mov	r3, r7
 80051f6:	4680      	mov	r8, r0
 80051f8:	4689      	mov	r9, r1
 80051fa:	f7fa ffe9 	bl	80001d0 <__aeabi_dsub>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fa ffe3 	bl	80001d0 <__aeabi_dsub>
 800520a:	4642      	mov	r2, r8
 800520c:	4606      	mov	r6, r0
 800520e:	460f      	mov	r7, r1
 8005210:	464b      	mov	r3, r9
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f98f 	bl	8000538 <__aeabi_dmul>
 800521a:	a34f      	add	r3, pc, #316	; (adr r3, 8005358 <__ieee754_pow+0x9a8>)
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	4604      	mov	r4, r0
 8005222:	460d      	mov	r5, r1
 8005224:	f7fb f988 	bl	8000538 <__aeabi_dmul>
 8005228:	a34d      	add	r3, pc, #308	; (adr r3, 8005360 <__ieee754_pow+0x9b0>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fa ffcf 	bl	80001d0 <__aeabi_dsub>
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f7fb f97f 	bl	8000538 <__aeabi_dmul>
 800523a:	a34b      	add	r3, pc, #300	; (adr r3, 8005368 <__ieee754_pow+0x9b8>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fa ffc8 	bl	80001d4 <__adddf3>
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	f7fb f976 	bl	8000538 <__aeabi_dmul>
 800524c:	a348      	add	r3, pc, #288	; (adr r3, 8005370 <__ieee754_pow+0x9c0>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fa ffbd 	bl	80001d0 <__aeabi_dsub>
 8005256:	4622      	mov	r2, r4
 8005258:	462b      	mov	r3, r5
 800525a:	f7fb f96d 	bl	8000538 <__aeabi_dmul>
 800525e:	a346      	add	r3, pc, #280	; (adr r3, 8005378 <__ieee754_pow+0x9c8>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fa ffb6 	bl	80001d4 <__adddf3>
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	f7fb f964 	bl	8000538 <__aeabi_dmul>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fa ffaa 	bl	80001d0 <__aeabi_dsub>
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4640      	mov	r0, r8
 8005286:	4649      	mov	r1, r9
 8005288:	f7fb f956 	bl	8000538 <__aeabi_dmul>
 800528c:	2200      	movs	r2, #0
 800528e:	e9cd 0100 	strd	r0, r1, [sp]
 8005292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fa ff99 	bl	80001d0 <__aeabi_dsub>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052a6:	f7fb fa71 	bl	800078c <__aeabi_ddiv>
 80052aa:	4632      	mov	r2, r6
 80052ac:	4604      	mov	r4, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	463b      	mov	r3, r7
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f7fb f93f 	bl	8000538 <__aeabi_dmul>
 80052ba:	4632      	mov	r2, r6
 80052bc:	463b      	mov	r3, r7
 80052be:	f7fa ff89 	bl	80001d4 <__adddf3>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fa ff81 	bl	80001d0 <__aeabi_dsub>
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	f7fa ff7d 	bl	80001d0 <__aeabi_dsub>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	2000      	movs	r0, #0
 80052dc:	492d      	ldr	r1, [pc, #180]	; (8005394 <__ieee754_pow+0x9e4>)
 80052de:	f7fa ff77 	bl	80001d0 <__aeabi_dsub>
 80052e2:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80052e6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80052ea:	da03      	bge.n	80052f4 <__ieee754_pow+0x944>
 80052ec:	4652      	mov	r2, sl
 80052ee:	f000 f99b 	bl	8005628 <scalbn>
 80052f2:	e000      	b.n	80052f6 <__ieee754_pow+0x946>
 80052f4:	4621      	mov	r1, r4
 80052f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052fa:	f7fb f91d 	bl	8000538 <__aeabi_dmul>
 80052fe:	e008      	b.n	8005312 <__ieee754_pow+0x962>
 8005300:	4603      	mov	r3, r0
 8005302:	4924      	ldr	r1, [pc, #144]	; (8005394 <__ieee754_pow+0x9e4>)
 8005304:	e00c      	b.n	8005320 <__ieee754_pow+0x970>
 8005306:	9b00      	ldr	r3, [sp, #0]
 8005308:	9901      	ldr	r1, [sp, #4]
 800530a:	e009      	b.n	8005320 <__ieee754_pow+0x970>
 800530c:	463b      	mov	r3, r7
 800530e:	4621      	mov	r1, r4
 8005310:	e006      	b.n	8005320 <__ieee754_pow+0x970>
 8005312:	4603      	mov	r3, r0
 8005314:	e004      	b.n	8005320 <__ieee754_pow+0x970>
 8005316:	42ae      	cmp	r6, r5
 8005318:	f73f ab71 	bgt.w	80049fe <__ieee754_pow+0x4e>
 800531c:	f7ff bb64 	b.w	80049e8 <__ieee754_pow+0x38>
 8005320:	4618      	mov	r0, r3
 8005322:	b011      	add	sp, #68	; 0x44
 8005324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005328:	652b82fe 	.word	0x652b82fe
 800532c:	3c971547 	.word	0x3c971547
 8005330:	8800759c 	.word	0x8800759c
 8005334:	7e37e43c 	.word	0x7e37e43c
 8005338:	c2f8f359 	.word	0xc2f8f359
 800533c:	01a56e1f 	.word	0x01a56e1f
 8005340:	00000000 	.word	0x00000000
 8005344:	3fe62e43 	.word	0x3fe62e43
 8005348:	fefa39ef 	.word	0xfefa39ef
 800534c:	3fe62e42 	.word	0x3fe62e42
 8005350:	0ca86c39 	.word	0x0ca86c39
 8005354:	be205c61 	.word	0xbe205c61
 8005358:	72bea4d0 	.word	0x72bea4d0
 800535c:	3e663769 	.word	0x3e663769
 8005360:	c5d26bf1 	.word	0xc5d26bf1
 8005364:	3ebbbd41 	.word	0x3ebbbd41
 8005368:	af25de2c 	.word	0xaf25de2c
 800536c:	3f11566a 	.word	0x3f11566a
 8005370:	16bebd93 	.word	0x16bebd93
 8005374:	3f66c16c 	.word	0x3f66c16c
 8005378:	5555553e 	.word	0x5555553e
 800537c:	3fc55555 	.word	0x3fc55555
 8005380:	408fffff 	.word	0x408fffff
 8005384:	4090cbff 	.word	0x4090cbff
 8005388:	3f6f3400 	.word	0x3f6f3400
 800538c:	3fe00000 	.word	0x3fe00000
 8005390:	000fffff 	.word	0x000fffff
 8005394:	3ff00000 	.word	0x3ff00000

08005398 <__ieee754_sqrt>:
 8005398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	4f52      	ldr	r7, [pc, #328]	; (80054e8 <__ieee754_sqrt+0x150>)
 800539e:	f8df c148 	ldr.w	ip, [pc, #328]	; 80054e8 <__ieee754_sqrt+0x150>
 80053a2:	400f      	ands	r7, r1
 80053a4:	4567      	cmp	r7, ip
 80053a6:	4606      	mov	r6, r0
 80053a8:	460d      	mov	r5, r1
 80053aa:	4686      	mov	lr, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	460b      	mov	r3, r1
 80053b0:	4602      	mov	r2, r0
 80053b2:	d108      	bne.n	80053c6 <__ieee754_sqrt+0x2e>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	f7fb f8be 	bl	8000538 <__aeabi_dmul>
 80053bc:	4632      	mov	r2, r6
 80053be:	462b      	mov	r3, r5
 80053c0:	f7fa ff08 	bl	80001d4 <__adddf3>
 80053c4:	e08d      	b.n	80054e2 <__ieee754_sqrt+0x14a>
 80053c6:	2900      	cmp	r1, #0
 80053c8:	dc0e      	bgt.n	80053e8 <__ieee754_sqrt+0x50>
 80053ca:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80053ce:	4307      	orrs	r7, r0
 80053d0:	f000 8087 	beq.w	80054e2 <__ieee754_sqrt+0x14a>
 80053d4:	b141      	cbz	r1, 80053e8 <__ieee754_sqrt+0x50>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	f7fa fef9 	bl	80001d0 <__aeabi_dsub>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	f7fb f9d3 	bl	800078c <__aeabi_ddiv>
 80053e6:	e07c      	b.n	80054e2 <__ieee754_sqrt+0x14a>
 80053e8:	1524      	asrs	r4, r4, #20
 80053ea:	d112      	bne.n	8005412 <__ieee754_sqrt+0x7a>
 80053ec:	b91b      	cbnz	r3, 80053f6 <__ieee754_sqrt+0x5e>
 80053ee:	0ad3      	lsrs	r3, r2, #11
 80053f0:	3c15      	subs	r4, #21
 80053f2:	0552      	lsls	r2, r2, #21
 80053f4:	e7fa      	b.n	80053ec <__ieee754_sqrt+0x54>
 80053f6:	2100      	movs	r1, #0
 80053f8:	02d8      	lsls	r0, r3, #11
 80053fa:	d402      	bmi.n	8005402 <__ieee754_sqrt+0x6a>
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	3101      	adds	r1, #1
 8005400:	e7fa      	b.n	80053f8 <__ieee754_sqrt+0x60>
 8005402:	1e48      	subs	r0, r1, #1
 8005404:	1a24      	subs	r4, r4, r0
 8005406:	f1c1 0020 	rsb	r0, r1, #32
 800540a:	fa22 f000 	lsr.w	r0, r2, r0
 800540e:	4303      	orrs	r3, r0
 8005410:	408a      	lsls	r2, r1
 8005412:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800541a:	07e1      	lsls	r1, r4, #31
 800541c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005420:	bf42      	ittt	mi
 8005422:	005b      	lslmi	r3, r3, #1
 8005424:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 8005428:	0052      	lslmi	r2, r2, #1
 800542a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 800542e:	f04f 0e00 	mov.w	lr, #0
 8005432:	440b      	add	r3, r1
 8005434:	0056      	lsls	r6, r2, #1
 8005436:	1064      	asrs	r4, r4, #1
 8005438:	2216      	movs	r2, #22
 800543a:	4677      	mov	r7, lr
 800543c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005440:	1878      	adds	r0, r7, r1
 8005442:	4298      	cmp	r0, r3
 8005444:	bfde      	ittt	le
 8005446:	1a1b      	suble	r3, r3, r0
 8005448:	1847      	addle	r7, r0, r1
 800544a:	448e      	addle	lr, r1
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	3a01      	subs	r2, #1
 8005450:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8005454:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005458:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800545c:	d1f0      	bne.n	8005440 <__ieee754_sqrt+0xa8>
 800545e:	2520      	movs	r5, #32
 8005460:	4694      	mov	ip, r2
 8005462:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005466:	429f      	cmp	r7, r3
 8005468:	eb01 000c 	add.w	r0, r1, ip
 800546c:	db02      	blt.n	8005474 <__ieee754_sqrt+0xdc>
 800546e:	d116      	bne.n	800549e <__ieee754_sqrt+0x106>
 8005470:	42b0      	cmp	r0, r6
 8005472:	d813      	bhi.n	800549c <__ieee754_sqrt+0x104>
 8005474:	2800      	cmp	r0, #0
 8005476:	eb00 0c01 	add.w	ip, r0, r1
 800547a:	da05      	bge.n	8005488 <__ieee754_sqrt+0xf0>
 800547c:	f1bc 0f00 	cmp.w	ip, #0
 8005480:	db02      	blt.n	8005488 <__ieee754_sqrt+0xf0>
 8005482:	f107 0801 	add.w	r8, r7, #1
 8005486:	e000      	b.n	800548a <__ieee754_sqrt+0xf2>
 8005488:	46b8      	mov	r8, r7
 800548a:	1bdb      	subs	r3, r3, r7
 800548c:	42b0      	cmp	r0, r6
 800548e:	bf88      	it	hi
 8005490:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005494:	1a36      	subs	r6, r6, r0
 8005496:	440a      	add	r2, r1
 8005498:	4647      	mov	r7, r8
 800549a:	e000      	b.n	800549e <__ieee754_sqrt+0x106>
 800549c:	463b      	mov	r3, r7
 800549e:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 80054a2:	3d01      	subs	r5, #1
 80054a4:	4403      	add	r3, r0
 80054a6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80054aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80054ae:	d1da      	bne.n	8005466 <__ieee754_sqrt+0xce>
 80054b0:	4333      	orrs	r3, r6
 80054b2:	d007      	beq.n	80054c4 <__ieee754_sqrt+0x12c>
 80054b4:	1c53      	adds	r3, r2, #1
 80054b6:	bf13      	iteet	ne
 80054b8:	f002 0301 	andne.w	r3, r2, #1
 80054bc:	f10e 0e01 	addeq.w	lr, lr, #1
 80054c0:	462a      	moveq	r2, r5
 80054c2:	18d2      	addne	r2, r2, r3
 80054c4:	ea4f 036e 	mov.w	r3, lr, asr #1
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80054ce:	f01e 0f01 	tst.w	lr, #1
 80054d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80054d6:	bf18      	it	ne
 80054d8:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 80054dc:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 80054e0:	4610      	mov	r0, r2
 80054e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e6:	bf00      	nop
 80054e8:	7ff00000 	.word	0x7ff00000

080054ec <fabs>:
 80054ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80054f0:	4770      	bx	lr

080054f2 <finite>:
 80054f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80054f6:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80054fa:	0fc0      	lsrs	r0, r0, #31
 80054fc:	4770      	bx	lr

080054fe <matherr>:
 80054fe:	2000      	movs	r0, #0
 8005500:	4770      	bx	lr
	...

08005504 <nan>:
 8005504:	2000      	movs	r0, #0
 8005506:	4901      	ldr	r1, [pc, #4]	; (800550c <nan+0x8>)
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	7ff80000 	.word	0x7ff80000

08005510 <rint>:
 8005510:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8005514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005516:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 800551a:	f1be 0f13 	cmp.w	lr, #19
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4607      	mov	r7, r0
 8005524:	460c      	mov	r4, r1
 8005526:	4606      	mov	r6, r0
 8005528:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800552c:	dc44      	bgt.n	80055b8 <rint+0xa8>
 800552e:	f1be 0f00 	cmp.w	lr, #0
 8005532:	da26      	bge.n	8005582 <rint+0x72>
 8005534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005538:	4301      	orrs	r1, r0
 800553a:	d06d      	beq.n	8005618 <rint+0x108>
 800553c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005540:	430f      	orrs	r7, r1
 8005542:	427b      	negs	r3, r7
 8005544:	431f      	orrs	r7, r3
 8005546:	4b36      	ldr	r3, [pc, #216]	; (8005620 <rint+0x110>)
 8005548:	0b3f      	lsrs	r7, r7, #12
 800554a:	0c64      	lsrs	r4, r4, #17
 800554c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8005550:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005554:	0464      	lsls	r4, r4, #17
 8005556:	ea47 0104 	orr.w	r1, r7, r4
 800555a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800555e:	4632      	mov	r2, r6
 8005560:	463b      	mov	r3, r7
 8005562:	f7fa fe37 	bl	80001d4 <__adddf3>
 8005566:	e9cd 0100 	strd	r0, r1, [sp]
 800556a:	4632      	mov	r2, r6
 800556c:	463b      	mov	r3, r7
 800556e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005572:	f7fa fe2d 	bl	80001d0 <__aeabi_dsub>
 8005576:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800557a:	4602      	mov	r2, r0
 800557c:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8005580:	e04a      	b.n	8005618 <rint+0x108>
 8005582:	4928      	ldr	r1, [pc, #160]	; (8005624 <rint+0x114>)
 8005584:	fa41 f10e 	asr.w	r1, r1, lr
 8005588:	ea03 0001 	and.w	r0, r3, r1
 800558c:	4310      	orrs	r0, r2
 800558e:	d043      	beq.n	8005618 <rint+0x108>
 8005590:	084b      	lsrs	r3, r1, #1
 8005592:	ea04 0203 	and.w	r2, r4, r3
 8005596:	ea52 0607 	orrs.w	r6, r2, r7
 800559a:	d029      	beq.n	80055f0 <rint+0xe0>
 800559c:	ea24 0303 	bic.w	r3, r4, r3
 80055a0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80055a4:	f1be 0f13 	cmp.w	lr, #19
 80055a8:	fa44 f40e 	asr.w	r4, r4, lr
 80055ac:	bf0c      	ite	eq
 80055ae:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80055b2:	2600      	movne	r6, #0
 80055b4:	431c      	orrs	r4, r3
 80055b6:	e01b      	b.n	80055f0 <rint+0xe0>
 80055b8:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 80055bc:	dd05      	ble.n	80055ca <rint+0xba>
 80055be:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80055c2:	d129      	bne.n	8005618 <rint+0x108>
 80055c4:	f7fa fe06 	bl	80001d4 <__adddf3>
 80055c8:	e028      	b.n	800561c <rint+0x10c>
 80055ca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80055ce:	f04f 31ff 	mov.w	r1, #4294967295
 80055d2:	fa21 f10c 	lsr.w	r1, r1, ip
 80055d6:	4208      	tst	r0, r1
 80055d8:	d01e      	beq.n	8005618 <rint+0x108>
 80055da:	084b      	lsrs	r3, r1, #1
 80055dc:	4218      	tst	r0, r3
 80055de:	bf1f      	itttt	ne
 80055e0:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80055e4:	ea20 0303 	bicne.w	r3, r0, r3
 80055e8:	fa46 fc0c 	asrne.w	ip, r6, ip
 80055ec:	ea4c 0603 	orrne.w	r6, ip, r3
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <rint+0x110>)
 80055f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055f6:	4621      	mov	r1, r4
 80055f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80055fc:	4630      	mov	r0, r6
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	f7fa fde7 	bl	80001d4 <__adddf3>
 8005606:	e9cd 0100 	strd	r0, r1, [sp]
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005612:	f7fa fddd 	bl	80001d0 <__aeabi_dsub>
 8005616:	e001      	b.n	800561c <rint+0x10c>
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	b003      	add	sp, #12
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	08005818 	.word	0x08005818
 8005624:	000fffff 	.word	0x000fffff

08005628 <scalbn>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	4616      	mov	r6, r2
 800562c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005630:	4604      	mov	r4, r0
 8005632:	460d      	mov	r5, r1
 8005634:	460b      	mov	r3, r1
 8005636:	b98a      	cbnz	r2, 800565c <scalbn+0x34>
 8005638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800563c:	4303      	orrs	r3, r0
 800563e:	d050      	beq.n	80056e2 <scalbn+0xba>
 8005640:	2200      	movs	r2, #0
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <scalbn+0xd0>)
 8005644:	f7fa ff78 	bl	8000538 <__aeabi_dmul>
 8005648:	4a2c      	ldr	r2, [pc, #176]	; (80056fc <scalbn+0xd4>)
 800564a:	4296      	cmp	r6, r2
 800564c:	4604      	mov	r4, r0
 800564e:	460d      	mov	r5, r1
 8005650:	460b      	mov	r3, r1
 8005652:	db34      	blt.n	80056be <scalbn+0x96>
 8005654:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005658:	3a36      	subs	r2, #54	; 0x36
 800565a:	e008      	b.n	800566e <scalbn+0x46>
 800565c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005660:	42ba      	cmp	r2, r7
 8005662:	d104      	bne.n	800566e <scalbn+0x46>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	f7fa fdb4 	bl	80001d4 <__adddf3>
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566e:	4432      	add	r2, r6
 8005670:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005674:	428a      	cmp	r2, r1
 8005676:	dd02      	ble.n	800567e <scalbn+0x56>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	e011      	b.n	80056a2 <scalbn+0x7a>
 800567e:	2a00      	cmp	r2, #0
 8005680:	dd06      	ble.n	8005690 <scalbn+0x68>
 8005682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800568a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800568e:	e028      	b.n	80056e2 <scalbn+0xba>
 8005690:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005694:	da17      	bge.n	80056c6 <scalbn+0x9e>
 8005696:	f24c 3350 	movw	r3, #50000	; 0xc350
 800569a:	429e      	cmp	r6, r3
 800569c:	4622      	mov	r2, r4
 800569e:	462b      	mov	r3, r5
 80056a0:	dd08      	ble.n	80056b4 <scalbn+0x8c>
 80056a2:	a111      	add	r1, pc, #68	; (adr r1, 80056e8 <scalbn+0xc0>)
 80056a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056a8:	f000 f82c 	bl	8005704 <copysign>
 80056ac:	a30e      	add	r3, pc, #56	; (adr r3, 80056e8 <scalbn+0xc0>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	e013      	b.n	80056dc <scalbn+0xb4>
 80056b4:	a10e      	add	r1, pc, #56	; (adr r1, 80056f0 <scalbn+0xc8>)
 80056b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ba:	f000 f823 	bl	8005704 <copysign>
 80056be:	a30c      	add	r3, pc, #48	; (adr r3, 80056f0 <scalbn+0xc8>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	e00a      	b.n	80056dc <scalbn+0xb4>
 80056c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056ca:	3236      	adds	r2, #54	; 0x36
 80056cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <scalbn+0xd8>)
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	2200      	movs	r2, #0
 80056dc:	f7fa ff2c 	bl	8000538 <__aeabi_dmul>
 80056e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e8:	8800759c 	.word	0x8800759c
 80056ec:	7e37e43c 	.word	0x7e37e43c
 80056f0:	c2f8f359 	.word	0xc2f8f359
 80056f4:	01a56e1f 	.word	0x01a56e1f
 80056f8:	43500000 	.word	0x43500000
 80056fc:	ffff3cb0 	.word	0xffff3cb0
 8005700:	3c900000 	.word	0x3c900000

08005704 <copysign>:
 8005704:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570c:	ea42 0103 	orr.w	r1, r2, r3
 8005710:	4770      	bx	lr
	...

08005714 <__errno>:
 8005714:	4b01      	ldr	r3, [pc, #4]	; (800571c <__errno+0x8>)
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000510 	.word	0x20000510

08005720 <_init>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr

0800572c <_fini>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr
