
C:\Users\Alan\Desktop\xForce\Debug\xForce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005b08  08005b08  00015b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000758  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020758  2**0
                  CONTENTS
  7 .bss          00000100  20000758  20000758  00020758  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000858  20000858  00020758  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY
 10 .debug_info   000098d7  00000000  00000000  00020782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001dd9  00000000  00000000  0002a059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b58  00000000  00000000  0002be38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a38  00000000  00000000  0002c990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004272  00000000  00000000  0002d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003725  00000000  00000000  0003163a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00034d5f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003508  00000000  00000000  00034de0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000758 	.word	0x20000758
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005af0 	.word	0x08005af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000075c 	.word	0x2000075c
 80001cc:	08005af0 	.word	0x08005af0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	d1ed      	bne.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	2300      	movs	r3, #0
 80011e2:	73bb      	strb	r3, [r7, #14]
 80011e4:	230f      	movs	r3, #15
 80011e6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	78db      	ldrb	r3, [r3, #3]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d038      	beq.n	8001262 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <NVIC_Init+0xb8>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f1c3 0304 	rsb	r3, r3, #4
 8001204:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001206:	7b7a      	ldrb	r2, [r7, #13]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	fa42 f303 	asr.w	r3, r2, r3
 800120e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	461a      	mov	r2, r3
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	789a      	ldrb	r2, [r3, #2]
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	4013      	ands	r3, r2
 8001226:	b2da      	uxtb	r2, r3
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	4313      	orrs	r3, r2
 800122c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <NVIC_Init+0xbc>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <NVIC_Init+0xbc>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800125c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001260:	e00f      	b.n	8001282 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001262:	490b      	ldr	r1, [pc, #44]	; (8001290 <NVIC_Init+0xbc>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2201      	movs	r2, #1
 8001278:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800127a:	f100 0320 	add.w	r3, r0, #32
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	e000e100 	.word	0xe000e100

08001294 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <DAC_SetChannel1Data+0x30>)
 80012a6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	3308      	adds	r3, #8
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	461a      	mov	r2, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40007400 	.word	0x40007400

080012c8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <DMA_Init+0xa8>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800130a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001316:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4313      	orrs	r3, r2
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60da      	str	r2, [r3, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	f01c803f 	.word	0xf01c803f

08001374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001392:	e005      	b.n	80013a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 0201 	bic.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]
  }
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop

080013dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <DMA_GetFlagStatus+0x68>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d802      	bhi.n	80013fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <DMA_GetFlagStatus+0x6c>)
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e001      	b.n	8001400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <DMA_GetFlagStatus+0x70>)
 80013fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e002      	b.n	8001418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800141e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	e001      	b.n	8001438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	4002640f 	.word	0x4002640f
 8001448:	40026000 	.word	0x40026000
 800144c:	40026400 	.word	0x40026400

08001450 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <DMA_ClearFlag+0x50>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d802      	bhi.n	8001468 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <DMA_ClearFlag+0x54>)
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e001      	b.n	800146c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <DMA_ClearFlag+0x58>)
 800146a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800147c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001484:	e006      	b.n	8001494 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800148c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	6093      	str	r3, [r2, #8]
  }    
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	4002640f 	.word	0x4002640f
 80014a4:	40026000 	.word	0x40026000
 80014a8:	40026400 	.word	0x40026400

080014ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e076      	b.n	80015b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80014c8:	2201      	movs	r2, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d165      	bne.n	80015b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2103      	movs	r1, #3
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	4619      	mov	r1, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	791b      	ldrb	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d003      	beq.n	8001522 <GPIO_Init+0x76>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d12e      	bne.n	8001580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2103      	movs	r1, #3
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	4619      	mov	r1, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	b29b      	uxth	r3, r3
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	401a      	ands	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	4619      	mov	r1, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	b29b      	uxth	r3, r3
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	b29b      	uxth	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2103      	movs	r1, #3
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	79db      	ldrb	r3, [r3, #7]
 80015a0:	4619      	mov	r1, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d985      	bls.n	80014c8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80015e0:	787a      	ldrb	r2, [r7, #1]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	210f      	movs	r1, #15
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	ea02 0103 	and.w	r1, r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f100 0208 	add.w	r2, r0, #8
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	2302      	movs	r3, #2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	2302      	movs	r3, #2
 8001676:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <RCC_GetClocksFreq+0x144>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d007      	beq.n	8001698 <RCC_GetClocksFreq+0x40>
 8001688:	2b08      	cmp	r3, #8
 800168a:	d009      	beq.n	80016a0 <RCC_GetClocksFreq+0x48>
 800168c:	2b00      	cmp	r3, #0
 800168e:	d13f      	bne.n	8001710 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <RCC_GetClocksFreq+0x148>)
 8001694:	601a      	str	r2, [r3, #0]
      break;
 8001696:	e03f      	b.n	8001718 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <RCC_GetClocksFreq+0x14c>)
 800169c:	601a      	str	r2, [r3, #0]
      break;
 800169e:	e03b      	b.n	8001718 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <RCC_GetClocksFreq+0x144>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a8:	0d9b      	lsrs	r3, r3, #22
 80016aa:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <RCC_GetClocksFreq+0x144>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80016bc:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <RCC_GetClocksFreq+0x14c>)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <RCC_GetClocksFreq+0x144>)
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016cc:	400b      	ands	r3, r1
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	fb03 f302 	mul.w	r3, r3, r2
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	e00c      	b.n	80016f2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80016d8:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <RCC_GetClocksFreq+0x148>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <RCC_GetClocksFreq+0x144>)
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	400b      	ands	r3, r1
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	fb03 f302 	mul.w	r3, r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <RCC_GetClocksFreq+0x144>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	3301      	adds	r3, #1
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	fbb2 f2f3 	udiv	r2, r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
      break;
 800170e:	e003      	b.n	8001718 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <RCC_GetClocksFreq+0x148>)
 8001714:	601a      	str	r2, [r3, #0]
      break;
 8001716:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <RCC_GetClocksFreq+0x144>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <RCC_GetClocksFreq+0x150>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	40da      	lsrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <RCC_GetClocksFreq+0x144>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001748:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	0a9b      	lsrs	r3, r3, #10
 800174e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <RCC_GetClocksFreq+0x150>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	40da      	lsrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <RCC_GetClocksFreq+0x144>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001770:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	0b5b      	lsrs	r3, r3, #13
 8001776:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <RCC_GetClocksFreq+0x150>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	40da      	lsrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	3724      	adds	r7, #36	; 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	20000000 	.word	0x20000000

080017ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <RCC_AHB1PeriphClockCmd+0x38>)
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RCC_AHB1PeriphClockCmd+0x38>)
 80017c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80017ca:	e006      	b.n	80017da <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80017cc:	4905      	ldr	r1, [pc, #20]	; (80017e4 <RCC_AHB1PeriphClockCmd+0x38>)
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <RCC_AHB1PeriphClockCmd+0x38>)
 80017d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40023800 	.word	0x40023800

080017e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 80017fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001806:	e006      	b.n	8001816 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001808:	4905      	ldr	r1, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <RCC_APB2PeriphClockCmd+0x38>)
 800180c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	43db      	mvns	r3, r3
 8001812:	4013      	ands	r3, r2
 8001814:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800183e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	4313      	orrs	r3, r2
 800184a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001850:	4313      	orrs	r3, r2
 8001852:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001858:	4313      	orrs	r3, r2
 800185a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001860:	4313      	orrs	r3, r2
 8001862:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001868:	4313      	orrs	r3, r2
 800186a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001870:	4313      	orrs	r3, r2
 8001872:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001878:	4313      	orrs	r3, r2
 800187a:	b29a      	uxth	r2, r3
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	4313      	orrs	r3, r2
 8001880:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	89fa      	ldrh	r2, [r7, #14]
 8001886:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8b9b      	ldrh	r3, [r3, #28]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	8a1a      	ldrh	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	821a      	strh	r2, [r3, #16]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2207      	movs	r2, #7
 80018e8:	821a      	strh	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	819a      	strh	r2, [r3, #12]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	891b      	ldrh	r3, [r3, #8]
 8001924:	b29a      	uxth	r2, r3
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8a1b      	ldrh	r3, [r3, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	88db      	ldrh	r3, [r3, #6]
 8001976:	461a      	mov	r2, r3
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	4313      	orrs	r3, r2
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	899b      	ldrh	r3, [r3, #12]
 800198a:	b29b      	uxth	r3, r3
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001994:	f023 030c 	bic.w	r3, r3, #12
 8001998:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	889a      	ldrh	r2, [r3, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	891b      	ldrh	r3, [r3, #8]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	4313      	orrs	r3, r2
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8a9b      	ldrh	r3, [r3, #20]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	899b      	ldrh	r3, [r3, #12]
 80019d2:	461a      	mov	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	4313      	orrs	r3, r2
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe36 	bl	8001658 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <USART_Init+0x168>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <USART_Init+0xb4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <USART_Init+0x16c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	e001      	b.n	8001a06 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	899b      	ldrh	r3, [r3, #12]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da0c      	bge.n	8001a2c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e00b      	b.n	8001a44 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009a      	lsls	r2, r3, #2
 8001a36:	441a      	add	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <USART_Init+0x170>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	2264      	movs	r2, #100	; 0x64
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	899b      	ldrh	r3, [r3, #12]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da0c      	bge.n	8001a88 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	3332      	adds	r3, #50	; 0x32
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <USART_Init+0x170>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4313      	orrs	r3, r2
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e00b      	b.n	8001aa0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	3332      	adds	r3, #50	; 0x32
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <USART_Init+0x170>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	811a      	strh	r2, [r3, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	51eb851f 	.word	0x51eb851f

08001abc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	899b      	ldrh	r3, [r3, #12]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001ade:	e007      	b.n	8001af0 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	899b      	ldrh	r3, [r3, #12]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	819a      	strh	r2, [r3, #12]
  }
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	809a      	strh	r2, [r3, #4]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop

08001b20 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001b56:	2201      	movs	r2, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d103      	bne.n	8001b6e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e009      	b.n	8001b82 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d103      	bne.n	8001b7c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3310      	adds	r3, #16
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e002      	b.n	8001b82 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3314      	adds	r3, #20
 8001b80:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6811      	ldr	r1, [r2, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001b94:	e006      	b.n	8001ba4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6811      	ldr	r1, [r2, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	43d2      	mvns	r2, r2
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop

08001bb0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	899b      	ldrh	r3, [r3, #12]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e011      	b.n	8001c22 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8a1b      	ldrh	r3, [r3, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e006      	b.n	8001c22 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8a9b      	ldrh	r3, [r3, #20]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <USART_GetITStatus+0xa4>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	74fb      	strb	r3, [r7, #19]
 8001c52:	e001      	b.n	8001c58 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <Audio_MAL_IRQHandler+0xe8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff fbb2 	bl	80013dc <DMA_GetFlagStatus>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d062      	beq.n	8001d44 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d04a      	beq.n	8001d1c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8001c86:	bf00      	nop
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb8d 	bl	80013ac <DMA_GetCmdStatus>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f7      	bne.n	8001c88 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <Audio_MAL_IRQHandler+0xe8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f7ff fbd4 	bl	8001450 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <Audio_MAL_IRQHandler+0xf0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <Audio_MAL_IRQHandler+0xf4>)
 8001cb0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	bf28      	it	cs
 8001cbe:	4613      	movcs	r3, r2
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <Audio_MAL_IRQHandler+0xf4>)
 8001cc2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4923      	ldr	r1, [pc, #140]	; (8001d58 <Audio_MAL_IRQHandler+0xf4>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fafc 	bl	80012c8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fb4c 	bl	8001374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <Audio_MAL_IRQHandler+0xf0>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ce8:	428b      	cmp	r3, r1
 8001cea:	bf28      	it	cs
 8001cec:	460b      	movcs	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <Audio_MAL_IRQHandler+0xf0>)
 8001cf4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d02:	428b      	cmp	r3, r1
 8001d04:	bf28      	it	cs
 8001d06:	460b      	movcs	r3, r1
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <Audio_MAL_IRQHandler+0xec>)
 8001d0c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fb2d 	bl	8001374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001d1a:	e013      	b.n	8001d44 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fb26 	bl	8001374 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <Audio_MAL_IRQHandler+0xe4>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <Audio_MAL_IRQHandler+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7ff fb8c 	bl	8001450 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <Audio_MAL_IRQHandler+0xf0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 f9f6 	bl	8004130 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000018 	.word	0x20000018
 8001d4c:	2000001c 	.word	0x2000001c
 8001d50:	20000010 	.word	0x20000010
 8001d54:	200007c0 	.word	0x200007c0
 8001d58:	20000800 	.word	0x20000800

08001d5c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001d60:	f7ff ff80 	bl	8001c64 <Audio_MAL_IRQHandler>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001d6c:	f7ff ff7a 	bl	8001c64 <Audio_MAL_IRQHandler>
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001d78:	2102      	movs	r1, #2
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <SPI3_IRQHandler+0x3c>)
 8001d7c:	f7ff fdc8 	bl	8001910 <SPI_I2S_GetFlagStatus>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <SPI3_IRQHandler+0x40>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d106      	bne.n	8001d9c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001d8e:	f002 f9d9 	bl	8004144 <EVAL_AUDIO_GetSampleCallBack>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	2004      	movs	r0, #4
 8001d98:	f7ff fa7c 	bl	8001294 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001d9c:	f002 f9d2 	bl	8004144 <EVAL_AUDIO_GetSampleCallBack>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <SPI3_IRQHandler+0x3c>)
 8001da6:	f7ff fda5 	bl	80018f4 <SPI_I2S_SendData>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40003c00 	.word	0x40003c00
 8001db4:	20000014 	.word	0x20000014

08001db8 <init_USART1>:
/* This funcion initializes the USART1 peripheral
 *
 * Arguments: baudrate --> the baudrate at which the USART is
 * 						   supposed to operate
 */
void init_USART1(uint32_t baudrate){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	2010      	movs	r0, #16
 8001dc4:	f7ff fd10 	bl	80017e8 <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f7ff fcee 	bl	80017ac <RCC_AHB1PeriphClockCmd>

	/* This sequence sets up the TX and RX pins
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 8001dda:	2302      	movs	r3, #2
 8001ddc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4619      	mov	r1, r3
 8001df2:	481d      	ldr	r0, [pc, #116]	; (8001e68 <init_USART1+0xb0>)
 8001df4:	f7ff fb5a 	bl	80014ac <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 8001df8:	2207      	movs	r2, #7
 8001dfa:	2106      	movs	r1, #6
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <init_USART1+0xb0>)
 8001dfe:	f7ff fbe3 	bl	80015c8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001e02:	2207      	movs	r2, #7
 8001e04:	2107      	movs	r1, #7
 8001e06:	4818      	ldr	r0, [pc, #96]	; (8001e68 <init_USART1+0xb0>)
 8001e08:	f7ff fbde 	bl	80015c8 <GPIO_PinAFConfig>

	/* Now the USART_InitStruct is used to define the
	 * properties of USART1
	 */
	USART_InitStruct.USART_BaudRate = baudrate;				// the baudrate is set to the value we passed into this init function
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001e10:	2300      	movs	r3, #0
 8001e12:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001e14:	2300      	movs	r3, #0
 8001e16:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001e20:	230c      	movs	r3, #12
 8001e22:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4810      	ldr	r0, [pc, #64]	; (8001e6c <init_USART1+0xb4>)
 8001e2c:	f7ff fd8c 	bl	8001948 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001e30:	2201      	movs	r2, #1
 8001e32:	f240 5125 	movw	r1, #1317	; 0x525
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <init_USART1+0xb4>)
 8001e38:	f7ff fe72 	bl	8001b20 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 8001e3c:	2325      	movs	r3, #37	; 0x25
 8001e3e:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
 8001e40:	2300      	movs	r3, #0
 8001e42:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f9bf 	bl	80011d4 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8001e56:	2101      	movs	r1, #1
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <init_USART1+0xb4>)
 8001e5a:	f7ff fe2f 	bl	8001abc <USART_Cmd>
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40011000 	.word	0x40011000

08001e70 <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]

	while(*s){
 8001e7a:	e013      	b.n	8001ea4 <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8001e7c:	bf00      	nop
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f8      	beq.n	8001e7e <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe30 	bl	8001afc <USART_SendData>
		*s++;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	603a      	str	r2, [r7, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e6      	bne.n	8001e7c <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop

08001eb8 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8001ebe:	f240 5125 	movw	r1, #1317	; 0x525
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <USART1_IRQHandler+0x5c>)
 8001ec4:	f7ff fe74 	bl	8001bb0 <USART_GetITStatus>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01e      	beq.n	8001f0c <USART1_IRQHandler+0x54>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <USART1_IRQHandler+0x5c>)
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b0a      	cmp	r3, #10
 8001eda:	d010      	beq.n	8001efe <USART1_IRQHandler+0x46>
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <USART1_IRQHandler+0x60>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b0b      	cmp	r3, #11
 8001ee2:	d80c      	bhi.n	8001efe <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <USART1_IRQHandler+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <USART1_IRQHandler+0x64>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	5453      	strb	r3, [r2, r1]
			cnt++;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <USART1_IRQHandler+0x60>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <USART1_IRQHandler+0x60>)
 8001efa:	701a      	strb	r2, [r3, #0]
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}
 8001efc:	e006      	b.n	8001f0c <USART1_IRQHandler+0x54>
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <USART1_IRQHandler+0x60>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			USART_puts(USART1, received_string);
 8001f04:	4905      	ldr	r1, [pc, #20]	; (8001f1c <USART1_IRQHandler+0x64>)
 8001f06:	4803      	ldr	r0, [pc, #12]	; (8001f14 <USART1_IRQHandler+0x5c>)
 8001f08:	f7ff ffb2 	bl	8001e70 <USART_puts>
		}
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40011000 	.word	0x40011000
 8001f18:	20000774 	.word	0x20000774
 8001f1c:	2000083c 	.word	0x2000083c

08001f20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0b      	bge.n	8001f4c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001f34:	490d      	ldr	r1, [pc, #52]	; (8001f6c <NVIC_SetPriority+0x4c>)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	3b04      	subs	r3, #4
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001f4a:	e009      	b.n	8001f60 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001f4c:	4908      	ldr	r1, [pc, #32]	; (8001f70 <NVIC_SetPriority+0x50>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f82:	d301      	bcc.n	8001f88 <SysTick_Config+0x14>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e011      	b.n	8001fac <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f90:	3b01      	subs	r3, #1
 8001f92:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001f94:	210f      	movs	r1, #15
 8001f96:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9a:	f7ff ffc1 	bl	8001f20 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <SysTick_Handler+0xe4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a35      	ldr	r2, [pc, #212]	; (800209c <SysTick_Handler+0xe4>)
 8001fc6:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <SysTick_Handler+0xe8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <SysTick_Handler+0x22>
		TM_Time2--;
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <SysTick_Handler+0xe8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <SysTick_Handler+0xe8>)
 8001fd8:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001fda:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e052      	b.n	800208a <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <SysTick_Handler+0xec>)
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d048      	beq.n	8002084 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <SysTick_Handler+0xec>)
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <SysTick_Handler+0xec>)
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800200e:	2b00      	cmp	r3, #0
 8002010:	d038      	beq.n	8002084 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <SysTick_Handler+0xec>)
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	3a01      	subs	r2, #1
 8002020:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <SysTick_Handler+0xec>)
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d128      	bne.n	8002084 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <SysTick_Handler+0xec>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4918      	ldr	r1, [pc, #96]	; (80020a4 <SysTick_Handler+0xec>)
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4618      	mov	r0, r3
 800204c:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <SysTick_Handler+0xec>)
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4912      	ldr	r1, [pc, #72]	; (80020a4 <SysTick_Handler+0xec>)
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <SysTick_Handler+0xec>)
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Handler+0xec>)
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	3301      	adds	r3, #1
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SysTick_Handler+0xec>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3a7      	bcc.n	8001fe4 <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000778 	.word	0x20000778
 80020a0:	2000077c 	.word	0x2000077c
 80020a4:	20000784 	.word	0x20000784

080020a8 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <TM_DELAY_Init+0x3c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <TM_DELAY_Init+0x40>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5b 	bl	8001f74 <SysTick_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d000      	beq.n	80020c6 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 80020c4:	e7fe      	b.n	80020c4 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <TM_DELAY_Init+0x3c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	099b      	lsrs	r3, r3, #6
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <TM_DELAY_Init+0x44>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0a9b      	lsrs	r3, r3, #10
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <TM_DELAY_Init+0x48>)
 80020d6:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <TM_DELAY_Init+0x4c>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000020 	.word	0x20000020
 80020e8:	10624dd3 	.word	0x10624dd3
 80020ec:	02659117 	.word	0x02659117
 80020f0:	2000084c 	.word	0x2000084c
 80020f4:	20000780 	.word	0x20000780

080020f8 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 80020fe:	2303      	movs	r3, #3
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2201      	movs	r2, #1
 800210a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <TM_DISCO_LedInit+0x2c>)
 8002110:	f000 f81c 	bl	800214c <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <TM_DISCO_LedInit+0x2c>)
 8002116:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800211a:	835a      	strh	r2, [r3, #26]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020c00 	.word	0x40020c00

08002128 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	2302      	movs	r3, #2
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	2200      	movs	r2, #0
 800213a:	2101      	movs	r1, #1
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TM_DISCO_ButtonInit+0x20>)
 800213e:	f000 f805 	bl	800214c <TM_GPIO_Init>
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40020000 	.word	0x40020000

0800214c <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	807b      	strh	r3, [r7, #2]
 800215e:	460b      	mov	r3, r1
 8002160:	707b      	strb	r3, [r7, #1]
 8002162:	4613      	mov	r3, r2
 8002164:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f875 	bl	800225c <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002172:	7838      	ldrb	r0, [r7, #0]
 8002174:	787a      	ldrb	r2, [r7, #1]
 8002176:	8879      	ldrh	r1, [r7, #2]
 8002178:	7d3b      	ldrb	r3, [r7, #20]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	7c3b      	ldrb	r3, [r7, #16]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f882 	bl	800228c <TM_GPIO_INT_Init>
 8002188:	e000      	b.n	800218c <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 800218a:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af02      	add	r7, sp, #8
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	807b      	strh	r3, [r7, #2]
 80021a6:	460b      	mov	r3, r1
 80021a8:	707b      	strb	r3, [r7, #1]
 80021aa:	4613      	mov	r3, r2
 80021ac:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03e      	beq.n	8002232 <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f851 	bl	800225c <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e029      	b.n	8002214 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	fa42 f303 	asr.w	r3, r2, r3
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01d      	beq.n	800220c <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	08d9      	lsrs	r1, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3108      	adds	r1, #8
 80021dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	f001 0107 	and.w	r1, r1, #7
 80021e6:	0089      	lsls	r1, r1, #2
 80021e8:	200f      	movs	r0, #15
 80021ea:	fa00 f101 	lsl.w	r1, r0, r1
 80021ee:	43c9      	mvns	r1, r1
 80021f0:	400b      	ands	r3, r1
 80021f2:	7f38      	ldrb	r0, [r7, #28]
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	f001 0107 	and.w	r1, r1, #7
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	fa00 f101 	lsl.w	r1, r0, r1
 8002200:	4319      	orrs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800220a:	e000      	b.n	800220e <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 800220c:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3301      	adds	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d9d2      	bls.n	80021c0 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800221a:	787a      	ldrb	r2, [r7, #1]
 800221c:	8879      	ldrh	r1, [r7, #2]
 800221e:	7e3b      	ldrb	r3, [r7, #24]
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	783b      	ldrb	r3, [r7, #0]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	2202      	movs	r2, #2
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f82e 	bl	800228c <TM_GPIO_INT_Init>
 8002230:	e000      	b.n	8002234 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8002232:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop

0800223c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800224a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	b29b      	uxth	r3, r3
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe9 	bl	800223c <TM_GPIO_GetPortSource>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	fa03 f102 	lsl.w	r1, r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <TM_GPIO_INT_EnableClock+0x2c>)
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <TM_GPIO_INT_EnableClock+0x2c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	430b      	orrs	r3, r1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	807b      	strh	r3, [r7, #2]
 800229e:	460b      	mov	r3, r1
 80022a0:	707b      	strb	r3, [r7, #1]
 80022a2:	4613      	mov	r3, r2
 80022a4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffc8 	bl	800223c <TM_GPIO_GetPortSource>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e067      	b.n	8002386 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	fa42 f303 	asr.w	r3, r2, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d05b      	beq.n	800237e <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	7bba      	ldrb	r2, [r7, #14]
 80022ca:	4932      	ldr	r1, [pc, #200]	; (8002394 <TM_GPIO_INT_Init+0x108>)
 80022cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80022d0:	b211      	sxth	r1, r2
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	b212      	sxth	r2, r2
 80022dc:	430a      	orrs	r2, r1
 80022de:	b212      	sxth	r2, r2
 80022e0:	b291      	uxth	r1, r2
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <TM_GPIO_INT_Init+0x108>)
 80022e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	0052      	lsls	r2, r2, #1
 80022f0:	2103      	movs	r1, #3
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	43d2      	mvns	r2, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	7e39      	ldrb	r1, [r7, #24]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	0052      	lsls	r2, r2, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2103      	movs	r1, #3
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	4013      	ands	r3, r2
 800231c:	7879      	ldrb	r1, [r7, #1]
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	0052      	lsls	r2, r2, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d002      	beq.n	8002338 <TM_GPIO_INT_Init+0xac>
 8002332:	787b      	ldrb	r3, [r7, #1]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d123      	bne.n	8002380 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	b292      	uxth	r2, r2
 8002346:	43d2      	mvns	r2, r2
 8002348:	401a      	ands	r2, r3
 800234a:	7839      	ldrb	r1, [r7, #0]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	b29b      	uxth	r3, r3
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2103      	movs	r1, #3
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4013      	ands	r3, r2
 800236c:	7f39      	ldrb	r1, [r7, #28]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e000      	b.n	8002380 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 800237e:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d994      	bls.n	80022b6 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000079c 	.word	0x2000079c

08002398 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <TM_SPI_Send+0x1e>
 80023b2:	2300      	movs	r3, #0
 80023b4:	e025      	b.n	8002402 <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80023b6:	bf00      	nop
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	891b      	ldrh	r3, [r3, #8]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f8      	beq.n	80023b8 <TM_SPI_Send+0x20>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	891b      	ldrh	r3, [r3, #8]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f1      	bne.n	80023b8 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 80023dc:	bf00      	nop
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	891b      	ldrh	r3, [r3, #8]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f8      	beq.n	80023de <TM_SPI_Send+0x46>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	891b      	ldrh	r3, [r3, #8]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f1      	bne.n	80023de <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	899b      	ldrh	r3, [r3, #12]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2db      	uxtb	r3, r3
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8002412:	f000 faf5 	bl	8002a00 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8002416:	f000 f86b 	bl	80024f0 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	2201      	movs	r2, #1
 800241e:	210f      	movs	r1, #15
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f8c3 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	2b3b      	cmp	r3, #59	; 0x3b
 800242a:	d104      	bne.n	8002436 <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8002432:	2301      	movs	r3, #1
 8002434:	e008      	b.n	8002448 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b3f      	cmp	r3, #63	; 0x3f
 800243a:	d104      	bne.n	8002446 <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8002442:	2302      	movs	r3, #2
 8002444:	e000      	b.n	8002448 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200007b2 	.word	0x200007b2

08002454 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	4613      	mov	r3, r2
 8002462:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8002464:	f000 f844 	bl	80024f0 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8002468:	f000 faca 	bl	8002a00 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 800246c:	f7ff ffce 	bl	800240c <TM_LIS302DL_LIS3DSH_Detect>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8002476:	79ba      	ldrb	r2, [r7, #6]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f945 	bl	800270c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8002482:	2301      	movs	r3, #1
 8002484:	e010      	b.n	80024a8 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8002486:	f7ff ffc1 	bl	800240c <TM_LIS302DL_LIS3DSH_Detect>
 800248a:	4603      	mov	r3, r0
 800248c:	2b02      	cmp	r3, #2
 800248e:	d107      	bne.n	80024a0 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8002490:	79ba      	ldrb	r2, [r7, #6]
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f8b4 	bl	8002604 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 800249c:	2302      	movs	r3, #2
 800249e:	e003      	b.n	80024a8 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200007b2 	.word	0x200007b2

080024b4 <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d104      	bne.n	80024ce <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fa2f 	bl	8002928 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e009      	b.n	80024e2 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d104      	bne.n	80024e0 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f996 	bl	8002808 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80024dc:	2302      	movs	r3, #2
 80024de:	e000      	b.n	80024e2 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200007b2 	.word	0x200007b2

080024f0 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11d      	bne.n	800253a <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 80024fe:	2100      	movs	r1, #0
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8002502:	f000 fa8f 	bl	8002a24 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8002506:	2101      	movs	r1, #1
 8002508:	2010      	movs	r0, #16
 800250a:	f7ff f94f 	bl	80017ac <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 800250e:	2308      	movs	r3, #8
 8002510:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8002512:	2301      	movs	r3, #1
 8002514:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002516:	2300      	movs	r3, #0
 8002518:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800251a:	2301      	movs	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 800251e:	2301      	movs	r3, #1
 8002520:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8002522:	463b      	mov	r3, r7
 8002524:	4619      	mov	r1, r3
 8002526:	4809      	ldr	r0, [pc, #36]	; (800254c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8002528:	f7fe ffc0 	bl	80014ac <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 800252e:	2208      	movs	r2, #8
 8002530:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e000      	b.n	800253c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 800253a:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200007b3 	.word	0x200007b3
 8002548:	40013000 	.word	0x40013000
 800254c:	40021000 	.word	0x40021000

08002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	4613      	mov	r3, r2
 800255e:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8002562:	2208      	movs	r2, #8
 8002564:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8002566:	78bb      	ldrb	r3, [r7, #2]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d907      	bls.n	800257c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d103      	bne.n	800257c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	4619      	mov	r1, r3
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8002582:	f7ff ff09 	bl	8002398 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8002586:	78bb      	ldrb	r3, [r7, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4806      	ldr	r0, [pc, #24]	; (80025a8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 800258e:	f000 fab9 	bl	8002b04 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8002592:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8002594:	2208      	movs	r2, #8
 8002596:	831a      	strh	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	200007b2 	.word	0x200007b2
 80025a8:	40013000 	.word	0x40013000

080025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
 80025b8:	4613      	mov	r3, r2
 80025ba:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 80025be:	2208      	movs	r2, #8
 80025c0:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c8:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 80025ca:	78bb      	ldrb	r3, [r7, #2]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d903      	bls.n	80025d8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	4619      	mov	r1, r3
 80025dc:	4808      	ldr	r0, [pc, #32]	; (8002600 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 80025de:	f7ff fedb 	bl	8002398 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 80025e2:	78bb      	ldrb	r3, [r7, #2]
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 80025ea:	f000 facf 	bl	8002b8c <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80025ee:	4b03      	ldr	r3, [pc, #12]	; (80025fc <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 80025f0:	2208      	movs	r2, #8
 80025f2:	831a      	strh	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	40013000 	.word	0x40013000

08002604 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	460a      	mov	r2, r1
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8002614:	2367      	movs	r3, #103	; 0x67
 8002616:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8002620:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e02a      	b.n	800267c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8002636:	4a31      	ldr	r2, [pc, #196]	; (80026fc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e01f      	b.n	800267c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800264c:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e014      	b.n	800267c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d107      	bne.n	8002668 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	f043 0318 	orr.w	r3, r3, #24
 800265e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e009      	b.n	800267c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d13b      	bne.n	80026e6 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8002678:	4a23      	ldr	r2, [pc, #140]	; (8002708 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 800267a:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01a      	beq.n	80026b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d104      	bne.n	8002692 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268e:	81fb      	strh	r3, [r7, #14]
 8002690:	e012      	b.n	80026b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d106      	bne.n	80026a6 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a2:	81fb      	strh	r3, [r7, #14]
 80026a4:	e008      	b.n	80026b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 80026a6:	79bb      	ldrb	r3, [r7, #6]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d11e      	bne.n	80026ea <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80026b2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80026b6:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 80026be:	f107 030d 	add.w	r3, r7, #13
 80026c2:	2201      	movs	r2, #1
 80026c4:	2120      	movs	r1, #32
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff42 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 80026cc:	89fb      	ldrh	r3, [r7, #14]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 80026d6:	f107 030d 	add.w	r3, r7, #13
 80026da:	2201      	movs	r2, #1
 80026dc:	2124      	movs	r1, #36	; 0x24
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff36 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 80026e4:	e002      	b.n	80026ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 80026ea:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000850 	.word	0x20000850
 80026f8:	3d75c28f 	.word	0x3d75c28f
 80026fc:	3df5c28f 	.word	0x3df5c28f
 8002700:	3e3851ec 	.word	0x3e3851ec
 8002704:	3e75c28f 	.word	0x3e75c28f
 8002708:	3f3ae148 	.word	0x3f3ae148

0800270c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800271c:	f107 030e 	add.w	r3, r7, #14
 8002720:	2201      	movs	r2, #1
 8002722:	2121      	movs	r1, #33	; 0x21
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff41 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 800272a:	89fb      	ldrh	r3, [r7, #14]
 800272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002730:	b29b      	uxth	r3, r3
 8002732:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002734:	f107 030e 	add.w	r3, r7, #14
 8002738:	2201      	movs	r2, #1
 800273a:	2121      	movs	r1, #33	; 0x21
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff07 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8002742:	2347      	movs	r3, #71	; 0x47
 8002744:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d105      	bne.n	8002758 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8002752:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e00a      	b.n	800276e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d147      	bne.n	80027ee <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	b29b      	uxth	r3, r3
 8002766:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 800276a:	4a26      	ldr	r2, [pc, #152]	; (8002804 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 800276c:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 800276e:	f107 030e 	add.w	r3, r7, #14
 8002772:	2201      	movs	r2, #1
 8002774:	2120      	movs	r1, #32
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff feea 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800277c:	f107 030e 	add.w	r3, r7, #14
 8002780:	2201      	movs	r2, #1
 8002782:	2121      	movs	r1, #33	; 0x21
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fee3 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8002790:	b29b      	uxth	r3, r3
 8002792:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800279a:	b29b      	uxth	r3, r3
 800279c:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d102      	bne.n	80027aa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 80027a4:	89fb      	ldrh	r3, [r7, #14]
 80027a6:	81fb      	strh	r3, [r7, #14]
 80027a8:	e019      	b.n	80027de <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d105      	bne.n	80027bc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	81fb      	strh	r3, [r7, #14]
 80027ba:	e010      	b.n	80027de <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d105      	bne.n	80027ce <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	81fb      	strh	r3, [r7, #14]
 80027cc:	e007      	b.n	80027de <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 80027ce:	79bb      	ldrb	r3, [r7, #6]
 80027d0:	2b07      	cmp	r3, #7
 80027d2:	d10e      	bne.n	80027f2 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	f043 0303 	orr.w	r3, r3, #3
 80027da:	b29b      	uxth	r3, r3
 80027dc:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80027de:	f107 030e 	add.w	r3, r7, #14
 80027e2:	2201      	movs	r2, #1
 80027e4:	2121      	movs	r1, #33	; 0x21
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff feb2 	bl	8002550 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 80027ec:	e002      	b.n	80027f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 80027f2:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000850 	.word	0x20000850
 8002800:	41900000 	.word	0x41900000
 8002804:	42900000 	.word	0x42900000

08002808 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	2201      	movs	r2, #1
 8002816:	2128      	movs	r1, #40	; 0x28
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fec7 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	3301      	adds	r3, #1
 8002824:	2201      	movs	r2, #1
 8002826:	2129      	movs	r1, #41	; 0x29
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff febf 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	3302      	adds	r3, #2
 8002834:	2201      	movs	r2, #1
 8002836:	212a      	movs	r1, #42	; 0x2a
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff feb7 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	3303      	adds	r3, #3
 8002844:	2201      	movs	r2, #1
 8002846:	212b      	movs	r1, #43	; 0x2b
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff feaf 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	3304      	adds	r3, #4
 8002854:	2201      	movs	r2, #1
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fea7 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	3305      	adds	r3, #5
 8002864:	2201      	movs	r2, #1
 8002866:	212d      	movs	r1, #45	; 0x2d
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe9f 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 800286e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002872:	b29b      	uxth	r3, r3
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	b29a      	uxth	r2, r3
 8002878:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4413      	add	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	b21b      	sxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fa65 	bl	8000d54 <__aeabi_i2f>
 800288a:	4602      	mov	r2, r0
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fab2 	bl	8000dfc <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc74 	bl	8001188 <__aeabi_f2iz>
 80028a0:	4603      	mov	r3, r0
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 80028a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	b21b      	sxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fa48 	bl	8000d54 <__aeabi_i2f>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f7fe fa95 	bl	8000dfc <__aeabi_fmul>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fc57 	bl	8001188 <__aeabi_f2iz>
 80028da:	4603      	mov	r3, r0
 80028dc:	b21a      	sxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 80028e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fa2b 	bl	8000d54 <__aeabi_i2f>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f7fe fa78 	bl	8000dfc <__aeabi_fmul>
 800290c:	4603      	mov	r3, r0
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fc3a 	bl	8001188 <__aeabi_f2iz>
 8002914:	4603      	mov	r3, r0
 8002916:	b21a      	sxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	809a      	strh	r2, [r3, #4]
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000850 	.word	0x20000850

08002928 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2201      	movs	r2, #1
 8002936:	2129      	movs	r1, #41	; 0x29
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe37 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	3301      	adds	r3, #1
 8002944:	2201      	movs	r2, #1
 8002946:	212b      	movs	r1, #43	; 0x2b
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe2f 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	3302      	adds	r3, #2
 8002954:	2201      	movs	r2, #1
 8002956:	212d      	movs	r1, #45	; 0x2d
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fe27 	bl	80025ac <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 800295e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f9f6 	bl	8000d54 <__aeabi_i2f>
 8002968:	4602      	mov	r2, r0
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <TM_LIS302DL_INT_ReadAxes+0xd4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe fa43 	bl	8000dfc <__aeabi_fmul>
 8002976:	4603      	mov	r3, r0
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fc05 	bl	8001188 <__aeabi_f2iz>
 800297e:	4603      	mov	r3, r0
 8002980:	b21a      	sxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 8002986:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe f9e2 	bl	8000d54 <__aeabi_i2f>
 8002990:	4602      	mov	r2, r0
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f7fe fa2f 	bl	8000dfc <__aeabi_fmul>
 800299e:	4603      	mov	r3, r0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fbf1 	bl	8001188 <__aeabi_f2iz>
 80029a6:	4603      	mov	r3, r0
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 80029ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9ce 	bl	8000d54 <__aeabi_i2f>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <TM_LIS302DL_INT_ReadAxes+0xd4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe fa1b 	bl	8000dfc <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fbdd 	bl	8001188 <__aeabi_f2iz>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	425b      	negs	r3, r3
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	801a      	strh	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000850 	.word	0x20000850

08002a00 <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 8002a08:	607b      	str	r3, [r7, #4]
	while (delay--);
 8002a0a:	bf00      	nop
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1fa      	bne.n	8002a0c <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	000f4240 	.word	0x000f4240

08002a24 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <TM_SPI_Init+0xc8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10a      	bne.n	8002a4e <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8002a38:	78f9      	ldrb	r1, [r7, #3]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2320      	movs	r3, #32
 8002a46:	2200      	movs	r2, #0
 8002a48:	4828      	ldr	r0, [pc, #160]	; (8002aec <TM_SPI_Init+0xc8>)
 8002a4a:	f000 f8f5 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <TM_SPI_Init+0xcc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10a      	bne.n	8002a6c <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8002a56:	78f9      	ldrb	r1, [r7, #3]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2320      	movs	r3, #32
 8002a64:	2200      	movs	r2, #0
 8002a66:	4822      	ldr	r0, [pc, #136]	; (8002af0 <TM_SPI_Init+0xcc>)
 8002a68:	f000 f8e6 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <TM_SPI_Init+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10a      	bne.n	8002a8a <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8002a74:	78f9      	ldrb	r1, [r7, #3]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2320      	movs	r3, #32
 8002a82:	2200      	movs	r2, #0
 8002a84:	481b      	ldr	r0, [pc, #108]	; (8002af4 <TM_SPI_Init+0xd0>)
 8002a86:	f000 f8d7 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <TM_SPI_Init+0xd4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10a      	bne.n	8002aa8 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 8002a92:	78f9      	ldrb	r1, [r7, #3]
 8002a94:	2300      	movs	r3, #0
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4815      	ldr	r0, [pc, #84]	; (8002af8 <TM_SPI_Init+0xd4>)
 8002aa4:	f000 f8c8 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <TM_SPI_Init+0xd8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10a      	bne.n	8002ac6 <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8002ab0:	78f9      	ldrb	r1, [r7, #3]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2320      	movs	r3, #32
 8002abe:	2200      	movs	r2, #0
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <TM_SPI_Init+0xd8>)
 8002ac2:	f000 f8b9 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <TM_SPI_Init+0xdc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10a      	bne.n	8002ae4 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8002ace:	78f9      	ldrb	r1, [r7, #3]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2320      	movs	r3, #32
 8002adc:	2200      	movs	r2, #0
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <TM_SPI_Init+0xdc>)
 8002ae0:	f000 f8aa 	bl	8002c38 <TM_SPIx_Init>
	}
#endif
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013000 	.word	0x40013000
 8002af0:	40003800 	.word	0x40003800
 8002af4:	40003c00 	.word	0x40003c00
 8002af8:	40013400 	.word	0x40013400
 8002afc:	40015000 	.word	0x40015000
 8002b00:	40015400 	.word	0x40015400

08002b04 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d031      	beq.n	8002b82 <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002b1e:	bf00      	nop
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	891b      	ldrh	r3, [r3, #8]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f8      	beq.n	8002b20 <TM_SPI_WriteMulti+0x1c>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	891b      	ldrh	r3, [r3, #8]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f1      	bne.n	8002b20 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e01a      	b.n	8002b78 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002b50:	bf00      	nop
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	891b      	ldrh	r3, [r3, #8]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f8      	beq.n	8002b52 <TM_SPI_WriteMulti+0x4e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	891b      	ldrh	r3, [r3, #8]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f1      	bne.n	8002b52 <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3e0      	bcc.n	8002b42 <TM_SPI_WriteMulti+0x3e>
 8002b80:	e000      	b.n	8002b84 <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002b82:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d034      	beq.n	8002c14 <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002baa:	bf00      	nop
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f8      	beq.n	8002bac <TM_SPI_ReadMulti+0x20>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	891b      	ldrh	r3, [r3, #8]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f1      	bne.n	8002bac <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e01d      	b.n	8002c0a <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002bd6:	bf00      	nop
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	891b      	ldrh	r3, [r3, #8]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f8      	beq.n	8002bd8 <TM_SPI_ReadMulti+0x4c>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	891b      	ldrh	r3, [r3, #8]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f1      	bne.n	8002bd8 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	8992      	ldrh	r2, [r2, #12]
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3dd      	bcc.n	8002bce <TM_SPI_ReadMulti+0x42>
 8002c12:	e000      	b.n	8002c16 <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002c14:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop

08002c20 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	70fb      	strb	r3, [r7, #3]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	70bb      	strb	r3, [r7, #2]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fe28 	bl	80018ac <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a51      	ldr	r2, [pc, #324]	; (8002da4 <TM_SPIx_Init+0x16c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10b      	bne.n	8002c7c <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002c64:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c6e:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f8a4 	bl	8002dc0 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <TM_SPIx_Init+0x174>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10b      	bne.n	8002c9c <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002c84:	4a48      	ldr	r2, [pc, #288]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002c86:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8e:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f8c4 	bl	8002e20 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <TM_SPIx_Init+0x178>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10b      	bne.n	8002cbc <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002ca4:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f900 	bl	8002eb8 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3d      	ldr	r2, [pc, #244]	; (8002db4 <TM_SPIx_Init+0x17c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10b      	bne.n	8002cdc <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8002cc4:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cce:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f922 	bl	8002f1c <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <TM_SPIx_Init+0x180>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10b      	bne.n	8002cfc <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cee:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f942 	bl	8002f7c <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <TM_SPIx_Init+0x184>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10b      	bne.n	8002d1c <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <TM_SPIx_Init+0x170>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0e:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f96e 	bl	8002ff4 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8002d1c:	883b      	ldrh	r3, [r7, #0]
 8002d1e:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002d20:	2300      	movs	r3, #0
 8002d22:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8002d24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d26:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8002d28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d2a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8002d32:	78bb      	ldrb	r3, [r7, #2]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	82bb      	strh	r3, [r7, #20]
 8002d40:	e016      	b.n	8002d70 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8002d42:	78bb      	ldrb	r3, [r7, #2]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d104      	bne.n	8002d52 <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	82bb      	strh	r3, [r7, #20]
 8002d50:	e00e      	b.n	8002d70 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8002d52:	78bb      	ldrb	r3, [r7, #2]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d104      	bne.n	8002d62 <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	82bb      	strh	r3, [r7, #20]
 8002d60:	e006      	b.n	8002d70 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8002d62:	78bb      	ldrb	r3, [r7, #2]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d103      	bne.n	8002d70 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fd4c 	bl	8001824 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	801a      	strh	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40013000 	.word	0x40013000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40003800 	.word	0x40003800
 8002db0:	40003c00 	.word	0x40003c00
 8002db4:	40013400 	.word	0x40013400
 8002db8:	40015000 	.word	0x40015000
 8002dbc:	40015400 	.word	0x40015400

08002dc0 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002dd0:	2305      	movs	r3, #5
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2200      	movs	r2, #0
 8002ddc:	21e0      	movs	r1, #224	; 0xe0
 8002dde:	480d      	ldr	r0, [pc, #52]	; (8002e14 <TM_SPI1_INT_InitPins+0x54>)
 8002de0:	f7ff f9d8 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d109      	bne.n	8002dfe <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002dea:	2305      	movs	r3, #5
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	2303      	movs	r3, #3
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	2200      	movs	r2, #0
 8002df6:	2138      	movs	r1, #56	; 0x38
 8002df8:	4807      	ldr	r0, [pc, #28]	; (8002e18 <TM_SPI1_INT_InitPins+0x58>)
 8002dfa:	f7ff f9cb 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d103      	bne.n	8002e0c <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8002e04:	2105      	movs	r1, #5
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <TM_SPI1_INT_InitPins+0x5c>)
 8002e08:	f7ff ff0a 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40013000 	.word	0x40013000

08002e20 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d114      	bne.n	8002e5a <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002e30:	2305      	movs	r3, #5
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2303      	movs	r3, #3
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e40:	4819      	ldr	r0, [pc, #100]	; (8002ea8 <TM_SPI2_INT_InitPins+0x88>)
 8002e42:	f7ff f9a7 	bl	8002194 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002e46:	2305      	movs	r3, #5
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2200      	movs	r2, #0
 8002e52:	210c      	movs	r1, #12
 8002e54:	4815      	ldr	r0, [pc, #84]	; (8002eac <TM_SPI2_INT_InitPins+0x8c>)
 8002e56:	f7ff f99d 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10a      	bne.n	8002e76 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002e60:	2305      	movs	r3, #5
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2303      	movs	r3, #3
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <TM_SPI2_INT_InitPins+0x88>)
 8002e72:	f7ff f98f 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d109      	bne.n	8002e90 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	2303      	movs	r3, #3
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	2200      	movs	r2, #0
 8002e88:	210d      	movs	r1, #13
 8002e8a:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <TM_SPI2_INT_InitPins+0x90>)
 8002e8c:	f7ff f982 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d103      	bne.n	8002e9e <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8002e96:	2105      	movs	r1, #5
 8002e98:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <TM_SPI2_INT_InitPins+0x94>)
 8002e9a:	f7ff fec1 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40003800 	.word	0x40003800

08002eb8 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002ec8:	2306      	movs	r3, #6
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2303      	movs	r3, #3
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2138      	movs	r1, #56	; 0x38
 8002ed6:	480e      	ldr	r0, [pc, #56]	; (8002f10 <TM_SPI3_INT_InitPins+0x58>)
 8002ed8:	f7ff f95c 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d10a      	bne.n	8002ef8 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	2200      	movs	r2, #0
 8002eee:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <TM_SPI3_INT_InitPins+0x5c>)
 8002ef4:	f7ff f94e 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d103      	bne.n	8002f06 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8002efe:	2106      	movs	r1, #6
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <TM_SPI3_INT_InitPins+0x60>)
 8002f02:	f7ff fe8d 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40003c00 	.word	0x40003c00

08002f1c <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002f2c:	2305      	movs	r3, #5
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2303      	movs	r3, #3
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	2200      	movs	r2, #0
 8002f38:	2164      	movs	r1, #100	; 0x64
 8002f3a:	480e      	ldr	r0, [pc, #56]	; (8002f74 <TM_SPI4_INT_InitPins+0x58>)
 8002f3c:	f7ff f92a 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10a      	bne.n	8002f5c <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002f46:	2305      	movs	r3, #5
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002f56:	4807      	ldr	r0, [pc, #28]	; (8002f74 <TM_SPI4_INT_InitPins+0x58>)
 8002f58:	f7ff f91c 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d103      	bne.n	8002f6a <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8002f62:	2105      	movs	r1, #5
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <TM_SPI4_INT_InitPins+0x5c>)
 8002f66:	f7ff fe5b 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40013400 	.word	0x40013400

08002f7c <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2303      	movs	r3, #3
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2300      	movs	r3, #0
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002f9c:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <TM_SPI5_INT_InitPins+0x6c>)
 8002f9e:	f7ff f8f9 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d114      	bne.n	8002fd2 <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002fa8:	2305      	movs	r3, #5
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2303      	movs	r3, #3
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fb8:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <TM_SPI5_INT_InitPins+0x6c>)
 8002fba:	f7ff f8eb 	bl	8002194 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	21c0      	movs	r1, #192	; 0xc0
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <TM_SPI5_INT_InitPins+0x70>)
 8002fce:	f7ff f8e1 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d103      	bne.n	8002fe0 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8002fd8:	2105      	movs	r1, #5
 8002fda:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <TM_SPI5_INT_InitPins+0x74>)
 8002fdc:	f7ff fe20 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021400 	.word	0x40021400
 8002fec:	40021c00 	.word	0x40021c00
 8002ff0:	40015000 	.word	0x40015000

08002ff4 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8003004:	2305      	movs	r3, #5
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2303      	movs	r3, #3
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2300      	movs	r3, #0
 800300e:	2200      	movs	r2, #0
 8003010:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003014:	4806      	ldr	r0, [pc, #24]	; (8003030 <TM_SPI6_INT_InitPins+0x3c>)
 8003016:	f7ff f8bd 	bl	8002194 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d103      	bne.n	8003028 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8003020:	2105      	movs	r1, #5
 8003022:	4804      	ldr	r0, [pc, #16]	; (8003034 <TM_SPI6_INT_InitPins+0x40>)
 8003024:	f7ff fdfc 	bl	8002c20 <TM_SPI_InitCustomPinsCallback>
	}
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021800 	.word	0x40021800
 8003034:	40015400 	.word	0x40015400

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800303c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800303e:	e003      	b.n	8003048 <LoopCopyDataInit>

08003040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003046:	3104      	adds	r1, #4

08003048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003048:	480b      	ldr	r0, [pc, #44]	; (8003078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800304c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800304e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003050:	d3f6      	bcc.n	8003040 <CopyDataInit>
  ldr  r2, =_sbss
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003054:	e002      	b.n	800305c <LoopFillZerobss>

08003056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003058:	f842 3b04 	str.w	r3, [r2], #4

0800305c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800305e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003060:	d3f9      	bcc.n	8003056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003062:	f000 f847 	bl	80030f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003066:	f001 f875 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306a:	f000 febf 	bl	8003dec <main>
  bx  lr    
 800306e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003070:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003074:	08005c38 	.word	0x08005c38
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800307c:	20000758 	.word	0x20000758
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003080:	20000758 	.word	0x20000758
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003084:	20000858 	.word	0x20000858

08003088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003088:	e7fe      	b.n	8003088 <ADC_IRQHandler>
	...

0800308c <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <_sbrk+0x58>)
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <_sbrk+0x5c>)
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <_sbrk+0x60>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <_sbrk+0x1e>
    heap_end = &end;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <_sbrk+0x60>)
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <_sbrk+0x58>)
 80030a8:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <_sbrk+0x60>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <_sbrk+0x60>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d905      	bls.n	80030ca <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <_sbrk+0x64>)
 80030c0:	220c      	movs	r2, #12
 80030c2:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e006      	b.n	80030d8 <_sbrk+0x4c>
  }

  heap_end += incr;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <_sbrk+0x60>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a06      	ldr	r2, [pc, #24]	; (80030ec <_sbrk+0x60>)
 80030d4:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 80030d6:	68bb      	ldr	r3, [r7, #8]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000858 	.word	0x20000858
 80030e8:	00005000 	.word	0x00005000
 80030ec:	200007b4 	.word	0x200007b4
 80030f0:	20000854 	.word	0x20000854

080030f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030f8:	4a12      	ldr	r2, [pc, #72]	; (8003144 <SystemInit+0x50>)
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <SystemInit+0x50>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <SystemInit+0x50>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <SystemInit+0x50>)
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <SystemInit+0x50>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <SystemInit+0x50>)
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <SystemInit+0x54>)
 800311e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <SystemInit+0x50>)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <SystemInit+0x50>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SystemInit+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003132:	f000 f80d 	bl	8003150 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <SystemInit+0x58>)
 8003138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800313c:	609a      	str	r2, [r3, #8]
#endif
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	24003010 	.word	0x24003010
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	2300      	movs	r3, #0
 800315c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800315e:	4a35      	ldr	r2, [pc, #212]	; (8003234 <SetSysClock+0xe4>)
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <SetSysClock+0xe4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800316a:	4b32      	ldr	r3, [pc, #200]	; (8003234 <SetSysClock+0xe4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <SetSysClock+0x38>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003186:	d1f0      	bne.n	800316a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003188:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <SetSysClock+0xe4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003194:	2301      	movs	r3, #1
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	e001      	b.n	800319e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d142      	bne.n	800322a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <SetSysClock+0xe4>)
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <SetSysClock+0xe4>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <SetSysClock+0xe8>)
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <SetSysClock+0xe8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ba:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <SetSysClock+0xe4>)
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <SetSysClock+0xe4>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <SetSysClock+0xe4>)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <SetSysClock+0xe4>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <SetSysClock+0xe4>)
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <SetSysClock+0xe4>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80031da:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80031dc:	4b15      	ldr	r3, [pc, #84]	; (8003234 <SetSysClock+0xe4>)
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <SetSysClock+0xec>)
 80031e0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <SetSysClock+0xe4>)
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <SetSysClock+0xe4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ec:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80031ee:	bf00      	nop
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <SetSysClock+0xe4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f9      	beq.n	80031f0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <SetSysClock+0xf0>)
 80031fe:	f240 6205 	movw	r2, #1541	; 0x605
 8003202:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <SetSysClock+0xe4>)
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <SetSysClock+0xe4>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003210:	4a08      	ldr	r2, [pc, #32]	; (8003234 <SetSysClock+0xe4>)
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <SetSysClock+0xe4>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800321c:	bf00      	nop
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SetSysClock+0xe4>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d1f9      	bne.n	800321e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	07405408 	.word	0x07405408
 8003240:	40023c00 	.word	0x40023c00

08003244 <min>:

float lightDownX[39] = {1.49216676, 1.51851678, 1.5579617, 1.64857316, 1.57100117, 1.34270084, 1.20389056, 1.31372344, 1.60960639, 1.69372451, 1.50360715, 1.40052497, 1.91936755, 2.08155727, 2.14409018, 1.94486308, 1.28940415, 0.881582916, 1.1271081, 1.22097564, 1.2776829, 1.29637802, 0.991464615, 1.20402527, 1.50281775, 1.37897241, 1.31928062, 1.39449644, 1.83114743, 1.72280324, 1.77596223, 1.78317356, 1.86322153, 2.09625506, 2.29837847, 2.3948648, 2.29740524, 2.27718377, 2.28102875};
float lightDownY[39] = {-9.08133316, -9.17093277, -9.19765282, -9.16235733, -8.8916502, -8.50715542, -8.13300896, -7.63710642, -7.43097448, -7.38268232, -7.17487764, -7.03241444, -6.91469002, -6.74528313, -6.63269806, -6.31388855, -6.22272205, -6.11690521, -5.66783381, -5.53948355, -5.46463871, -5.14824724, -4.86077309, -4.53954124, -4.26067877, -3.97847509, -3.66393256, -3.4347527, -3.40032697, -3.12122893, -2.94386029, -2.69970226, -2.65779161, -2.65245414, -2.61271787, -2.55790257, -2.47153187, -2.53107238, -2.52175069};
float lightDownZ[39] = {2.65483332, 2.29338336, 2.30436826, 2.57005787, 2.93304062, 3.61912847, 4.52538967, 4.88377285, 4.72064114, 4.36944866, 3.94361401, 3.63952971, 2.71867085, 1.83106959, 0.198748738, -1.95787585, -4.001513, -5.21005917, -6.43104124, -7.71172905, -8.63220978, -9.38454723, -9.78518295, -10.6116276, -11.1781397, -11.0646982, -10.7902889, -11.1232023, -11.5812416, -11.6138687, -11.3877077, -11.2623959, -11.2286768, -11.2020741, -11.021452, -10.7450161, -10.5185108, -10.2909575, -10.16467};

float min(float a, float b) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fd ff71 	bl	8001138 <__aeabi_fcmplt>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <min+0x1c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	e000      	b.n	8003262 <min+0x1e>
 8003260:	683b      	ldr	r3, [r7, #0]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop

0800326c <minArray>:

float max(float a, float b) {
	return a > b ? a : b;
}

float minArray(float *array, int begin, int end) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	float min = array[begin];
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	617b      	str	r3, [r7, #20]
	for (int i = begin + 1; i < end; i++) {
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3301      	adds	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e014      	b.n	80032b6 <minArray+0x4a>
		if(array[i] < min) { min = array[i]; }
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6979      	ldr	r1, [r7, #20]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd ff4d 	bl	8001138 <__aeabi_fcmplt>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <minArray+0x44>
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
	return a > b ? a : b;
}

float minArray(float *array, int begin, int end) {
	float min = array[begin];
	for (int i = begin + 1; i < end; i++) {
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	3301      	adds	r3, #1
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dbe6      	blt.n	800328c <minArray+0x20>
		if(array[i] < min) { min = array[i]; }
	}
	return min;
 80032be:	697b      	ldr	r3, [r7, #20]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <maxArray>:

float maxArray(float *array, int begin, int end) {
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
	double max = array[begin];
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f92a 	bl	8000538 <__aeabi_f2d>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for (int i = begin + 1; i < end; i++) {
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3301      	adds	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e01d      	b.n	8003330 <maxArray+0x68>
		if(array[i] > max) { max = array[i]; }
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f91a 	bl	8000538 <__aeabi_f2d>
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	f7fd fbfa 	bl	8000b00 <__aeabi_dcmpgt>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <maxArray+0x62>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f90b 	bl	8000538 <__aeabi_f2d>
 8003322:	4603      	mov	r3, r0
 8003324:	460c      	mov	r4, r1
 8003326:	e9c7 3406 	strd	r3, r4, [r7, #24]
	return min;
}

float maxArray(float *array, int begin, int end) {
	double max = array[begin];
	for (int i = begin + 1; i < end; i++) {
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	dbdd      	blt.n	80032f4 <maxArray+0x2c>
		if(array[i] > max) { max = array[i]; }
	}
	return max;
 8003338:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333c:	f7fd fc00 	bl	8000b40 <__aeabi_d2f>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	bf00      	nop

0800334c <average>:

float average(float *array, int begin, int end) {
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
	float sum = 0;
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
	int i;
	for(i = begin; i < end; i++) {
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	e00d      	b.n	8003380 <average+0x34>
		sum += array[i];
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7fd fc3b 	bl	8000bec <__addsf3>
 8003376:	4603      	mov	r3, r0
 8003378:	617b      	str	r3, [r7, #20]
}

float average(float *array, int begin, int end) {
	float sum = 0;
	int i;
	for(i = begin; i < end; i++) {
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbed      	blt.n	8003364 <average+0x18>
		sum += array[i];
	}
	return sum / (float) end - begin;
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fd fce3 	bl	8000d54 <__aeabi_i2f>
 800338e:	4603      	mov	r3, r0
 8003390:	4619      	mov	r1, r3
 8003392:	6978      	ldr	r0, [r7, #20]
 8003394:	f7fd fde6 	bl	8000f64 <__aeabi_fdiv>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	68b8      	ldr	r0, [r7, #8]
 800339e:	f7fd fcd9 	bl	8000d54 <__aeabi_i2f>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4619      	mov	r1, r3
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7fd fc1e 	bl	8000be8 <__aeabi_fsub>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop

080033b8 <ewma>:

void ewma(float *array, int size, float *result) {
 80033b8:	b5b0      	push	{r4, r5, r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

	int s = size < 6 ? size : 6;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	bfa8      	it	ge
 80033ca:	2306      	movge	r3, #6
 80033cc:	617b      	str	r3, [r7, #20]
	float forecasted = average(array, 0, s);
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	2100      	movs	r1, #0
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffba 	bl	800334c <average>
 80033d8:	61f8      	str	r0, [r7, #28]
	float smoothed = 0;
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	613b      	str	r3, [r7, #16]

	int i;

	for (i = 1; i <= size; i++) {
 80033e0:	2301      	movs	r3, #1
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e037      	b.n	8003456 <ewma+0x9e>
		smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	3b01      	subs	r3, #1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f89e 	bl	8000538 <__aeabi_f2d>
 80033fc:	a31a      	add	r3, pc, #104	; (adr r3, 8003468 <ewma+0xb0>)
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f7fd f8ed 	bl	80005e0 <__aeabi_dmul>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	4625      	mov	r5, r4
 800340c:	461c      	mov	r4, r3
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f7fd f892 	bl	8000538 <__aeabi_f2d>
 8003414:	a316      	add	r3, pc, #88	; (adr r3, 8003470 <ewma+0xb8>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f8e1 	bl	80005e0 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff29 	bl	800027c <__adddf3>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4618      	mov	r0, r3
 8003430:	4621      	mov	r1, r4
 8003432:	f7fd fb85 	bl	8000b40 <__aeabi_d2f>
 8003436:	4603      	mov	r3, r0
 8003438:	613b      	str	r3, [r7, #16]
		forecasted = smoothed;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	61fb      	str	r3, [r7, #28]
		result[i - 1] = smoothed;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003444:	3b01      	subs	r3, #1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	601a      	str	r2, [r3, #0]
	float forecasted = average(array, 0, s);
	float smoothed = 0;

	int i;

	for (i = 1; i <= size; i++) {
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	3301      	adds	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	ddc3      	ble.n	80033e6 <ewma+0x2e>
		smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
		forecasted = smoothed;
		result[i - 1] = smoothed;
	}

}
 800345e:	bf00      	nop
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	bf00      	nop
 8003468:	33333333 	.word	0x33333333
 800346c:	3fd33333 	.word	0x3fd33333
 8003470:	66666666 	.word	0x66666666
 8003474:	3fe66666 	.word	0x3fe66666

08003478 <dtwDistance1>:

double dtwDistance1(float *ax, float *ay, float *az, int sa, float *bx, float *by, float *bz, int sb, int window) {
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	b093      	sub	sp, #76	; 0x4c
 800347e:	af00      	add	r7, sp, #0
 8003480:	61f8      	str	r0, [r7, #28]
 8003482:	61b9      	str	r1, [r7, #24]
 8003484:	617a      	str	r2, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	466b      	mov	r3, sp
 800348a:	607b      	str	r3, [r7, #4]

	float acc[sb][sa];
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	461a      	mov	r2, r3
 8003490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003492:	4619      	mov	r1, r3
 8003494:	4613      	mov	r3, r2
 8003496:	3b01      	subs	r3, #1
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
 800349a:	4613      	mov	r3, r2
 800349c:	f04f 0400 	mov.w	r4, #0
 80034a0:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 80034a4:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 80034a8:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80034ac:	4613      	mov	r3, r2
 80034ae:	009c      	lsls	r4, r3, #2
 80034b0:	60f9      	str	r1, [r7, #12]
 80034b2:	460b      	mov	r3, r1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
 80034b8:	60ba      	str	r2, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	fb02 fc01 	mul.w	ip, r2, r1
 80034ce:	fb00 fe03 	mul.w	lr, r0, r3
 80034d2:	44e6      	add	lr, ip
 80034d4:	fba0 2302 	umull	r2, r3, r0, r2
 80034d8:	eb0e 0103 	add.w	r1, lr, r3
 80034dc:	460b      	mov	r3, r1
 80034de:	ea4f 1943 	mov.w	r9, r3, lsl #5
 80034e2:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 80034e6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	fb02 fc01 	mul.w	ip, r2, r1
 80034fe:	fb00 fe03 	mul.w	lr, r0, r3
 8003502:	44e6      	add	lr, ip
 8003504:	fba0 2302 	umull	r2, r3, r0, r2
 8003508:	eb0e 0103 	add.w	r1, lr, r3
 800350c:	460b      	mov	r3, r1
 800350e:	015e      	lsls	r6, r3, #5
 8003510:	ea46 66d2 	orr.w	r6, r6, r2, lsr #27
 8003514:	0155      	lsls	r5, r2, #5
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3303      	adds	r3, #3
 8003522:	3307      	adds	r3, #7
 8003524:	08db      	lsrs	r3, r3, #3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	ebad 0d03 	sub.w	sp, sp, r3
 800352c:	466b      	mov	r3, sp
 800352e:	3303      	adds	r3, #3
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7fd fb51 	bl	8000be8 <__aeabi_fsub>
 8003546:	4603      	mov	r3, r0
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc fff5 	bl	8000538 <__aeabi_f2d>
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003556:	f001 fa55 	bl	8004a04 <pow>
 800355a:	4605      	mov	r5, r0
 800355c:	460e      	mov	r6, r1
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f7fd fb3d 	bl	8000be8 <__aeabi_fsub>
 800356e:	4603      	mov	r3, r0
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ffe1 	bl	8000538 <__aeabi_f2d>
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800357e:	f001 fa41 	bl	8004a04 <pow>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4628      	mov	r0, r5
 8003588:	4631      	mov	r1, r6
 800358a:	f7fc fe77 	bl	800027c <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4615      	mov	r5, r2
 8003594:	461e      	mov	r6, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7fd fb21 	bl	8000be8 <__aeabi_fsub>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ffc5 	bl	8000538 <__aeabi_f2d>
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035b6:	f001 fa25 	bl	8004a04 <pow>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4628      	mov	r0, r5
 80035c0:	4631      	mov	r1, r6
 80035c2:	f7fc fe5b 	bl	800027c <__adddf3>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fab7 	bl	8000b40 <__aeabi_d2f>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	601a      	str	r2, [r3, #0]

	// Accumulated distance - Row 0
	for (int i = 1; i < sa; i++) {
 80035d8:	2301      	movs	r3, #1
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
 80035dc:	e06a      	b.n	80036b4 <dtwDistance1+0x23c>
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
 80035de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fd fafa 	bl	8000be8 <__aeabi_fsub>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ff9e 	bl	8000538 <__aeabi_f2d>
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003604:	f001 f9fe 	bl	8004a04 <pow>
 8003608:	4605      	mov	r5, r0
 800360a:	460e      	mov	r6, r1
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fd fae3 	bl	8000be8 <__aeabi_fsub>
 8003622:	4603      	mov	r3, r0
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff87 	bl	8000538 <__aeabi_f2d>
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003632:	f001 f9e7 	bl	8004a04 <pow>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4628      	mov	r0, r5
 800363c:	4631      	mov	r1, r6
 800363e:	f7fc fe1d 	bl	800027c <__adddf3>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4615      	mov	r5, r2
 8003648:	461e      	mov	r6, r3
 800364a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4413      	add	r3, r2
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fd fac4 	bl	8000be8 <__aeabi_fsub>
 8003660:	4603      	mov	r3, r0
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff68 	bl	8000538 <__aeabi_f2d>
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003670:	f001 f9c8 	bl	8004a04 <pow>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4628      	mov	r0, r5
 800367a:	4631      	mov	r1, r6
 800367c:	f7fc fdfe 	bl	800027c <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa5a 	bl	8000b40 <__aeabi_d2f>
 800368c:	4603      	mov	r3, r0
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
		acc[0][i] = acc[0][i - 1] + dist;
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	1e5a      	subs	r2, r3, #1
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd faa5 	bl	8000bec <__addsf3>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4619      	mov	r1, r3
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);

	// Accumulated distance - Row 0
	for (int i = 1; i < sa; i++) {
 80036ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b0:	3301      	adds	r3, #1
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
 80036b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	db90      	blt.n	80035de <dtwDistance1+0x166>
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
		acc[0][i] = acc[0][i - 1] + dist;
	}

	// Accumulated distance - Row 0
	for (int i = 1; i < sb; i++) {
 80036bc:	2301      	movs	r3, #1
 80036be:	643b      	str	r3, [r7, #64]	; 0x40
 80036c0:	e06d      	b.n	800379e <dtwDistance1+0x326>
		dist = pow(ax[0] - bx[i], 2.0) + pow(ay[0] - by[i], 2.0) + pow(az[0] - bz[i], 2.0);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036cc:	4413      	add	r3, r2
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4619      	mov	r1, r3
 80036d2:	f7fd fa89 	bl	8000be8 <__aeabi_fsub>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff2d 	bl	8000538 <__aeabi_f2d>
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e6:	f001 f98d 	bl	8004a04 <pow>
 80036ea:	4605      	mov	r5, r0
 80036ec:	460e      	mov	r6, r1
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036f8:	4413      	add	r3, r2
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd fa73 	bl	8000be8 <__aeabi_fsub>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff17 	bl	8000538 <__aeabi_f2d>
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003712:	f001 f977 	bl	8004a04 <pow>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4628      	mov	r0, r5
 800371c:	4631      	mov	r1, r6
 800371e:	f7fc fdad 	bl	800027c <__adddf3>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4615      	mov	r5, r2
 8003728:	461e      	mov	r6, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003734:	4413      	add	r3, r2
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	f7fd fa55 	bl	8000be8 <__aeabi_fsub>
 800373e:	4603      	mov	r3, r0
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc fef9 	bl	8000538 <__aeabi_f2d>
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800374e:	f001 f959 	bl	8004a04 <pow>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4628      	mov	r0, r5
 8003758:	4631      	mov	r1, r6
 800375a:	f7fc fd8f 	bl	800027c <__adddf3>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd f9eb 	bl	8000b40 <__aeabi_d2f>
 800376a:	4603      	mov	r3, r0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
		acc[i][0] = acc[i - 1][0] + dist;
 800376e:	08a5      	lsrs	r5, r4, #2
 8003770:	08a2      	lsrs	r2, r4, #2
 8003772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003774:	1e59      	subs	r1, r3, #1
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	fb01 f202 	mul.w	r2, r1, r2
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fa32 	bl	8000bec <__addsf3>
 8003788:	4603      	mov	r3, r0
 800378a:	4619      	mov	r1, r3
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003790:	fb02 f205 	mul.w	r2, r2, r5
 8003794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
		acc[0][i] = acc[0][i - 1] + dist;
	}

	// Accumulated distance - Row 0
	for (int i = 1; i < sb; i++) {
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	3301      	adds	r3, #1
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
 800379e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	db8d      	blt.n	80036c2 <dtwDistance1+0x24a>
		acc[i][0] = acc[i - 1][0] + dist;
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
 80037a6:	2301      	movs	r3, #1
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037aa:	e0a3      	b.n	80038f4 <dtwDistance1+0x47c>
		for (int j = 1; j < sa; j++) {
 80037ac:	2301      	movs	r3, #1
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b0:	e098      	b.n	80038e4 <dtwDistance1+0x46c>
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037c2:	4413      	add	r3, r2
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd fa0e 	bl	8000be8 <__aeabi_fsub>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc feb2 	bl	8000538 <__aeabi_f2d>
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037dc:	f001 f912 	bl	8004a04 <pow>
 80037e0:	4605      	mov	r5, r0
 80037e2:	460e      	mov	r6, r1
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037f4:	4413      	add	r3, r2
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7fd f9f5 	bl	8000be8 <__aeabi_fsub>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fe99 	bl	8000538 <__aeabi_f2d>
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800380e:	f001 f8f9 	bl	8004a04 <pow>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4628      	mov	r0, r5
 8003818:	4631      	mov	r1, r6
 800381a:	f7fc fd2f 	bl	800027c <__adddf3>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4615      	mov	r5, r2
 8003824:	461e      	mov	r6, r3
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4413      	add	r3, r2
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003836:	4413      	add	r3, r2
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4619      	mov	r1, r3
 800383c:	f7fd f9d4 	bl	8000be8 <__aeabi_fsub>
 8003840:	4603      	mov	r3, r0
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe78 	bl	8000538 <__aeabi_f2d>
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003850:	f001 f8d8 	bl	8004a04 <pow>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4628      	mov	r0, r5
 800385a:	4631      	mov	r1, r6
 800385c:	f7fc fd0e 	bl	800027c <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f96a 	bl	8000b40 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
			m = min(min(acc[i - 1][j - 1],
 8003870:	08a1      	lsrs	r1, r4, #2
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	1e58      	subs	r0, r3, #1
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	fb00 f101 	mul.w	r1, r0, r1
 8003880:	440a      	add	r2, r1
 8003882:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003886:	08a2      	lsrs	r2, r4, #2
					acc[i - 1][j]),
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	1e59      	subs	r1, r3, #1
	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
			m = min(min(acc[i - 1][j - 1],
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	fb01 f102 	mul.w	r1, r1, r2
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	440a      	add	r2, r1
 8003896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389a:	4619      	mov	r1, r3
 800389c:	f7ff fcd2 	bl	8003244 <min>
 80038a0:	4605      	mov	r5, r0
 80038a2:	08a1      	lsrs	r1, r4, #2
					acc[i - 1][j]),
					acc[i][j - 1]);
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	1e5a      	subs	r2, r3, #1
	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
			dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
			m = min(min(acc[i - 1][j - 1],
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038ac:	fb00 f101 	mul.w	r1, r0, r1
 80038b0:	440a      	add	r2, r1
 80038b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4628      	mov	r0, r5
 80038ba:	f7ff fcc3 	bl	8003244 <min>
 80038be:	6278      	str	r0, [r7, #36]	; 0x24
					acc[i - 1][j]),
					acc[i][j - 1]);
			acc[i][j] = m + dist;
 80038c0:	08a5      	lsrs	r5, r4, #2
 80038c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c6:	f7fd f991 	bl	8000bec <__addsf3>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4618      	mov	r0, r3
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	fb02 f105 	mul.w	r1, r2, r5
 80038d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d8:	440a      	add	r2, r1
 80038da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
		for (int j = 1; j < sa; j++) {
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	3301      	adds	r3, #1
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	f6ff af62 	blt.w	80037b2 <dtwDistance1+0x33a>
		acc[i][0] = acc[i - 1][0] + dist;
	}

	// Accumlated distance - Remaining
	float m;
	for (int i = 1; i < sb; i++) {
 80038ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f0:	3301      	adds	r3, #1
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f6ff af57 	blt.w	80037ac <dtwDistance1+0x334>
					acc[i][j - 1]);
			acc[i][j] = m + dist;
		}
	}

	return sqrt(acc[sb - 1][sa - 1]);
 80038fe:	08a1      	lsrs	r1, r4, #2
 8003900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	fb00 f101 	mul.w	r1, r0, r1
 800390e:	440a      	add	r2, r1
 8003910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe0f 	bl	8000538 <__aeabi_f2d>
 800391a:	4603      	mov	r3, r0
 800391c:	460c      	mov	r4, r1
 800391e:	4618      	mov	r0, r3
 8003920:	4621      	mov	r1, r4
 8003922:	f001 f9d5 	bl	8004cd0 <sqrt>
 8003926:	4603      	mov	r3, r0
 8003928:	460c      	mov	r4, r1
 800392a:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 800392e:	4618      	mov	r0, r3
 8003930:	4621      	mov	r1, r4
 8003932:	374c      	adds	r7, #76	; 0x4c
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop

0800393c <LBKeogh>:

	return sqrt(acc[sa - 1][sb - 1]);

}

float LBKeogh(float *x, int sx, float *y, int sy, int r) {
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b08f      	sub	sp, #60	; 0x3c
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]

	double sum = 0;
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	f04f 0400 	mov.w	r4, #0
 8003952:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int li, mi;
	double lowerBound, upperBound;

	for (int i = 0; i < sx; i++) {
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	e08d      	b.n	8003a78 <LBKeogh+0x13c>

		li = (i - r) >= 0 ? (i - r) : 0;
 800395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
		mi = (i + r) <= sy ? (i + r) : sy;
 8003968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	441a      	add	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4293      	cmp	r3, r2
 8003972:	bfa8      	it	ge
 8003974:	4613      	movge	r3, r2
 8003976:	627b      	str	r3, [r7, #36]	; 0x24

		lowerBound = minArray(y, li, mi);
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fc75 	bl	800326c <minArray>
 8003982:	4603      	mov	r3, r0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fdd7 	bl	8000538 <__aeabi_f2d>
 800398a:	4603      	mov	r3, r0
 800398c:	460c      	mov	r4, r1
 800398e:	e9c7 3406 	strd	r3, r4, [r7, #24]
		upperBound = maxArray(y, li, mi);
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fc96 	bl	80032c8 <maxArray>
 800399c:	4603      	mov	r3, r0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fdca 	bl	8000538 <__aeabi_f2d>
 80039a4:	4603      	mov	r3, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	e9c7 3404 	strd	r3, r4, [r7, #16]

		if(x[i] > upperBound) {
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fdbe 	bl	8000538 <__aeabi_f2d>
 80039bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039c0:	f7fd f89e 	bl	8000b00 <__aeabi_dcmpgt>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d022      	beq.n	8003a10 <LBKeogh+0xd4>
			sum += pow(x[i] - upperBound, 2);
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fdaf 	bl	8000538 <__aeabi_f2d>
 80039da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039de:	f7fc fc4b 	bl	8000278 <__aeabi_dsub>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	4618      	mov	r0, r3
 80039e8:	4621      	mov	r1, r4
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039f2:	f001 f807 	bl	8004a04 <pow>
 80039f6:	4603      	mov	r3, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	461a      	mov	r2, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003a02:	f7fc fc3b 	bl	800027c <__adddf3>
 8003a06:	4603      	mov	r3, r0
 8003a08:	460c      	mov	r4, r1
 8003a0a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8003a0e:	e030      	b.n	8003a72 <LBKeogh+0x136>
		} else if(x[i] < lowerBound) {
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fd8c 	bl	8000538 <__aeabi_f2d>
 8003a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a24:	f7fd f84e 	bl	8000ac4 <__aeabi_dcmplt>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <LBKeogh+0x136>
			sum += pow(x[i] - lowerBound, 2);
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd7d 	bl	8000538 <__aeabi_f2d>
 8003a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a42:	f7fc fc19 	bl	8000278 <__aeabi_dsub>
 8003a46:	4603      	mov	r3, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a56:	f000 ffd5 	bl	8004a04 <pow>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4623      	mov	r3, r4
 8003a62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003a66:	f7fc fc09 	bl	800027c <__adddf3>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	double sum = 0;
	int li, mi;
	double lowerBound, upperBound;

	for (int i = 0; i < sx; i++) {
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	3301      	adds	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f6ff af6d 	blt.w	800395c <LBKeogh+0x20>
			sum += pow(x[i] - lowerBound, 2);
		}

	}

	return sqrt(sum);
 8003a82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003a86:	f001 f923 	bl	8004cd0 <sqrt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4621      	mov	r1, r4
 8003a92:	f7fd f855 	bl	8000b40 <__aeabi_d2f>
 8003a96:	4603      	mov	r3, r0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	373c      	adds	r7, #60	; 0x3c
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd90      	pop	{r4, r7, pc}

08003aa0 <LBKeogh3D>:

float LBKeogh3D(float *ax, float *ay, float *az, int sa, float *bx, float *by, float *bz, int sb, int r) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
	float lx = LBKeogh(ax, sa, bx, sb, r);
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff ff3f 	bl	800393c <LBKeogh>
 8003abe:	61f8      	str	r0, [r7, #28]
	float ly = LBKeogh(ay, sa, by, sb, r);
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	f7ff ff36 	bl	800393c <LBKeogh>
 8003ad0:	61b8      	str	r0, [r7, #24]
	float lz = LBKeogh(az, sa, bz, sb, r);
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff2d 	bl	800393c <LBKeogh>
 8003ae2:	6178      	str	r0, [r7, #20]
	return lx + ly + lz;
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	69f8      	ldr	r0, [r7, #28]
 8003ae8:	f7fd f880 	bl	8000bec <__addsf3>
 8003aec:	4603      	mov	r3, r0
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd f87b 	bl	8000bec <__addsf3>
 8003af6:	4603      	mov	r3, r0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <knn>:

int knn(float inputX[], float inputY[], float inputZ[], int size, float *dist) {
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b0a1      	sub	sp, #132	; 0x84
 8003b04:	af06      	add	r7, sp, #24
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]

	int answer;
	float distance = INFINITY;
 8003b0e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003b12:	65bb      	str	r3, [r7, #88]	; 0x58
	float minDistance = INFINITY;
 8003b14:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8003b18:	663b      	str	r3, [r7, #96]	; 0x60
	int lbr = 30;
 8003b1a:	231e      	movs	r3, #30
 8003b1c:	657b      	str	r3, [r7, #84]	; 0x54

	float* pointersX[NUMBER_OF_GESTURES] = {doorOpenX, doorCloseX, lightUpX, lightDownX};
 8003b1e:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <knn+0x17c>)
 8003b20:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float* pointersY[NUMBER_OF_GESTURES] = {doorOpenY, doorCloseY, lightUpY, lightDownY};
 8003b2a:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <knn+0x180>)
 8003b2c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float* pointersZ[NUMBER_OF_GESTURES] = {doorOpenZ, doorCloseZ, lightUpZ, lightDownZ};
 8003b36:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <knn+0x184>)
 8003b38:	f107 0420 	add.w	r4, r7, #32
 8003b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int sizes[NUMBER_OF_GESTURES] = {35, 35, 36, 39};
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <knn+0x188>)
 8003b44:	f107 0410 	add.w	r4, r7, #16
 8003b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int window = 4; // Does not matter for DTW1
 8003b4e:	2304      	movs	r3, #4
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50

	for(int i = 0; i < NUMBER_OF_GESTURES; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b56:	e06d      	b.n	8003c34 <knn+0x134>
		if(LBKeogh3D(inputX, inputY, inputZ, size, pointersX[i], pointersY[i], pointersZ[i], sizes[i], lbr) < minDistance) {
 8003b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b60:	4413      	add	r3, r2
 8003b62:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003b6e:	440b      	add	r3, r1
 8003b70:	f853 1c38 	ldr.w	r1, [r3, #-56]
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003b7c:	4403      	add	r3, r0
 8003b7e:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003b8a:	4423      	add	r3, r4
 8003b8c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003b90:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003b92:	9404      	str	r4, [sp, #16]
 8003b94:	9303      	str	r3, [sp, #12]
 8003b96:	9002      	str	r0, [sp, #8]
 8003b98:	9101      	str	r1, [sp, #4]
 8003b9a:	9200      	str	r2, [sp, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ff7c 	bl	8003aa0 <LBKeogh3D>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd fac3 	bl	8001138 <__aeabi_fcmplt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03a      	beq.n	8003c2e <knn+0x12e>
			distance = dtwDistance1(inputX, inputY, inputZ, size, pointersX[i], pointersY[i], pointersZ[i], sizes[i], window);
 8003bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003bce:	440b      	add	r3, r1
 8003bd0:	f853 1c38 	ldr.w	r1, [r3, #-56]
 8003bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003bdc:	4403      	add	r3, r0
 8003bde:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8003be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003bea:	4423      	add	r3, r4
 8003bec:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003bf0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003bf2:	9404      	str	r4, [sp, #16]
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	9002      	str	r0, [sp, #8]
 8003bf8:	9101      	str	r1, [sp, #4]
 8003bfa:	9200      	str	r2, [sp, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff fc38 	bl	8003478 <dtwDistance1>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	4621      	mov	r1, r4
 8003c10:	f7fc ff96 	bl	8000b40 <__aeabi_d2f>
 8003c14:	4603      	mov	r3, r0
 8003c16:	65bb      	str	r3, [r7, #88]	; 0x58
			if(distance < minDistance) {
 8003c18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c1a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003c1c:	f7fd fa8c 	bl	8001138 <__aeabi_fcmplt>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <knn+0x12e>
				minDistance = distance;
 8003c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
				answer = i;
 8003c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c2c:	667b      	str	r3, [r7, #100]	; 0x64
	float* pointersZ[NUMBER_OF_GESTURES] = {doorOpenZ, doorCloseZ, lightUpZ, lightDownZ};

	int sizes[NUMBER_OF_GESTURES] = {35, 35, 36, 39};
	int window = 4; // Does not matter for DTW1

	for(int i = 0; i < NUMBER_OF_GESTURES; i++) {
 8003c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c30:	3301      	adds	r3, #1
 8003c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	dd8e      	ble.n	8003b58 <knn+0x58>
				answer = i;
			}
		}
	}

	*dist = minDistance;
 8003c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c3e:	601a      	str	r2, [r3, #0]

	// Checking for NaN
	if(minDistance != minDistance) {
 8003c40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c42:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003c44:	f7fd fa6e 	bl	8001124 <__aeabi_fcmpeq>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <knn+0x158>
		return minDistance;
 8003c4e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003c50:	f7fd fa9a 	bl	8001188 <__aeabi_f2iz>
 8003c54:	4603      	mov	r3, r0
 8003c56:	e00d      	b.n	8003c74 <knn+0x174>
	}

	// Negative if the distance is infinity
	return answer * (minDistance == INFINITY ? -1 : 1);
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <knn+0x18c>)
 8003c5a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003c5c:	f7fd fa8a 	bl	8001174 <__aeabi_fcmpgt>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <knn+0x16c>
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	e000      	b.n	8003c6e <knn+0x16e>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c70:	fb02 f303 	mul.w	r3, r2, r3

}
 8003c74:	4618      	mov	r0, r3
 8003c76:	376c      	adds	r7, #108	; 0x6c
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	08005b08 	.word	0x08005b08
 8003c80:	08005b18 	.word	0x08005b18
 8003c84:	08005b28 	.word	0x08005b28
 8003c88:	08005b38 	.word	0x08005b38
 8003c8c:	7f7fffff 	.word	0x7f7fffff

08003c90 <newLinkedList>:
 *      Author: Alan
 */

#include "LinkedList.h"

LinkedList * newLinkedList() {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
    LinkedList *list = (LinkedList *) malloc(sizeof(LinkedList));
 8003c96:	2008      	movs	r0, #8
 8003c98:	f000 fa82 	bl	80041a0 <malloc>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	607b      	str	r3, [r7, #4]
    list->value = 0.0;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    list->next = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	605a      	str	r2, [r3, #4]
    return list;
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <prependToLinkedList>:
        head = head->next;
    }
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]

    if(!head) { return; }
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <prependToLinkedList+0x2c>

    LinkedList *new = newLinkedList();
 8003cc8:	f7ff ffe2 	bl	8003c90 <newLinkedList>
 8003ccc:	60f8      	str	r0, [r7, #12]
    new->value = value;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	601a      	str	r2, [r3, #0]
    new->next = head->next;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
    head->next = new;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	e000      	b.n	8003ce6 <prependToLinkedList+0x2e>
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {

    if(!head) { return; }
 8003ce4:	bf00      	nop
    LinkedList *new = newLinkedList();
    new->value = value;
    new->next = head->next;
    head->next = new;

}
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <arrayFromLinkedList>:
    new->value = value;
    head->next = new;

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]

    if(!head) { return; }
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <arrayFromLinkedList+0x3e>

    while (head->next && size > 0) {
 8003cfe:	e00c      	b.n	8003d1a <arrayFromLinkedList+0x2e>
        head = head->next;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
        destination[--size] = head->value;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	601a      	str	r2, [r3, #0]

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }

    while (head->next && size > 0) {
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <arrayFromLinkedList+0x40>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dceb      	bgt.n	8003d00 <arrayFromLinkedList+0x14>
 8003d28:	e000      	b.n	8003d2c <arrayFromLinkedList+0x40>

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }
 8003d2a:	bf00      	nop
    while (head->next && size > 0) {
        head = head->next;
        destination[--size] = head->value;
    }

}
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <freeLinkedList>:

void freeLinkedList(LinkedList *head) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

    if(!head) { return; }
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <freeLinkedList+0x38>

    LinkedList *current;
    current = head;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
    head = head->next;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	607b      	str	r3, [r7, #4]
    current->next = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]

    while (head) {
 8003d52:	e007      	b.n	8003d64 <freeLinkedList+0x30>
        current = head;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
        head = head->next;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	607b      	str	r3, [r7, #4]
        free(current);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa26 	bl	80041b0 <free>
    LinkedList *current;
    current = head;
    head = head->next;
    current->next = NULL;

    while (head) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f4      	bne.n	8003d54 <freeLinkedList+0x20>
 8003d6a:	e000      	b.n	8003d6e <freeLinkedList+0x3a>

}

void freeLinkedList(LinkedList *head) {

    if(!head) { return; }
 8003d6c:	bf00      	nop
        current = head;
        head = head->next;
        free(current);
    }

}
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <Delayms+0x50>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d82:	f3ef 8305 	mrs	r3, IPSR
 8003d86:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d88:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d111      	bne.n	8003db2 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8003d8e:	bf00      	nop
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <Delayms+0x50>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d3f8      	bcc.n	8003d90 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8003d9e:	e00b      	b.n	8003db8 <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <Delayms+0x54>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <Delayms+0x3e>
				millis--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f3      	bne.n	8003da0 <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000778 	.word	0x20000778
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <setup>:
#include "LinkedList.h"
#include "serial.h"
#include "time.h"


void setup() {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	SystemInit();
 8003dd0:	f7ff f990 	bl	80030f4 <SystemInit>
	TM_DELAY_Init();
 8003dd4:	f7fe f968 	bl	80020a8 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 8003dd8:	f7fe f98e 	bl	80020f8 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8003ddc:	2103      	movs	r1, #3
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fe fb38 	bl	8002454 <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8003de4:	f7fe f9a0 	bl	8002128 <TM_DISCO_ButtonInit>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}

08003dec <main>:
		ms[l] = TM_DELAY_Time();
	}
	ms[0] += 0; // Just to avoid the unused warning
}

int main(void) {
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	f6ad 1dac 	subw	sp, sp, #2476	; 0x9ac
 8003df2:	af02      	add	r7, sp, #8

	setup();
 8003df4:	f7ff ffea 	bl	8003dcc <setup>

	init_USART1(9600);
 8003df8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003dfc:	f7fd ffdc 	bl	8001db8 <init_USART1>

//	testTimeOfDTW();

	int count = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c

	// Raw signals
	LinkedList *signalX = newLinkedList();
 8003e06:	f7ff ff43 	bl	8003c90 <newLinkedList>
 8003e0a:	f8c7 098c 	str.w	r0, [r7, #2444]	; 0x98c
	LinkedList *signalY = newLinkedList();
 8003e0e:	f7ff ff3f 	bl	8003c90 <newLinkedList>
 8003e12:	f8c7 0988 	str.w	r0, [r7, #2440]	; 0x988
	LinkedList *signalZ = newLinkedList();
 8003e16:	f7ff ff3b 	bl	8003c90 <newLinkedList>
 8003e1a:	f8c7 0984 	str.w	r0, [r7, #2436]	; 0x984

	TM_LIS302DL_LIS3DSH_t Axes_Data;

	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());
 8003e1e:	bf00      	nop
 8003e20:	4bba      	ldr	r3, [pc, #744]	; (800410c <main+0x320>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f9      	beq.n	8003e20 <main+0x34>

	TM_DISCO_LedOn(LED_RED | LED_GREEN | LED_ORANGE | LED_BLUE);
 8003e2c:	4bb8      	ldr	r3, [pc, #736]	; (8004110 <main+0x324>)
 8003e2e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003e32:	831a      	strh	r2, [r3, #24]

	while(TM_DISCO_ButtonPressed()) {
 8003e34:	e03c      	b.n	8003eb0 <main+0xc4>

		// Adding accelerometer values
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8003e36:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fb3a 	bl	80024b4 <TM_LIS302DL_LIS3DSH_ReadAxes>
		prependToLinkedList(signalX, (float) Axes_Data.X / ACCELEROMETER_DATA_DIVIDER);
 8003e40:	f9b7 3970 	ldrsh.w	r3, [r7, #2416]	; 0x970
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc ff85 	bl	8000d54 <__aeabi_i2f>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	49b1      	ldr	r1, [pc, #708]	; (8004114 <main+0x328>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd f888 	bl	8000f64 <__aeabi_fdiv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4619      	mov	r1, r3
 8003e58:	f8d7 098c 	ldr.w	r0, [r7, #2444]	; 0x98c
 8003e5c:	f7ff ff2c 	bl	8003cb8 <prependToLinkedList>
		prependToLinkedList(signalY, (float) Axes_Data.Y / ACCELEROMETER_DATA_DIVIDER);
 8003e60:	f9b7 3972 	ldrsh.w	r3, [r7, #2418]	; 0x972
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc ff75 	bl	8000d54 <__aeabi_i2f>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	49a9      	ldr	r1, [pc, #676]	; (8004114 <main+0x328>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fd f878 	bl	8000f64 <__aeabi_fdiv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4619      	mov	r1, r3
 8003e78:	f8d7 0988 	ldr.w	r0, [r7, #2440]	; 0x988
 8003e7c:	f7ff ff1c 	bl	8003cb8 <prependToLinkedList>
		prependToLinkedList(signalZ, (float) Axes_Data.Z / ACCELEROMETER_DATA_DIVIDER);
 8003e80:	f9b7 3974 	ldrsh.w	r3, [r7, #2420]	; 0x974
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc ff65 	bl	8000d54 <__aeabi_i2f>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	49a1      	ldr	r1, [pc, #644]	; (8004114 <main+0x328>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd f868 	bl	8000f64 <__aeabi_fdiv>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4619      	mov	r1, r3
 8003e98:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 8003e9c:	f7ff ff0c 	bl	8003cb8 <prependToLinkedList>
		count++;
 8003ea0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c

		Delayms(SAMPLEPERIOD);
 8003eaa:	2014      	movs	r0, #20
 8003eac:	f7ff ff62 	bl	8003d74 <Delayms>
	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());

	TM_DISCO_LedOn(LED_RED | LED_GREEN | LED_ORANGE | LED_BLUE);

	while(TM_DISCO_ButtonPressed()) {
 8003eb0:	4b96      	ldr	r3, [pc, #600]	; (800410c <main+0x320>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1bc      	bne.n	8003e36 <main+0x4a>

		Delayms(SAMPLEPERIOD);

	}

	TM_DISCO_LedOff(LED_RED | LED_GREEN | LED_ORANGE | LED_BLUE);
 8003ebc:	4b94      	ldr	r3, [pc, #592]	; (8004110 <main+0x324>)
 8003ebe:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003ec2:	835a      	strh	r2, [r3, #26]

	// Allocating the temporary arrays to store the raw signal
	float *tempX = (float *) malloc(count * sizeof(float));
 8003ec4:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f968 	bl	80041a0 <malloc>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
	float *tempY = (float *) malloc(count * sizeof(float));
 8003ed6:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f95f 	bl	80041a0 <malloc>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
	float *tempZ = (float *) malloc(count * sizeof(float));
 8003ee8:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f956 	bl	80041a0 <malloc>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978

	// Filling up the temporary raw signal arrays
	arrayFromLinkedList(signalX, tempX, count);
 8003efa:	f8d7 299c 	ldr.w	r2, [r7, #2460]	; 0x99c
 8003efe:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 8003f02:	f8d7 098c 	ldr.w	r0, [r7, #2444]	; 0x98c
 8003f06:	f7ff fef1 	bl	8003cec <arrayFromLinkedList>
	arrayFromLinkedList(signalY, tempY, count);
 8003f0a:	f8d7 299c 	ldr.w	r2, [r7, #2460]	; 0x99c
 8003f0e:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 8003f12:	f8d7 0988 	ldr.w	r0, [r7, #2440]	; 0x988
 8003f16:	f7ff fee9 	bl	8003cec <arrayFromLinkedList>
	arrayFromLinkedList(signalZ, tempZ, count);
 8003f1a:	f8d7 299c 	ldr.w	r2, [r7, #2460]	; 0x99c
 8003f1e:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 8003f22:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 8003f26:	f7ff fee1 	bl	8003cec <arrayFromLinkedList>

	// Freeing the memory for the linked lists
	freeLinkedList(signalX);
 8003f2a:	f8d7 098c 	ldr.w	r0, [r7, #2444]	; 0x98c
 8003f2e:	f7ff ff01 	bl	8003d34 <freeLinkedList>
	freeLinkedList(signalY);
 8003f32:	f8d7 0988 	ldr.w	r0, [r7, #2440]	; 0x988
 8003f36:	f7ff fefd 	bl	8003d34 <freeLinkedList>
	freeLinkedList(signalZ);
 8003f3a:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 8003f3e:	f7ff fef9 	bl	8003d34 <freeLinkedList>
//	float *smoothY = (float *) malloc(count * sizeof(float));
//	float *smoothZ = (float *) malloc(count * sizeof(float));
	float smoothX[200];
	float smoothY[200];
	float smoothZ[200];
	int i = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
	for(i = 0; i < 200; i++) {
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
 8003f4e:	e019      	b.n	8003f84 <main+0x198>
		smoothX[i] = 666.666;
 8003f50:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8003f54:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8003f58:	496f      	ldr	r1, [pc, #444]	; (8004118 <main+0x32c>)
 8003f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		smoothY[i] = 666.666;
 8003f5e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8003f62:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8003f66:	496c      	ldr	r1, [pc, #432]	; (8004118 <main+0x32c>)
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		smoothZ[i] = 666.666;
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8003f74:	4968      	ldr	r1, [pc, #416]	; (8004118 <main+0x32c>)
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//	float *smoothZ = (float *) malloc(count * sizeof(float));
	float smoothX[200];
	float smoothY[200];
	float smoothZ[200];
	int i = 0;
	for(i = 0; i < 200; i++) {
 8003f7a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
 8003f84:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8003f88:	2bc7      	cmp	r3, #199	; 0xc7
 8003f8a:	dde1      	ble.n	8003f50 <main+0x164>
		smoothY[i] = 666.666;
		smoothZ[i] = 666.666;
	}

	// Calculating the smoothed values
	ewma(tempX, count, smoothX);
 8003f8c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8003f90:	461a      	mov	r2, r3
 8003f92:	f8d7 199c 	ldr.w	r1, [r7, #2460]	; 0x99c
 8003f96:	f8d7 0980 	ldr.w	r0, [r7, #2432]	; 0x980
 8003f9a:	f7ff fa0d 	bl	80033b8 <ewma>
	ewma(tempY, count, smoothY);
 8003f9e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f8d7 199c 	ldr.w	r1, [r7, #2460]	; 0x99c
 8003fa8:	f8d7 097c 	ldr.w	r0, [r7, #2428]	; 0x97c
 8003fac:	f7ff fa04 	bl	80033b8 <ewma>
	ewma(tempZ, count, smoothZ);
 8003fb0:	f107 0310 	add.w	r3, r7, #16
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f8d7 199c 	ldr.w	r1, [r7, #2460]	; 0x99c
 8003fba:	f8d7 0978 	ldr.w	r0, [r7, #2424]	; 0x978
 8003fbe:	f7ff f9fb 	bl	80033b8 <ewma>

	float dist;
	double klass = knn(smoothX, smoothY, smoothZ, count, &dist);
 8003fc2:	f107 0210 	add.w	r2, r7, #16
 8003fc6:	f507 714c 	add.w	r1, r7, #816	; 0x330
 8003fca:	f507 60ca 	add.w	r0, r7, #1616	; 0x650
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8003fd8:	f7ff fd92 	bl	8003b00 <knn>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fa98 	bl	8000514 <__aeabi_i2d>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 8003fec:	e882 0018 	stmia.w	r2, {r3, r4}

	if(klass != klass || dist > 22) { //NaN
 8003ff0:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8003ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004000:	f7fc fd56 	bl	8000ab0 <__aeabi_dcmpeq>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <main+0x232>
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4942      	ldr	r1, [pc, #264]	; (800411c <main+0x330>)
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd f8ae 	bl	8001174 <__aeabi_fcmpgt>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <main+0x23c>
		TM_DISCO_LedOff(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);
 800401e:	4b3c      	ldr	r3, [pc, #240]	; (8004110 <main+0x324>)
 8004020:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8004024:	835a      	strh	r2, [r3, #26]
		while(1);
 8004026:	e7fe      	b.n	8004026 <main+0x23a>
	} else {
		if(klass < 0) {
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8004034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004038:	f7fc fd44 	bl	8000ac4 <__aeabi_dcmplt>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <main+0x272>
			TM_DISCO_LedOn(LED_GREEN | LED_RED | LED_ORANGE | LED_BLUE);
 8004042:	4b33      	ldr	r3, [pc, #204]	; (8004110 <main+0x324>)
 8004044:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8004048:	831a      	strh	r2, [r3, #24]
			klass *= -1;
 800404a:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 800404e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
 8004052:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8004056:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
		}
		if(klass == 0) { // Door Open
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 800406a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406e:	f7fc fd1f 	bl	8000ab0 <__aeabi_dcmpeq>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <main+0x296>
			TM_DISCO_LedOn(LED_RED);
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <main+0x324>)
 800407a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800407e:	831a      	strh	r2, [r3, #24]
 8004080:	e032      	b.n	80040e8 <main+0x2fc>
//			USART_puts(USART1, "0");
		} else if(klass == 1) { // Door Close
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <main+0x334>)
 8004088:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 800408c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004090:	f7fc fd0e 	bl	8000ab0 <__aeabi_dcmpeq>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d004      	beq.n	80040a4 <main+0x2b8>
			TM_DISCO_LedOn(LED_GREEN);
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <main+0x324>)
 800409c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040a0:	831a      	strh	r2, [r3, #24]
 80040a2:	e021      	b.n	80040e8 <main+0x2fc>
//			USART_puts(USART1, "1");
		} else if(klass == 2) { // Light Up
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040ac:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 80040b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040b4:	f7fc fcfc 	bl	8000ab0 <__aeabi_dcmpeq>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <main+0x2dc>
			TM_DISCO_LedOn(LED_ORANGE);
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <main+0x324>)
 80040c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040c4:	831a      	strh	r2, [r3, #24]
 80040c6:	e00f      	b.n	80040e8 <main+0x2fc>
//			USART_puts(USART1, "2");
		} else if(klass == 3) { // Light Down
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <main+0x338>)
 80040ce:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 80040d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d6:	f7fc fceb 	bl	8000ab0 <__aeabi_dcmpeq>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <main+0x2fc>
			TM_DISCO_LedOn(LED_BLUE);
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <main+0x324>)
 80040e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040e6:	831a      	strh	r2, [r3, #24]
//			USART_puts(USART1, "3");
		}

		char str[10];
		sprintf(str, "%i", (int) dist);
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd f84a 	bl	8001188 <__aeabi_f2iz>
 80040f4:	4602      	mov	r2, r0
 80040f6:	463b      	mov	r3, r7
 80040f8:	490b      	ldr	r1, [pc, #44]	; (8004128 <main+0x33c>)
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f91c 	bl	8004338 <siprintf>
		USART_puts(USART1, str);
 8004100:	463b      	mov	r3, r7
 8004102:	4619      	mov	r1, r3
 8004104:	4809      	ldr	r0, [pc, #36]	; (800412c <main+0x340>)
 8004106:	f7fd feb3 	bl	8001e70 <USART_puts>

	}

	while(1);
 800410a:	e7fe      	b.n	800410a <main+0x31e>
 800410c:	40020000 	.word	0x40020000
 8004110:	40020c00 	.word	0x40020c00
 8004114:	42c80000 	.word	0x42c80000
 8004118:	4426aaa0 	.word	0x4426aaa0
 800411c:	41b00000 	.word	0x41b00000
 8004120:	3ff00000 	.word	0x3ff00000
 8004124:	40080000 	.word	0x40080000
 8004128:	08005b48 	.word	0x08005b48
 800412c:	40011000 	.word	0x40011000

08004130 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 800413a:	bf00      	nop
}
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8004148:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <__libc_init_array+0x3c>)
 8004158:	4c0e      	ldr	r4, [pc, #56]	; (8004194 <__libc_init_array+0x40>)
 800415a:	1ae4      	subs	r4, r4, r3
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2500      	movs	r5, #0
 8004160:	461e      	mov	r6, r3
 8004162:	42a5      	cmp	r5, r4
 8004164:	d004      	beq.n	8004170 <__libc_init_array+0x1c>
 8004166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800416a:	4798      	blx	r3
 800416c:	3501      	adds	r5, #1
 800416e:	e7f8      	b.n	8004162 <__libc_init_array+0xe>
 8004170:	f001 fcbe 	bl	8005af0 <_init>
 8004174:	4c08      	ldr	r4, [pc, #32]	; (8004198 <__libc_init_array+0x44>)
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <__libc_init_array+0x48>)
 8004178:	1ae4      	subs	r4, r4, r3
 800417a:	10a4      	asrs	r4, r4, #2
 800417c:	2500      	movs	r5, #0
 800417e:	461e      	mov	r6, r3
 8004180:	42a5      	cmp	r5, r4
 8004182:	d004      	beq.n	800418e <__libc_init_array+0x3a>
 8004184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004188:	4798      	blx	r3
 800418a:	3501      	adds	r5, #1
 800418c:	e7f8      	b.n	8004180 <__libc_init_array+0x2c>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	08005c30 	.word	0x08005c30
 8004194:	08005c30 	.word	0x08005c30
 8004198:	08005c34 	.word	0x08005c34
 800419c:	08005c30 	.word	0x08005c30

080041a0 <malloc>:
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <malloc+0xc>)
 80041a2:	4601      	mov	r1, r0
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f000 b859 	b.w	800425c <_malloc_r>
 80041aa:	bf00      	nop
 80041ac:	20000750 	.word	0x20000750

080041b0 <free>:
 80041b0:	4b02      	ldr	r3, [pc, #8]	; (80041bc <free+0xc>)
 80041b2:	4601      	mov	r1, r0
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f000 b803 	b.w	80041c0 <_free_r>
 80041ba:	bf00      	nop
 80041bc:	20000750 	.word	0x20000750

080041c0 <_free_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4605      	mov	r5, r0
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d046      	beq.n	8004256 <_free_r+0x96>
 80041c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041cc:	1f0c      	subs	r4, r1, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfb8      	it	lt
 80041d2:	18e4      	addlt	r4, r4, r3
 80041d4:	f000 f8d4 	bl	8004380 <__malloc_lock>
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <_free_r+0x98>)
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	4611      	mov	r1, r2
 80041de:	b913      	cbnz	r3, 80041e6 <_free_r+0x26>
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	6014      	str	r4, [r2, #0]
 80041e4:	e032      	b.n	800424c <_free_r+0x8c>
 80041e6:	42a3      	cmp	r3, r4
 80041e8:	d90e      	bls.n	8004208 <_free_r+0x48>
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	18a0      	adds	r0, r4, r2
 80041ee:	4283      	cmp	r3, r0
 80041f0:	bf04      	itt	eq
 80041f2:	6818      	ldreq	r0, [r3, #0]
 80041f4:	685b      	ldreq	r3, [r3, #4]
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	bf04      	itt	eq
 80041fa:	1812      	addeq	r2, r2, r0
 80041fc:	6022      	streq	r2, [r4, #0]
 80041fe:	600c      	str	r4, [r1, #0]
 8004200:	e024      	b.n	800424c <_free_r+0x8c>
 8004202:	42a2      	cmp	r2, r4
 8004204:	d803      	bhi.n	800420e <_free_r+0x4e>
 8004206:	4613      	mov	r3, r2
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	2a00      	cmp	r2, #0
 800420c:	d1f9      	bne.n	8004202 <_free_r+0x42>
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	1819      	adds	r1, r3, r0
 8004212:	42a1      	cmp	r1, r4
 8004214:	d10b      	bne.n	800422e <_free_r+0x6e>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	4401      	add	r1, r0
 800421a:	1858      	adds	r0, r3, r1
 800421c:	4282      	cmp	r2, r0
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	d114      	bne.n	800424c <_free_r+0x8c>
 8004222:	6810      	ldr	r0, [r2, #0]
 8004224:	6852      	ldr	r2, [r2, #4]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	4401      	add	r1, r0
 800422a:	6019      	str	r1, [r3, #0]
 800422c:	e00e      	b.n	800424c <_free_r+0x8c>
 800422e:	d902      	bls.n	8004236 <_free_r+0x76>
 8004230:	230c      	movs	r3, #12
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	e00a      	b.n	800424c <_free_r+0x8c>
 8004236:	6821      	ldr	r1, [r4, #0]
 8004238:	1860      	adds	r0, r4, r1
 800423a:	4282      	cmp	r2, r0
 800423c:	bf04      	itt	eq
 800423e:	6810      	ldreq	r0, [r2, #0]
 8004240:	6852      	ldreq	r2, [r2, #4]
 8004242:	6062      	str	r2, [r4, #4]
 8004244:	bf04      	itt	eq
 8004246:	1809      	addeq	r1, r1, r0
 8004248:	6021      	streq	r1, [r4, #0]
 800424a:	605c      	str	r4, [r3, #4]
 800424c:	4628      	mov	r0, r5
 800424e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004252:	f000 b896 	b.w	8004382 <__malloc_unlock>
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	200007bc 	.word	0x200007bc

0800425c <_malloc_r>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	1ccd      	adds	r5, r1, #3
 8004260:	f025 0503 	bic.w	r5, r5, #3
 8004264:	3508      	adds	r5, #8
 8004266:	2d0c      	cmp	r5, #12
 8004268:	bf38      	it	cc
 800426a:	250c      	movcc	r5, #12
 800426c:	2d00      	cmp	r5, #0
 800426e:	4606      	mov	r6, r0
 8004270:	db01      	blt.n	8004276 <_malloc_r+0x1a>
 8004272:	42a9      	cmp	r1, r5
 8004274:	d902      	bls.n	800427c <_malloc_r+0x20>
 8004276:	230c      	movs	r3, #12
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	e046      	b.n	800430a <_malloc_r+0xae>
 800427c:	f000 f880 	bl	8004380 <__malloc_lock>
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <_malloc_r+0xb4>)
 8004282:	681c      	ldr	r4, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	4621      	mov	r1, r4
 8004288:	b1a1      	cbz	r1, 80042b4 <_malloc_r+0x58>
 800428a:	680b      	ldr	r3, [r1, #0]
 800428c:	1b5b      	subs	r3, r3, r5
 800428e:	d40e      	bmi.n	80042ae <_malloc_r+0x52>
 8004290:	2b0b      	cmp	r3, #11
 8004292:	d903      	bls.n	800429c <_malloc_r+0x40>
 8004294:	600b      	str	r3, [r1, #0]
 8004296:	18cc      	adds	r4, r1, r3
 8004298:	50cd      	str	r5, [r1, r3]
 800429a:	e01e      	b.n	80042da <_malloc_r+0x7e>
 800429c:	428c      	cmp	r4, r1
 800429e:	bf0d      	iteet	eq
 80042a0:	6863      	ldreq	r3, [r4, #4]
 80042a2:	684b      	ldrne	r3, [r1, #4]
 80042a4:	6063      	strne	r3, [r4, #4]
 80042a6:	6013      	streq	r3, [r2, #0]
 80042a8:	bf18      	it	ne
 80042aa:	460c      	movne	r4, r1
 80042ac:	e015      	b.n	80042da <_malloc_r+0x7e>
 80042ae:	460c      	mov	r4, r1
 80042b0:	6849      	ldr	r1, [r1, #4]
 80042b2:	e7e9      	b.n	8004288 <_malloc_r+0x2c>
 80042b4:	4c17      	ldr	r4, [pc, #92]	; (8004314 <_malloc_r+0xb8>)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	b91b      	cbnz	r3, 80042c2 <_malloc_r+0x66>
 80042ba:	4630      	mov	r0, r6
 80042bc:	f000 f82c 	bl	8004318 <_sbrk_r>
 80042c0:	6020      	str	r0, [r4, #0]
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	f000 f827 	bl	8004318 <_sbrk_r>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d018      	beq.n	8004300 <_malloc_r+0xa4>
 80042ce:	1cc4      	adds	r4, r0, #3
 80042d0:	f024 0403 	bic.w	r4, r4, #3
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10d      	bne.n	80042f4 <_malloc_r+0x98>
 80042d8:	6025      	str	r5, [r4, #0]
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 f851 	bl	8004382 <__malloc_unlock>
 80042e0:	f104 000b 	add.w	r0, r4, #11
 80042e4:	1d23      	adds	r3, r4, #4
 80042e6:	f020 0007 	bic.w	r0, r0, #7
 80042ea:	1ac3      	subs	r3, r0, r3
 80042ec:	d00e      	beq.n	800430c <_malloc_r+0xb0>
 80042ee:	425a      	negs	r2, r3
 80042f0:	50e2      	str	r2, [r4, r3]
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	1a21      	subs	r1, r4, r0
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 f80e 	bl	8004318 <_sbrk_r>
 80042fc:	3001      	adds	r0, #1
 80042fe:	d1eb      	bne.n	80042d8 <_malloc_r+0x7c>
 8004300:	230c      	movs	r3, #12
 8004302:	6033      	str	r3, [r6, #0]
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f83c 	bl	8004382 <__malloc_unlock>
 800430a:	2000      	movs	r0, #0
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	bf00      	nop
 8004310:	200007bc 	.word	0x200007bc
 8004314:	200007b8 	.word	0x200007b8

08004318 <_sbrk_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4c06      	ldr	r4, [pc, #24]	; (8004334 <_sbrk_r+0x1c>)
 800431c:	2300      	movs	r3, #0
 800431e:	4605      	mov	r5, r0
 8004320:	4608      	mov	r0, r1
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	f7fe feb2 	bl	800308c <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_sbrk_r+0x1a>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	b103      	cbz	r3, 8004332 <_sbrk_r+0x1a>
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	20000854 	.word	0x20000854

08004338 <siprintf>:
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	b500      	push	{lr}
 800433c:	b09c      	sub	sp, #112	; 0x70
 800433e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004342:	ab1d      	add	r3, sp, #116	; 0x74
 8004344:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004348:	9002      	str	r0, [sp, #8]
 800434a:	9006      	str	r0, [sp, #24]
 800434c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004350:	480a      	ldr	r0, [pc, #40]	; (800437c <siprintf+0x44>)
 8004352:	9104      	str	r1, [sp, #16]
 8004354:	9107      	str	r1, [sp, #28]
 8004356:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800435a:	f853 2b04 	ldr.w	r2, [r3], #4
 800435e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004362:	6800      	ldr	r0, [r0, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	a902      	add	r1, sp, #8
 8004368:	f000 f866 	bl	8004438 <_svfiprintf_r>
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	b01c      	add	sp, #112	; 0x70
 8004374:	f85d eb04 	ldr.w	lr, [sp], #4
 8004378:	b003      	add	sp, #12
 800437a:	4770      	bx	lr
 800437c:	20000750 	.word	0x20000750

08004380 <__malloc_lock>:
 8004380:	4770      	bx	lr

08004382 <__malloc_unlock>:
 8004382:	4770      	bx	lr

08004384 <__ssputs_r>:
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	688e      	ldr	r6, [r1, #8]
 800438a:	429e      	cmp	r6, r3
 800438c:	4682      	mov	sl, r0
 800438e:	460c      	mov	r4, r1
 8004390:	4691      	mov	r9, r2
 8004392:	4698      	mov	r8, r3
 8004394:	d83e      	bhi.n	8004414 <__ssputs_r+0x90>
 8004396:	898a      	ldrh	r2, [r1, #12]
 8004398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800439c:	d03a      	beq.n	8004414 <__ssputs_r+0x90>
 800439e:	6825      	ldr	r5, [r4, #0]
 80043a0:	6909      	ldr	r1, [r1, #16]
 80043a2:	1a6f      	subs	r7, r5, r1
 80043a4:	6965      	ldr	r5, [r4, #20]
 80043a6:	2302      	movs	r3, #2
 80043a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80043b0:	1c7b      	adds	r3, r7, #1
 80043b2:	4443      	add	r3, r8
 80043b4:	429d      	cmp	r5, r3
 80043b6:	bf38      	it	cc
 80043b8:	461d      	movcc	r5, r3
 80043ba:	0553      	lsls	r3, r2, #21
 80043bc:	d50f      	bpl.n	80043de <__ssputs_r+0x5a>
 80043be:	4629      	mov	r1, r5
 80043c0:	f7ff ff4c 	bl	800425c <_malloc_r>
 80043c4:	4606      	mov	r6, r0
 80043c6:	b198      	cbz	r0, 80043f0 <__ssputs_r+0x6c>
 80043c8:	463a      	mov	r2, r7
 80043ca:	6921      	ldr	r1, [r4, #16]
 80043cc:	f000 fac4 	bl	8004958 <memcpy>
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	e013      	b.n	8004406 <__ssputs_r+0x82>
 80043de:	462a      	mov	r2, r5
 80043e0:	f000 fae0 	bl	80049a4 <_realloc_r>
 80043e4:	4606      	mov	r6, r0
 80043e6:	b970      	cbnz	r0, 8004406 <__ssputs_r+0x82>
 80043e8:	6921      	ldr	r1, [r4, #16]
 80043ea:	4650      	mov	r0, sl
 80043ec:	f7ff fee8 	bl	80041c0 <_free_r>
 80043f0:	230c      	movs	r3, #12
 80043f2:	f8ca 3000 	str.w	r3, [sl]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	6126      	str	r6, [r4, #16]
 8004408:	6165      	str	r5, [r4, #20]
 800440a:	443e      	add	r6, r7
 800440c:	1bed      	subs	r5, r5, r7
 800440e:	6026      	str	r6, [r4, #0]
 8004410:	60a5      	str	r5, [r4, #8]
 8004412:	4646      	mov	r6, r8
 8004414:	4546      	cmp	r6, r8
 8004416:	bf28      	it	cs
 8004418:	4646      	movcs	r6, r8
 800441a:	4632      	mov	r2, r6
 800441c:	4649      	mov	r1, r9
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	f000 faa5 	bl	800496e <memmove>
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	1b9b      	subs	r3, r3, r6
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	441e      	add	r6, r3
 800442e:	6026      	str	r6, [r4, #0]
 8004430:	2000      	movs	r0, #0
 8004432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004438 <_svfiprintf_r>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	b09d      	sub	sp, #116	; 0x74
 800443e:	4680      	mov	r8, r0
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	898b      	ldrh	r3, [r1, #12]
 8004444:	061c      	lsls	r4, r3, #24
 8004446:	460d      	mov	r5, r1
 8004448:	4616      	mov	r6, r2
 800444a:	d50d      	bpl.n	8004468 <_svfiprintf_r+0x30>
 800444c:	690b      	ldr	r3, [r1, #16]
 800444e:	b95b      	cbnz	r3, 8004468 <_svfiprintf_r+0x30>
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	f7ff ff03 	bl	800425c <_malloc_r>
 8004456:	6028      	str	r0, [r5, #0]
 8004458:	6128      	str	r0, [r5, #16]
 800445a:	b918      	cbnz	r0, 8004464 <_svfiprintf_r+0x2c>
 800445c:	230c      	movs	r3, #12
 800445e:	f8c8 3000 	str.w	r3, [r8]
 8004462:	e0cd      	b.n	8004600 <_svfiprintf_r+0x1c8>
 8004464:	2340      	movs	r3, #64	; 0x40
 8004466:	616b      	str	r3, [r5, #20]
 8004468:	2300      	movs	r3, #0
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
 800446c:	2320      	movs	r3, #32
 800446e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004472:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8004610 <_svfiprintf_r+0x1d8>
 8004476:	2330      	movs	r3, #48	; 0x30
 8004478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800447c:	4637      	mov	r7, r6
 800447e:	463c      	mov	r4, r7
 8004480:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004484:	b91b      	cbnz	r3, 800448e <_svfiprintf_r+0x56>
 8004486:	ebb7 0906 	subs.w	r9, r7, r6
 800448a:	d010      	beq.n	80044ae <_svfiprintf_r+0x76>
 800448c:	e003      	b.n	8004496 <_svfiprintf_r+0x5e>
 800448e:	2b25      	cmp	r3, #37	; 0x25
 8004490:	d0f9      	beq.n	8004486 <_svfiprintf_r+0x4e>
 8004492:	4627      	mov	r7, r4
 8004494:	e7f3      	b.n	800447e <_svfiprintf_r+0x46>
 8004496:	464b      	mov	r3, r9
 8004498:	4632      	mov	r2, r6
 800449a:	4629      	mov	r1, r5
 800449c:	4640      	mov	r0, r8
 800449e:	f7ff ff71 	bl	8004384 <__ssputs_r>
 80044a2:	3001      	adds	r0, #1
 80044a4:	f000 80a7 	beq.w	80045f6 <_svfiprintf_r+0x1be>
 80044a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044aa:	444b      	add	r3, r9
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	783b      	ldrb	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a0 	beq.w	80045f6 <_svfiprintf_r+0x1be>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	9307      	str	r3, [sp, #28]
 80044c0:	9205      	str	r2, [sp, #20]
 80044c2:	9306      	str	r3, [sp, #24]
 80044c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c8:	931a      	str	r3, [sp, #104]	; 0x68
 80044ca:	2601      	movs	r6, #1
 80044cc:	2205      	movs	r2, #5
 80044ce:	7821      	ldrb	r1, [r4, #0]
 80044d0:	484e      	ldr	r0, [pc, #312]	; (800460c <_svfiprintf_r+0x1d4>)
 80044d2:	f7fb fe7d 	bl	80001d0 <memchr>
 80044d6:	1c67      	adds	r7, r4, #1
 80044d8:	9b04      	ldr	r3, [sp, #16]
 80044da:	b138      	cbz	r0, 80044ec <_svfiprintf_r+0xb4>
 80044dc:	4a4b      	ldr	r2, [pc, #300]	; (800460c <_svfiprintf_r+0x1d4>)
 80044de:	1a80      	subs	r0, r0, r2
 80044e0:	fa06 f000 	lsl.w	r0, r6, r0
 80044e4:	4318      	orrs	r0, r3
 80044e6:	9004      	str	r0, [sp, #16]
 80044e8:	463c      	mov	r4, r7
 80044ea:	e7ef      	b.n	80044cc <_svfiprintf_r+0x94>
 80044ec:	06d9      	lsls	r1, r3, #27
 80044ee:	bf44      	itt	mi
 80044f0:	2220      	movmi	r2, #32
 80044f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044f6:	071a      	lsls	r2, r3, #28
 80044f8:	bf44      	itt	mi
 80044fa:	222b      	movmi	r2, #43	; 0x2b
 80044fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004500:	7822      	ldrb	r2, [r4, #0]
 8004502:	2a2a      	cmp	r2, #42	; 0x2a
 8004504:	d003      	beq.n	800450e <_svfiprintf_r+0xd6>
 8004506:	9a07      	ldr	r2, [sp, #28]
 8004508:	2100      	movs	r1, #0
 800450a:	200a      	movs	r0, #10
 800450c:	e00b      	b.n	8004526 <_svfiprintf_r+0xee>
 800450e:	9a03      	ldr	r2, [sp, #12]
 8004510:	1d11      	adds	r1, r2, #4
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	2a00      	cmp	r2, #0
 8004518:	da10      	bge.n	800453c <_svfiprintf_r+0x104>
 800451a:	4252      	negs	r2, r2
 800451c:	f043 0002 	orr.w	r0, r3, #2
 8004520:	9207      	str	r2, [sp, #28]
 8004522:	9004      	str	r0, [sp, #16]
 8004524:	e00b      	b.n	800453e <_svfiprintf_r+0x106>
 8004526:	4627      	mov	r7, r4
 8004528:	3401      	adds	r4, #1
 800452a:	783b      	ldrb	r3, [r7, #0]
 800452c:	3b30      	subs	r3, #48	; 0x30
 800452e:	2b09      	cmp	r3, #9
 8004530:	d803      	bhi.n	800453a <_svfiprintf_r+0x102>
 8004532:	fb00 3202 	mla	r2, r0, r2, r3
 8004536:	2101      	movs	r1, #1
 8004538:	e7f5      	b.n	8004526 <_svfiprintf_r+0xee>
 800453a:	b101      	cbz	r1, 800453e <_svfiprintf_r+0x106>
 800453c:	9207      	str	r2, [sp, #28]
 800453e:	783b      	ldrb	r3, [r7, #0]
 8004540:	2b2e      	cmp	r3, #46	; 0x2e
 8004542:	d11e      	bne.n	8004582 <_svfiprintf_r+0x14a>
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b2a      	cmp	r3, #42	; 0x2a
 8004548:	d10a      	bne.n	8004560 <_svfiprintf_r+0x128>
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	9203      	str	r2, [sp, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	bfb8      	it	lt
 8004556:	f04f 33ff 	movlt.w	r3, #4294967295
 800455a:	3702      	adds	r7, #2
 800455c:	9305      	str	r3, [sp, #20]
 800455e:	e010      	b.n	8004582 <_svfiprintf_r+0x14a>
 8004560:	2300      	movs	r3, #0
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	1c78      	adds	r0, r7, #1
 8004566:	4619      	mov	r1, r3
 8004568:	240a      	movs	r4, #10
 800456a:	4607      	mov	r7, r0
 800456c:	3001      	adds	r0, #1
 800456e:	783a      	ldrb	r2, [r7, #0]
 8004570:	3a30      	subs	r2, #48	; 0x30
 8004572:	2a09      	cmp	r2, #9
 8004574:	d803      	bhi.n	800457e <_svfiprintf_r+0x146>
 8004576:	fb04 2101 	mla	r1, r4, r1, r2
 800457a:	2301      	movs	r3, #1
 800457c:	e7f5      	b.n	800456a <_svfiprintf_r+0x132>
 800457e:	b103      	cbz	r3, 8004582 <_svfiprintf_r+0x14a>
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	2203      	movs	r2, #3
 8004584:	7839      	ldrb	r1, [r7, #0]
 8004586:	4822      	ldr	r0, [pc, #136]	; (8004610 <_svfiprintf_r+0x1d8>)
 8004588:	f7fb fe22 	bl	80001d0 <memchr>
 800458c:	b140      	cbz	r0, 80045a0 <_svfiprintf_r+0x168>
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	ebcb 0000 	rsb	r0, fp, r0
 8004594:	fa03 f000 	lsl.w	r0, r3, r0
 8004598:	9b04      	ldr	r3, [sp, #16]
 800459a:	4318      	orrs	r0, r3
 800459c:	9004      	str	r0, [sp, #16]
 800459e:	3701      	adds	r7, #1
 80045a0:	7839      	ldrb	r1, [r7, #0]
 80045a2:	481c      	ldr	r0, [pc, #112]	; (8004614 <_svfiprintf_r+0x1dc>)
 80045a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045a8:	2206      	movs	r2, #6
 80045aa:	1c7e      	adds	r6, r7, #1
 80045ac:	f7fb fe10 	bl	80001d0 <memchr>
 80045b0:	b188      	cbz	r0, 80045d6 <_svfiprintf_r+0x19e>
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <_svfiprintf_r+0x1e0>)
 80045b4:	b933      	cbnz	r3, 80045c4 <_svfiprintf_r+0x18c>
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	3307      	adds	r3, #7
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	3308      	adds	r3, #8
 80045c0:	9303      	str	r3, [sp, #12]
 80045c2:	e014      	b.n	80045ee <_svfiprintf_r+0x1b6>
 80045c4:	ab03      	add	r3, sp, #12
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	462a      	mov	r2, r5
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <_svfiprintf_r+0x1e4>)
 80045cc:	a904      	add	r1, sp, #16
 80045ce:	4640      	mov	r0, r8
 80045d0:	f3af 8000 	nop.w
 80045d4:	e007      	b.n	80045e6 <_svfiprintf_r+0x1ae>
 80045d6:	ab03      	add	r3, sp, #12
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	462a      	mov	r2, r5
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <_svfiprintf_r+0x1e4>)
 80045de:	a904      	add	r1, sp, #16
 80045e0:	4640      	mov	r0, r8
 80045e2:	f000 f893 	bl	800470c <_printf_i>
 80045e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045ea:	4682      	mov	sl, r0
 80045ec:	d003      	beq.n	80045f6 <_svfiprintf_r+0x1be>
 80045ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f0:	4453      	add	r3, sl
 80045f2:	9309      	str	r3, [sp, #36]	; 0x24
 80045f4:	e742      	b.n	800447c <_svfiprintf_r+0x44>
 80045f6:	89ab      	ldrh	r3, [r5, #12]
 80045f8:	065b      	lsls	r3, r3, #25
 80045fa:	d401      	bmi.n	8004600 <_svfiprintf_r+0x1c8>
 80045fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045fe:	e001      	b.n	8004604 <_svfiprintf_r+0x1cc>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b01d      	add	sp, #116	; 0x74
 8004606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	08005bae 	.word	0x08005bae
 8004610:	08005bb4 	.word	0x08005bb4
 8004614:	08005bb8 	.word	0x08005bb8
 8004618:	00000000 	.word	0x00000000
 800461c:	08004385 	.word	0x08004385

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4691      	mov	r9, r2
 8004626:	461f      	mov	r7, r3
 8004628:	690a      	ldr	r2, [r1, #16]
 800462a:	688b      	ldr	r3, [r1, #8]
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	f8c9 3000 	str.w	r3, [r9]
 800463a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800463e:	4606      	mov	r6, r0
 8004640:	460c      	mov	r4, r1
 8004642:	b112      	cbz	r2, 800464a <_printf_common+0x2a>
 8004644:	3301      	adds	r3, #1
 8004646:	f8c9 3000 	str.w	r3, [r9]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	0699      	lsls	r1, r3, #26
 800464e:	bf42      	ittt	mi
 8004650:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004654:	3302      	addmi	r3, #2
 8004656:	f8c9 3000 	strmi.w	r3, [r9]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d110      	bne.n	8004684 <_printf_common+0x64>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	e007      	b.n	8004678 <_printf_common+0x58>
 8004668:	2301      	movs	r3, #1
 800466a:	4652      	mov	r2, sl
 800466c:	4639      	mov	r1, r7
 800466e:	4630      	mov	r0, r6
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d01a      	beq.n	80046ac <_printf_common+0x8c>
 8004676:	3501      	adds	r5, #1
 8004678:	68e3      	ldr	r3, [r4, #12]
 800467a:	f8d9 2000 	ldr.w	r2, [r9]
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	429d      	cmp	r5, r3
 8004682:	dbf1      	blt.n	8004668 <_printf_common+0x48>
 8004684:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	3300      	adds	r3, #0
 800468c:	bf18      	it	ne
 800468e:	2301      	movne	r3, #1
 8004690:	0692      	lsls	r2, r2, #26
 8004692:	d50f      	bpl.n	80046b4 <_printf_common+0x94>
 8004694:	18e1      	adds	r1, r4, r3
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	2030      	movs	r0, #48	; 0x30
 800469a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800469e:	4422      	add	r2, r4
 80046a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046a8:	3302      	adds	r3, #2
 80046aa:	e003      	b.n	80046b4 <_printf_common+0x94>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b8:	4639      	mov	r1, r7
 80046ba:	4630      	mov	r0, r6
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d0f4      	beq.n	80046ac <_printf_common+0x8c>
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	f8d9 5000 	ldr.w	r5, [r9]
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	f002 0206 	and.w	r2, r2, #6
 80046ce:	2a04      	cmp	r2, #4
 80046d0:	bf08      	it	eq
 80046d2:	1b5d      	subeq	r5, r3, r5
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	bf0c      	ite	eq
 80046da:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046de:	2500      	movne	r5, #0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bfc4      	itt	gt
 80046e4:	1a9b      	subgt	r3, r3, r2
 80046e6:	18ed      	addgt	r5, r5, r3
 80046e8:	f04f 0900 	mov.w	r9, #0
 80046ec:	341a      	adds	r4, #26
 80046ee:	454d      	cmp	r5, r9
 80046f0:	d009      	beq.n	8004706 <_printf_common+0xe6>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4622      	mov	r2, r4
 80046f6:	4639      	mov	r1, r7
 80046f8:	4630      	mov	r0, r6
 80046fa:	47c0      	blx	r8
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0d5      	beq.n	80046ac <_printf_common+0x8c>
 8004700:	f109 0901 	add.w	r9, r9, #1
 8004704:	e7f3      	b.n	80046ee <_printf_common+0xce>
 8004706:	2000      	movs	r0, #0
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800470c <_printf_i>:
 800470c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004710:	4617      	mov	r7, r2
 8004712:	7e0a      	ldrb	r2, [r1, #24]
 8004714:	b085      	sub	sp, #20
 8004716:	2a6e      	cmp	r2, #110	; 0x6e
 8004718:	4698      	mov	r8, r3
 800471a:	4606      	mov	r6, r0
 800471c:	460c      	mov	r4, r1
 800471e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004720:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004724:	f000 80ae 	beq.w	8004884 <_printf_i+0x178>
 8004728:	d811      	bhi.n	800474e <_printf_i+0x42>
 800472a:	2a63      	cmp	r2, #99	; 0x63
 800472c:	d022      	beq.n	8004774 <_printf_i+0x68>
 800472e:	d809      	bhi.n	8004744 <_printf_i+0x38>
 8004730:	2a00      	cmp	r2, #0
 8004732:	f000 80bb 	beq.w	80048ac <_printf_i+0x1a0>
 8004736:	2a58      	cmp	r2, #88	; 0x58
 8004738:	f040 80ca 	bne.w	80048d0 <_printf_i+0x1c4>
 800473c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004740:	4983      	ldr	r1, [pc, #524]	; (8004950 <_printf_i+0x244>)
 8004742:	e055      	b.n	80047f0 <_printf_i+0xe4>
 8004744:	2a64      	cmp	r2, #100	; 0x64
 8004746:	d01e      	beq.n	8004786 <_printf_i+0x7a>
 8004748:	2a69      	cmp	r2, #105	; 0x69
 800474a:	d01c      	beq.n	8004786 <_printf_i+0x7a>
 800474c:	e0c0      	b.n	80048d0 <_printf_i+0x1c4>
 800474e:	2a73      	cmp	r2, #115	; 0x73
 8004750:	f000 80b0 	beq.w	80048b4 <_printf_i+0x1a8>
 8004754:	d809      	bhi.n	800476a <_printf_i+0x5e>
 8004756:	2a6f      	cmp	r2, #111	; 0x6f
 8004758:	d02e      	beq.n	80047b8 <_printf_i+0xac>
 800475a:	2a70      	cmp	r2, #112	; 0x70
 800475c:	f040 80b8 	bne.w	80048d0 <_printf_i+0x1c4>
 8004760:	680a      	ldr	r2, [r1, #0]
 8004762:	f042 0220 	orr.w	r2, r2, #32
 8004766:	600a      	str	r2, [r1, #0]
 8004768:	e03e      	b.n	80047e8 <_printf_i+0xdc>
 800476a:	2a75      	cmp	r2, #117	; 0x75
 800476c:	d024      	beq.n	80047b8 <_printf_i+0xac>
 800476e:	2a78      	cmp	r2, #120	; 0x78
 8004770:	d03a      	beq.n	80047e8 <_printf_i+0xdc>
 8004772:	e0ad      	b.n	80048d0 <_printf_i+0x1c4>
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800477a:	1d11      	adds	r1, r2, #4
 800477c:	6019      	str	r1, [r3, #0]
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004784:	e0a8      	b.n	80048d8 <_printf_i+0x1cc>
 8004786:	6821      	ldr	r1, [r4, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800478e:	d002      	beq.n	8004796 <_printf_i+0x8a>
 8004790:	1d11      	adds	r1, r2, #4
 8004792:	6019      	str	r1, [r3, #0]
 8004794:	e008      	b.n	80047a8 <_printf_i+0x9c>
 8004796:	f011 0f40 	tst.w	r1, #64	; 0x40
 800479a:	f102 0104 	add.w	r1, r2, #4
 800479e:	6019      	str	r1, [r3, #0]
 80047a0:	d002      	beq.n	80047a8 <_printf_i+0x9c>
 80047a2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80047a6:	e000      	b.n	80047aa <_printf_i+0x9e>
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da3c      	bge.n	8004828 <_printf_i+0x11c>
 80047ae:	222d      	movs	r2, #45	; 0x2d
 80047b0:	425b      	negs	r3, r3
 80047b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047b6:	e037      	b.n	8004828 <_printf_i+0x11c>
 80047b8:	6821      	ldr	r1, [r4, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80047c0:	d002      	beq.n	80047c8 <_printf_i+0xbc>
 80047c2:	1d11      	adds	r1, r2, #4
 80047c4:	6019      	str	r1, [r3, #0]
 80047c6:	e007      	b.n	80047d8 <_printf_i+0xcc>
 80047c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80047cc:	f102 0104 	add.w	r1, r2, #4
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	d001      	beq.n	80047d8 <_printf_i+0xcc>
 80047d4:	8813      	ldrh	r3, [r2, #0]
 80047d6:	e000      	b.n	80047da <_printf_i+0xce>
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	7e22      	ldrb	r2, [r4, #24]
 80047dc:	495c      	ldr	r1, [pc, #368]	; (8004950 <_printf_i+0x244>)
 80047de:	2a6f      	cmp	r2, #111	; 0x6f
 80047e0:	bf14      	ite	ne
 80047e2:	220a      	movne	r2, #10
 80047e4:	2208      	moveq	r2, #8
 80047e6:	e01b      	b.n	8004820 <_printf_i+0x114>
 80047e8:	2278      	movs	r2, #120	; 0x78
 80047ea:	495a      	ldr	r1, [pc, #360]	; (8004954 <_printf_i+0x248>)
 80047ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047f8:	f100 0504 	add.w	r5, r0, #4
 80047fc:	601d      	str	r5, [r3, #0]
 80047fe:	d103      	bne.n	8004808 <_printf_i+0xfc>
 8004800:	0655      	lsls	r5, r2, #25
 8004802:	d501      	bpl.n	8004808 <_printf_i+0xfc>
 8004804:	8803      	ldrh	r3, [r0, #0]
 8004806:	e000      	b.n	800480a <_printf_i+0xfe>
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	07d0      	lsls	r0, r2, #31
 800480c:	bf44      	itt	mi
 800480e:	f042 0220 	orrmi.w	r2, r2, #32
 8004812:	6022      	strmi	r2, [r4, #0]
 8004814:	b91b      	cbnz	r3, 800481e <_printf_i+0x112>
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	f022 0220 	bic.w	r2, r2, #32
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	2210      	movs	r2, #16
 8004820:	2000      	movs	r0, #0
 8004822:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004826:	e001      	b.n	800482c <_printf_i+0x120>
 8004828:	4949      	ldr	r1, [pc, #292]	; (8004950 <_printf_i+0x244>)
 800482a:	220a      	movs	r2, #10
 800482c:	6865      	ldr	r5, [r4, #4]
 800482e:	60a5      	str	r5, [r4, #8]
 8004830:	2d00      	cmp	r5, #0
 8004832:	db08      	blt.n	8004846 <_printf_i+0x13a>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	f020 0004 	bic.w	r0, r0, #4
 800483a:	6020      	str	r0, [r4, #0]
 800483c:	b92b      	cbnz	r3, 800484a <_printf_i+0x13e>
 800483e:	2d00      	cmp	r5, #0
 8004840:	d17d      	bne.n	800493e <_printf_i+0x232>
 8004842:	4675      	mov	r5, lr
 8004844:	e00c      	b.n	8004860 <_printf_i+0x154>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d079      	beq.n	800493e <_printf_i+0x232>
 800484a:	4675      	mov	r5, lr
 800484c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004850:	fb02 3310 	mls	r3, r2, r0, r3
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800485a:	4603      	mov	r3, r0
 800485c:	2800      	cmp	r0, #0
 800485e:	d1f5      	bne.n	800484c <_printf_i+0x140>
 8004860:	2a08      	cmp	r2, #8
 8004862:	d10b      	bne.n	800487c <_printf_i+0x170>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	07da      	lsls	r2, r3, #31
 8004868:	d508      	bpl.n	800487c <_printf_i+0x170>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6862      	ldr	r2, [r4, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	bfde      	ittt	le
 8004872:	2330      	movle	r3, #48	; 0x30
 8004874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800487c:	ebc5 030e 	rsb	r3, r5, lr
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	e02e      	b.n	80048e2 <_printf_i+0x1d6>
 8004884:	6808      	ldr	r0, [r1, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6949      	ldr	r1, [r1, #20]
 800488a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800488e:	d003      	beq.n	8004898 <_printf_i+0x18c>
 8004890:	1d10      	adds	r0, r2, #4
 8004892:	6018      	str	r0, [r3, #0]
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	e008      	b.n	80048aa <_printf_i+0x19e>
 8004898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800489c:	f102 0004 	add.w	r0, r2, #4
 80048a0:	6018      	str	r0, [r3, #0]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	d001      	beq.n	80048aa <_printf_i+0x19e>
 80048a6:	8019      	strh	r1, [r3, #0]
 80048a8:	e000      	b.n	80048ac <_printf_i+0x1a0>
 80048aa:	6019      	str	r1, [r3, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	4675      	mov	r5, lr
 80048b2:	e016      	b.n	80048e2 <_printf_i+0x1d6>
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	1d11      	adds	r1, r2, #4
 80048b8:	6019      	str	r1, [r3, #0]
 80048ba:	6815      	ldr	r5, [r2, #0]
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	2100      	movs	r1, #0
 80048c0:	4628      	mov	r0, r5
 80048c2:	f7fb fc85 	bl	80001d0 <memchr>
 80048c6:	b108      	cbz	r0, 80048cc <_printf_i+0x1c0>
 80048c8:	1b40      	subs	r0, r0, r5
 80048ca:	6060      	str	r0, [r4, #4]
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	e004      	b.n	80048da <_printf_i+0x1ce>
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	2300      	movs	r3, #0
 80048de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e2:	f8cd 8000 	str.w	r8, [sp]
 80048e6:	463b      	mov	r3, r7
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	4621      	mov	r1, r4
 80048ec:	4630      	mov	r0, r6
 80048ee:	f7ff fe97 	bl	8004620 <_printf_common>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d102      	bne.n	80048fc <_printf_i+0x1f0>
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295
 80048fa:	e026      	b.n	800494a <_printf_i+0x23e>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	462a      	mov	r2, r5
 8004900:	4639      	mov	r1, r7
 8004902:	4630      	mov	r0, r6
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d0f5      	beq.n	80048f6 <_printf_i+0x1ea>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	079b      	lsls	r3, r3, #30
 800490e:	d510      	bpl.n	8004932 <_printf_i+0x226>
 8004910:	2500      	movs	r5, #0
 8004912:	f104 0919 	add.w	r9, r4, #25
 8004916:	e007      	b.n	8004928 <_printf_i+0x21c>
 8004918:	2301      	movs	r3, #1
 800491a:	464a      	mov	r2, r9
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e7      	beq.n	80048f6 <_printf_i+0x1ea>
 8004926:	3501      	adds	r5, #1
 8004928:	68e3      	ldr	r3, [r4, #12]
 800492a:	9a03      	ldr	r2, [sp, #12]
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	429d      	cmp	r5, r3
 8004930:	dbf2      	blt.n	8004918 <_printf_i+0x20c>
 8004932:	68e0      	ldr	r0, [r4, #12]
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	4298      	cmp	r0, r3
 8004938:	bfb8      	it	lt
 800493a:	4618      	movlt	r0, r3
 800493c:	e005      	b.n	800494a <_printf_i+0x23e>
 800493e:	780b      	ldrb	r3, [r1, #0]
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004948:	e78a      	b.n	8004860 <_printf_i+0x154>
 800494a:	b005      	add	sp, #20
 800494c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004950:	08005bbf 	.word	0x08005bbf
 8004954:	08005bd0 	.word	0x08005bd0

08004958 <memcpy>:
 8004958:	b510      	push	{r4, lr}
 800495a:	1e43      	subs	r3, r0, #1
 800495c:	440a      	add	r2, r1
 800495e:	4291      	cmp	r1, r2
 8004960:	d004      	beq.n	800496c <memcpy+0x14>
 8004962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800496a:	e7f8      	b.n	800495e <memcpy+0x6>
 800496c:	bd10      	pop	{r4, pc}

0800496e <memmove>:
 800496e:	4288      	cmp	r0, r1
 8004970:	b510      	push	{r4, lr}
 8004972:	eb01 0302 	add.w	r3, r1, r2
 8004976:	d801      	bhi.n	800497c <memmove+0xe>
 8004978:	1e42      	subs	r2, r0, #1
 800497a:	e00b      	b.n	8004994 <memmove+0x26>
 800497c:	4298      	cmp	r0, r3
 800497e:	d2fb      	bcs.n	8004978 <memmove+0xa>
 8004980:	1881      	adds	r1, r0, r2
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	42d3      	cmn	r3, r2
 8004986:	d004      	beq.n	8004992 <memmove+0x24>
 8004988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800498c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004990:	e7f8      	b.n	8004984 <memmove+0x16>
 8004992:	bd10      	pop	{r4, pc}
 8004994:	4299      	cmp	r1, r3
 8004996:	d004      	beq.n	80049a2 <memmove+0x34>
 8004998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049a0:	e7f8      	b.n	8004994 <memmove+0x26>
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <_realloc_r>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	4607      	mov	r7, r0
 80049a8:	4615      	mov	r5, r2
 80049aa:	460e      	mov	r6, r1
 80049ac:	b921      	cbnz	r1, 80049b8 <_realloc_r+0x14>
 80049ae:	4611      	mov	r1, r2
 80049b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049b4:	f7ff bc52 	b.w	800425c <_malloc_r>
 80049b8:	b91a      	cbnz	r2, 80049c2 <_realloc_r+0x1e>
 80049ba:	f7ff fc01 	bl	80041c0 <_free_r>
 80049be:	4628      	mov	r0, r5
 80049c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c2:	f000 f815 	bl	80049f0 <_malloc_usable_size_r>
 80049c6:	4285      	cmp	r5, r0
 80049c8:	d90e      	bls.n	80049e8 <_realloc_r+0x44>
 80049ca:	4629      	mov	r1, r5
 80049cc:	4638      	mov	r0, r7
 80049ce:	f7ff fc45 	bl	800425c <_malloc_r>
 80049d2:	4604      	mov	r4, r0
 80049d4:	b150      	cbz	r0, 80049ec <_realloc_r+0x48>
 80049d6:	4631      	mov	r1, r6
 80049d8:	462a      	mov	r2, r5
 80049da:	f7ff ffbd 	bl	8004958 <memcpy>
 80049de:	4631      	mov	r1, r6
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff fbed 	bl	80041c0 <_free_r>
 80049e6:	e001      	b.n	80049ec <_realloc_r+0x48>
 80049e8:	4630      	mov	r0, r6
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ec:	4620      	mov	r0, r4
 80049ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049f0 <_malloc_usable_size_r>:
 80049f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80049f4:	2800      	cmp	r0, #0
 80049f6:	bfbe      	ittt	lt
 80049f8:	1809      	addlt	r1, r1, r0
 80049fa:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80049fe:	18c0      	addlt	r0, r0, r3
 8004a00:	3804      	subs	r0, #4
 8004a02:	4770      	bx	lr

08004a04 <pow>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8004ccc <pow+0x2c8>
 8004a0c:	b08f      	sub	sp, #60	; 0x3c
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4682      	mov	sl, r0
 8004a12:	468b      	mov	fp, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	f000 f9b3 	bl	8004d80 <__ieee754_pow>
 8004a1a:	f999 3000 	ldrsb.w	r3, [r9]
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	3301      	adds	r3, #1
 8004a22:	e9cd 0100 	strd	r0, r1, [sp]
 8004a26:	46c8      	mov	r8, r9
 8004a28:	f000 813d 	beq.w	8004ca6 <pow+0x2a2>
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	462b      	mov	r3, r5
 8004a30:	4620      	mov	r0, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	f7fc f86e 	bl	8000b14 <__aeabi_dcmpun>
 8004a38:	4606      	mov	r6, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	f040 8133 	bne.w	8004ca6 <pow+0x2a2>
 8004a40:	4652      	mov	r2, sl
 8004a42:	465b      	mov	r3, fp
 8004a44:	4650      	mov	r0, sl
 8004a46:	4659      	mov	r1, fp
 8004a48:	f7fc f864 	bl	8000b14 <__aeabi_dcmpun>
 8004a4c:	9003      	str	r0, [sp, #12]
 8004a4e:	b1d0      	cbz	r0, 8004a86 <pow+0x82>
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fc f82a 	bl	8000ab0 <__aeabi_dcmpeq>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f000 8122 	beq.w	8004ca6 <pow+0x2a2>
 8004a62:	2301      	movs	r3, #1
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <pow+0x2ac>)
 8004a68:	9305      	str	r3, [sp, #20]
 8004a6a:	4b92      	ldr	r3, [pc, #584]	; (8004cb4 <pow+0x2b0>)
 8004a6c:	960c      	str	r6, [sp, #48]	; 0x30
 8004a6e:	2200      	movs	r2, #0
 8004a70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004a74:	9b02      	ldr	r3, [sp, #8]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004a7c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004a80:	f040 8084 	bne.w	8004b8c <pow+0x188>
 8004a84:	e10c      	b.n	8004ca0 <pow+0x29c>
 8004a86:	2600      	movs	r6, #0
 8004a88:	2700      	movs	r7, #0
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	4650      	mov	r0, sl
 8004a90:	4659      	mov	r1, fp
 8004a92:	f7fc f80d 	bl	8000ab0 <__aeabi_dcmpeq>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d03f      	beq.n	8004b1a <pow+0x116>
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fc f805 	bl	8000ab0 <__aeabi_dcmpeq>
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	b198      	cbz	r0, 8004ad2 <pow+0xce>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	4b80      	ldr	r3, [pc, #512]	; (8004cb0 <pow+0x2ac>)
 8004ab0:	9305      	str	r3, [sp, #20]
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ab6:	9b02      	ldr	r3, [sp, #8]
 8004ab8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004abc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004ac0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d061      	beq.n	8004b8c <pow+0x188>
 8004ac8:	4b7a      	ldr	r3, [pc, #488]	; (8004cb4 <pow+0x2b0>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ad0:	e0e0      	b.n	8004c94 <pow+0x290>
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f000 fef4 	bl	80058c2 <finite>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f000 80e3 	beq.w	8004ca6 <pow+0x2a2>
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb ffec 	bl	8000ac4 <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f000 80da 	beq.w	8004ca6 <pow+0x2a2>
 8004af2:	2301      	movs	r3, #1
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <pow+0x2ac>)
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	f999 3000 	ldrsb.w	r3, [r9]
 8004afe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004b02:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004b06:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d030      	beq.n	8004b70 <pow+0x16c>
 8004b0e:	496a      	ldr	r1, [pc, #424]	; (8004cb8 <pow+0x2b4>)
 8004b10:	2000      	movs	r0, #0
 8004b12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	e037      	b.n	8004b8a <pow+0x186>
 8004b1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b1e:	f000 fed0 	bl	80058c2 <finite>
 8004b22:	9002      	str	r0, [sp, #8]
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f040 808a 	bne.w	8004c3e <pow+0x23a>
 8004b2a:	4650      	mov	r0, sl
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	f000 fec8 	bl	80058c2 <finite>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f000 8083 	beq.w	8004c3e <pow+0x23a>
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f000 fec1 	bl	80058c2 <finite>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d07c      	beq.n	8004c3e <pow+0x23a>
 8004b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fb ffe2 	bl	8000b14 <__aeabi_dcmpun>
 8004b50:	f999 9000 	ldrsb.w	r9, [r9]
 8004b54:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <pow+0x2ac>)
 8004b56:	b310      	cbz	r0, 8004b9e <pow+0x19a>
 8004b58:	2201      	movs	r2, #1
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	9b02      	ldr	r3, [sp, #8]
 8004b5e:	9204      	str	r2, [sp, #16]
 8004b60:	930c      	str	r3, [sp, #48]	; 0x30
 8004b62:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004b66:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004b6a:	f1b9 0f00 	cmp.w	r9, #0
 8004b6e:	d102      	bne.n	8004b76 <pow+0x172>
 8004b70:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8004b74:	e00a      	b.n	8004b8c <pow+0x188>
 8004b76:	4632      	mov	r2, r6
 8004b78:	463b      	mov	r3, r7
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	f7fb fe59 	bl	8000834 <__aeabi_ddiv>
 8004b82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b86:	f1b9 0f02 	cmp.w	r9, #2
 8004b8a:	d004      	beq.n	8004b96 <pow+0x192>
 8004b8c:	a804      	add	r0, sp, #16
 8004b8e:	f000 fe9e 	bl	80058ce <matherr>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d17e      	bne.n	8004c94 <pow+0x290>
 8004b96:	f000 ffa5 	bl	8005ae4 <__errno>
 8004b9a:	2321      	movs	r3, #33	; 0x21
 8004b9c:	e079      	b.n	8004c92 <pow+0x28e>
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	9204      	str	r2, [sp, #16]
 8004ba2:	9305      	str	r3, [sp, #20]
 8004ba4:	900c      	str	r0, [sp, #48]	; 0x30
 8004ba6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004baa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004bae:	f1b9 0f00 	cmp.w	r9, #0
 8004bb2:	d122      	bne.n	8004bfa <pow+0x1f6>
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <pow+0x2b8>)
 8004bb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	f7fb ff7d 	bl	8000ac4 <__aeabi_dcmplt>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d05a      	beq.n	8004c84 <pow+0x280>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <pow+0x2bc>)
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fd03 	bl	80005e0 <__aeabi_dmul>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	460d      	mov	r5, r1
 8004bde:	f000 fe7f 	bl	80058e0 <rint>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb ff61 	bl	8000ab0 <__aeabi_dcmpeq>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d144      	bne.n	8004c7c <pow+0x278>
 8004bf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bf6:	4b33      	ldr	r3, [pc, #204]	; (8004cc4 <pow+0x2c0>)
 8004bf8:	e01e      	b.n	8004c38 <pow+0x234>
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <pow+0x2c4>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c02:	4650      	mov	r0, sl
 8004c04:	4632      	mov	r2, r6
 8004c06:	463b      	mov	r3, r7
 8004c08:	4659      	mov	r1, fp
 8004c0a:	f7fb ff5b 	bl	8000ac4 <__aeabi_dcmplt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d034      	beq.n	8004c7c <pow+0x278>
 8004c12:	2200      	movs	r2, #0
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <pow+0x2bc>)
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb fce1 	bl	80005e0 <__aeabi_dmul>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	f000 fe5d 	bl	80058e0 <rint>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	f7fb ff3f 	bl	8000ab0 <__aeabi_dcmpeq>
 8004c32:	bb18      	cbnz	r0, 8004c7c <pow+0x278>
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <pow+0x2b4>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c3c:	e01e      	b.n	8004c7c <pow+0x278>
 8004c3e:	2600      	movs	r6, #0
 8004c40:	2700      	movs	r7, #0
 8004c42:	4632      	mov	r2, r6
 8004c44:	463b      	mov	r3, r7
 8004c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c4a:	f7fb ff31 	bl	8000ab0 <__aeabi_dcmpeq>
 8004c4e:	b350      	cbz	r0, 8004ca6 <pow+0x2a2>
 8004c50:	4650      	mov	r0, sl
 8004c52:	4659      	mov	r1, fp
 8004c54:	f000 fe35 	bl	80058c2 <finite>
 8004c58:	b328      	cbz	r0, 8004ca6 <pow+0x2a2>
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f000 fe30 	bl	80058c2 <finite>
 8004c62:	b300      	cbz	r0, 8004ca6 <pow+0x2a2>
 8004c64:	2304      	movs	r3, #4
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <pow+0x2ac>)
 8004c6e:	9305      	str	r3, [sp, #20]
 8004c70:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004c74:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8004c78:	2300      	movs	r3, #0
 8004c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c7c:	f998 3000 	ldrsb.w	r3, [r8]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d003      	beq.n	8004c8c <pow+0x288>
 8004c84:	a804      	add	r0, sp, #16
 8004c86:	f000 fe22 	bl	80058ce <matherr>
 8004c8a:	b918      	cbnz	r0, 8004c94 <pow+0x290>
 8004c8c:	f000 ff2a 	bl	8005ae4 <__errno>
 8004c90:	2322      	movs	r3, #34	; 0x22
 8004c92:	6003      	str	r3, [r0, #0]
 8004c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c96:	b11b      	cbz	r3, 8004ca0 <pow+0x29c>
 8004c98:	f000 ff24 	bl	8005ae4 <__errno>
 8004c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c9e:	6003      	str	r3, [r0, #0]
 8004ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ca4:	e001      	b.n	8004caa <pow+0x2a6>
 8004ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004caa:	b00f      	add	sp, #60	; 0x3c
 8004cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb0:	08005be1 	.word	0x08005be1
 8004cb4:	3ff00000 	.word	0x3ff00000
 8004cb8:	fff00000 	.word	0xfff00000
 8004cbc:	47efffff 	.word	0x47efffff
 8004cc0:	3fe00000 	.word	0x3fe00000
 8004cc4:	c7efffff 	.word	0xc7efffff
 8004cc8:	7ff00000 	.word	0x7ff00000
 8004ccc:	20000754 	.word	0x20000754

08004cd0 <sqrt>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	b08b      	sub	sp, #44	; 0x2c
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	460f      	mov	r7, r1
 8004cda:	f000 fd45 	bl	8005768 <__ieee754_sqrt>
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <sqrt+0xa8>)
 8004ce0:	f993 a000 	ldrsb.w	sl, [r3]
 8004ce4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	d03f      	beq.n	8004d6e <sqrt+0x9e>
 8004cee:	4632      	mov	r2, r6
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	f7fb ff0d 	bl	8000b14 <__aeabi_dcmpun>
 8004cfa:	4683      	mov	fp, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d136      	bne.n	8004d6e <sqrt+0x9e>
 8004d00:	f04f 0800 	mov.w	r8, #0
 8004d04:	f04f 0900 	mov.w	r9, #0
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb fed8 	bl	8000ac4 <__aeabi_dcmplt>
 8004d14:	b358      	cbz	r0, 8004d6e <sqrt+0x9e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <sqrt+0xac>)
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8004d22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d2a:	f1ba 0f00 	cmp.w	sl, #0
 8004d2e:	d102      	bne.n	8004d36 <sqrt+0x66>
 8004d30:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004d34:	e00a      	b.n	8004d4c <sqrt+0x7c>
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb fd79 	bl	8000834 <__aeabi_ddiv>
 8004d42:	f1ba 0f02 	cmp.w	sl, #2
 8004d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d4a:	d003      	beq.n	8004d54 <sqrt+0x84>
 8004d4c:	4668      	mov	r0, sp
 8004d4e:	f000 fdbe 	bl	80058ce <matherr>
 8004d52:	b918      	cbnz	r0, 8004d5c <sqrt+0x8c>
 8004d54:	f000 fec6 	bl	8005ae4 <__errno>
 8004d58:	2321      	movs	r3, #33	; 0x21
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	9b08      	ldr	r3, [sp, #32]
 8004d5e:	b11b      	cbz	r3, 8004d68 <sqrt+0x98>
 8004d60:	f000 fec0 	bl	8005ae4 <__errno>
 8004d64:	9b08      	ldr	r3, [sp, #32]
 8004d66:	6003      	str	r3, [r0, #0]
 8004d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6c:	e001      	b.n	8004d72 <sqrt+0xa2>
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4629      	mov	r1, r5
 8004d72:	b00b      	add	sp, #44	; 0x2c
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	20000754 	.word	0x20000754
 8004d7c:	08005be5 	.word	0x08005be5

08004d80 <__ieee754_pow>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	b091      	sub	sp, #68	; 0x44
 8004d86:	e9cd 2300 	strd	r2, r3, [sp]
 8004d8a:	e89d 0208 	ldmia.w	sp, {r3, r9}
 8004d8e:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004d92:	4607      	mov	r7, r0
 8004d94:	4682      	mov	sl, r0
 8004d96:	ea56 0003 	orrs.w	r0, r6, r3
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4688      	mov	r8, r1
 8004d9e:	f000 8497 	beq.w	80056d0 <__ieee754_pow+0x950>
 8004da2:	4abd      	ldr	r2, [pc, #756]	; (8005098 <__ieee754_pow+0x318>)
 8004da4:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 8004da8:	4295      	cmp	r5, r2
 8004daa:	dc08      	bgt.n	8004dbe <__ieee754_pow+0x3e>
 8004dac:	d102      	bne.n	8004db4 <__ieee754_pow+0x34>
 8004dae:	b937      	cbnz	r7, 8004dbe <__ieee754_pow+0x3e>
 8004db0:	f000 bc99 	b.w	80056e6 <__ieee754_pow+0x966>
 8004db4:	4296      	cmp	r6, r2
 8004db6:	dc02      	bgt.n	8004dbe <__ieee754_pow+0x3e>
 8004db8:	4296      	cmp	r6, r2
 8004dba:	d10e      	bne.n	8004dda <__ieee754_pow+0x5a>
 8004dbc:	b16b      	cbz	r3, 8004dda <__ieee754_pow+0x5a>
 8004dbe:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004dc2:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004dc6:	ea55 000a 	orrs.w	r0, r5, sl
 8004dca:	f000 8481 	beq.w	80056d0 <__ieee754_pow+0x950>
 8004dce:	48b3      	ldr	r0, [pc, #716]	; (800509c <__ieee754_pow+0x31c>)
 8004dd0:	b011      	add	sp, #68	; 0x44
 8004dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	f000 bd7d 	b.w	80058d4 <nan>
 8004dda:	f1b8 0f00 	cmp.w	r8, #0
 8004dde:	da2a      	bge.n	8004e36 <__ieee754_pow+0xb6>
 8004de0:	4aaf      	ldr	r2, [pc, #700]	; (80050a0 <__ieee754_pow+0x320>)
 8004de2:	4296      	cmp	r6, r2
 8004de4:	dc24      	bgt.n	8004e30 <__ieee754_pow+0xb0>
 8004de6:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8004dea:	4296      	cmp	r6, r2
 8004dec:	dd23      	ble.n	8004e36 <__ieee754_pow+0xb6>
 8004dee:	1532      	asrs	r2, r6, #20
 8004df0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004df4:	2a14      	cmp	r2, #20
 8004df6:	dd0c      	ble.n	8004e12 <__ieee754_pow+0x92>
 8004df8:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8004dfc:	fa23 f102 	lsr.w	r1, r3, r2
 8004e00:	fa01 f202 	lsl.w	r2, r1, r2
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d116      	bne.n	8004e36 <__ieee754_pow+0xb6>
 8004e08:	f001 0101 	and.w	r1, r1, #1
 8004e0c:	f1c1 0b02 	rsb	fp, r1, #2
 8004e10:	e013      	b.n	8004e3a <__ieee754_pow+0xba>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d155      	bne.n	8004ec2 <__ieee754_pow+0x142>
 8004e16:	f1c2 0214 	rsb	r2, r2, #20
 8004e1a:	fa46 f102 	asr.w	r1, r6, r2
 8004e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e22:	4296      	cmp	r6, r2
 8004e24:	d12a      	bne.n	8004e7c <__ieee754_pow+0xfc>
 8004e26:	f001 0101 	and.w	r1, r1, #1
 8004e2a:	f1c1 0b02 	rsb	fp, r1, #2
 8004e2e:	e026      	b.n	8004e7e <__ieee754_pow+0xfe>
 8004e30:	f04f 0b02 	mov.w	fp, #2
 8004e34:	e001      	b.n	8004e3a <__ieee754_pow+0xba>
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d143      	bne.n	8004ec6 <__ieee754_pow+0x146>
 8004e3e:	4a96      	ldr	r2, [pc, #600]	; (8005098 <__ieee754_pow+0x318>)
 8004e40:	4296      	cmp	r6, r2
 8004e42:	d11c      	bne.n	8004e7e <__ieee754_pow+0xfe>
 8004e44:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8004e48:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8004e4c:	ea52 020a 	orrs.w	r2, r2, sl
 8004e50:	f000 843f 	beq.w	80056d2 <__ieee754_pow+0x952>
 8004e54:	4b93      	ldr	r3, [pc, #588]	; (80050a4 <__ieee754_pow+0x324>)
 8004e56:	429d      	cmp	r5, r3
 8004e58:	dd07      	ble.n	8004e6a <__ieee754_pow+0xea>
 8004e5a:	f1b9 0f00 	cmp.w	r9, #0
 8004e5e:	f280 843a 	bge.w	80056d6 <__ieee754_pow+0x956>
 8004e62:	2300      	movs	r3, #0
 8004e64:	4619      	mov	r1, r3
 8004e66:	f000 bc43 	b.w	80056f0 <__ieee754_pow+0x970>
 8004e6a:	f1b9 0f00 	cmp.w	r9, #0
 8004e6e:	daf8      	bge.n	8004e62 <__ieee754_pow+0xe2>
 8004e70:	9a01      	ldr	r2, [sp, #4]
 8004e72:	9b00      	ldr	r3, [sp, #0]
 8004e74:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004e78:	f000 bc3a 	b.w	80056f0 <__ieee754_pow+0x970>
 8004e7c:	469b      	mov	fp, r3
 8004e7e:	4b8a      	ldr	r3, [pc, #552]	; (80050a8 <__ieee754_pow+0x328>)
 8004e80:	429e      	cmp	r6, r3
 8004e82:	d108      	bne.n	8004e96 <__ieee754_pow+0x116>
 8004e84:	f1b9 0f00 	cmp.w	r9, #0
 8004e88:	f280 8428 	bge.w	80056dc <__ieee754_pow+0x95c>
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4623      	mov	r3, r4
 8004e90:	2000      	movs	r0, #0
 8004e92:	4985      	ldr	r1, [pc, #532]	; (80050a8 <__ieee754_pow+0x328>)
 8004e94:	e03e      	b.n	8004f14 <__ieee754_pow+0x194>
 8004e96:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004e9a:	d105      	bne.n	8004ea8 <__ieee754_pow+0x128>
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	f000 bc11 	b.w	80056ca <__ieee754_pow+0x94a>
 8004ea8:	4b80      	ldr	r3, [pc, #512]	; (80050ac <__ieee754_pow+0x32c>)
 8004eaa:	4599      	cmp	r9, r3
 8004eac:	d10b      	bne.n	8004ec6 <__ieee754_pow+0x146>
 8004eae:	f1b8 0f00 	cmp.w	r8, #0
 8004eb2:	db08      	blt.n	8004ec6 <__ieee754_pow+0x146>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	b011      	add	sp, #68	; 0x44
 8004eba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebe:	f000 bc53 	b.w	8005768 <__ieee754_sqrt>
 8004ec2:	f04f 0b00 	mov.w	fp, #0
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f000 fcf7 	bl	80058bc <fabs>
 8004ece:	f1ba 0f00 	cmp.w	sl, #0
 8004ed2:	d12a      	bne.n	8004f2a <__ieee754_pow+0x1aa>
 8004ed4:	b125      	cbz	r5, 8004ee0 <__ieee754_pow+0x160>
 8004ed6:	4b74      	ldr	r3, [pc, #464]	; (80050a8 <__ieee754_pow+0x328>)
 8004ed8:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d124      	bne.n	8004f2a <__ieee754_pow+0x1aa>
 8004ee0:	f1b9 0f00 	cmp.w	r9, #0
 8004ee4:	da05      	bge.n	8004ef2 <__ieee754_pow+0x172>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	2000      	movs	r0, #0
 8004eec:	496e      	ldr	r1, [pc, #440]	; (80050a8 <__ieee754_pow+0x328>)
 8004eee:	f7fb fca1 	bl	8000834 <__aeabi_ddiv>
 8004ef2:	f1b8 0f00 	cmp.w	r8, #0
 8004ef6:	f280 83f4 	bge.w	80056e2 <__ieee754_pow+0x962>
 8004efa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004efe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004f02:	ea55 030b 	orrs.w	r3, r5, fp
 8004f06:	d108      	bne.n	8004f1a <__ieee754_pow+0x19a>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	f7fb f9b4 	bl	8000278 <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	f7fb fc8e 	bl	8000834 <__aeabi_ddiv>
 8004f18:	e3e3      	b.n	80056e2 <__ieee754_pow+0x962>
 8004f1a:	f1bb 0f01 	cmp.w	fp, #1
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f040 83e6 	bne.w	80056f0 <__ieee754_pow+0x970>
 8004f24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004f28:	e3e2      	b.n	80056f0 <__ieee754_pow+0x970>
 8004f2a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8004f2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8004f32:	930d      	str	r3, [sp, #52]	; 0x34
 8004f34:	ea5b 0303 	orrs.w	r3, fp, r3
 8004f38:	d104      	bne.n	8004f44 <__ieee754_pow+0x1c4>
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	4638      	mov	r0, r7
 8004f40:	4621      	mov	r1, r4
 8004f42:	e7e3      	b.n	8004f0c <__ieee754_pow+0x18c>
 8004f44:	4b5a      	ldr	r3, [pc, #360]	; (80050b0 <__ieee754_pow+0x330>)
 8004f46:	429e      	cmp	r6, r3
 8004f48:	dd6d      	ble.n	8005026 <__ieee754_pow+0x2a6>
 8004f4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004f4e:	429e      	cmp	r6, r3
 8004f50:	dd0b      	ble.n	8004f6a <__ieee754_pow+0x1ea>
 8004f52:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <__ieee754_pow+0x324>)
 8004f54:	429d      	cmp	r5, r3
 8004f56:	dc0e      	bgt.n	8004f76 <__ieee754_pow+0x1f6>
 8004f58:	f1b9 0f00 	cmp.w	r9, #0
 8004f5c:	da81      	bge.n	8004e62 <__ieee754_pow+0xe2>
 8004f5e:	a344      	add	r3, pc, #272	; (adr r3, 8005070 <__ieee754_pow+0x2f0>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	e3af      	b.n	80056ca <__ieee754_pow+0x94a>
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <__ieee754_pow+0x334>)
 8004f6c:	429d      	cmp	r5, r3
 8004f6e:	ddf3      	ble.n	8004f58 <__ieee754_pow+0x1d8>
 8004f70:	4b4d      	ldr	r3, [pc, #308]	; (80050a8 <__ieee754_pow+0x328>)
 8004f72:	429d      	cmp	r5, r3
 8004f74:	dd03      	ble.n	8004f7e <__ieee754_pow+0x1fe>
 8004f76:	f1b9 0f00 	cmp.w	r9, #0
 8004f7a:	dcf0      	bgt.n	8004f5e <__ieee754_pow+0x1de>
 8004f7c:	e771      	b.n	8004e62 <__ieee754_pow+0xe2>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4b49      	ldr	r3, [pc, #292]	; (80050a8 <__ieee754_pow+0x328>)
 8004f82:	f7fb f979 	bl	8000278 <__aeabi_dsub>
 8004f86:	a33c      	add	r3, pc, #240	; (adr r3, 8005078 <__ieee754_pow+0x2f8>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	f7fb fb26 	bl	80005e0 <__aeabi_dmul>
 8004f94:	a33a      	add	r3, pc, #232	; (adr r3, 8005080 <__ieee754_pow+0x300>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fb1d 	bl	80005e0 <__aeabi_dmul>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fac:	4b42      	ldr	r3, [pc, #264]	; (80050b8 <__ieee754_pow+0x338>)
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f7fb fb15 	bl	80005e0 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	a133      	add	r1, pc, #204	; (adr r1, 8005088 <__ieee754_pow+0x308>)
 8004fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fc0:	f7fb f95a 	bl	8000278 <__aeabi_dsub>
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	f7fb fb0a 	bl	80005e0 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	4936      	ldr	r1, [pc, #216]	; (80050ac <__ieee754_pow+0x32c>)
 8004fd4:	f7fb f950 	bl	8000278 <__aeabi_dsub>
 8004fd8:	4622      	mov	r2, r4
 8004fda:	462b      	mov	r3, r5
 8004fdc:	4680      	mov	r8, r0
 8004fde:	4689      	mov	r9, r1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb fafc 	bl	80005e0 <__aeabi_dmul>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb faf6 	bl	80005e0 <__aeabi_dmul>
 8004ff4:	a326      	add	r3, pc, #152	; (adr r3, 8005090 <__ieee754_pow+0x310>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb faf1 	bl	80005e0 <__aeabi_dmul>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005006:	f7fb f937 	bl	8000278 <__aeabi_dsub>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4604      	mov	r4, r0
 8005010:	460d      	mov	r5, r1
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb f931 	bl	800027c <__adddf3>
 800501a:	2000      	movs	r0, #0
 800501c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005020:	4632      	mov	r2, r6
 8005022:	463b      	mov	r3, r7
 8005024:	e1a7      	b.n	8005376 <__ieee754_pow+0x5f6>
 8005026:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	da05      	bge.n	800503c <__ieee754_pow+0x2bc>
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <__ieee754_pow+0x33c>)
 8005032:	f7fb fad5 	bl	80005e0 <__aeabi_dmul>
 8005036:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800503a:	460d      	mov	r5, r1
 800503c:	152b      	asrs	r3, r5, #20
 800503e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005042:	4413      	add	r3, r2
 8005044:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <__ieee754_pow+0x340>)
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800504c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8005050:	4293      	cmp	r3, r2
 8005052:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005056:	dd07      	ble.n	8005068 <__ieee754_pow+0x2e8>
 8005058:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <__ieee754_pow+0x344>)
 800505a:	4293      	cmp	r3, r2
 800505c:	dd34      	ble.n	80050c8 <__ieee754_pow+0x348>
 800505e:	9b07      	ldr	r3, [sp, #28]
 8005060:	3301      	adds	r3, #1
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005068:	f04f 0a00 	mov.w	sl, #0
 800506c:	e02e      	b.n	80050cc <__ieee754_pow+0x34c>
 800506e:	bf00      	nop
 8005070:	8800759c 	.word	0x8800759c
 8005074:	7e37e43c 	.word	0x7e37e43c
 8005078:	60000000 	.word	0x60000000
 800507c:	3ff71547 	.word	0x3ff71547
 8005080:	f85ddf44 	.word	0xf85ddf44
 8005084:	3e54ae0b 	.word	0x3e54ae0b
 8005088:	55555555 	.word	0x55555555
 800508c:	3fd55555 	.word	0x3fd55555
 8005090:	652b82fe 	.word	0x652b82fe
 8005094:	3ff71547 	.word	0x3ff71547
 8005098:	7ff00000 	.word	0x7ff00000
 800509c:	08005bb3 	.word	0x08005bb3
 80050a0:	433fffff 	.word	0x433fffff
 80050a4:	3fefffff 	.word	0x3fefffff
 80050a8:	3ff00000 	.word	0x3ff00000
 80050ac:	3fe00000 	.word	0x3fe00000
 80050b0:	41e00000 	.word	0x41e00000
 80050b4:	3feffffe 	.word	0x3feffffe
 80050b8:	3fd00000 	.word	0x3fd00000
 80050bc:	43400000 	.word	0x43400000
 80050c0:	0003988e 	.word	0x0003988e
 80050c4:	000bb679 	.word	0x000bb679
 80050c8:	f04f 0a01 	mov.w	sl, #1
 80050cc:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80050d0:	930c      	str	r3, [sp, #48]	; 0x30
 80050d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050d4:	4bd0      	ldr	r3, [pc, #832]	; (8005418 <__ieee754_pow+0x698>)
 80050d6:	4413      	add	r3, r2
 80050d8:	cb18      	ldmia	r3, {r3, r4}
 80050da:	4629      	mov	r1, r5
 80050dc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80050e0:	461a      	mov	r2, r3
 80050e2:	4623      	mov	r3, r4
 80050e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050e8:	f7fb f8c6 	bl	8000278 <__aeabi_dsub>
 80050ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050f0:	4606      	mov	r6, r0
 80050f2:	460f      	mov	r7, r1
 80050f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80050f8:	f7fb f8c0 	bl	800027c <__adddf3>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	2000      	movs	r0, #0
 8005102:	49c6      	ldr	r1, [pc, #792]	; (800541c <__ieee754_pow+0x69c>)
 8005104:	f7fb fb96 	bl	8000834 <__aeabi_ddiv>
 8005108:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb fa64 	bl	80005e0 <__aeabi_dmul>
 8005118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800511c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005120:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005124:	2300      	movs	r3, #0
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800512c:	106d      	asrs	r5, r5, #1
 800512e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005132:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005136:	2200      	movs	r2, #0
 8005138:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800513c:	4640      	mov	r0, r8
 800513e:	4649      	mov	r1, r9
 8005140:	4614      	mov	r4, r2
 8005142:	461d      	mov	r5, r3
 8005144:	f7fb fa4c 	bl	80005e0 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4630      	mov	r0, r6
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb f892 	bl	8000278 <__aeabi_dsub>
 8005154:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f88a 	bl	8000278 <__aeabi_dsub>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800516c:	f7fb f884 	bl	8000278 <__aeabi_dsub>
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	f7fb fa34 	bl	80005e0 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb f87a 	bl	8000278 <__aeabi_dsub>
 8005184:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005188:	f7fb fa2a 	bl	80005e0 <__aeabi_dmul>
 800518c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005190:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	f7fb fa22 	bl	80005e0 <__aeabi_dmul>
 800519c:	a38c      	add	r3, pc, #560	; (adr r3, 80053d0 <__ieee754_pow+0x650>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	4604      	mov	r4, r0
 80051a4:	460d      	mov	r5, r1
 80051a6:	f7fb fa1b 	bl	80005e0 <__aeabi_dmul>
 80051aa:	a38b      	add	r3, pc, #556	; (adr r3, 80053d8 <__ieee754_pow+0x658>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb f864 	bl	800027c <__adddf3>
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	f7fb fa12 	bl	80005e0 <__aeabi_dmul>
 80051bc:	a388      	add	r3, pc, #544	; (adr r3, 80053e0 <__ieee754_pow+0x660>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb f85b 	bl	800027c <__adddf3>
 80051c6:	4622      	mov	r2, r4
 80051c8:	462b      	mov	r3, r5
 80051ca:	f7fb fa09 	bl	80005e0 <__aeabi_dmul>
 80051ce:	a386      	add	r3, pc, #536	; (adr r3, 80053e8 <__ieee754_pow+0x668>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f852 	bl	800027c <__adddf3>
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	f7fb fa00 	bl	80005e0 <__aeabi_dmul>
 80051e0:	a383      	add	r3, pc, #524	; (adr r3, 80053f0 <__ieee754_pow+0x670>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fb f849 	bl	800027c <__adddf3>
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f7fb f9f7 	bl	80005e0 <__aeabi_dmul>
 80051f2:	a381      	add	r3, pc, #516	; (adr r3, 80053f8 <__ieee754_pow+0x678>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f840 	bl	800027c <__adddf3>
 80051fc:	4622      	mov	r2, r4
 80051fe:	4606      	mov	r6, r0
 8005200:	460f      	mov	r7, r1
 8005202:	462b      	mov	r3, r5
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb f9ea 	bl	80005e0 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb f9e4 	bl	80005e0 <__aeabi_dmul>
 8005218:	4642      	mov	r2, r8
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	464b      	mov	r3, r9
 8005220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005224:	f7fb f82a 	bl	800027c <__adddf3>
 8005228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800522c:	f7fb f9d8 	bl	80005e0 <__aeabi_dmul>
 8005230:	4622      	mov	r2, r4
 8005232:	462b      	mov	r3, r5
 8005234:	f7fb f822 	bl	800027c <__adddf3>
 8005238:	4642      	mov	r2, r8
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	464b      	mov	r3, r9
 8005240:	4640      	mov	r0, r8
 8005242:	4649      	mov	r1, r9
 8005244:	f7fb f9cc 	bl	80005e0 <__aeabi_dmul>
 8005248:	2200      	movs	r2, #0
 800524a:	4b75      	ldr	r3, [pc, #468]	; (8005420 <__ieee754_pow+0x6a0>)
 800524c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005250:	f7fb f814 	bl	800027c <__adddf3>
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	f7fb f810 	bl	800027c <__adddf3>
 800525c:	9802      	ldr	r0, [sp, #8]
 800525e:	460d      	mov	r5, r1
 8005260:	4604      	mov	r4, r0
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4640      	mov	r0, r8
 8005268:	4649      	mov	r1, r9
 800526a:	f7fb f9b9 	bl	80005e0 <__aeabi_dmul>
 800526e:	2200      	movs	r2, #0
 8005270:	4680      	mov	r8, r0
 8005272:	4689      	mov	r9, r1
 8005274:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <__ieee754_pow+0x6a0>)
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fa fffd 	bl	8000278 <__aeabi_dsub>
 800527e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005282:	f7fa fff9 	bl	8000278 <__aeabi_dsub>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fa fff3 	bl	8000278 <__aeabi_dsub>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	f7fb f9a3 	bl	80005e0 <__aeabi_dmul>
 800529a:	4622      	mov	r2, r4
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	462b      	mov	r3, r5
 80052a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052a6:	f7fb f99b 	bl	80005e0 <__aeabi_dmul>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fa ffe3 	bl	800027c <__adddf3>
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fa ffdb 	bl	800027c <__adddf3>
 80052c6:	9802      	ldr	r0, [sp, #8]
 80052c8:	a34d      	add	r3, pc, #308	; (adr r3, 8005400 <__ieee754_pow+0x680>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	f7fb f985 	bl	80005e0 <__aeabi_dmul>
 80052d6:	4642      	mov	r2, r8
 80052d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052dc:	464b      	mov	r3, r9
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fa ffc9 	bl	8000278 <__aeabi_dsub>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fa ffc3 	bl	8000278 <__aeabi_dsub>
 80052f2:	a345      	add	r3, pc, #276	; (adr r3, 8005408 <__ieee754_pow+0x688>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f7fb f972 	bl	80005e0 <__aeabi_dmul>
 80052fc:	a344      	add	r3, pc, #272	; (adr r3, 8005410 <__ieee754_pow+0x690>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	4606      	mov	r6, r0
 8005304:	460f      	mov	r7, r1
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	f7fb f969 	bl	80005e0 <__aeabi_dmul>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4630      	mov	r0, r6
 8005314:	4639      	mov	r1, r7
 8005316:	f7fa ffb1 	bl	800027c <__adddf3>
 800531a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800531c:	4b41      	ldr	r3, [pc, #260]	; (8005424 <__ieee754_pow+0x6a4>)
 800531e:	4413      	add	r3, r2
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ffaa 	bl	800027c <__adddf3>
 8005328:	4604      	mov	r4, r0
 800532a:	9807      	ldr	r0, [sp, #28]
 800532c:	460d      	mov	r5, r1
 800532e:	f7fb f8f1 	bl	8000514 <__aeabi_i2d>
 8005332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <__ieee754_pow+0x6a8>)
 8005336:	4413      	add	r3, r2
 8005338:	e9d3 8900 	ldrd	r8, r9, [r3]
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005348:	f7fa ff98 	bl	800027c <__adddf3>
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	f7fa ff94 	bl	800027c <__adddf3>
 8005354:	4632      	mov	r2, r6
 8005356:	463b      	mov	r3, r7
 8005358:	f7fa ff90 	bl	800027c <__adddf3>
 800535c:	9802      	ldr	r0, [sp, #8]
 800535e:	4632      	mov	r2, r6
 8005360:	463b      	mov	r3, r7
 8005362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005366:	f7fa ff87 	bl	8000278 <__aeabi_dsub>
 800536a:	4642      	mov	r2, r8
 800536c:	464b      	mov	r3, r9
 800536e:	f7fa ff83 	bl	8000278 <__aeabi_dsub>
 8005372:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005376:	f7fa ff7f 	bl	8000278 <__aeabi_dsub>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fa ff79 	bl	8000278 <__aeabi_dsub>
 8005386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005388:	f10b 33ff 	add.w	r3, fp, #4294967295
 800538c:	4313      	orrs	r3, r2
 800538e:	bf0c      	ite	eq
 8005390:	4c26      	ldreq	r4, [pc, #152]	; (800542c <__ieee754_pow+0x6ac>)
 8005392:	4c22      	ldrne	r4, [pc, #136]	; (800541c <__ieee754_pow+0x69c>)
 8005394:	2300      	movs	r3, #0
 8005396:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800539a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800539e:	2400      	movs	r4, #0
 80053a0:	4606      	mov	r6, r0
 80053a2:	460f      	mov	r7, r1
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ac:	f7fa ff64 	bl	8000278 <__aeabi_dsub>
 80053b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b4:	f7fb f914 	bl	80005e0 <__aeabi_dmul>
 80053b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053bc:	4680      	mov	r8, r0
 80053be:	4689      	mov	r9, r1
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fb f90c 	bl	80005e0 <__aeabi_dmul>
 80053c8:	e032      	b.n	8005430 <__ieee754_pow+0x6b0>
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w
 80053d0:	4a454eef 	.word	0x4a454eef
 80053d4:	3fca7e28 	.word	0x3fca7e28
 80053d8:	93c9db65 	.word	0x93c9db65
 80053dc:	3fcd864a 	.word	0x3fcd864a
 80053e0:	a91d4101 	.word	0xa91d4101
 80053e4:	3fd17460 	.word	0x3fd17460
 80053e8:	518f264d 	.word	0x518f264d
 80053ec:	3fd55555 	.word	0x3fd55555
 80053f0:	db6fabff 	.word	0xdb6fabff
 80053f4:	3fdb6db6 	.word	0x3fdb6db6
 80053f8:	33333303 	.word	0x33333303
 80053fc:	3fe33333 	.word	0x3fe33333
 8005400:	e0000000 	.word	0xe0000000
 8005404:	3feec709 	.word	0x3feec709
 8005408:	dc3a03fd 	.word	0xdc3a03fd
 800540c:	3feec709 	.word	0x3feec709
 8005410:	145b01f5 	.word	0x145b01f5
 8005414:	be3e2fe0 	.word	0xbe3e2fe0
 8005418:	08005c10 	.word	0x08005c10
 800541c:	3ff00000 	.word	0x3ff00000
 8005420:	40080000 	.word	0x40080000
 8005424:	08005c00 	.word	0x08005c00
 8005428:	08005bf0 	.word	0x08005bf0
 800542c:	bff00000 	.word	0xbff00000
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fa ff20 	bl	800027c <__adddf3>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	4680      	mov	r8, r0
 8005442:	4689      	mov	r9, r1
 8005444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005448:	f7fb f8ca 	bl	80005e0 <__aeabi_dmul>
 800544c:	460b      	mov	r3, r1
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	4602      	mov	r2, r0
 8005454:	4649      	mov	r1, r9
 8005456:	4640      	mov	r0, r8
 8005458:	e9cd 4500 	strd	r4, r5, [sp]
 800545c:	f7fa ff0e 	bl	800027c <__adddf3>
 8005460:	4bbb      	ldr	r3, [pc, #748]	; (8005750 <__ieee754_pow+0x9d0>)
 8005462:	4299      	cmp	r1, r3
 8005464:	4682      	mov	sl, r0
 8005466:	460f      	mov	r7, r1
 8005468:	460e      	mov	r6, r1
 800546a:	dd26      	ble.n	80054ba <__ieee754_pow+0x73a>
 800546c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005470:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005474:	4303      	orrs	r3, r0
 8005476:	d115      	bne.n	80054a4 <__ieee754_pow+0x724>
 8005478:	a39f      	add	r3, pc, #636	; (adr r3, 80056f8 <__ieee754_pow+0x978>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fa fefb 	bl	800027c <__adddf3>
 8005486:	4622      	mov	r2, r4
 8005488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548c:	462b      	mov	r3, r5
 800548e:	4650      	mov	r0, sl
 8005490:	4639      	mov	r1, r7
 8005492:	f7fa fef1 	bl	8000278 <__aeabi_dsub>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800549e:	f7fb fb2f 	bl	8000b00 <__aeabi_dcmpgt>
 80054a2:	b348      	cbz	r0, 80054f8 <__ieee754_pow+0x778>
 80054a4:	a396      	add	r3, pc, #600	; (adr r3, 8005700 <__ieee754_pow+0x980>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ae:	f7fb f897 	bl	80005e0 <__aeabi_dmul>
 80054b2:	a393      	add	r3, pc, #588	; (adr r3, 8005700 <__ieee754_pow+0x980>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	e107      	b.n	80056ca <__ieee754_pow+0x94a>
 80054ba:	4ba6      	ldr	r3, [pc, #664]	; (8005754 <__ieee754_pow+0x9d4>)
 80054bc:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80054c0:	429f      	cmp	r7, r3
 80054c2:	dd19      	ble.n	80054f8 <__ieee754_pow+0x778>
 80054c4:	4ba4      	ldr	r3, [pc, #656]	; (8005758 <__ieee754_pow+0x9d8>)
 80054c6:	440b      	add	r3, r1
 80054c8:	4303      	orrs	r3, r0
 80054ca:	d10a      	bne.n	80054e2 <__ieee754_pow+0x762>
 80054cc:	4622      	mov	r2, r4
 80054ce:	462b      	mov	r3, r5
 80054d0:	f7fa fed2 	bl	8000278 <__aeabi_dsub>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4640      	mov	r0, r8
 80054da:	4649      	mov	r1, r9
 80054dc:	f7fb fafc 	bl	8000ad8 <__aeabi_dcmple>
 80054e0:	b150      	cbz	r0, 80054f8 <__ieee754_pow+0x778>
 80054e2:	a389      	add	r3, pc, #548	; (adr r3, 8005708 <__ieee754_pow+0x988>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ec:	f7fb f878 	bl	80005e0 <__aeabi_dmul>
 80054f0:	a385      	add	r3, pc, #532	; (adr r3, 8005708 <__ieee754_pow+0x988>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	e0e8      	b.n	80056ca <__ieee754_pow+0x94a>
 80054f8:	4a98      	ldr	r2, [pc, #608]	; (800575c <__ieee754_pow+0x9dc>)
 80054fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80054fe:	4293      	cmp	r3, r2
 8005500:	dd25      	ble.n	800554e <__ieee754_pow+0x7ce>
 8005502:	151b      	asrs	r3, r3, #20
 8005504:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005508:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800550c:	fa4a f303 	asr.w	r3, sl, r3
 8005510:	4433      	add	r3, r6
 8005512:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005516:	4f92      	ldr	r7, [pc, #584]	; (8005760 <__ieee754_pow+0x9e0>)
 8005518:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800551c:	4117      	asrs	r7, r2
 800551e:	ea23 0107 	bic.w	r1, r3, r7
 8005522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005526:	ea43 030a 	orr.w	r3, r3, sl
 800552a:	2000      	movs	r0, #0
 800552c:	f1c2 0a14 	rsb	sl, r2, #20
 8005530:	fa43 fa0a 	asr.w	sl, r3, sl
 8005534:	2e00      	cmp	r6, #0
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	bfb8      	it	lt
 8005540:	f1ca 0a00 	rsblt	sl, sl, #0
 8005544:	f7fa fe98 	bl	8000278 <__aeabi_dsub>
 8005548:	e9cd 0100 	strd	r0, r1, [sp]
 800554c:	e001      	b.n	8005552 <__ieee754_pow+0x7d2>
 800554e:	f04f 0a00 	mov.w	sl, #0
 8005552:	4642      	mov	r2, r8
 8005554:	464b      	mov	r3, r9
 8005556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555a:	f7fa fe8f 	bl	800027c <__adddf3>
 800555e:	2000      	movs	r0, #0
 8005560:	a36b      	add	r3, pc, #428	; (adr r3, 8005710 <__ieee754_pow+0x990>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	4604      	mov	r4, r0
 8005568:	460d      	mov	r5, r1
 800556a:	f7fb f839 	bl	80005e0 <__aeabi_dmul>
 800556e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005572:	4606      	mov	r6, r0
 8005574:	460f      	mov	r7, r1
 8005576:	4620      	mov	r0, r4
 8005578:	4629      	mov	r1, r5
 800557a:	f7fa fe7d 	bl	8000278 <__aeabi_dsub>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fa fe77 	bl	8000278 <__aeabi_dsub>
 800558a:	a363      	add	r3, pc, #396	; (adr r3, 8005718 <__ieee754_pow+0x998>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fb f826 	bl	80005e0 <__aeabi_dmul>
 8005594:	a362      	add	r3, pc, #392	; (adr r3, 8005720 <__ieee754_pow+0x9a0>)
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	4680      	mov	r8, r0
 800559c:	4689      	mov	r9, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fb f81d 	bl	80005e0 <__aeabi_dmul>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fa fe65 	bl	800027c <__adddf3>
 80055b2:	4604      	mov	r4, r0
 80055b4:	460d      	mov	r5, r1
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	f7fa fe5d 	bl	800027c <__adddf3>
 80055c2:	4632      	mov	r2, r6
 80055c4:	463b      	mov	r3, r7
 80055c6:	4680      	mov	r8, r0
 80055c8:	4689      	mov	r9, r1
 80055ca:	f7fa fe55 	bl	8000278 <__aeabi_dsub>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f7fa fe4f 	bl	8000278 <__aeabi_dsub>
 80055da:	4642      	mov	r2, r8
 80055dc:	4606      	mov	r6, r0
 80055de:	460f      	mov	r7, r1
 80055e0:	464b      	mov	r3, r9
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fffb 	bl	80005e0 <__aeabi_dmul>
 80055ea:	a34f      	add	r3, pc, #316	; (adr r3, 8005728 <__ieee754_pow+0x9a8>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	f7fa fff4 	bl	80005e0 <__aeabi_dmul>
 80055f8:	a34d      	add	r3, pc, #308	; (adr r3, 8005730 <__ieee754_pow+0x9b0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fe3b 	bl	8000278 <__aeabi_dsub>
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	f7fa ffeb 	bl	80005e0 <__aeabi_dmul>
 800560a:	a34b      	add	r3, pc, #300	; (adr r3, 8005738 <__ieee754_pow+0x9b8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fe34 	bl	800027c <__adddf3>
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	f7fa ffe2 	bl	80005e0 <__aeabi_dmul>
 800561c:	a348      	add	r3, pc, #288	; (adr r3, 8005740 <__ieee754_pow+0x9c0>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fe29 	bl	8000278 <__aeabi_dsub>
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	f7fa ffd9 	bl	80005e0 <__aeabi_dmul>
 800562e:	a346      	add	r3, pc, #280	; (adr r3, 8005748 <__ieee754_pow+0x9c8>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa fe22 	bl	800027c <__adddf3>
 8005638:	4622      	mov	r2, r4
 800563a:	462b      	mov	r3, r5
 800563c:	f7fa ffd0 	bl	80005e0 <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fa fe16 	bl	8000278 <__aeabi_dsub>
 800564c:	4604      	mov	r4, r0
 800564e:	460d      	mov	r5, r1
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4640      	mov	r0, r8
 8005656:	4649      	mov	r1, r9
 8005658:	f7fa ffc2 	bl	80005e0 <__aeabi_dmul>
 800565c:	2200      	movs	r2, #0
 800565e:	e9cd 0100 	strd	r0, r1, [sp]
 8005662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fe05 	bl	8000278 <__aeabi_dsub>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005676:	f7fb f8dd 	bl	8000834 <__aeabi_ddiv>
 800567a:	4632      	mov	r2, r6
 800567c:	4604      	mov	r4, r0
 800567e:	460d      	mov	r5, r1
 8005680:	463b      	mov	r3, r7
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	f7fa ffab 	bl	80005e0 <__aeabi_dmul>
 800568a:	4632      	mov	r2, r6
 800568c:	463b      	mov	r3, r7
 800568e:	f7fa fdf5 	bl	800027c <__adddf3>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fded 	bl	8000278 <__aeabi_dsub>
 800569e:	4642      	mov	r2, r8
 80056a0:	464b      	mov	r3, r9
 80056a2:	f7fa fde9 	bl	8000278 <__aeabi_dsub>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	2000      	movs	r0, #0
 80056ac:	492d      	ldr	r1, [pc, #180]	; (8005764 <__ieee754_pow+0x9e4>)
 80056ae:	f7fa fde3 	bl	8000278 <__aeabi_dsub>
 80056b2:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80056b6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80056ba:	da03      	bge.n	80056c4 <__ieee754_pow+0x944>
 80056bc:	4652      	mov	r2, sl
 80056be:	f000 f99b 	bl	80059f8 <scalbn>
 80056c2:	e000      	b.n	80056c6 <__ieee754_pow+0x946>
 80056c4:	4621      	mov	r1, r4
 80056c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ca:	f7fa ff89 	bl	80005e0 <__aeabi_dmul>
 80056ce:	e008      	b.n	80056e2 <__ieee754_pow+0x962>
 80056d0:	4603      	mov	r3, r0
 80056d2:	4924      	ldr	r1, [pc, #144]	; (8005764 <__ieee754_pow+0x9e4>)
 80056d4:	e00c      	b.n	80056f0 <__ieee754_pow+0x970>
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	9901      	ldr	r1, [sp, #4]
 80056da:	e009      	b.n	80056f0 <__ieee754_pow+0x970>
 80056dc:	463b      	mov	r3, r7
 80056de:	4621      	mov	r1, r4
 80056e0:	e006      	b.n	80056f0 <__ieee754_pow+0x970>
 80056e2:	4603      	mov	r3, r0
 80056e4:	e004      	b.n	80056f0 <__ieee754_pow+0x970>
 80056e6:	42ae      	cmp	r6, r5
 80056e8:	f73f ab71 	bgt.w	8004dce <__ieee754_pow+0x4e>
 80056ec:	f7ff bb64 	b.w	8004db8 <__ieee754_pow+0x38>
 80056f0:	4618      	mov	r0, r3
 80056f2:	b011      	add	sp, #68	; 0x44
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	652b82fe 	.word	0x652b82fe
 80056fc:	3c971547 	.word	0x3c971547
 8005700:	8800759c 	.word	0x8800759c
 8005704:	7e37e43c 	.word	0x7e37e43c
 8005708:	c2f8f359 	.word	0xc2f8f359
 800570c:	01a56e1f 	.word	0x01a56e1f
 8005710:	00000000 	.word	0x00000000
 8005714:	3fe62e43 	.word	0x3fe62e43
 8005718:	fefa39ef 	.word	0xfefa39ef
 800571c:	3fe62e42 	.word	0x3fe62e42
 8005720:	0ca86c39 	.word	0x0ca86c39
 8005724:	be205c61 	.word	0xbe205c61
 8005728:	72bea4d0 	.word	0x72bea4d0
 800572c:	3e663769 	.word	0x3e663769
 8005730:	c5d26bf1 	.word	0xc5d26bf1
 8005734:	3ebbbd41 	.word	0x3ebbbd41
 8005738:	af25de2c 	.word	0xaf25de2c
 800573c:	3f11566a 	.word	0x3f11566a
 8005740:	16bebd93 	.word	0x16bebd93
 8005744:	3f66c16c 	.word	0x3f66c16c
 8005748:	5555553e 	.word	0x5555553e
 800574c:	3fc55555 	.word	0x3fc55555
 8005750:	408fffff 	.word	0x408fffff
 8005754:	4090cbff 	.word	0x4090cbff
 8005758:	3f6f3400 	.word	0x3f6f3400
 800575c:	3fe00000 	.word	0x3fe00000
 8005760:	000fffff 	.word	0x000fffff
 8005764:	3ff00000 	.word	0x3ff00000

08005768 <__ieee754_sqrt>:
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	4f52      	ldr	r7, [pc, #328]	; (80058b8 <__ieee754_sqrt+0x150>)
 800576e:	f8df c148 	ldr.w	ip, [pc, #328]	; 80058b8 <__ieee754_sqrt+0x150>
 8005772:	400f      	ands	r7, r1
 8005774:	4567      	cmp	r7, ip
 8005776:	4606      	mov	r6, r0
 8005778:	460d      	mov	r5, r1
 800577a:	4686      	mov	lr, r0
 800577c:	460c      	mov	r4, r1
 800577e:	460b      	mov	r3, r1
 8005780:	4602      	mov	r2, r0
 8005782:	d108      	bne.n	8005796 <__ieee754_sqrt+0x2e>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	f7fa ff2a 	bl	80005e0 <__aeabi_dmul>
 800578c:	4632      	mov	r2, r6
 800578e:	462b      	mov	r3, r5
 8005790:	f7fa fd74 	bl	800027c <__adddf3>
 8005794:	e08d      	b.n	80058b2 <__ieee754_sqrt+0x14a>
 8005796:	2900      	cmp	r1, #0
 8005798:	dc0e      	bgt.n	80057b8 <__ieee754_sqrt+0x50>
 800579a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800579e:	4307      	orrs	r7, r0
 80057a0:	f000 8087 	beq.w	80058b2 <__ieee754_sqrt+0x14a>
 80057a4:	b141      	cbz	r1, 80057b8 <__ieee754_sqrt+0x50>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	f7fa fd65 	bl	8000278 <__aeabi_dsub>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	f7fb f83f 	bl	8000834 <__aeabi_ddiv>
 80057b6:	e07c      	b.n	80058b2 <__ieee754_sqrt+0x14a>
 80057b8:	1524      	asrs	r4, r4, #20
 80057ba:	d112      	bne.n	80057e2 <__ieee754_sqrt+0x7a>
 80057bc:	b91b      	cbnz	r3, 80057c6 <__ieee754_sqrt+0x5e>
 80057be:	0ad3      	lsrs	r3, r2, #11
 80057c0:	3c15      	subs	r4, #21
 80057c2:	0552      	lsls	r2, r2, #21
 80057c4:	e7fa      	b.n	80057bc <__ieee754_sqrt+0x54>
 80057c6:	2100      	movs	r1, #0
 80057c8:	02d8      	lsls	r0, r3, #11
 80057ca:	d402      	bmi.n	80057d2 <__ieee754_sqrt+0x6a>
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	3101      	adds	r1, #1
 80057d0:	e7fa      	b.n	80057c8 <__ieee754_sqrt+0x60>
 80057d2:	1e48      	subs	r0, r1, #1
 80057d4:	1a24      	subs	r4, r4, r0
 80057d6:	f1c1 0020 	rsb	r0, r1, #32
 80057da:	fa22 f000 	lsr.w	r0, r2, r0
 80057de:	4303      	orrs	r3, r0
 80057e0:	408a      	lsls	r2, r1
 80057e2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80057e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ea:	07e1      	lsls	r1, r4, #31
 80057ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f0:	bf42      	ittt	mi
 80057f2:	005b      	lslmi	r3, r3, #1
 80057f4:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 80057f8:	0052      	lslmi	r2, r2, #1
 80057fa:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80057fe:	f04f 0e00 	mov.w	lr, #0
 8005802:	440b      	add	r3, r1
 8005804:	0056      	lsls	r6, r2, #1
 8005806:	1064      	asrs	r4, r4, #1
 8005808:	2216      	movs	r2, #22
 800580a:	4677      	mov	r7, lr
 800580c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005810:	1878      	adds	r0, r7, r1
 8005812:	4298      	cmp	r0, r3
 8005814:	bfde      	ittt	le
 8005816:	1a1b      	suble	r3, r3, r0
 8005818:	1847      	addle	r7, r0, r1
 800581a:	448e      	addle	lr, r1
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	3a01      	subs	r2, #1
 8005820:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8005824:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005828:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800582c:	d1f0      	bne.n	8005810 <__ieee754_sqrt+0xa8>
 800582e:	2520      	movs	r5, #32
 8005830:	4694      	mov	ip, r2
 8005832:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005836:	429f      	cmp	r7, r3
 8005838:	eb01 000c 	add.w	r0, r1, ip
 800583c:	db02      	blt.n	8005844 <__ieee754_sqrt+0xdc>
 800583e:	d116      	bne.n	800586e <__ieee754_sqrt+0x106>
 8005840:	42b0      	cmp	r0, r6
 8005842:	d813      	bhi.n	800586c <__ieee754_sqrt+0x104>
 8005844:	2800      	cmp	r0, #0
 8005846:	eb00 0c01 	add.w	ip, r0, r1
 800584a:	da05      	bge.n	8005858 <__ieee754_sqrt+0xf0>
 800584c:	f1bc 0f00 	cmp.w	ip, #0
 8005850:	db02      	blt.n	8005858 <__ieee754_sqrt+0xf0>
 8005852:	f107 0801 	add.w	r8, r7, #1
 8005856:	e000      	b.n	800585a <__ieee754_sqrt+0xf2>
 8005858:	46b8      	mov	r8, r7
 800585a:	1bdb      	subs	r3, r3, r7
 800585c:	42b0      	cmp	r0, r6
 800585e:	bf88      	it	hi
 8005860:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005864:	1a36      	subs	r6, r6, r0
 8005866:	440a      	add	r2, r1
 8005868:	4647      	mov	r7, r8
 800586a:	e000      	b.n	800586e <__ieee754_sqrt+0x106>
 800586c:	463b      	mov	r3, r7
 800586e:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8005872:	3d01      	subs	r5, #1
 8005874:	4403      	add	r3, r0
 8005876:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800587a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800587e:	d1da      	bne.n	8005836 <__ieee754_sqrt+0xce>
 8005880:	4333      	orrs	r3, r6
 8005882:	d007      	beq.n	8005894 <__ieee754_sqrt+0x12c>
 8005884:	1c53      	adds	r3, r2, #1
 8005886:	bf13      	iteet	ne
 8005888:	f002 0301 	andne.w	r3, r2, #1
 800588c:	f10e 0e01 	addeq.w	lr, lr, #1
 8005890:	462a      	moveq	r2, r5
 8005892:	18d2      	addne	r2, r2, r3
 8005894:	ea4f 036e 	mov.w	r3, lr, asr #1
 8005898:	0852      	lsrs	r2, r2, #1
 800589a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800589e:	f01e 0f01 	tst.w	lr, #1
 80058a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80058a6:	bf18      	it	ne
 80058a8:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 80058ac:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 80058b0:	4610      	mov	r0, r2
 80058b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b6:	bf00      	nop
 80058b8:	7ff00000 	.word	0x7ff00000

080058bc <fabs>:
 80058bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80058c0:	4770      	bx	lr

080058c2 <finite>:
 80058c2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80058c6:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80058ca:	0fc0      	lsrs	r0, r0, #31
 80058cc:	4770      	bx	lr

080058ce <matherr>:
 80058ce:	2000      	movs	r0, #0
 80058d0:	4770      	bx	lr
	...

080058d4 <nan>:
 80058d4:	2000      	movs	r0, #0
 80058d6:	4901      	ldr	r1, [pc, #4]	; (80058dc <nan+0x8>)
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	7ff80000 	.word	0x7ff80000

080058e0 <rint>:
 80058e0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80058e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e6:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 80058ea:	f1be 0f13 	cmp.w	lr, #19
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4607      	mov	r7, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	4606      	mov	r6, r0
 80058f8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80058fc:	dc44      	bgt.n	8005988 <rint+0xa8>
 80058fe:	f1be 0f00 	cmp.w	lr, #0
 8005902:	da26      	bge.n	8005952 <rint+0x72>
 8005904:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005908:	4301      	orrs	r1, r0
 800590a:	d06d      	beq.n	80059e8 <rint+0x108>
 800590c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005910:	430f      	orrs	r7, r1
 8005912:	427b      	negs	r3, r7
 8005914:	431f      	orrs	r7, r3
 8005916:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <rint+0x110>)
 8005918:	0b3f      	lsrs	r7, r7, #12
 800591a:	0c64      	lsrs	r4, r4, #17
 800591c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8005920:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005924:	0464      	lsls	r4, r4, #17
 8005926:	ea47 0104 	orr.w	r1, r7, r4
 800592a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800592e:	4632      	mov	r2, r6
 8005930:	463b      	mov	r3, r7
 8005932:	f7fa fca3 	bl	800027c <__adddf3>
 8005936:	e9cd 0100 	strd	r0, r1, [sp]
 800593a:	4632      	mov	r2, r6
 800593c:	463b      	mov	r3, r7
 800593e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005942:	f7fa fc99 	bl	8000278 <__aeabi_dsub>
 8005946:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800594a:	4602      	mov	r2, r0
 800594c:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8005950:	e04a      	b.n	80059e8 <rint+0x108>
 8005952:	4928      	ldr	r1, [pc, #160]	; (80059f4 <rint+0x114>)
 8005954:	fa41 f10e 	asr.w	r1, r1, lr
 8005958:	ea03 0001 	and.w	r0, r3, r1
 800595c:	4310      	orrs	r0, r2
 800595e:	d043      	beq.n	80059e8 <rint+0x108>
 8005960:	084b      	lsrs	r3, r1, #1
 8005962:	ea04 0203 	and.w	r2, r4, r3
 8005966:	ea52 0607 	orrs.w	r6, r2, r7
 800596a:	d029      	beq.n	80059c0 <rint+0xe0>
 800596c:	ea24 0303 	bic.w	r3, r4, r3
 8005970:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005974:	f1be 0f13 	cmp.w	lr, #19
 8005978:	fa44 f40e 	asr.w	r4, r4, lr
 800597c:	bf0c      	ite	eq
 800597e:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005982:	2600      	movne	r6, #0
 8005984:	431c      	orrs	r4, r3
 8005986:	e01b      	b.n	80059c0 <rint+0xe0>
 8005988:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 800598c:	dd05      	ble.n	800599a <rint+0xba>
 800598e:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8005992:	d129      	bne.n	80059e8 <rint+0x108>
 8005994:	f7fa fc72 	bl	800027c <__adddf3>
 8005998:	e028      	b.n	80059ec <rint+0x10c>
 800599a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800599e:	f04f 31ff 	mov.w	r1, #4294967295
 80059a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80059a6:	4208      	tst	r0, r1
 80059a8:	d01e      	beq.n	80059e8 <rint+0x108>
 80059aa:	084b      	lsrs	r3, r1, #1
 80059ac:	4218      	tst	r0, r3
 80059ae:	bf1f      	itttt	ne
 80059b0:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80059b4:	ea20 0303 	bicne.w	r3, r0, r3
 80059b8:	fa46 fc0c 	asrne.w	ip, r6, ip
 80059bc:	ea4c 0603 	orrne.w	r6, ip, r3
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <rint+0x110>)
 80059c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80059c6:	4621      	mov	r1, r4
 80059c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059cc:	4630      	mov	r0, r6
 80059ce:	4622      	mov	r2, r4
 80059d0:	462b      	mov	r3, r5
 80059d2:	f7fa fc53 	bl	800027c <__adddf3>
 80059d6:	e9cd 0100 	strd	r0, r1, [sp]
 80059da:	4622      	mov	r2, r4
 80059dc:	462b      	mov	r3, r5
 80059de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e2:	f7fa fc49 	bl	8000278 <__aeabi_dsub>
 80059e6:	e001      	b.n	80059ec <rint+0x10c>
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	b003      	add	sp, #12
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f0:	08005c20 	.word	0x08005c20
 80059f4:	000fffff 	.word	0x000fffff

080059f8 <scalbn>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	4616      	mov	r6, r2
 80059fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a00:	4604      	mov	r4, r0
 8005a02:	460d      	mov	r5, r1
 8005a04:	460b      	mov	r3, r1
 8005a06:	b98a      	cbnz	r2, 8005a2c <scalbn+0x34>
 8005a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a0c:	4303      	orrs	r3, r0
 8005a0e:	d050      	beq.n	8005ab2 <scalbn+0xba>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <scalbn+0xd0>)
 8005a14:	f7fa fde4 	bl	80005e0 <__aeabi_dmul>
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <scalbn+0xd4>)
 8005a1a:	4296      	cmp	r6, r2
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	460b      	mov	r3, r1
 8005a22:	db34      	blt.n	8005a8e <scalbn+0x96>
 8005a24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a28:	3a36      	subs	r2, #54	; 0x36
 8005a2a:	e008      	b.n	8005a3e <scalbn+0x46>
 8005a2c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005a30:	42ba      	cmp	r2, r7
 8005a32:	d104      	bne.n	8005a3e <scalbn+0x46>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	f7fa fc20 	bl	800027c <__adddf3>
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3e:	4432      	add	r2, r6
 8005a40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a44:	428a      	cmp	r2, r1
 8005a46:	dd02      	ble.n	8005a4e <scalbn+0x56>
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	e011      	b.n	8005a72 <scalbn+0x7a>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	dd06      	ble.n	8005a60 <scalbn+0x68>
 8005a52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a5e:	e028      	b.n	8005ab2 <scalbn+0xba>
 8005a60:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005a64:	da17      	bge.n	8005a96 <scalbn+0x9e>
 8005a66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	462b      	mov	r3, r5
 8005a70:	dd08      	ble.n	8005a84 <scalbn+0x8c>
 8005a72:	a111      	add	r1, pc, #68	; (adr r1, 8005ab8 <scalbn+0xc0>)
 8005a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a78:	f000 f82c 	bl	8005ad4 <copysign>
 8005a7c:	a30e      	add	r3, pc, #56	; (adr r3, 8005ab8 <scalbn+0xc0>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	e013      	b.n	8005aac <scalbn+0xb4>
 8005a84:	a10e      	add	r1, pc, #56	; (adr r1, 8005ac0 <scalbn+0xc8>)
 8005a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a8a:	f000 f823 	bl	8005ad4 <copysign>
 8005a8e:	a30c      	add	r3, pc, #48	; (adr r3, 8005ac0 <scalbn+0xc8>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	e00a      	b.n	8005aac <scalbn+0xb4>
 8005a96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a9a:	3236      	adds	r2, #54	; 0x36
 8005a9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005aa0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <scalbn+0xd8>)
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fd98 	bl	80005e0 <__aeabi_dmul>
 8005ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab8:	8800759c 	.word	0x8800759c
 8005abc:	7e37e43c 	.word	0x7e37e43c
 8005ac0:	c2f8f359 	.word	0xc2f8f359
 8005ac4:	01a56e1f 	.word	0x01a56e1f
 8005ac8:	43500000 	.word	0x43500000
 8005acc:	ffff3cb0 	.word	0xffff3cb0
 8005ad0:	3c900000 	.word	0x3c900000

08005ad4 <copysign>:
 8005ad4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	ea42 0103 	orr.w	r1, r2, r3
 8005ae0:	4770      	bx	lr
	...

08005ae4 <__errno>:
 8005ae4:	4b01      	ldr	r3, [pc, #4]	; (8005aec <__errno+0x8>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000750 	.word	0x20000750

08005af0 <_init>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr

08005afc <_fini>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr
