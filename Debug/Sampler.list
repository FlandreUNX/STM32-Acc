
C:\Users\TARDIS\Atollic\TrueSTUDIO\ARM_workspace_7.0\Sampler\Debug\Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002168  08002168  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          000000dc  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000f0  200000f0  00020014  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006e58  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001607  00000000  00000000  00026e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000870  00000000  00000000  000284a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  00028d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000031fd  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d96  00000000  00000000  0002c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002f43b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000228c  00000000  00000000  0002f4bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002150 	.word	0x08002150

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002150 	.word	0x08002150

080001c8 <__aeabi_frsub>:
 80001c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__addsf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_fsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d4 <__addsf3>:
 80001d4:	0042      	lsls	r2, r0, #1
 80001d6:	bf1f      	itttt	ne
 80001d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001dc:	ea92 0f03 	teqne	r2, r3
 80001e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e8:	d06a      	beq.n	80002c0 <__addsf3+0xec>
 80001ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f2:	bfc1      	itttt	gt
 80001f4:	18d2      	addgt	r2, r2, r3
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	4048      	eorgt	r0, r1
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	2b19      	cmp	r3, #25
 8000202:	bf88      	it	hi
 8000204:	4770      	bxhi	lr
 8000206:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800020a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000212:	bf18      	it	ne
 8000214:	4240      	negne	r0, r0
 8000216:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800021a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4249      	negne	r1, r1
 8000226:	ea92 0f03 	teq	r2, r3
 800022a:	d03f      	beq.n	80002ac <__addsf3+0xd8>
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	fa41 fc03 	asr.w	ip, r1, r3
 8000234:	eb10 000c 	adds.w	r0, r0, ip
 8000238:	f1c3 0320 	rsb	r3, r3, #32
 800023c:	fa01 f103 	lsl.w	r1, r1, r3
 8000240:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000244:	d502      	bpl.n	800024c <__addsf3+0x78>
 8000246:	4249      	negs	r1, r1
 8000248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800024c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000250:	d313      	bcc.n	800027a <__addsf3+0xa6>
 8000252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000256:	d306      	bcc.n	8000266 <__addsf3+0x92>
 8000258:	0840      	lsrs	r0, r0, #1
 800025a:	ea4f 0131 	mov.w	r1, r1, rrx
 800025e:	f102 0201 	add.w	r2, r2, #1
 8000262:	2afe      	cmp	r2, #254	; 0xfe
 8000264:	d251      	bcs.n	800030a <__addsf3+0x136>
 8000266:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800026a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026e:	bf08      	it	eq
 8000270:	f020 0001 	biceq.w	r0, r0, #1
 8000274:	ea40 0003 	orr.w	r0, r0, r3
 8000278:	4770      	bx	lr
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	eb40 0000 	adc.w	r0, r0, r0
 8000280:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000284:	f1a2 0201 	sub.w	r2, r2, #1
 8000288:	d1ed      	bne.n	8000266 <__addsf3+0x92>
 800028a:	fab0 fc80 	clz	ip, r0
 800028e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000292:	ebb2 020c 	subs.w	r2, r2, ip
 8000296:	fa00 f00c 	lsl.w	r0, r0, ip
 800029a:	bfaa      	itet	ge
 800029c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a0:	4252      	neglt	r2, r2
 80002a2:	4318      	orrge	r0, r3
 80002a4:	bfbc      	itt	lt
 80002a6:	40d0      	lsrlt	r0, r2
 80002a8:	4318      	orrlt	r0, r3
 80002aa:	4770      	bx	lr
 80002ac:	f092 0f00 	teq	r2, #0
 80002b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b4:	bf06      	itte	eq
 80002b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ba:	3201      	addeq	r2, #1
 80002bc:	3b01      	subne	r3, #1
 80002be:	e7b5      	b.n	800022c <__addsf3+0x58>
 80002c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c8:	bf18      	it	ne
 80002ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ce:	d021      	beq.n	8000314 <__addsf3+0x140>
 80002d0:	ea92 0f03 	teq	r2, r3
 80002d4:	d004      	beq.n	80002e0 <__addsf3+0x10c>
 80002d6:	f092 0f00 	teq	r2, #0
 80002da:	bf08      	it	eq
 80002dc:	4608      	moveq	r0, r1
 80002de:	4770      	bx	lr
 80002e0:	ea90 0f01 	teq	r0, r1
 80002e4:	bf1c      	itt	ne
 80002e6:	2000      	movne	r0, #0
 80002e8:	4770      	bxne	lr
 80002ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ee:	d104      	bne.n	80002fa <__addsf3+0x126>
 80002f0:	0040      	lsls	r0, r0, #1
 80002f2:	bf28      	it	cs
 80002f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f8:	4770      	bx	lr
 80002fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fe:	bf3c      	itt	cc
 8000300:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000304:	4770      	bxcc	lr
 8000306:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000312:	4770      	bx	lr
 8000314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000318:	bf16      	itet	ne
 800031a:	4608      	movne	r0, r1
 800031c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000320:	4601      	movne	r1, r0
 8000322:	0242      	lsls	r2, r0, #9
 8000324:	bf06      	itte	eq
 8000326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032a:	ea90 0f01 	teqeq	r0, r1
 800032e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000332:	4770      	bx	lr

08000334 <__aeabi_ui2f>:
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	e004      	b.n	8000344 <__aeabi_i2f+0x8>
 800033a:	bf00      	nop

0800033c <__aeabi_i2f>:
 800033c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000340:	bf48      	it	mi
 8000342:	4240      	negmi	r0, r0
 8000344:	ea5f 0c00 	movs.w	ip, r0
 8000348:	bf08      	it	eq
 800034a:	4770      	bxeq	lr
 800034c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000350:	4601      	mov	r1, r0
 8000352:	f04f 0000 	mov.w	r0, #0
 8000356:	e01c      	b.n	8000392 <__aeabi_l2f+0x2a>

08000358 <__aeabi_ul2f>:
 8000358:	ea50 0201 	orrs.w	r2, r0, r1
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	e00a      	b.n	800037c <__aeabi_l2f+0x14>
 8000366:	bf00      	nop

08000368 <__aeabi_l2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000374:	d502      	bpl.n	800037c <__aeabi_l2f+0x14>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	ea5f 0c01 	movs.w	ip, r1
 8000380:	bf02      	ittt	eq
 8000382:	4684      	moveq	ip, r0
 8000384:	4601      	moveq	r1, r0
 8000386:	2000      	moveq	r0, #0
 8000388:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800038c:	bf08      	it	eq
 800038e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000392:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000396:	fabc f28c 	clz	r2, ip
 800039a:	3a08      	subs	r2, #8
 800039c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a0:	db10      	blt.n	80003c4 <__aeabi_l2f+0x5c>
 80003a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a6:	4463      	add	r3, ip
 80003a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ac:	f1c2 0220 	rsb	r2, r2, #32
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	fa20 f202 	lsr.w	r2, r0, r2
 80003b8:	eb43 0002 	adc.w	r0, r3, r2
 80003bc:	bf08      	it	eq
 80003be:	f020 0001 	biceq.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	f102 0220 	add.w	r2, r2, #32
 80003c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003cc:	f1c2 0220 	rsb	r2, r2, #32
 80003d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d4:	fa21 f202 	lsr.w	r2, r1, r2
 80003d8:	eb43 0002 	adc.w	r0, r3, r2
 80003dc:	bf08      	it	eq
 80003de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_fmul>:
 80003e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ec:	bf1e      	ittt	ne
 80003ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003f2:	ea92 0f0c 	teqne	r2, ip
 80003f6:	ea93 0f0c 	teqne	r3, ip
 80003fa:	d06f      	beq.n	80004dc <__aeabi_fmul+0xf8>
 80003fc:	441a      	add	r2, r3
 80003fe:	ea80 0c01 	eor.w	ip, r0, r1
 8000402:	0240      	lsls	r0, r0, #9
 8000404:	bf18      	it	ne
 8000406:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800040a:	d01e      	beq.n	800044a <__aeabi_fmul+0x66>
 800040c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000410:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000414:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000418:	fba0 3101 	umull	r3, r1, r0, r1
 800041c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000420:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000424:	bf3e      	ittt	cc
 8000426:	0049      	lslcc	r1, r1, #1
 8000428:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800042c:	005b      	lslcc	r3, r3, #1
 800042e:	ea40 0001 	orr.w	r0, r0, r1
 8000432:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000436:	2afd      	cmp	r2, #253	; 0xfd
 8000438:	d81d      	bhi.n	8000476 <__aeabi_fmul+0x92>
 800043a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800043e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000442:	bf08      	it	eq
 8000444:	f020 0001 	biceq.w	r0, r0, #1
 8000448:	4770      	bx	lr
 800044a:	f090 0f00 	teq	r0, #0
 800044e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000452:	bf08      	it	eq
 8000454:	0249      	lsleq	r1, r1, #9
 8000456:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800045a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800045e:	3a7f      	subs	r2, #127	; 0x7f
 8000460:	bfc2      	ittt	gt
 8000462:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000466:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800046a:	4770      	bxgt	lr
 800046c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	3a01      	subs	r2, #1
 8000476:	dc5d      	bgt.n	8000534 <__aeabi_fmul+0x150>
 8000478:	f112 0f19 	cmn.w	r2, #25
 800047c:	bfdc      	itt	le
 800047e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000482:	4770      	bxle	lr
 8000484:	f1c2 0200 	rsb	r2, r2, #0
 8000488:	0041      	lsls	r1, r0, #1
 800048a:	fa21 f102 	lsr.w	r1, r1, r2
 800048e:	f1c2 0220 	rsb	r2, r2, #32
 8000492:	fa00 fc02 	lsl.w	ip, r0, r2
 8000496:	ea5f 0031 	movs.w	r0, r1, rrx
 800049a:	f140 0000 	adc.w	r0, r0, #0
 800049e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004a2:	bf08      	it	eq
 80004a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a8:	4770      	bx	lr
 80004aa:	f092 0f00 	teq	r2, #0
 80004ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004b2:	bf02      	ittt	eq
 80004b4:	0040      	lsleq	r0, r0, #1
 80004b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004ba:	3a01      	subeq	r2, #1
 80004bc:	d0f9      	beq.n	80004b2 <__aeabi_fmul+0xce>
 80004be:	ea40 000c 	orr.w	r0, r0, ip
 80004c2:	f093 0f00 	teq	r3, #0
 80004c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ca:	bf02      	ittt	eq
 80004cc:	0049      	lsleq	r1, r1, #1
 80004ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004d2:	3b01      	subeq	r3, #1
 80004d4:	d0f9      	beq.n	80004ca <__aeabi_fmul+0xe6>
 80004d6:	ea41 010c 	orr.w	r1, r1, ip
 80004da:	e78f      	b.n	80003fc <__aeabi_fmul+0x18>
 80004dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004e0:	ea92 0f0c 	teq	r2, ip
 80004e4:	bf18      	it	ne
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d00a      	beq.n	8000502 <__aeabi_fmul+0x11e>
 80004ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004f0:	bf18      	it	ne
 80004f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004f6:	d1d8      	bne.n	80004aa <__aeabi_fmul+0xc6>
 80004f8:	ea80 0001 	eor.w	r0, r0, r1
 80004fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	bf17      	itett	ne
 8000508:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800050c:	4608      	moveq	r0, r1
 800050e:	f091 0f00 	teqne	r1, #0
 8000512:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000516:	d014      	beq.n	8000542 <__aeabi_fmul+0x15e>
 8000518:	ea92 0f0c 	teq	r2, ip
 800051c:	d101      	bne.n	8000522 <__aeabi_fmul+0x13e>
 800051e:	0242      	lsls	r2, r0, #9
 8000520:	d10f      	bne.n	8000542 <__aeabi_fmul+0x15e>
 8000522:	ea93 0f0c 	teq	r3, ip
 8000526:	d103      	bne.n	8000530 <__aeabi_fmul+0x14c>
 8000528:	024b      	lsls	r3, r1, #9
 800052a:	bf18      	it	ne
 800052c:	4608      	movne	r0, r1
 800052e:	d108      	bne.n	8000542 <__aeabi_fmul+0x15e>
 8000530:	ea80 0001 	eor.w	r0, r0, r1
 8000534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000538:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800053c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000540:	4770      	bx	lr
 8000542:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000546:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800054a:	4770      	bx	lr

0800054c <__aeabi_fdiv>:
 800054c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000550:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000554:	bf1e      	ittt	ne
 8000556:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800055a:	ea92 0f0c 	teqne	r2, ip
 800055e:	ea93 0f0c 	teqne	r3, ip
 8000562:	d069      	beq.n	8000638 <__aeabi_fdiv+0xec>
 8000564:	eba2 0203 	sub.w	r2, r2, r3
 8000568:	ea80 0c01 	eor.w	ip, r0, r1
 800056c:	0249      	lsls	r1, r1, #9
 800056e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000572:	d037      	beq.n	80005e4 <__aeabi_fdiv+0x98>
 8000574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000578:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800057c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000580:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000584:	428b      	cmp	r3, r1
 8000586:	bf38      	it	cc
 8000588:	005b      	lslcc	r3, r3, #1
 800058a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800058e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000592:	428b      	cmp	r3, r1
 8000594:	bf24      	itt	cs
 8000596:	1a5b      	subcs	r3, r3, r1
 8000598:	ea40 000c 	orrcs.w	r0, r0, ip
 800059c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005a0:	bf24      	itt	cs
 80005a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ae:	bf24      	itt	cs
 80005b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005bc:	bf24      	itt	cs
 80005be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	bf18      	it	ne
 80005ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005ce:	d1e0      	bne.n	8000592 <__aeabi_fdiv+0x46>
 80005d0:	2afd      	cmp	r2, #253	; 0xfd
 80005d2:	f63f af50 	bhi.w	8000476 <__aeabi_fmul+0x92>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005dc:	bf08      	it	eq
 80005de:	f020 0001 	biceq.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005ec:	327f      	adds	r2, #127	; 0x7f
 80005ee:	bfc2      	ittt	gt
 80005f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005f8:	4770      	bxgt	lr
 80005fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	3a01      	subs	r2, #1
 8000604:	e737      	b.n	8000476 <__aeabi_fmul+0x92>
 8000606:	f092 0f00 	teq	r2, #0
 800060a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800060e:	bf02      	ittt	eq
 8000610:	0040      	lsleq	r0, r0, #1
 8000612:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000616:	3a01      	subeq	r2, #1
 8000618:	d0f9      	beq.n	800060e <__aeabi_fdiv+0xc2>
 800061a:	ea40 000c 	orr.w	r0, r0, ip
 800061e:	f093 0f00 	teq	r3, #0
 8000622:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000626:	bf02      	ittt	eq
 8000628:	0049      	lsleq	r1, r1, #1
 800062a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800062e:	3b01      	subeq	r3, #1
 8000630:	d0f9      	beq.n	8000626 <__aeabi_fdiv+0xda>
 8000632:	ea41 010c 	orr.w	r1, r1, ip
 8000636:	e795      	b.n	8000564 <__aeabi_fdiv+0x18>
 8000638:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800063c:	ea92 0f0c 	teq	r2, ip
 8000640:	d108      	bne.n	8000654 <__aeabi_fdiv+0x108>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	f47f af7d 	bne.w	8000542 <__aeabi_fmul+0x15e>
 8000648:	ea93 0f0c 	teq	r3, ip
 800064c:	f47f af70 	bne.w	8000530 <__aeabi_fmul+0x14c>
 8000650:	4608      	mov	r0, r1
 8000652:	e776      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000654:	ea93 0f0c 	teq	r3, ip
 8000658:	d104      	bne.n	8000664 <__aeabi_fdiv+0x118>
 800065a:	024b      	lsls	r3, r1, #9
 800065c:	f43f af4c 	beq.w	80004f8 <__aeabi_fmul+0x114>
 8000660:	4608      	mov	r0, r1
 8000662:	e76e      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000664:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000668:	bf18      	it	ne
 800066a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800066e:	d1ca      	bne.n	8000606 <__aeabi_fdiv+0xba>
 8000670:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000674:	f47f af5c 	bne.w	8000530 <__aeabi_fmul+0x14c>
 8000678:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800067c:	f47f af3c 	bne.w	80004f8 <__aeabi_fmul+0x114>
 8000680:	e75f      	b.n	8000542 <__aeabi_fmul+0x15e>
 8000682:	bf00      	nop

08000684 <__aeabi_f2iz>:
 8000684:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000688:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800068c:	d30f      	bcc.n	80006ae <__aeabi_f2iz+0x2a>
 800068e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000692:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000696:	d90d      	bls.n	80006b4 <__aeabi_f2iz+0x30>
 8000698:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800069c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a4:	fa23 f002 	lsr.w	r0, r3, r2
 80006a8:	bf18      	it	ne
 80006aa:	4240      	negne	r0, r0
 80006ac:	4770      	bx	lr
 80006ae:	f04f 0000 	mov.w	r0, #0
 80006b2:	4770      	bx	lr
 80006b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006b8:	d101      	bne.n	80006be <__aeabi_f2iz+0x3a>
 80006ba:	0242      	lsls	r2, r0, #9
 80006bc:	d105      	bne.n	80006ca <__aeabi_f2iz+0x46>
 80006be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80006c2:	bf08      	it	eq
 80006c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006c8:	4770      	bx	lr
 80006ca:	f04f 0000 	mov.w	r0, #0
 80006ce:	4770      	bx	lr

080006d0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <DAC_SetChannel1Data+0x30>)
 80006e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	3308      	adds	r3, #8
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	461a      	mov	r2, r3
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	6013      	str	r3, [r2, #0]
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40007400 	.word	0x40007400

08000704 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <DMA_Init+0xa8>)
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800072e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800073a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000746:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000752:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000758:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 0307 	bic.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4313      	orrs	r3, r2
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	691a      	ldr	r2, [r3, #16]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60da      	str	r2, [r3, #12]
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	f01c803f 	.word	0xf01c803f

080007b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f043 0201 	orr.w	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80007ce:	e005      	b.n	80007dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f023 0201 	bic.w	r2, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
  }
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <DMA_GetFlagStatus+0x68>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d802      	bhi.n	8000838 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <DMA_GetFlagStatus+0x6c>)
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	e001      	b.n	800083c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <DMA_GetFlagStatus+0x70>)
 800083a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e002      	b.n	8000854 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800085a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800085e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800086a:	2301      	movs	r3, #1
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	e001      	b.n	8000874 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000874:	7dfb      	ldrb	r3, [r7, #23]
}
 8000876:	4618      	mov	r0, r3
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	4002640f 	.word	0x4002640f
 8000884:	40026000 	.word	0x40026000
 8000888:	40026400 	.word	0x40026400

0800088c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a10      	ldr	r2, [pc, #64]	; (80008dc <DMA_ClearFlag+0x50>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d802      	bhi.n	80008a4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <DMA_ClearFlag+0x54>)
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e001      	b.n	80008a8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <DMA_ClearFlag+0x58>)
 80008a6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80008c0:	e006      	b.n	80008d0 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008c8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	6093      	str	r3, [r2, #8]
  }    
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	4002640f 	.word	0x4002640f
 80008e0:	40026000 	.word	0x40026000
 80008e4:	40026400 	.word	0x40026400

080008e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e076      	b.n	80009f2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000904:	2201      	movs	r2, #1
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d165      	bne.n	80009ec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2103      	movs	r1, #3
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	401a      	ands	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	4619      	mov	r1, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d003      	beq.n	800095e <GPIO_Init+0x76>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d12e      	bne.n	80009bc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2103      	movs	r1, #3
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	4619      	mov	r1, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	b29b      	uxth	r3, r3
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	401a      	ands	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	799b      	ldrb	r3, [r3, #6]
 80009aa:	4619      	mov	r1, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2103      	movs	r1, #3
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	401a      	ands	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	79db      	ldrb	r3, [r3, #7]
 80009dc:	4619      	mov	r1, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	431a      	orrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d985      	bls.n	8000904 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80009f8:	bf00      	nop
 80009fa:	371c      	adds	r7, #28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a16:	4909      	ldr	r1, [pc, #36]	; (8000a3c <RCC_AHB1PeriphClockCmd+0x38>)
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <RCC_AHB1PeriphClockCmd+0x38>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a22:	e006      	b.n	8000a32 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a24:	4905      	ldr	r1, [pc, #20]	; (8000a3c <RCC_AHB1PeriphClockCmd+0x38>)
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <RCC_AHB1PeriphClockCmd+0x38>)
 8000a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40023800 	.word	0x40023800

08000a40 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000a5a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	89fa      	ldrh	r2, [r7, #14]
 8000aa2:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	8b9b      	ldrh	r3, [r3, #28]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	8a1a      	ldrh	r2, [r3, #16]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	821a      	strh	r2, [r3, #16]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2207      	movs	r2, #7
 8000b04:	821a      	strh	r2, [r3, #16]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	819a      	strh	r2, [r3, #12]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	891b      	ldrh	r3, [r3, #8]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4013      	ands	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <Audio_MAL_IRQHandler+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f7ff fe50 	bl	8000818 <DMA_GetFlagStatus>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d062      	beq.n	8000c44 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d04a      	beq.n	8000c1c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000b86:	bf00      	nop
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe2b 	bl	80007e8 <DMA_GetCmdStatus>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f7      	bne.n	8000b88 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <Audio_MAL_IRQHandler+0xe8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f7ff fe72 	bl	800088c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <Audio_MAL_IRQHandler+0xf0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <Audio_MAL_IRQHandler+0xf4>)
 8000bb0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	bf28      	it	cs
 8000bbe:	4613      	movcs	r3, r2
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <Audio_MAL_IRQHandler+0xf4>)
 8000bc2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4923      	ldr	r1, [pc, #140]	; (8000c58 <Audio_MAL_IRQHandler+0xf4>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd9a 	bl	8000704 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fdea 	bl	80007b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <Audio_MAL_IRQHandler+0xf0>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000be8:	428b      	cmp	r3, r1
 8000bea:	bf28      	it	cs
 8000bec:	460b      	movcs	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <Audio_MAL_IRQHandler+0xf0>)
 8000bf4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c02:	428b      	cmp	r3, r1
 8000c04:	bf28      	it	cs
 8000c06:	460b      	movcs	r3, r1
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <Audio_MAL_IRQHandler+0xec>)
 8000c0c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2101      	movs	r1, #1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fdcb 	bl	80007b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c1a:	e013      	b.n	8000c44 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fdc4 	bl	80007b0 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <Audio_MAL_IRQHandler+0xe4>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <Audio_MAL_IRQHandler+0xe8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4610      	mov	r0, r2
 8000c34:	f7ff fe2a 	bl	800088c <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <Audio_MAL_IRQHandler+0xf0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f97c 	bl	8001f3c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	20000000 	.word	0x20000000
 8000c54:	2000006c 	.word	0x2000006c
 8000c58:	200000ac 	.word	0x200000ac

08000c5c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c60:	f7ff ff80 	bl	8000b64 <Audio_MAL_IRQHandler>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000c6c:	f7ff ff7a 	bl	8000b64 <Audio_MAL_IRQHandler>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000c78:	2102      	movs	r1, #2
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <SPI3_IRQHandler+0x3c>)
 8000c7c:	f7ff ff56 	bl	8000b2c <SPI_I2S_GetFlagStatus>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d011      	beq.n	8000caa <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <SPI3_IRQHandler+0x40>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d106      	bne.n	8000c9c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000c8e:	f001 f95f 	bl	8001f50 <EVAL_AUDIO_GetSampleCallBack>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4619      	mov	r1, r3
 8000c96:	2004      	movs	r0, #4
 8000c98:	f7ff fd1a 	bl	80006d0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000c9c:	f001 f958 	bl	8001f50 <EVAL_AUDIO_GetSampleCallBack>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <SPI3_IRQHandler+0x3c>)
 8000ca6:	f7ff ff33 	bl	8000b10 <SPI_I2S_SendData>
  }
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40003c00 	.word	0x40003c00
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da0b      	bge.n	8000ce4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ccc:	490d      	ldr	r1, [pc, #52]	; (8000d04 <NVIC_SetPriority+0x4c>)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	3b04      	subs	r3, #4
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000ce2:	e009      	b.n	8000cf8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ce4:	4908      	ldr	r1, [pc, #32]	; (8000d08 <NVIC_SetPriority+0x50>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1a:	d301      	bcc.n	8000d20 <SysTick_Config+0x14>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e011      	b.n	8000d44 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	f7ff ffc1 	bl	8000cb8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SysTick_Config+0x40>)
 8000d3e:	2207      	movs	r2, #7
 8000d40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <SysTick_Handler+0xe4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <SysTick_Handler+0xe4>)
 8000d5e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <SysTick_Handler+0xe8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <SysTick_Handler+0x22>
		TM_Time2--;
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <SysTick_Handler+0xe8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <SysTick_Handler+0xe8>)
 8000d70:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8000d72:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	e052      	b.n	8000e22 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <SysTick_Handler+0xec>)
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d048      	beq.n	8000e1c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4a2b      	ldr	r2, [pc, #172]	; (8000e3c <SysTick_Handler+0xec>)
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d040      	beq.n	8000e1c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <SysTick_Handler+0xec>)
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d038      	beq.n	8000e1c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <SysTick_Handler+0xec>)
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	3a01      	subs	r2, #1
 8000db8:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <SysTick_Handler+0xec>)
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d128      	bne.n	8000e1c <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <SysTick_Handler+0xec>)
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4918      	ldr	r1, [pc, #96]	; (8000e3c <SysTick_Handler+0xec>)
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4618      	mov	r0, r3
 8000de4:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <SysTick_Handler+0xec>)
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4912      	ldr	r1, [pc, #72]	; (8000e3c <SysTick_Handler+0xec>)
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <SysTick_Handler+0xec>)
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d106      	bne.n	8000e1c <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Handler+0xec>)
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SysTick_Handler+0xec>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3a7      	bcc.n	8000d7c <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000030 	.word	0x20000030
 8000e38:	20000034 	.word	0x20000034
 8000e3c:	2000003c 	.word	0x2000003c

08000e40 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <TM_DELAY_Init+0x3c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <TM_DELAY_Init+0x40>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	099b      	lsrs	r3, r3, #6
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5b 	bl	8000d0c <SysTick_Config>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d000      	beq.n	8000e5e <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8000e5c:	e7fe      	b.n	8000e5c <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <TM_DELAY_Init+0x3c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	099b      	lsrs	r3, r3, #6
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <TM_DELAY_Init+0x44>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0a9b      	lsrs	r3, r3, #10
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <TM_DELAY_Init+0x48>)
 8000e6e:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <TM_DELAY_Init+0x4c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	10624dd3 	.word	0x10624dd3
 8000e84:	02659117 	.word	0x02659117
 8000e88:	200000e8 	.word	0x200000e8
 8000e8c:	20000038 	.word	0x20000038

08000e90 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8000e96:	2303      	movs	r3, #3
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <TM_DISCO_LedInit+0x2c>)
 8000ea8:	f000 f81c 	bl	8000ee4 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <TM_DISCO_LedInit+0x2c>)
 8000eae:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000eb2:	835a      	strh	r2, [r3, #26]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TM_DISCO_ButtonInit+0x20>)
 8000ed6:	f000 f805 	bl	8000ee4 <TM_GPIO_Init>
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	4608      	mov	r0, r1
 8000eee:	4611      	mov	r1, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	807b      	strh	r3, [r7, #2]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	707b      	strb	r3, [r7, #1]
 8000efa:	4613      	mov	r3, r2
 8000efc:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00e      	beq.n	8000f22 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f875 	bl	8000ff4 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000f0a:	7838      	ldrb	r0, [r7, #0]
 8000f0c:	787a      	ldrb	r2, [r7, #1]
 8000f0e:	8879      	ldrh	r1, [r7, #2]
 8000f10:	7d3b      	ldrb	r3, [r7, #20]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	7c3b      	ldrb	r3, [r7, #16]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f882 	bl	8001024 <TM_GPIO_INT_Init>
 8000f20:	e000      	b.n	8000f24 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8000f22:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop

08000f2c <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	4608      	mov	r0, r1
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	807b      	strh	r3, [r7, #2]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	707b      	strb	r3, [r7, #1]
 8000f42:	4613      	mov	r3, r2
 8000f44:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d03e      	beq.n	8000fca <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f851 	bl	8000ff4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e029      	b.n	8000fac <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d01d      	beq.n	8000fa4 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	08d9      	lsrs	r1, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3108      	adds	r1, #8
 8000f74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f78:	68f9      	ldr	r1, [r7, #12]
 8000f7a:	f001 0107 	and.w	r1, r1, #7
 8000f7e:	0089      	lsls	r1, r1, #2
 8000f80:	200f      	movs	r0, #15
 8000f82:	fa00 f101 	lsl.w	r1, r0, r1
 8000f86:	43c9      	mvns	r1, r1
 8000f88:	400b      	ands	r3, r1
 8000f8a:	7f38      	ldrb	r0, [r7, #28]
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	f001 0107 	and.w	r1, r1, #7
 8000f92:	0089      	lsls	r1, r1, #2
 8000f94:	fa00 f101 	lsl.w	r1, r0, r1
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000fa2:	e000      	b.n	8000fa6 <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8000fa4:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d9d2      	bls.n	8000f58 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000fb2:	787a      	ldrb	r2, [r7, #1]
 8000fb4:	8879      	ldrh	r1, [r7, #2]
 8000fb6:	7e3b      	ldrb	r3, [r7, #24]
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f82e 	bl	8001024 <TM_GPIO_INT_Init>
 8000fc8:	e000      	b.n	8000fcc <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8000fca:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop

08000fd4 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000fe2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000fe6:	0a9b      	lsrs	r3, r3, #10
 8000fe8:	b29b      	uxth	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe9 	bl	8000fd4 <TM_GPIO_GetPortSource>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	2301      	movs	r3, #1
 8001008:	fa03 f102 	lsl.w	r1, r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <TM_GPIO_INT_EnableClock+0x2c>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <TM_GPIO_INT_EnableClock+0x2c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	430b      	orrs	r3, r1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4608      	mov	r0, r1
 800102e:	4611      	mov	r1, r2
 8001030:	461a      	mov	r2, r3
 8001032:	4603      	mov	r3, r0
 8001034:	807b      	strh	r3, [r7, #2]
 8001036:	460b      	mov	r3, r1
 8001038:	707b      	strb	r3, [r7, #1]
 800103a:	4613      	mov	r3, r2
 800103c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffc8 	bl	8000fd4 <TM_GPIO_GetPortSource>
 8001044:	4603      	mov	r3, r0
 8001046:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e067      	b.n	800111e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	fa42 f303 	asr.w	r3, r2, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d05b      	beq.n	8001116 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	7bba      	ldrb	r2, [r7, #14]
 8001062:	4932      	ldr	r1, [pc, #200]	; (800112c <TM_GPIO_INT_Init+0x108>)
 8001064:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001068:	b211      	sxth	r1, r2
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	b212      	sxth	r2, r2
 8001074:	430a      	orrs	r2, r1
 8001076:	b212      	sxth	r2, r2
 8001078:	b291      	uxth	r1, r2
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <TM_GPIO_INT_Init+0x108>)
 800107c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	2103      	movs	r1, #3
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	43d2      	mvns	r2, r2
 8001090:	4013      	ands	r3, r2
 8001092:	7e39      	ldrb	r1, [r7, #24]
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	0052      	lsls	r2, r2, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2103      	movs	r1, #3
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4013      	ands	r3, r2
 80010b4:	7879      	ldrb	r1, [r7, #1]
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	0052      	lsls	r2, r2, #1
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d002      	beq.n	80010d0 <TM_GPIO_INT_Init+0xac>
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	b292      	uxth	r2, r2
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
 80010e2:	7839      	ldrb	r1, [r7, #0]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2103      	movs	r1, #3
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4013      	ands	r3, r2
 8001104:	7f39      	ldrb	r1, [r7, #28]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	0052      	lsls	r2, r2, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e000      	b.n	8001118 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001116:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d994      	bls.n	800104e <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000054 	.word	0x20000054

08001130 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <TM_SPI_Send+0x1e>
 800114a:	2300      	movs	r3, #0
 800114c:	e025      	b.n	800119a <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800114e:	bf00      	nop
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	891b      	ldrh	r3, [r3, #8]
 8001154:	b29b      	uxth	r3, r3
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f8      	beq.n	8001150 <TM_SPI_Send+0x20>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	891b      	ldrh	r3, [r3, #8]
 8001162:	b29b      	uxth	r3, r3
 8001164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f1      	bne.n	8001150 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001174:	bf00      	nop
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f8      	beq.n	8001176 <TM_SPI_Send+0x46>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	b29b      	uxth	r3, r3
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f1      	bne.n	8001176 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	899b      	ldrh	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 80011aa:	f000 faf5 	bl	8001798 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80011ae:	f000 f86b 	bl	8001288 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2201      	movs	r2, #1
 80011b6:	210f      	movs	r1, #15
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f8c3 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b3b      	cmp	r3, #59	; 0x3b
 80011c2:	d104      	bne.n	80011ce <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e008      	b.n	80011e0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b3f      	cmp	r3, #63	; 0x3f
 80011d2:	d104      	bne.n	80011de <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80011da:	2302      	movs	r3, #2
 80011dc:	e000      	b.n	80011e0 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000006a 	.word	0x2000006a

080011ec <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80011fc:	f000 f844 	bl	8001288 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001200:	f000 faca 	bl	8001798 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001204:	f7ff ffce 	bl	80011a4 <TM_LIS302DL_LIS3DSH_Detect>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f945 	bl	80014a4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800121a:	2301      	movs	r3, #1
 800121c:	e010      	b.n	8001240 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800121e:	f7ff ffc1 	bl	80011a4 <TM_LIS302DL_LIS3DSH_Detect>
 8001222:	4603      	mov	r3, r0
 8001224:	2b02      	cmp	r3, #2
 8001226:	d107      	bne.n	8001238 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8001228:	79ba      	ldrb	r2, [r7, #6]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f8b4 	bl	800139c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001234:	2302      	movs	r3, #2
 8001236:	e003      	b.n	8001240 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000006a 	.word	0x2000006a

0800124c <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d104      	bne.n	8001266 <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fa2f 	bl	80016c0 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001262:	2301      	movs	r3, #1
 8001264:	e009      	b.n	800127a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d104      	bne.n	8001278 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f996 	bl	80015a0 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001274:	2302      	movs	r3, #2
 8001276:	e000      	b.n	800127a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000006a 	.word	0x2000006a

08001288 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d11d      	bne.n	80012d2 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8001296:	2100      	movs	r1, #0
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 800129a:	f000 fa8f 	bl	80017bc <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 800129e:	2101      	movs	r1, #1
 80012a0:	2010      	movs	r0, #16
 80012a2:	f7ff fbaf 	bl	8000a04 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 80012a6:	2308      	movs	r3, #8
 80012a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80012aa:	2301      	movs	r3, #1
 80012ac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 80012b6:	2301      	movs	r3, #1
 80012b8:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 80012c0:	f7ff fb12 	bl	80008e8 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 80012d2:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000006b 	.word	0x2000006b
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40021000 	.word	0x40021000

080012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
 80012f4:	4613      	mov	r3, r2
 80012f6:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80012fe:	78bb      	ldrb	r3, [r7, #2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d907      	bls.n	8001314 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d103      	bne.n	8001314 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001312:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	4619      	mov	r1, r3
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 800131a:	f7ff ff09 	bl	8001130 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 800131e:	78bb      	ldrb	r3, [r7, #2]
 8001320:	461a      	mov	r2, r3
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001326:	f000 fab9 	bl	800189c <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 800132c:	2208      	movs	r2, #8
 800132e:	831a      	strh	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	2000006a 	.word	0x2000006a
 8001340:	40013000 	.word	0x40013000

08001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
 8001350:	4613      	mov	r3, r2
 8001352:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001356:	2208      	movs	r2, #8
 8001358:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001360:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8001362:	78bb      	ldrb	r3, [r7, #2]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d903      	bls.n	8001370 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001376:	f7ff fedb 	bl	8001130 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 800137a:	78bb      	ldrb	r3, [r7, #2]
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001382:	f000 facf 	bl	8001924 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001388:	2208      	movs	r2, #8
 800138a:	831a      	strh	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	40013000 	.word	0x40013000

0800139c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 80013ac:	2367      	movs	r3, #103	; 0x67
 80013ae:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d103      	bne.n	80013be <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80013b8:	4a35      	ldr	r2, [pc, #212]	; (8001490 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e02a      	b.n	8001414 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80013ce:	4a31      	ldr	r2, [pc, #196]	; (8001494 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e01f      	b.n	8001414 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d107      	bne.n	80013ea <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e014      	b.n	8001414 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d107      	bne.n	8001400 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	f043 0318 	orr.w	r3, r3, #24
 80013f6:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e009      	b.n	8001414 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d13b      	bne.n	800147e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8001412:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d01a      	beq.n	8001450 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d104      	bne.n	800142a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	e012      	b.n	8001450 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d106      	bne.n	800143e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800143a:	81fb      	strh	r3, [r7, #14]
 800143c:	e008      	b.n	8001450 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d11e      	bne.n	8001482 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800144a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800144e:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001456:	f107 030d 	add.w	r3, r7, #13
 800145a:	2201      	movs	r2, #1
 800145c:	2120      	movs	r1, #32
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff42 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29b      	uxth	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 800146e:	f107 030d 	add.w	r3, r7, #13
 8001472:	2201      	movs	r2, #1
 8001474:	2124      	movs	r1, #36	; 0x24
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff36 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 800147c:	e002      	b.n	8001484 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 800147e:	bf00      	nop
 8001480:	e000      	b.n	8001484 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8001482:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000ec 	.word	0x200000ec
 8001490:	3d75c28f 	.word	0x3d75c28f
 8001494:	3df5c28f 	.word	0x3df5c28f
 8001498:	3e3851ec 	.word	0x3e3851ec
 800149c:	3e75c28f 	.word	0x3e75c28f
 80014a0:	3f3ae148 	.word	0x3f3ae148

080014a4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80014b4:	f107 030e 	add.w	r3, r7, #14
 80014b8:	2201      	movs	r2, #1
 80014ba:	2121      	movs	r1, #33	; 0x21
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff41 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80014cc:	f107 030e 	add.w	r3, r7, #14
 80014d0:	2201      	movs	r2, #1
 80014d2:	2121      	movs	r1, #33	; 0x21
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff07 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 80014da:	2347      	movs	r3, #71	; 0x47
 80014dc:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d105      	bne.n	80014f0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80014ea:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e00a      	b.n	8001506 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d147      	bne.n	8001586 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8001504:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001506:	f107 030e 	add.w	r3, r7, #14
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff feea 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001514:	f107 030e 	add.w	r3, r7, #14
 8001518:	2201      	movs	r2, #1
 800151a:	2121      	movs	r1, #33	; 0x21
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fee3 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8001528:	b29b      	uxth	r3, r3
 800152a:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001532:	b29b      	uxth	r3, r3
 8001534:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d102      	bne.n	8001542 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	e019      	b.n	8001576 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d105      	bne.n	8001554 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	81fb      	strh	r3, [r7, #14]
 8001552:	e010      	b.n	8001576 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d105      	bne.n	8001566 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	b29b      	uxth	r3, r3
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	e007      	b.n	8001576 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	2b07      	cmp	r3, #7
 800156a:	d10e      	bne.n	800158a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	f043 0303 	orr.w	r3, r3, #3
 8001572:	b29b      	uxth	r3, r3
 8001574:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001576:	f107 030e 	add.w	r3, r7, #14
 800157a:	2201      	movs	r2, #1
 800157c:	2121      	movs	r1, #33	; 0x21
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff feb2 	bl	80012e8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001584:	e002      	b.n	800158c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 800158a:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000ec 	.word	0x200000ec
 8001598:	41900000 	.word	0x41900000
 800159c:	42900000 	.word	0x42900000

080015a0 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2201      	movs	r2, #1
 80015ae:	2128      	movs	r1, #40	; 0x28
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fec7 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	3301      	adds	r3, #1
 80015bc:	2201      	movs	r2, #1
 80015be:	2129      	movs	r1, #41	; 0x29
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff febf 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	3302      	adds	r3, #2
 80015cc:	2201      	movs	r2, #1
 80015ce:	212a      	movs	r1, #42	; 0x2a
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff feb7 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	3303      	adds	r3, #3
 80015dc:	2201      	movs	r2, #1
 80015de:	212b      	movs	r1, #43	; 0x2b
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff feaf 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	3304      	adds	r3, #4
 80015ec:	2201      	movs	r2, #1
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fea7 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	3305      	adds	r3, #5
 80015fc:	2201      	movs	r2, #1
 80015fe:	212d      	movs	r1, #45	; 0x2d
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fe9f 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001606:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800160a:	b29b      	uxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b29a      	uxth	r2, r3
 8001610:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	b21b      	sxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fe8d 	bl	800033c <__aeabi_i2f>
 8001622:	4602      	mov	r2, r0
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7fe feda 	bl	80003e4 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f826 	bl	8000684 <__aeabi_f2iz>
 8001638:	4603      	mov	r3, r0
 800163a:	b21a      	sxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8001640:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001644:	b29b      	uxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b29a      	uxth	r2, r3
 800164a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4413      	add	r3, r2
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe70 	bl	800033c <__aeabi_i2f>
 800165c:	4602      	mov	r2, r0
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	4610      	mov	r0, r2
 8001666:	f7fe febd 	bl	80003e4 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f809 	bl	8000684 <__aeabi_f2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	b21a      	sxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 800167a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800167e:	b29b      	uxth	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29a      	uxth	r2, r3
 8001684:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fe53 	bl	800033c <__aeabi_i2f>
 8001696:	4602      	mov	r2, r0
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7fe fea0 	bl	80003e4 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ffec 	bl	8000684 <__aeabi_f2iz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	809a      	strh	r2, [r3, #4]
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000ec 	.word	0x200000ec

080016c0 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2201      	movs	r2, #1
 80016ce:	2129      	movs	r1, #41	; 0x29
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fe37 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	3301      	adds	r3, #1
 80016dc:	2201      	movs	r2, #1
 80016de:	212b      	movs	r1, #43	; 0x2b
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe2f 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	3302      	adds	r3, #2
 80016ec:	2201      	movs	r2, #1
 80016ee:	212d      	movs	r1, #45	; 0x2d
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe27 	bl	8001344 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 80016f6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fe1e 	bl	800033c <__aeabi_i2f>
 8001700:	4602      	mov	r2, r0
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7fe fe6b 	bl	80003e4 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ffb7 	bl	8000684 <__aeabi_f2iz>
 8001716:	4603      	mov	r3, r0
 8001718:	b21a      	sxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 800171e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe0a 	bl	800033c <__aeabi_i2f>
 8001728:	4602      	mov	r2, r0
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f7fe fe57 	bl	80003e4 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ffa3 	bl	8000684 <__aeabi_f2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 8001746:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdf6 	bl	800033c <__aeabi_i2f>
 8001750:	4602      	mov	r2, r0
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7fe fe43 	bl	80003e4 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff8f 	bl	8000684 <__aeabi_f2iz>
 8001766:	4603      	mov	r3, r0
 8001768:	b21a      	sxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	425b      	negs	r3, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	b21a      	sxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	801a      	strh	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000ec 	.word	0x200000ec

08001798 <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 80017a0:	607b      	str	r3, [r7, #4]
	while (delay--);
 80017a2:	bf00      	nop
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1fa      	bne.n	80017a4 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	000f4240 	.word	0x000f4240

080017bc <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <TM_SPI_Init+0xc8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10a      	bne.n	80017e6 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 80017d0:	78f9      	ldrb	r1, [r7, #3]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2320      	movs	r3, #32
 80017de:	2200      	movs	r2, #0
 80017e0:	4828      	ldr	r0, [pc, #160]	; (8001884 <TM_SPI_Init+0xc8>)
 80017e2:	f000 f8f5 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a27      	ldr	r2, [pc, #156]	; (8001888 <TM_SPI_Init+0xcc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10a      	bne.n	8001804 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 80017ee:	78f9      	ldrb	r1, [r7, #3]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2320      	movs	r3, #32
 80017fc:	2200      	movs	r2, #0
 80017fe:	4822      	ldr	r0, [pc, #136]	; (8001888 <TM_SPI_Init+0xcc>)
 8001800:	f000 f8e6 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <TM_SPI_Init+0xd0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d10a      	bne.n	8001822 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 800180c:	78f9      	ldrb	r1, [r7, #3]
 800180e:	2300      	movs	r3, #0
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2320      	movs	r3, #32
 800181a:	2200      	movs	r2, #0
 800181c:	481b      	ldr	r0, [pc, #108]	; (800188c <TM_SPI_Init+0xd0>)
 800181e:	f000 f8d7 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <TM_SPI_Init+0xd4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10a      	bne.n	8001840 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 800182a:	78f9      	ldrb	r1, [r7, #3]
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2320      	movs	r3, #32
 8001838:	2200      	movs	r2, #0
 800183a:	4815      	ldr	r0, [pc, #84]	; (8001890 <TM_SPI_Init+0xd4>)
 800183c:	f000 f8c8 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a14      	ldr	r2, [pc, #80]	; (8001894 <TM_SPI_Init+0xd8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d10a      	bne.n	800185e <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8001848:	78f9      	ldrb	r1, [r7, #3]
 800184a:	2300      	movs	r3, #0
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2320      	movs	r3, #32
 8001856:	2200      	movs	r2, #0
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <TM_SPI_Init+0xd8>)
 800185a:	f000 f8b9 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <TM_SPI_Init+0xdc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10a      	bne.n	800187c <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8001866:	78f9      	ldrb	r1, [r7, #3]
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2320      	movs	r3, #32
 8001874:	2200      	movs	r2, #0
 8001876:	4808      	ldr	r0, [pc, #32]	; (8001898 <TM_SPI_Init+0xdc>)
 8001878:	f000 f8aa 	bl	80019d0 <TM_SPIx_Init>
	}
#endif
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013000 	.word	0x40013000
 8001888:	40003800 	.word	0x40003800
 800188c:	40003c00 	.word	0x40003c00
 8001890:	40013400 	.word	0x40013400
 8001894:	40015000 	.word	0x40015000
 8001898:	40015400 	.word	0x40015400

0800189c <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d031      	beq.n	800191a <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80018b6:	bf00      	nop
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	891b      	ldrh	r3, [r3, #8]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f8      	beq.n	80018b8 <TM_SPI_WriteMulti+0x1c>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	891b      	ldrh	r3, [r3, #8]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f1      	bne.n	80018b8 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e01a      	b.n	8001910 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 80018e8:	bf00      	nop
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	891b      	ldrh	r3, [r3, #8]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f8      	beq.n	80018ea <TM_SPI_WriteMulti+0x4e>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	891b      	ldrh	r3, [r3, #8]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f1      	bne.n	80018ea <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3e0      	bcc.n	80018da <TM_SPI_WriteMulti+0x3e>
 8001918:	e000      	b.n	800191c <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800191a:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d034      	beq.n	80019ac <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001942:	bf00      	nop
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	891b      	ldrh	r3, [r3, #8]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f8      	beq.n	8001944 <TM_SPI_ReadMulti+0x20>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	891b      	ldrh	r3, [r3, #8]
 8001956:	b29b      	uxth	r3, r3
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f1      	bne.n	8001944 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e01d      	b.n	80019a2 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 800196e:	bf00      	nop
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	891b      	ldrh	r3, [r3, #8]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f8      	beq.n	8001970 <TM_SPI_ReadMulti+0x4c>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	891b      	ldrh	r3, [r3, #8]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f1      	bne.n	8001970 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	8992      	ldrh	r2, [r2, #12]
 8001996:	b292      	uxth	r2, r2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3dd      	bcc.n	8001966 <TM_SPI_ReadMulti+0x42>
 80019aa:	e000      	b.n	80019ae <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80019ac:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70bb      	strb	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f86a 	bl	8000ac8 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a51      	ldr	r2, [pc, #324]	; (8001b3c <TM_SPIx_Init+0x16c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d10b      	bne.n	8001a14 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80019fc:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <TM_SPIx_Init+0x170>)
 80019fe:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a06:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f8a4 	bl	8001b58 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <TM_SPIx_Init+0x174>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d10b      	bne.n	8001a34 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f8c4 	bl	8001bb8 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <TM_SPIx_Init+0x178>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d10b      	bne.n	8001a54 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001a3c:	4a40      	ldr	r2, [pc, #256]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f900 	bl	8001c50 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <TM_SPIx_Init+0x17c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d10b      	bne.n	8001a74 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8001a5c:	4a38      	ldr	r2, [pc, #224]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a66:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f922 	bl	8001cb4 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <TM_SPIx_Init+0x180>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d10b      	bne.n	8001a94 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a86:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f942 	bl	8001d14 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <TM_SPIx_Init+0x184>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d10b      	bne.n	8001ab4 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 8001a9c:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <TM_SPIx_Init+0x170>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa6:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f96e 	bl	8001d8c <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8001ab4:	883b      	ldrh	r3, [r7, #0]
 8001ab6:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8001abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001abe:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8001ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ac2:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac8:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8001aca:	78bb      	ldrb	r3, [r7, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	82bb      	strh	r3, [r7, #20]
 8001ad8:	e016      	b.n	8001b08 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8001ada:	78bb      	ldrb	r3, [r7, #2]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d104      	bne.n	8001aea <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	82bb      	strh	r3, [r7, #20]
 8001ae8:	e00e      	b.n	8001b08 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8001aea:	78bb      	ldrb	r3, [r7, #2]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d104      	bne.n	8001afa <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001af0:	2302      	movs	r3, #2
 8001af2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001af4:	2300      	movs	r3, #0
 8001af6:	82bb      	strh	r3, [r7, #20]
 8001af8:	e006      	b.n	8001b08 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8001afa:	78bb      	ldrb	r3, [r7, #2]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d103      	bne.n	8001b08 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8001b00:	2302      	movs	r3, #2
 8001b02:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001b04:	2301      	movs	r3, #1
 8001b06:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe ff8e 	bl	8000a40 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	801a      	strh	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40003800 	.word	0x40003800
 8001b48:	40003c00 	.word	0x40003c00
 8001b4c:	40013400 	.word	0x40013400
 8001b50:	40015000 	.word	0x40015000
 8001b54:	40015400 	.word	0x40015400

08001b58 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001b68:	2305      	movs	r3, #5
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	21e0      	movs	r1, #224	; 0xe0
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <TM_SPI1_INT_InitPins+0x54>)
 8001b78:	f7ff f9d8 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d109      	bne.n	8001b96 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001b82:	2305      	movs	r3, #5
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2303      	movs	r3, #3
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2138      	movs	r1, #56	; 0x38
 8001b90:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <TM_SPI1_INT_InitPins+0x58>)
 8001b92:	f7ff f9cb 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d103      	bne.n	8001ba4 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <TM_SPI1_INT_InitPins+0x5c>)
 8001ba0:	f7ff ff0a 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40013000 	.word	0x40013000

08001bb8 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d114      	bne.n	8001bf2 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001bc8:	2305      	movs	r3, #5
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2303      	movs	r3, #3
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd8:	4819      	ldr	r0, [pc, #100]	; (8001c40 <TM_SPI2_INT_InitPins+0x88>)
 8001bda:	f7ff f9a7 	bl	8000f2c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001bde:	2305      	movs	r3, #5
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2303      	movs	r3, #3
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	2200      	movs	r2, #0
 8001bea:	210c      	movs	r1, #12
 8001bec:	4815      	ldr	r0, [pc, #84]	; (8001c44 <TM_SPI2_INT_InitPins+0x8c>)
 8001bee:	f7ff f99d 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10a      	bne.n	8001c0e <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <TM_SPI2_INT_InitPins+0x88>)
 8001c0a:	f7ff f98f 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d109      	bne.n	8001c28 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001c14:	2305      	movs	r3, #5
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2303      	movs	r3, #3
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	210d      	movs	r1, #13
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <TM_SPI2_INT_InitPins+0x90>)
 8001c24:	f7ff f982 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d103      	bne.n	8001c36 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8001c2e:	2105      	movs	r1, #5
 8001c30:	4806      	ldr	r0, [pc, #24]	; (8001c4c <TM_SPI2_INT_InitPins+0x94>)
 8001c32:	f7ff fec1 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40003800 	.word	0x40003800

08001c50 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001c60:	2306      	movs	r3, #6
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2303      	movs	r3, #3
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2138      	movs	r1, #56	; 0x38
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <TM_SPI3_INT_InitPins+0x58>)
 8001c70:	f7ff f95c 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10a      	bne.n	8001c90 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2303      	movs	r3, #3
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001c8a:	4808      	ldr	r0, [pc, #32]	; (8001cac <TM_SPI3_INT_InitPins+0x5c>)
 8001c8c:	f7ff f94e 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d103      	bne.n	8001c9e <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8001c96:	2106      	movs	r1, #6
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <TM_SPI3_INT_InitPins+0x60>)
 8001c9a:	f7ff fe8d 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40003c00 	.word	0x40003c00

08001cb4 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001cc4:	2305      	movs	r3, #5
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2303      	movs	r3, #3
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2164      	movs	r1, #100	; 0x64
 8001cd2:	480e      	ldr	r0, [pc, #56]	; (8001d0c <TM_SPI4_INT_InitPins+0x58>)
 8001cd4:	f7ff f92a 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10a      	bne.n	8001cf4 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001cde:	2305      	movs	r3, #5
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <TM_SPI4_INT_InitPins+0x58>)
 8001cf0:	f7ff f91c 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d103      	bne.n	8001d02 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <TM_SPI4_INT_InitPins+0x5c>)
 8001cfe:	f7ff fe5b 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40013400 	.word	0x40013400

08001d14 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001d24:	2305      	movs	r3, #5
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2303      	movs	r3, #3
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <TM_SPI5_INT_InitPins+0x6c>)
 8001d36:	f7ff f8f9 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d114      	bne.n	8001d6a <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001d40:	2305      	movs	r3, #5
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2303      	movs	r3, #3
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <TM_SPI5_INT_InitPins+0x6c>)
 8001d52:	f7ff f8eb 	bl	8000f2c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001d56:	2305      	movs	r3, #5
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2200      	movs	r2, #0
 8001d62:	21c0      	movs	r1, #192	; 0xc0
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <TM_SPI5_INT_InitPins+0x70>)
 8001d66:	f7ff f8e1 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d103      	bne.n	8001d78 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8001d70:	2105      	movs	r1, #5
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <TM_SPI5_INT_InitPins+0x74>)
 8001d74:	f7ff fe20 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40015000 	.word	0x40015000

08001d8c <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2303      	movs	r3, #3
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <TM_SPI6_INT_InitPins+0x3c>)
 8001dae:	f7ff f8bd 	bl	8000f2c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d103      	bne.n	8001dc0 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8001db8:	2105      	movs	r1, #5
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <TM_SPI6_INT_InitPins+0x40>)
 8001dbc:	f7ff fdfc 	bl	80019b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40015400 	.word	0x40015400

08001dd0 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <Delayms+0x50>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dde:	f3ef 8305 	mrs	r3, IPSR
 8001de2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001de4:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8001dea:	bf00      	nop
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <Delayms+0x50>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f8      	bcc.n	8001dec <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8001dfa:	e00b      	b.n	8001e14 <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <Delayms+0x54>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <Delayms+0x3e>
				millis--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f3      	bne.n	8001dfc <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000030 	.word	0x20000030
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <main>:
#include <string.h>
#include "tm_stm32f4_lis302dl_lis3dsh.h"


int main(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001e2e:	af00      	add	r7, sp, #0


	u_int8_t pressed = 1, done = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3266 	strb.w	r3, [r7, #614]	; 0x266
	u_int16_t time = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8a7 3264 	strh.w	r3, [r7, #612]	; 0x264

	TM_LIS302DL_LIS3DSH_t Axes_Data;



	SystemInit();
 8001e42:	f000 f8b7 	bl	8001fb4 <SystemInit>

	//Initialize delays
	TM_DELAY_Init();
 8001e46:	f7fe fffb 	bl	8000e40 <TM_DELAY_Init>

	//Initialize LEDs
	TM_DISCO_LedInit();
 8001e4a:	f7ff f821 	bl	8000e90 <TM_DISCO_LedInit>

	//start accelerometer
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8001e4e:	2103      	movs	r1, #3
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff f9cb 	bl	80011ec <TM_LIS302DL_LIS3DSH_Init>

	//start button
	TM_DISCO_ButtonInit();
 8001e56:	f7ff f833 	bl	8000ec0 <TM_DISCO_ButtonInit>

	//turn leds blue and orange to indicate the disc is mounted
	TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <main+0x10c>)
 8001e5c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e60:	831a      	strh	r2, [r3, #24]

	//wait for blue button press
	while(pressed)
 8001e62:	e008      	b.n	8001e76 <main+0x4e>
		{
			if(TM_DISCO_ButtonPressed())
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <main+0x110>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <main+0x4e>
			{
				pressed = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	//turn leds blue and orange to indicate the disc is mounted
	TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);

	//wait for blue button press
	while(pressed)
 8001e76:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f2      	bne.n	8001e64 <main+0x3c>
				pressed = 0;
			}
		}

	//turn off blue and orange leds
	TM_DISCO_LedOff(LED_BLUE | LED_ORANGE);
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <main+0x10c>)
 8001e80:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e84:	835a      	strh	r2, [r3, #26]

	//turn leds red and green to tell sampling is about to start
	TM_DISCO_LedOn(LED_RED | LED_GREEN);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <main+0x10c>)
 8001e88:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8001e8c:	831a      	strh	r2, [r3, #24]
	int i = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	while (done) {
 8001e94:	e033      	b.n	8001efe <main+0xd6>
		/* Read axes data from initialized accelerometer */
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8001e96:	463b      	mov	r3, r7
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f9d7 	bl	800124c <TM_LIS302DL_LIS3DSH_ReadAxes>

		//save data to array
		dataXAxis[i] = Axes_Data.X;
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ea4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8001eae:	440b      	add	r3, r1
 8001eb0:	f823 2cd0 	strh.w	r2, [r3, #-208]
		dataYAxis[i] = Axes_Data.Y;
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001eba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ebe:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8001ec2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		dataZAxis[i++] = Axes_Data.Z;
 8001ec6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	f8c7 2260 	str.w	r2, [r7, #608]	; 0x260
 8001ed0:	463a      	mov	r2, r7
 8001ed2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//wait for the next sampling period
		Delayms(SAMPLEPERIOD);
 8001ede:	2014      	movs	r0, #20
 8001ee0:	f7ff ff76 	bl	8001dd0 <Delayms>

		//increase the timer
		time +=SAMPLEPERIOD;
 8001ee4:	f8b7 3264 	ldrh.w	r3, [r7, #612]	; 0x264
 8001ee8:	3314      	adds	r3, #20
 8001eea:	f8a7 3264 	strh.w	r3, [r7, #612]	; 0x264

		//if total sampling time is reached, leave loop
		if(time>=SAMPLETOTALTIME)
 8001eee:	f8b7 3264 	ldrh.w	r3, [r7, #612]	; 0x264
 8001ef2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ef6:	d302      	bcc.n	8001efe <main+0xd6>
		{
			done = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3266 	strb.w	r3, [r7, #614]	; 0x266
	TM_DISCO_LedOff(LED_BLUE | LED_ORANGE);

	//turn leds red and green to tell sampling is about to start
	TM_DISCO_LedOn(LED_RED | LED_GREEN);
	int i = 0;
	while (done) {
 8001efe:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1c7      	bne.n	8001e96 <main+0x6e>
			done = 0;
		}
	}

	//sample finishes
	TM_DISCO_LedOff(LED_RED | LED_GREEN);
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <main+0x10c>)
 8001f08:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8001f0c:	835a      	strh	r2, [r3, #26]

	//wait for the blue button to save file
	pressed = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	while(pressed)
 8001f14:	e008      	b.n	8001f28 <main+0x100>
	{
			if(TM_DISCO_ButtonPressed())
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <main+0x110>)
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <main+0x100>
			{
				pressed = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	//sample finishes
	TM_DISCO_LedOff(LED_RED | LED_GREEN);

	//wait for the blue button to save file
	pressed = 1;
	while(pressed)
 8001f28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f2      	bne.n	8001f16 <main+0xee>
			if(TM_DISCO_ButtonPressed())
			{
				pressed = 0;
			}
	}
	while(1);
 8001f30:	e7fe      	b.n	8001f30 <main+0x108>
 8001f32:	bf00      	nop
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40020000 	.word	0x40020000

08001f3c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001f46:	bf00      	nop
}
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f66:	e003      	b.n	8001f70 <LoopCopyDataInit>

08001f68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f6e:	3104      	adds	r1, #4

08001f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f78:	d3f6      	bcc.n	8001f68 <CopyDataInit>
  ldr  r2, =_sbss
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f7c:	e002      	b.n	8001f84 <LoopFillZerobss>

08001f7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f80:	f842 3b04 	str.w	r3, [r2], #4

08001f84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f88:	d3f9      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f8a:	f000 f813 	bl	8001fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f000 f8b9 	bl	8002104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f92:	f7ff ff49 	bl	8001e28 <main>
  bx  lr    
 8001f96:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f98:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001f9c:	08002170 	.word	0x08002170
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fa4:	20000014 	.word	0x20000014
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001fa8:	20000014 	.word	0x20000014
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fac:	200000f0 	.word	0x200000f0

08001fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC_IRQHandler>
	...

08001fb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <SystemInit+0x50>)
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <SystemInit+0x50>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <SystemInit+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <SystemInit+0x50>)
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <SystemInit+0x50>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <SystemInit+0x50>)
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SystemInit+0x54>)
 8001fde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fe0:	4a08      	ldr	r2, [pc, #32]	; (8002004 <SystemInit+0x50>)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <SystemInit+0x50>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SystemInit+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001ff2:	f000 f80d 	bl	8002010 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <SystemInit+0x58>)
 8001ff8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ffc:	609a      	str	r2, [r3, #8]
#endif
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	24003010 	.word	0x24003010
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800201e:	4a35      	ldr	r2, [pc, #212]	; (80020f4 <SetSysClock+0xe4>)
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <SetSysClock+0xe4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <SetSysClock+0xe4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <SetSysClock+0x38>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002046:	d1f0      	bne.n	800202a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <SetSysClock+0xe4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002054:	2301      	movs	r3, #1
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	e001      	b.n	800205e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d142      	bne.n	80020ea <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <SetSysClock+0xe4>)
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <SetSysClock+0xe4>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <SetSysClock+0xe8>)
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <SetSysClock+0xe8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800207a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <SetSysClock+0xe4>)
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <SetSysClock+0xe4>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <SetSysClock+0xe4>)
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <SetSysClock+0xe4>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <SetSysClock+0xe4>)
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <SetSysClock+0xe4>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800209a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <SetSysClock+0xe4>)
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <SetSysClock+0xec>)
 80020a0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <SetSysClock+0xe4>)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <SetSysClock+0xe4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ac:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80020ae:	bf00      	nop
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <SetSysClock+0xe4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f9      	beq.n	80020b0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <SetSysClock+0xf0>)
 80020be:	f240 6205 	movw	r2, #1541	; 0x605
 80020c2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <SetSysClock+0xe4>)
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <SetSysClock+0xe4>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <SetSysClock+0xe4>)
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <SetSysClock+0xe4>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80020dc:	bf00      	nop
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SetSysClock+0xe4>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d1f9      	bne.n	80020de <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	07405408 	.word	0x07405408
 8002100:	40023c00 	.word	0x40023c00

08002104 <__libc_init_array>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <__libc_init_array+0x3c>)
 8002108:	4c0e      	ldr	r4, [pc, #56]	; (8002144 <__libc_init_array+0x40>)
 800210a:	1ae4      	subs	r4, r4, r3
 800210c:	10a4      	asrs	r4, r4, #2
 800210e:	2500      	movs	r5, #0
 8002110:	461e      	mov	r6, r3
 8002112:	42a5      	cmp	r5, r4
 8002114:	d004      	beq.n	8002120 <__libc_init_array+0x1c>
 8002116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800211a:	4798      	blx	r3
 800211c:	3501      	adds	r5, #1
 800211e:	e7f8      	b.n	8002112 <__libc_init_array+0xe>
 8002120:	f000 f816 	bl	8002150 <_init>
 8002124:	4c08      	ldr	r4, [pc, #32]	; (8002148 <__libc_init_array+0x44>)
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <__libc_init_array+0x48>)
 8002128:	1ae4      	subs	r4, r4, r3
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	2500      	movs	r5, #0
 800212e:	461e      	mov	r6, r3
 8002130:	42a5      	cmp	r5, r4
 8002132:	d004      	beq.n	800213e <__libc_init_array+0x3a>
 8002134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002138:	4798      	blx	r3
 800213a:	3501      	adds	r5, #1
 800213c:	e7f8      	b.n	8002130 <__libc_init_array+0x2c>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	08002168 	.word	0x08002168
 8002144:	08002168 	.word	0x08002168
 8002148:	0800216c 	.word	0x0800216c
 800214c:	08002168 	.word	0x08002168

08002150 <_init>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	bf00      	nop
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr

0800215c <_fini>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	bf00      	nop
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr
