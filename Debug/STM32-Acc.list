
C:\Users\Alan\Atollic\TrueSTUDIO\ARM_workspace_7.0\STM32-Acc\Debug\STM32-Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080048d0  080048d0  000148d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000d9c  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020d9c  2**0
                  CONTENTS
  7 .bss          00000100  20000d9c  20000d9c  00020d9c  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000e9c  20000e9c  00020d9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020d9c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008d1c  00000000  00000000  00020dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c87  00000000  00000000  00029ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae0  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  0002c250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f00  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003554  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00034074  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003108  00000000  00000000  000340f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000d9c 	.word	0x20000d9c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048b8 	.word	0x080048b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000da0 	.word	0x20000da0
 80001c4:	080048b8 	.word	0x080048b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_frsub>:
 8000b38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	e002      	b.n	8000b44 <__addsf3>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fsub>:
 8000b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b44 <__addsf3>:
 8000b44:	0042      	lsls	r2, r0, #1
 8000b46:	bf1f      	itttt	ne
 8000b48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b4c:	ea92 0f03 	teqne	r2, r3
 8000b50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b58:	d06a      	beq.n	8000c30 <__addsf3+0xec>
 8000b5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b62:	bfc1      	itttt	gt
 8000b64:	18d2      	addgt	r2, r2, r3
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	4048      	eorgt	r0, r1
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	bfb8      	it	lt
 8000b6e:	425b      	neglt	r3, r3
 8000b70:	2b19      	cmp	r3, #25
 8000b72:	bf88      	it	hi
 8000b74:	4770      	bxhi	lr
 8000b76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4249      	negne	r1, r1
 8000b96:	ea92 0f03 	teq	r2, r3
 8000b9a:	d03f      	beq.n	8000c1c <__addsf3+0xd8>
 8000b9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba4:	eb10 000c 	adds.w	r0, r0, ip
 8000ba8:	f1c3 0320 	rsb	r3, r3, #32
 8000bac:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__addsf3+0x78>
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc0:	d313      	bcc.n	8000bea <__addsf3+0xa6>
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d306      	bcc.n	8000bd6 <__addsf3+0x92>
 8000bc8:	0840      	lsrs	r0, r0, #1
 8000bca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bce:	f102 0201 	add.w	r2, r2, #1
 8000bd2:	2afe      	cmp	r2, #254	; 0xfe
 8000bd4:	d251      	bcs.n	8000c7a <__addsf3+0x136>
 8000bd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bde:	bf08      	it	eq
 8000be0:	f020 0001 	biceq.w	r0, r0, #1
 8000be4:	ea40 0003 	orr.w	r0, r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	0049      	lsls	r1, r1, #1
 8000bec:	eb40 0000 	adc.w	r0, r0, r0
 8000bf0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	d1ed      	bne.n	8000bd6 <__addsf3+0x92>
 8000bfa:	fab0 fc80 	clz	ip, r0
 8000bfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c02:	ebb2 020c 	subs.w	r2, r2, ip
 8000c06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0a:	bfaa      	itet	ge
 8000c0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c10:	4252      	neglt	r2, r2
 8000c12:	4318      	orrge	r0, r3
 8000c14:	bfbc      	itt	lt
 8000c16:	40d0      	lsrlt	r0, r2
 8000c18:	4318      	orrlt	r0, r3
 8000c1a:	4770      	bx	lr
 8000c1c:	f092 0f00 	teq	r2, #0
 8000c20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c24:	bf06      	itte	eq
 8000c26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2a:	3201      	addeq	r2, #1
 8000c2c:	3b01      	subne	r3, #1
 8000c2e:	e7b5      	b.n	8000b9c <__addsf3+0x58>
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d021      	beq.n	8000c84 <__addsf3+0x140>
 8000c40:	ea92 0f03 	teq	r2, r3
 8000c44:	d004      	beq.n	8000c50 <__addsf3+0x10c>
 8000c46:	f092 0f00 	teq	r2, #0
 8000c4a:	bf08      	it	eq
 8000c4c:	4608      	moveq	r0, r1
 8000c4e:	4770      	bx	lr
 8000c50:	ea90 0f01 	teq	r0, r1
 8000c54:	bf1c      	itt	ne
 8000c56:	2000      	movne	r0, #0
 8000c58:	4770      	bxne	lr
 8000c5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5e:	d104      	bne.n	8000c6a <__addsf3+0x126>
 8000c60:	0040      	lsls	r0, r0, #1
 8000c62:	bf28      	it	cs
 8000c64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6e:	bf3c      	itt	cc
 8000c70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bxcc	lr
 8000c76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	4770      	bx	lr
 8000c84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c88:	bf16      	itet	ne
 8000c8a:	4608      	movne	r0, r1
 8000c8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c90:	4601      	movne	r1, r0
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	bf06      	itte	eq
 8000c96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9a:	ea90 0f01 	teqeq	r0, r1
 8000c9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_ui2f>:
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e004      	b.n	8000cb4 <__aeabi_i2f+0x8>
 8000caa:	bf00      	nop

08000cac <__aeabi_i2f>:
 8000cac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb0:	bf48      	it	mi
 8000cb2:	4240      	negmi	r0, r0
 8000cb4:	ea5f 0c00 	movs.w	ip, r0
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	e01c      	b.n	8000d02 <__aeabi_l2f+0x2a>

08000cc8 <__aeabi_ul2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e00a      	b.n	8000cec <__aeabi_l2f+0x14>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_l2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_l2f+0x14>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	ea5f 0c01 	movs.w	ip, r1
 8000cf0:	bf02      	ittt	eq
 8000cf2:	4684      	moveq	ip, r0
 8000cf4:	4601      	moveq	r1, r0
 8000cf6:	2000      	moveq	r0, #0
 8000cf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cfc:	bf08      	it	eq
 8000cfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d06:	fabc f28c 	clz	r2, ip
 8000d0a:	3a08      	subs	r2, #8
 8000d0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d10:	db10      	blt.n	8000d34 <__aeabi_l2f+0x5c>
 8000d12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d16:	4463      	add	r3, ip
 8000d18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d24:	fa20 f202 	lsr.w	r2, r0, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	f020 0001 	biceq.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	f102 0220 	add.w	r2, r2, #32
 8000d38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d44:	fa21 f202 	lsr.w	r2, r1, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_fmul>:
 8000d54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d62:	ea92 0f0c 	teqne	r2, ip
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d06f      	beq.n	8000e4c <__aeabi_fmul+0xf8>
 8000d6c:	441a      	add	r2, r3
 8000d6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d72:	0240      	lsls	r0, r0, #9
 8000d74:	bf18      	it	ne
 8000d76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7a:	d01e      	beq.n	8000dba <__aeabi_fmul+0x66>
 8000d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d88:	fba0 3101 	umull	r3, r1, r0, r1
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d94:	bf3e      	ittt	cc
 8000d96:	0049      	lslcc	r1, r1, #1
 8000d98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	ea40 0001 	orr.w	r0, r0, r1
 8000da2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da6:	2afd      	cmp	r2, #253	; 0xfd
 8000da8:	d81d      	bhi.n	8000de6 <__aeabi_fmul+0x92>
 8000daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db2:	bf08      	it	eq
 8000db4:	f020 0001 	biceq.w	r0, r0, #1
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	0249      	lsleq	r1, r1, #9
 8000dc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dce:	3a7f      	subs	r2, #127	; 0x7f
 8000dd0:	bfc2      	ittt	gt
 8000dd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dda:	4770      	bxgt	lr
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	3a01      	subs	r2, #1
 8000de6:	dc5d      	bgt.n	8000ea4 <__aeabi_fmul+0x150>
 8000de8:	f112 0f19 	cmn.w	r2, #25
 8000dec:	bfdc      	itt	le
 8000dee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	4770      	bxle	lr
 8000df4:	f1c2 0200 	rsb	r2, r2, #0
 8000df8:	0041      	lsls	r1, r0, #1
 8000dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfe:	f1c2 0220 	rsb	r2, r2, #32
 8000e02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0a:	f140 0000 	adc.w	r0, r0, #0
 8000e0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e12:	bf08      	it	eq
 8000e14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e18:	4770      	bx	lr
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xce>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xe6>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e78f      	b.n	8000d6c <__aeabi_fmul+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	bf18      	it	ne
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d00a      	beq.n	8000e72 <__aeabi_fmul+0x11e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1d8      	bne.n	8000e1a <__aeabi_fmul+0xc6>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	bf17      	itett	ne
 8000e78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	f091 0f00 	teqne	r1, #0
 8000e82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e86:	d014      	beq.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_fmul+0x13e>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d10f      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e92:	ea93 0f0c 	teq	r3, ip
 8000e96:	d103      	bne.n	8000ea0 <__aeabi_fmul+0x14c>
 8000e98:	024b      	lsls	r3, r1, #9
 8000e9a:	bf18      	it	ne
 8000e9c:	4608      	movne	r0, r1
 8000e9e:	d108      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ea0:	ea80 0001 	eor.w	r0, r0, r1
 8000ea4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	4770      	bx	lr
 8000eb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_fdiv>:
 8000ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec4:	bf1e      	ittt	ne
 8000ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eca:	ea92 0f0c 	teqne	r2, ip
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d069      	beq.n	8000fa8 <__aeabi_fdiv+0xec>
 8000ed4:	eba2 0203 	sub.w	r2, r2, r3
 8000ed8:	ea80 0c01 	eor.w	ip, r0, r1
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee2:	d037      	beq.n	8000f54 <__aeabi_fdiv+0x98>
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	bf38      	it	cc
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f02:	428b      	cmp	r3, r1
 8000f04:	bf24      	itt	cs
 8000f06:	1a5b      	subcs	r3, r3, r1
 8000f08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1e:	bf24      	itt	cs
 8000f20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f2c:	bf24      	itt	cs
 8000f2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	bf18      	it	ne
 8000f3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3e:	d1e0      	bne.n	8000f02 <__aeabi_fdiv+0x46>
 8000f40:	2afd      	cmp	r2, #253	; 0xfd
 8000f42:	f63f af50 	bhi.w	8000de6 <__aeabi_fmul+0x92>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f4c:	bf08      	it	eq
 8000f4e:	f020 0001 	biceq.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5c:	327f      	adds	r2, #127	; 0x7f
 8000f5e:	bfc2      	ittt	gt
 8000f60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f68:	4770      	bxgt	lr
 8000f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	3a01      	subs	r2, #1
 8000f74:	e737      	b.n	8000de6 <__aeabi_fmul+0x92>
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xc2>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xda>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e795      	b.n	8000ed4 <__aeabi_fdiv+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d108      	bne.n	8000fc4 <__aeabi_fdiv+0x108>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	f47f af7d 	bne.w	8000eb2 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	f47f af70 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e776      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_fdiv+0x118>
 8000fca:	024b      	lsls	r3, r1, #9
 8000fcc:	f43f af4c 	beq.w	8000e68 <__aeabi_fmul+0x114>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e76e      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd8:	bf18      	it	ne
 8000fda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fde:	d1ca      	bne.n	8000f76 <__aeabi_fdiv+0xba>
 8000fe0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe4:	f47f af5c 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fe8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fec:	f47f af3c 	bne.w	8000e68 <__aeabi_fmul+0x114>
 8000ff0:	e75f      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ff2:	bf00      	nop

08000ff4 <__gesf2>:
 8000ff4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff8:	e006      	b.n	8001008 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__lesf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	e002      	b.n	8001008 <__cmpsf2+0x4>
 8001002:	bf00      	nop

08001004 <__cmpsf2>:
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	f84d cd04 	str.w	ip, [sp, #-4]!
 800100c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001010:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	bf18      	it	ne
 800101a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800101e:	d011      	beq.n	8001044 <__cmpsf2+0x40>
 8001020:	b001      	add	sp, #4
 8001022:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001026:	bf18      	it	ne
 8001028:	ea90 0f01 	teqne	r0, r1
 800102c:	bf58      	it	pl
 800102e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001032:	bf88      	it	hi
 8001034:	17c8      	asrhi	r0, r1, #31
 8001036:	bf38      	it	cc
 8001038:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800103c:	bf18      	it	ne
 800103e:	f040 0001 	orrne.w	r0, r0, #1
 8001042:	4770      	bx	lr
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__cmpsf2+0x4c>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d105      	bne.n	800105c <__cmpsf2+0x58>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d1e4      	bne.n	8001020 <__cmpsf2+0x1c>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d0e1      	beq.n	8001020 <__cmpsf2+0x1c>
 800105c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_cfrcmple>:
 8001064:	4684      	mov	ip, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4661      	mov	r1, ip
 800106a:	e7ff      	b.n	800106c <__aeabi_cfcmpeq>

0800106c <__aeabi_cfcmpeq>:
 800106c:	b50f      	push	{r0, r1, r2, r3, lr}
 800106e:	f7ff ffc9 	bl	8001004 <__cmpsf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	bf48      	it	mi
 8001076:	f110 0f00 	cmnmi.w	r0, #0
 800107a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800107c <__aeabi_fcmpeq>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff fff4 	bl	800106c <__aeabi_cfcmpeq>
 8001084:	bf0c      	ite	eq
 8001086:	2001      	moveq	r0, #1
 8001088:	2000      	movne	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmplt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffea 	bl	800106c <__aeabi_cfcmpeq>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmple>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffe0 	bl	800106c <__aeabi_cfcmpeq>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpge>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffd2 	bl	8001064 <__aeabi_cfrcmple>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpgt>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffc8 	bl	8001064 <__aeabi_cfrcmple>
 80010d4:	bf34      	ite	cc
 80010d6:	2001      	movcc	r0, #1
 80010d8:	2000      	movcs	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_f2iz>:
 80010e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e8:	d30f      	bcc.n	800110a <__aeabi_f2iz+0x2a>
 80010ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d90d      	bls.n	8001110 <__aeabi_f2iz+0x30>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	bf18      	it	ne
 8001106:	4240      	negne	r0, r0
 8001108:	4770      	bx	lr
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	4770      	bx	lr
 8001110:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001114:	d101      	bne.n	800111a <__aeabi_f2iz+0x3a>
 8001116:	0242      	lsls	r2, r0, #9
 8001118:	d105      	bne.n	8001126 <__aeabi_f2iz+0x46>
 800111a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800111e:	bf08      	it	eq
 8001120:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr

0800112c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <DAC_SetChannel1Data+0x30>)
 800113e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	3308      	adds	r3, #8
 8001148:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	461a      	mov	r2, r3
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40007400 	.word	0x40007400

08001160 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <DMA_Init+0xa8>)
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800118a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001196:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80011a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80011ae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f023 0307 	bic.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4313      	orrs	r3, r2
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	f01c803f 	.word	0xf01c803f

0800120c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800122a:	e005      	b.n	8001238 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 0201 	bic.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
  }
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <DMA_GetFlagStatus+0x68>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d802      	bhi.n	8001294 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <DMA_GetFlagStatus+0x6c>)
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	e001      	b.n	8001298 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <DMA_GetFlagStatus+0x70>)
 8001296:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e002      	b.n	80012b0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	e001      	b.n	80012d0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	4002640f 	.word	0x4002640f
 80012e0:	40026000 	.word	0x40026000
 80012e4:	40026400 	.word	0x40026400

080012e8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <DMA_ClearFlag+0x50>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d802      	bhi.n	8001300 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <DMA_ClearFlag+0x54>)
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e001      	b.n	8001304 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <DMA_ClearFlag+0x58>)
 8001302:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001314:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800131c:	e006      	b.n	800132c <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001324:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6093      	str	r3, [r2, #8]
  }    
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	4002640f 	.word	0x4002640f
 800133c:	40026000 	.word	0x40026000
 8001340:	40026400 	.word	0x40026400

08001344 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e076      	b.n	800144e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001360:	2201      	movs	r2, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d165      	bne.n	8001448 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2103      	movs	r1, #3
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	4619      	mov	r1, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d003      	beq.n	80013ba <GPIO_Init+0x76>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	791b      	ldrb	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d12e      	bne.n	8001418 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2103      	movs	r1, #3
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	4619      	mov	r1, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	799b      	ldrb	r3, [r3, #6]
 8001406:	4619      	mov	r1, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	b29b      	uxth	r3, r3
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	b29b      	uxth	r3, r3
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2103      	movs	r1, #3
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	79db      	ldrb	r3, [r3, #7]
 8001438:	4619      	mov	r1, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d985      	bls.n	8001360 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001472:	4909      	ldr	r1, [pc, #36]	; (8001498 <RCC_AHB1PeriphClockCmd+0x38>)
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <RCC_AHB1PeriphClockCmd+0x38>)
 8001476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800147e:	e006      	b.n	800148e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001480:	4905      	ldr	r1, [pc, #20]	; (8001498 <RCC_AHB1PeriphClockCmd+0x38>)
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <RCC_AHB1PeriphClockCmd+0x38>)
 8001484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	43db      	mvns	r3, r3
 800148a:	4013      	ands	r3, r2
 800148c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800

0800149c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80014b6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	885b      	ldrh	r3, [r3, #2]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	89fa      	ldrh	r2, [r7, #14]
 80014fe:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8b9b      	ldrh	r3, [r3, #28]
 8001504:	b29b      	uxth	r3, r3
 8001506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	8a1a      	ldrh	r2, [r3, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	821a      	strh	r2, [r3, #16]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2207      	movs	r2, #7
 8001560:	821a      	strh	r2, [r3, #16]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	819a      	strh	r2, [r3, #12]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	891b      	ldrh	r3, [r3, #8]
 800159c:	b29a      	uxth	r2, r3
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	809a      	strh	r2, [r3, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	b2db      	uxtb	r3, r3
 8001608:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	899b      	ldrh	r3, [r3, #12]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e011      	b.n	8001656 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8a1b      	ldrh	r3, [r3, #16]
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4013      	ands	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e006      	b.n	8001656 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8a9b      	ldrh	r3, [r3, #20]
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4013      	ands	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b29b      	uxth	r3, r3
 800165c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800165e:	2201      	movs	r2, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <USART_GetITStatus+0xa4>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	74fb      	strb	r3, [r7, #19]
 8001686:	e001      	b.n	800168c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800168c:	7cfb      	ldrb	r3, [r7, #19]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <Audio_MAL_IRQHandler+0xe8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff fde4 	bl	8001274 <DMA_GetFlagStatus>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d062      	beq.n	8001778 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d04a      	beq.n	8001750 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80016ba:	bf00      	nop
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fdbf 	bl	8001244 <DMA_GetCmdStatus>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f7      	bne.n	80016bc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <Audio_MAL_IRQHandler+0xe8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff fe06 	bl	80012e8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <Audio_MAL_IRQHandler+0xf0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <Audio_MAL_IRQHandler+0xf4>)
 80016e4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	bf28      	it	cs
 80016f2:	4613      	movcs	r3, r2
 80016f4:	4a25      	ldr	r2, [pc, #148]	; (800178c <Audio_MAL_IRQHandler+0xf4>)
 80016f6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4923      	ldr	r1, [pc, #140]	; (800178c <Audio_MAL_IRQHandler+0xf4>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fd2e 	bl	8001160 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fd7e 	bl	800120c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <Audio_MAL_IRQHandler+0xf0>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800171c:	428b      	cmp	r3, r1
 800171e:	bf28      	it	cs
 8001720:	460b      	movcs	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <Audio_MAL_IRQHandler+0xf0>)
 8001728:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001736:	428b      	cmp	r3, r1
 8001738:	bf28      	it	cs
 800173a:	460b      	movcs	r3, r1
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <Audio_MAL_IRQHandler+0xec>)
 8001740:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd5f 	bl	800120c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800174e:	e013      	b.n	8001778 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd58 	bl	800120c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <Audio_MAL_IRQHandler+0xe4>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <Audio_MAL_IRQHandler+0xe8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f7ff fdbe 	bl	80012e8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <Audio_MAL_IRQHandler+0xf0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fdc6 	bl	8003304 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000008 	.word	0x20000008
 8001780:	2000000c 	.word	0x2000000c
 8001784:	20000000 	.word	0x20000000
 8001788:	20000e04 	.word	0x20000e04
 800178c:	20000e44 	.word	0x20000e44

08001790 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001794:	f7ff ff80 	bl	8001698 <Audio_MAL_IRQHandler>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80017a0:	f7ff ff7a 	bl	8001698 <Audio_MAL_IRQHandler>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80017ac:	2102      	movs	r1, #2
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <SPI3_IRQHandler+0x3c>)
 80017b0:	f7ff feea 	bl	8001588 <SPI_I2S_GetFlagStatus>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d011      	beq.n	80017de <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <SPI3_IRQHandler+0x40>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d106      	bne.n	80017d0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80017c2:	f001 fda9 	bl	8003318 <EVAL_AUDIO_GetSampleCallBack>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4619      	mov	r1, r3
 80017ca:	2004      	movs	r0, #4
 80017cc:	f7ff fcae 	bl	800112c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80017d0:	f001 fda2 	bl	8003318 <EVAL_AUDIO_GetSampleCallBack>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <SPI3_IRQHandler+0x3c>)
 80017da:	f7ff fec7 	bl	800156c <SPI_I2S_SendData>
  }
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40003c00 	.word	0x40003c00
 80017e8:	20000004 	.word	0x20000004

080017ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da0b      	bge.n	8001818 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001800:	490d      	ldr	r1, [pc, #52]	; (8001838 <NVIC_SetPriority+0x4c>)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	3b04      	subs	r3, #4
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001816:	e009      	b.n	800182c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001818:	4908      	ldr	r1, [pc, #32]	; (800183c <NVIC_SetPriority+0x50>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	e000e100 	.word	0xe000e100

08001840 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184e:	d301      	bcc.n	8001854 <SysTick_Config+0x14>
 8001850:	2301      	movs	r3, #1
 8001852:	e011      	b.n	8001878 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800185c:	3b01      	subs	r3, #1
 800185e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8001860:	210f      	movs	r1, #15
 8001862:	f04f 30ff 	mov.w	r0, #4294967295
 8001866:	f7ff ffc1 	bl	80017ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <SysTick_Config+0x40>)
 8001872:	2207      	movs	r2, #7
 8001874:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	e000e010 	.word	0xe000e010

08001884 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <SysTick_Handler+0xe4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a35      	ldr	r2, [pc, #212]	; (8001968 <SysTick_Handler+0xe4>)
 8001892:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <SysTick_Handler+0xe8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <SysTick_Handler+0x22>
		TM_Time2--;
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <SysTick_Handler+0xe8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <SysTick_Handler+0xe8>)
 80018a4:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 80018a6:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e052      	b.n	8001956 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <SysTick_Handler+0xec>)
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d048      	beq.n	8001950 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <SysTick_Handler+0xec>)
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d040      	beq.n	8001950 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <SysTick_Handler+0xec>)
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d038      	beq.n	8001950 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4a23      	ldr	r2, [pc, #140]	; (8001970 <SysTick_Handler+0xec>)
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	3a01      	subs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <SysTick_Handler+0xec>)
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d128      	bne.n	8001950 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <SysTick_Handler+0xec>)
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4918      	ldr	r1, [pc, #96]	; (8001970 <SysTick_Handler+0xec>)
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <SysTick_Handler+0xec>)
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4912      	ldr	r1, [pc, #72]	; (8001970 <SysTick_Handler+0xec>)
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <SysTick_Handler+0xec>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Handler+0xec>)
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3301      	adds	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SysTick_Handler+0xec>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3a7      	bcc.n	80018b0 <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000db8 	.word	0x20000db8
 800196c:	20000dbc 	.word	0x20000dbc
 8001970:	20000dc4 	.word	0x20000dc4

08001974 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <TM_DELAY_Init+0x3c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <TM_DELAY_Init+0x40>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5b 	bl	8001840 <SysTick_Config>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d000      	beq.n	8001992 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8001990:	e7fe      	b.n	8001990 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <TM_DELAY_Init+0x3c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <TM_DELAY_Init+0x44>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <TM_DELAY_Init+0x48>)
 80019a2:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <TM_DELAY_Init+0x4c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000d30 	.word	0x20000d30
 80019b4:	10624dd3 	.word	0x10624dd3
 80019b8:	02659117 	.word	0x02659117
 80019bc:	20000e80 	.word	0x20000e80
 80019c0:	20000dc0 	.word	0x20000dc0

080019c4 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 80019ca:	2303      	movs	r3, #3
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <TM_DISCO_LedInit+0x2c>)
 80019dc:	f000 f81c 	bl	8001a18 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <TM_DISCO_LedInit+0x2c>)
 80019e2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80019e6:	835a      	strh	r2, [r3, #26]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	2101      	movs	r1, #1
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TM_DISCO_ButtonInit+0x20>)
 8001a0a:	f000 f805 	bl	8001a18 <TM_GPIO_Init>
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40020000 	.word	0x40020000

08001a18 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	707b      	strb	r3, [r7, #1]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f875 	bl	8001b28 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001a3e:	7838      	ldrb	r0, [r7, #0]
 8001a40:	787a      	ldrb	r2, [r7, #1]
 8001a42:	8879      	ldrh	r1, [r7, #2]
 8001a44:	7d3b      	ldrb	r3, [r7, #20]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	7c3b      	ldrb	r3, [r7, #16]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f882 	bl	8001b58 <TM_GPIO_INT_Init>
 8001a54:	e000      	b.n	8001a58 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001a56:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop

08001a60 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	460b      	mov	r3, r1
 8001a74:	707b      	strb	r3, [r7, #1]
 8001a76:	4613      	mov	r3, r2
 8001a78:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03e      	beq.n	8001afe <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f851 	bl	8001b28 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e029      	b.n	8001ae0 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001a8c:	887a      	ldrh	r2, [r7, #2]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	fa42 f303 	asr.w	r3, r2, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01d      	beq.n	8001ad8 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	08d9      	lsrs	r1, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3108      	adds	r1, #8
 8001aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	f001 0107 	and.w	r1, r1, #7
 8001ab2:	0089      	lsls	r1, r1, #2
 8001ab4:	200f      	movs	r0, #15
 8001ab6:	fa00 f101 	lsl.w	r1, r0, r1
 8001aba:	43c9      	mvns	r1, r1
 8001abc:	400b      	ands	r3, r1
 8001abe:	7f38      	ldrb	r0, [r7, #28]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	f001 0107 	and.w	r1, r1, #7
 8001ac6:	0089      	lsls	r1, r1, #2
 8001ac8:	fa00 f101 	lsl.w	r1, r0, r1
 8001acc:	4319      	orrs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ad6:	e000      	b.n	8001ada <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001ad8:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	d9d2      	bls.n	8001a8c <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001ae6:	787a      	ldrb	r2, [r7, #1]
 8001ae8:	8879      	ldrh	r1, [r7, #2]
 8001aea:	7e3b      	ldrb	r3, [r7, #24]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	783b      	ldrb	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	2202      	movs	r2, #2
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f82e 	bl	8001b58 <TM_GPIO_INT_Init>
 8001afc:	e000      	b.n	8001b00 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001afe:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001b16:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	b29b      	uxth	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffe9 	bl	8001b08 <TM_GPIO_GetPortSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	fa03 f102 	lsl.w	r1, r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <TM_GPIO_INT_EnableClock+0x2c>)
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <TM_GPIO_INT_EnableClock+0x2c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	430b      	orrs	r3, r1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	807b      	strh	r3, [r7, #2]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	707b      	strb	r3, [r7, #1]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffc8 	bl	8001b08 <TM_GPIO_GetPortSource>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e067      	b.n	8001c52 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	fa42 f303 	asr.w	r3, r2, r3
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d05b      	beq.n	8001c4a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	7bba      	ldrb	r2, [r7, #14]
 8001b96:	4932      	ldr	r1, [pc, #200]	; (8001c60 <TM_GPIO_INT_Init+0x108>)
 8001b98:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b9c:	b211      	sxth	r1, r2
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	b212      	sxth	r2, r2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	b212      	sxth	r2, r2
 8001bac:	b291      	uxth	r1, r2
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <TM_GPIO_INT_Init+0x108>)
 8001bb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	43d2      	mvns	r2, r2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	7e39      	ldrb	r1, [r7, #24]
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	0052      	lsls	r2, r2, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2103      	movs	r1, #3
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4013      	ands	r3, r2
 8001be8:	7879      	ldrb	r1, [r7, #1]
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	0052      	lsls	r2, r2, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <TM_GPIO_INT_Init+0xac>
 8001bfe:	787b      	ldrb	r3, [r7, #1]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	b292      	uxth	r2, r2
 8001c12:	43d2      	mvns	r2, r2
 8001c14:	401a      	ands	r2, r3
 8001c16:	7839      	ldrb	r1, [r7, #0]
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2103      	movs	r1, #3
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4013      	ands	r3, r2
 8001c38:	7f39      	ldrb	r1, [r7, #28]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e000      	b.n	8001c4c <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001c4a:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d994      	bls.n	8001b82 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000ddc 	.word	0x20000ddc

08001c64 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <TM_SPI_Send+0x1e>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e025      	b.n	8001cce <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001c82:	bf00      	nop
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	891b      	ldrh	r3, [r3, #8]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f8      	beq.n	8001c84 <TM_SPI_Send+0x20>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	891b      	ldrh	r3, [r3, #8]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f1      	bne.n	8001c84 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001ca8:	bf00      	nop
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	891b      	ldrh	r3, [r3, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f8      	beq.n	8001caa <TM_SPI_Send+0x46>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	891b      	ldrh	r3, [r3, #8]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f1      	bne.n	8001caa <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	899b      	ldrh	r3, [r3, #12]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001cde:	f000 faf5 	bl	80022cc <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001ce2:	f000 f86b 	bl	8001dbc <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	2201      	movs	r2, #1
 8001cea:	210f      	movs	r1, #15
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f8c3 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b3b      	cmp	r3, #59	; 0x3b
 8001cf6:	d104      	bne.n	8001d02 <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e008      	b.n	8001d14 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b3f      	cmp	r3, #63	; 0x3f
 8001d06:	d104      	bne.n	8001d12 <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e000      	b.n	8001d14 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000df2 	.word	0x20000df2

08001d20 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001d30:	f000 f844 	bl	8001dbc <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001d34:	f000 faca 	bl	80022cc <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001d38:	f7ff ffce 	bl	8001cd8 <TM_LIS302DL_LIS3DSH_Detect>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8001d42:	79ba      	ldrb	r2, [r7, #6]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f945 	bl	8001fd8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e010      	b.n	8001d74 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001d52:	f7ff ffc1 	bl	8001cd8 <TM_LIS302DL_LIS3DSH_Detect>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d107      	bne.n	8001d6c <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8001d5c:	79ba      	ldrb	r2, [r7, #6]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8b4 	bl	8001ed0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e003      	b.n	8001d74 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000df2 	.word	0x20000df2

08001d80 <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d104      	bne.n	8001d9a <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fa2f 	bl	80021f4 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e009      	b.n	8001dae <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d104      	bne.n	8001dac <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f996 	bl	80020d4 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e000      	b.n	8001dae <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000df2 	.word	0x20000df2

08001dbc <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11d      	bne.n	8001e06 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8001dce:	f000 fa8f 	bl	80022f0 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2010      	movs	r0, #16
 8001dd6:	f7ff fb43 	bl	8001460 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001dde:	2301      	movs	r3, #1
 8001de0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001dea:	2301      	movs	r3, #1
 8001dec:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001df4:	f7ff faa6 	bl	8001344 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e000      	b.n	8001e08 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 8001e06:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000df3 	.word	0x20000df3
 8001e14:	40013000 	.word	0x40013000
 8001e18:	40021000 	.word	0x40021000

08001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001e2e:	2208      	movs	r2, #8
 8001e30:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d907      	bls.n	8001e48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d103      	bne.n	8001e48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e46:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001e4e:	f7ff ff09 	bl	8001c64 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8001e52:	78bb      	ldrb	r3, [r7, #2]
 8001e54:	461a      	mov	r2, r3
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4806      	ldr	r0, [pc, #24]	; (8001e74 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001e5a:	f000 fab9 	bl	80023d0 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001e60:	2208      	movs	r2, #8
 8001e62:	831a      	strh	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	20000df2 	.word	0x20000df2
 8001e74:	40013000 	.word	0x40013000

08001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
 8001e84:	4613      	mov	r3, r2
 8001e86:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e94:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d903      	bls.n	8001ea4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001eaa:	f7ff fedb 	bl	8001c64 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8001eae:	78bb      	ldrb	r3, [r7, #2]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001eb6:	f000 facf 	bl	8002458 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001eba:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	831a      	strh	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40013000 	.word	0x40013000

08001ed0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8001ee0:	2367      	movs	r3, #103	; 0x67
 8001ee2:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e02a      	b.n	8001f48 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001f02:	4a31      	ldr	r2, [pc, #196]	; (8001fc8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e01f      	b.n	8001f48 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001f18:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e014      	b.n	8001f48 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d107      	bne.n	8001f34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	f043 0318 	orr.w	r3, r3, #24
 8001f2a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001f2e:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e009      	b.n	8001f48 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d13b      	bne.n	8001fb2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	f043 0320 	orr.w	r3, r3, #32
 8001f40:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8001f46:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8001f48:	79bb      	ldrb	r3, [r7, #6]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d104      	bne.n	8001f5e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8001f54:	89fb      	ldrh	r3, [r7, #14]
 8001f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5a:	81fb      	strh	r3, [r7, #14]
 8001f5c:	e012      	b.n	8001f84 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d106      	bne.n	8001f72 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f6e:	81fb      	strh	r3, [r7, #14]
 8001f70:	e008      	b.n	8001f84 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d11e      	bne.n	8001fb6 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001f7e:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001f82:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001f8a:	f107 030d 	add.w	r3, r7, #13
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2120      	movs	r1, #32
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff42 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001fa2:	f107 030d 	add.w	r3, r7, #13
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2124      	movs	r1, #36	; 0x24
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff36 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001fb0:	e002      	b.n	8001fb8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 8001fb2:	bf00      	nop
 8001fb4:	e000      	b.n	8001fb8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8001fb6:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000e84 	.word	0x20000e84
 8001fc4:	3d75c28f 	.word	0x3d75c28f
 8001fc8:	3df5c28f 	.word	0x3df5c28f
 8001fcc:	3e3851ec 	.word	0x3e3851ec
 8001fd0:	3e75c28f 	.word	0x3e75c28f
 8001fd4:	3f3ae148 	.word	0x3f3ae148

08001fd8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001fe8:	f107 030e 	add.w	r3, r7, #14
 8001fec:	2201      	movs	r2, #1
 8001fee:	2121      	movs	r1, #33	; 0x21
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff41 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002000:	f107 030e 	add.w	r3, r7, #14
 8002004:	2201      	movs	r2, #1
 8002006:	2121      	movs	r1, #33	; 0x21
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff07 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 800200e:	2347      	movs	r3, #71	; 0x47
 8002010:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d105      	bne.n	8002024 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e00a      	b.n	800203a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d147      	bne.n	80020ba <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	b29b      	uxth	r3, r3
 8002032:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8002038:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 800203a:	f107 030e 	add.w	r3, r7, #14
 800203e:	2201      	movs	r2, #1
 8002040:	2120      	movs	r1, #32
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff feea 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002048:	f107 030e 	add.w	r3, r7, #14
 800204c:	2201      	movs	r2, #1
 800204e:	2121      	movs	r1, #33	; 0x21
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fee3 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 800205c:	b29b      	uxth	r3, r3
 800205e:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002066:	b29b      	uxth	r3, r3
 8002068:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 8002070:	89fb      	ldrh	r3, [r7, #14]
 8002072:	81fb      	strh	r3, [r7, #14]
 8002074:	e019      	b.n	80020aa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d105      	bne.n	8002088 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	81fb      	strh	r3, [r7, #14]
 8002086:	e010      	b.n	80020aa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d105      	bne.n	800209a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	b29b      	uxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]
 8002098:	e007      	b.n	80020aa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	2b07      	cmp	r3, #7
 800209e:	d10e      	bne.n	80020be <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	f043 0303 	orr.w	r3, r3, #3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80020aa:	f107 030e 	add.w	r3, r7, #14
 80020ae:	2201      	movs	r2, #1
 80020b0:	2121      	movs	r1, #33	; 0x21
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff feb2 	bl	8001e1c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 80020b8:	e002      	b.n	80020c0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 80020be:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000e84 	.word	0x20000e84
 80020cc:	41900000 	.word	0x41900000
 80020d0:	42900000 	.word	0x42900000

080020d4 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2201      	movs	r2, #1
 80020e2:	2128      	movs	r1, #40	; 0x28
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fec7 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	3301      	adds	r3, #1
 80020f0:	2201      	movs	r2, #1
 80020f2:	2129      	movs	r1, #41	; 0x29
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff febf 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	3302      	adds	r3, #2
 8002100:	2201      	movs	r2, #1
 8002102:	212a      	movs	r1, #42	; 0x2a
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff feb7 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	3303      	adds	r3, #3
 8002110:	2201      	movs	r2, #1
 8002112:	212b      	movs	r1, #43	; 0x2b
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff feaf 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	3304      	adds	r3, #4
 8002120:	2201      	movs	r2, #1
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fea7 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	3305      	adds	r3, #5
 8002130:	2201      	movs	r2, #1
 8002132:	212d      	movs	r1, #45	; 0x2d
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe9f 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 800213a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800213e:	b29b      	uxth	r3, r3
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b29a      	uxth	r2, r3
 8002144:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4413      	add	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	b21b      	sxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fdab 	bl	8000cac <__aeabi_i2f>
 8002156:	4602      	mov	r2, r0
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7fe fdf8 	bl	8000d54 <__aeabi_fmul>
 8002164:	4603      	mov	r3, r0
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ffba 	bl	80010e0 <__aeabi_f2iz>
 800216c:	4603      	mov	r3, r0
 800216e:	b21a      	sxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8002174:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002178:	b29b      	uxth	r3, r3
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b29a      	uxth	r2, r3
 800217e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4413      	add	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21b      	sxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fd8e 	bl	8000cac <__aeabi_i2f>
 8002190:	4602      	mov	r2, r0
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7fe fddb 	bl	8000d54 <__aeabi_fmul>
 800219e:	4603      	mov	r3, r0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff9d 	bl	80010e0 <__aeabi_f2iz>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 80021ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fd71 	bl	8000cac <__aeabi_i2f>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f7fe fdbe 	bl	8000d54 <__aeabi_fmul>
 80021d8:	4603      	mov	r3, r0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe ff80 	bl	80010e0 <__aeabi_f2iz>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	809a      	strh	r2, [r3, #4]
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000e84 	.word	0x20000e84

080021f4 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	2201      	movs	r2, #1
 8002202:	2129      	movs	r1, #41	; 0x29
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fe37 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	3301      	adds	r3, #1
 8002210:	2201      	movs	r2, #1
 8002212:	212b      	movs	r1, #43	; 0x2b
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe2f 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	3302      	adds	r3, #2
 8002220:	2201      	movs	r2, #1
 8002222:	212d      	movs	r1, #45	; 0x2d
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fe27 	bl	8001e78 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 800222a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fd3c 	bl	8000cac <__aeabi_i2f>
 8002234:	4602      	mov	r2, r0
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fd89 	bl	8000d54 <__aeabi_fmul>
 8002242:	4603      	mov	r3, r0
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe ff4b 	bl	80010e0 <__aeabi_f2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	b21a      	sxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 8002252:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fd28 	bl	8000cac <__aeabi_i2f>
 800225c:	4602      	mov	r2, r0
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f7fe fd75 	bl	8000d54 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ff37 	bl	80010e0 <__aeabi_f2iz>
 8002272:	4603      	mov	r3, r0
 8002274:	b21a      	sxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 800227a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fd14 	bl	8000cac <__aeabi_i2f>
 8002284:	4602      	mov	r2, r0
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fd61 	bl	8000d54 <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff23 	bl	80010e0 <__aeabi_f2iz>
 800229a:	4603      	mov	r3, r0
 800229c:	b21a      	sxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	425b      	negs	r3, r3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	801a      	strh	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000e84 	.word	0x20000e84

080022cc <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 80022d4:	607b      	str	r3, [r7, #4]
	while (delay--);
 80022d6:	bf00      	nop
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1e5a      	subs	r2, r3, #1
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1fa      	bne.n	80022d8 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	000f4240 	.word	0x000f4240

080022f0 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <TM_SPI_Init+0xc8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10a      	bne.n	800231a <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8002304:	78f9      	ldrb	r1, [r7, #3]
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2320      	movs	r3, #32
 8002312:	2200      	movs	r2, #0
 8002314:	4828      	ldr	r0, [pc, #160]	; (80023b8 <TM_SPI_Init+0xc8>)
 8002316:	f000 f8f5 	bl	8002504 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <TM_SPI_Init+0xcc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10a      	bne.n	8002338 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8002322:	78f9      	ldrb	r1, [r7, #3]
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	f44f 7382 	mov.w	r3, #260	; 0x104
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2320      	movs	r3, #32
 8002330:	2200      	movs	r2, #0
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <TM_SPI_Init+0xcc>)
 8002334:	f000 f8e6 	bl	8002504 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <TM_SPI_Init+0xd0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10a      	bne.n	8002356 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	2300      	movs	r3, #0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	f44f 7382 	mov.w	r3, #260	; 0x104
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2320      	movs	r3, #32
 800234e:	2200      	movs	r2, #0
 8002350:	481b      	ldr	r0, [pc, #108]	; (80023c0 <TM_SPI_Init+0xd0>)
 8002352:	f000 f8d7 	bl	8002504 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <TM_SPI_Init+0xd4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10a      	bne.n	8002374 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 800235e:	78f9      	ldrb	r1, [r7, #3]
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2320      	movs	r3, #32
 800236c:	2200      	movs	r2, #0
 800236e:	4815      	ldr	r0, [pc, #84]	; (80023c4 <TM_SPI_Init+0xd4>)
 8002370:	f000 f8c8 	bl	8002504 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <TM_SPI_Init+0xd8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10a      	bne.n	8002392 <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 800237c:	78f9      	ldrb	r1, [r7, #3]
 800237e:	2300      	movs	r3, #0
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2320      	movs	r3, #32
 800238a:	2200      	movs	r2, #0
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <TM_SPI_Init+0xd8>)
 800238e:	f000 f8b9 	bl	8002504 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <TM_SPI_Init+0xdc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10a      	bne.n	80023b0 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 800239a:	78f9      	ldrb	r1, [r7, #3]
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2320      	movs	r3, #32
 80023a8:	2200      	movs	r2, #0
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <TM_SPI_Init+0xdc>)
 80023ac:	f000 f8aa 	bl	8002504 <TM_SPIx_Init>
	}
#endif
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40013000 	.word	0x40013000
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40003c00 	.word	0x40003c00
 80023c4:	40013400 	.word	0x40013400
 80023c8:	40015000 	.word	0x40015000
 80023cc:	40015400 	.word	0x40015400

080023d0 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d031      	beq.n	800244e <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80023ea:	bf00      	nop
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	891b      	ldrh	r3, [r3, #8]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f8      	beq.n	80023ec <TM_SPI_WriteMulti+0x1c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	891b      	ldrh	r3, [r3, #8]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f1      	bne.n	80023ec <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e01a      	b.n	8002444 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 800241c:	bf00      	nop
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	891b      	ldrh	r3, [r3, #8]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f8      	beq.n	800241e <TM_SPI_WriteMulti+0x4e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	891b      	ldrh	r3, [r3, #8]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f1      	bne.n	800241e <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3e0      	bcc.n	800240e <TM_SPI_WriteMulti+0x3e>
 800244c:	e000      	b.n	8002450 <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800244e:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d034      	beq.n	80024e0 <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002476:	bf00      	nop
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	891b      	ldrh	r3, [r3, #8]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f8      	beq.n	8002478 <TM_SPI_ReadMulti+0x20>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	891b      	ldrh	r3, [r3, #8]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f1      	bne.n	8002478 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e01d      	b.n	80024d6 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 80024a2:	bf00      	nop
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	891b      	ldrh	r3, [r3, #8]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f8      	beq.n	80024a4 <TM_SPI_ReadMulti+0x4c>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	891b      	ldrh	r3, [r3, #8]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f1      	bne.n	80024a4 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	8992      	ldrh	r2, [r2, #12]
 80024ca:	b292      	uxth	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d3dd      	bcc.n	800249a <TM_SPI_ReadMulti+0x42>
 80024de:	e000      	b.n	80024e2 <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80024e0:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

08002504 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	70fb      	strb	r3, [r7, #3]
 8002516:	460b      	mov	r3, r1
 8002518:	70bb      	strb	r3, [r7, #2]
 800251a:	4613      	mov	r3, r2
 800251c:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fffe 	bl	8001524 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a51      	ldr	r2, [pc, #324]	; (8002670 <TM_SPIx_Init+0x16c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10b      	bne.n	8002548 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <TM_SPIx_Init+0x170>)
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <TM_SPIx_Init+0x170>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800253a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f8a4 	bl	800268c <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8002544:	2300      	movs	r3, #0
 8002546:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <TM_SPIx_Init+0x174>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10b      	bne.n	8002568 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002550:	4a48      	ldr	r2, [pc, #288]	; (8002674 <TM_SPIx_Init+0x170>)
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <TM_SPIx_Init+0x170>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f8c4 	bl	80026ec <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8002564:	2300      	movs	r3, #0
 8002566:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a44      	ldr	r2, [pc, #272]	; (800267c <TM_SPIx_Init+0x178>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10b      	bne.n	8002588 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002570:	4a40      	ldr	r2, [pc, #256]	; (8002674 <TM_SPIx_Init+0x170>)
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <TM_SPIx_Init+0x170>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f900 	bl	8002784 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8002584:	2300      	movs	r3, #0
 8002586:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <TM_SPIx_Init+0x17c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10b      	bne.n	80025a8 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8002590:	4a38      	ldr	r2, [pc, #224]	; (8002674 <TM_SPIx_Init+0x170>)
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <TM_SPIx_Init+0x170>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f922 	bl	80027e8 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a36      	ldr	r2, [pc, #216]	; (8002684 <TM_SPIx_Init+0x180>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10b      	bne.n	80025c8 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <TM_SPIx_Init+0x170>)
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <TM_SPIx_Init+0x170>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ba:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f942 	bl	8002848 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <TM_SPIx_Init+0x184>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10b      	bne.n	80025e8 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 80025d0:	4a28      	ldr	r2, [pc, #160]	; (8002674 <TM_SPIx_Init+0x170>)
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <TM_SPIx_Init+0x170>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f96e 	bl	80028c0 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 80025e8:	883b      	ldrh	r3, [r7, #0]
 80025ea:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80025ec:	2300      	movs	r3, #0
 80025ee:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 80025f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025f2:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 80025f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025f6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80025f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fc:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 80025fe:	78bb      	ldrb	r3, [r7, #2]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002604:	2300      	movs	r3, #0
 8002606:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002608:	2300      	movs	r3, #0
 800260a:	82bb      	strh	r3, [r7, #20]
 800260c:	e016      	b.n	800263c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800260e:	78bb      	ldrb	r3, [r7, #2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d104      	bne.n	800261e <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002614:	2300      	movs	r3, #0
 8002616:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002618:	2301      	movs	r3, #1
 800261a:	82bb      	strh	r3, [r7, #20]
 800261c:	e00e      	b.n	800263c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 800261e:	78bb      	ldrb	r3, [r7, #2]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d104      	bne.n	800262e <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002624:	2302      	movs	r3, #2
 8002626:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002628:	2300      	movs	r3, #0
 800262a:	82bb      	strh	r3, [r7, #20]
 800262c:	e006      	b.n	800263c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 800262e:	78bb      	ldrb	r3, [r7, #2]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d103      	bne.n	800263c <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002634:	2302      	movs	r3, #2
 8002636:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002638:	2301      	movs	r3, #1
 800263a:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe ff22 	bl	800149c <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	801a      	strh	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40013000 	.word	0x40013000
 8002674:	40023800 	.word	0x40023800
 8002678:	40003800 	.word	0x40003800
 800267c:	40003c00 	.word	0x40003c00
 8002680:	40013400 	.word	0x40013400
 8002684:	40015000 	.word	0x40015000
 8002688:	40015400 	.word	0x40015400

0800268c <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af02      	add	r7, sp, #8
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 800269c:	2305      	movs	r3, #5
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2303      	movs	r3, #3
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2300      	movs	r3, #0
 80026a6:	2200      	movs	r2, #0
 80026a8:	21e0      	movs	r1, #224	; 0xe0
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <TM_SPI1_INT_InitPins+0x54>)
 80026ac:	f7ff f9d8 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d109      	bne.n	80026ca <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80026b6:	2305      	movs	r3, #5
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2303      	movs	r3, #3
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	2200      	movs	r2, #0
 80026c2:	2138      	movs	r1, #56	; 0x38
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <TM_SPI1_INT_InitPins+0x58>)
 80026c6:	f7ff f9cb 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d103      	bne.n	80026d8 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 80026d0:	2105      	movs	r1, #5
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <TM_SPI1_INT_InitPins+0x5c>)
 80026d4:	f7ff ff0a 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40020400 	.word	0x40020400
 80026e8:	40013000 	.word	0x40013000

080026ec <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d114      	bne.n	8002726 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 80026fc:	2305      	movs	r3, #5
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2303      	movs	r3, #3
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	2200      	movs	r2, #0
 8002708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800270c:	4819      	ldr	r0, [pc, #100]	; (8002774 <TM_SPI2_INT_InitPins+0x88>)
 800270e:	f7ff f9a7 	bl	8001a60 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002712:	2305      	movs	r3, #5
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2303      	movs	r3, #3
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2300      	movs	r3, #0
 800271c:	2200      	movs	r2, #0
 800271e:	210c      	movs	r1, #12
 8002720:	4815      	ldr	r0, [pc, #84]	; (8002778 <TM_SPI2_INT_InitPins+0x8c>)
 8002722:	f7ff f99d 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10a      	bne.n	8002742 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 800272c:	2305      	movs	r3, #5
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2303      	movs	r3, #3
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <TM_SPI2_INT_InitPins+0x88>)
 800273e:	f7ff f98f 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d109      	bne.n	800275c <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002748:	2305      	movs	r3, #5
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2303      	movs	r3, #3
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	2200      	movs	r2, #0
 8002754:	210d      	movs	r1, #13
 8002756:	4809      	ldr	r0, [pc, #36]	; (800277c <TM_SPI2_INT_InitPins+0x90>)
 8002758:	f7ff f982 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d103      	bne.n	800276a <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8002762:	2105      	movs	r1, #5
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <TM_SPI2_INT_InitPins+0x94>)
 8002766:	f7ff fec1 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40022000 	.word	0x40022000
 8002780:	40003800 	.word	0x40003800

08002784 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af02      	add	r7, sp, #8
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002794:	2306      	movs	r3, #6
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2303      	movs	r3, #3
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	2200      	movs	r2, #0
 80027a0:	2138      	movs	r1, #56	; 0x38
 80027a2:	480e      	ldr	r0, [pc, #56]	; (80027dc <TM_SPI3_INT_InitPins+0x58>)
 80027a4:	f7ff f95c 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10a      	bne.n	80027c4 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 80027ae:	2306      	movs	r3, #6
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	2303      	movs	r3, #3
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2300      	movs	r3, #0
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <TM_SPI3_INT_InitPins+0x5c>)
 80027c0:	f7ff f94e 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d103      	bne.n	80027d2 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 80027ca:	2106      	movs	r1, #6
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <TM_SPI3_INT_InitPins+0x60>)
 80027ce:	f7ff fe8d 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40003c00 	.word	0x40003c00

080027e8 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 80027f8:	2305      	movs	r3, #5
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2303      	movs	r3, #3
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	2164      	movs	r1, #100	; 0x64
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <TM_SPI4_INT_InitPins+0x58>)
 8002808:	f7ff f92a 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10a      	bne.n	8002828 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002812:	2305      	movs	r3, #5
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2303      	movs	r3, #3
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2300      	movs	r3, #0
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <TM_SPI4_INT_InitPins+0x58>)
 8002824:	f7ff f91c 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d103      	bne.n	8002836 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 800282e:	2105      	movs	r1, #5
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <TM_SPI4_INT_InitPins+0x5c>)
 8002832:	f7ff fe5b 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	40013400 	.word	0x40013400

08002848 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af02      	add	r7, sp, #8
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002858:	2305      	movs	r3, #5
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	2303      	movs	r3, #3
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002868:	4812      	ldr	r0, [pc, #72]	; (80028b4 <TM_SPI5_INT_InitPins+0x6c>)
 800286a:	f7ff f8f9 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d114      	bne.n	800289e <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002874:	2305      	movs	r3, #5
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2303      	movs	r3, #3
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002884:	480b      	ldr	r0, [pc, #44]	; (80028b4 <TM_SPI5_INT_InitPins+0x6c>)
 8002886:	f7ff f8eb 	bl	8001a60 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 800288a:	2305      	movs	r3, #5
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2303      	movs	r3, #3
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	2200      	movs	r2, #0
 8002896:	21c0      	movs	r1, #192	; 0xc0
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <TM_SPI5_INT_InitPins+0x70>)
 800289a:	f7ff f8e1 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d103      	bne.n	80028ac <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 80028a4:	2105      	movs	r1, #5
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <TM_SPI5_INT_InitPins+0x74>)
 80028a8:	f7ff fe20 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021c00 	.word	0x40021c00
 80028bc:	40015000 	.word	0x40015000

080028c0 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 80028d0:	2305      	movs	r3, #5
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2303      	movs	r3, #3
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80028e0:	4806      	ldr	r0, [pc, #24]	; (80028fc <TM_SPI6_INT_InitPins+0x3c>)
 80028e2:	f7ff f8bd 	bl	8001a60 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d103      	bne.n	80028f4 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 80028ec:	2105      	movs	r1, #5
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <TM_SPI6_INT_InitPins+0x40>)
 80028f0:	f7ff fdfc 	bl	80024ec <TM_SPI_InitCustomPinsCallback>
	}
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021800 	.word	0x40021800
 8002900:	40015400 	.word	0x40015400

08002904 <average>:
//// Letter Z
//double smooth2Zx[140] = {-0.26316666666666666, -0.12121666666666664, -0.15685166666666664, -0.2537961666666666, -0.25565731666666663, -0.3889601216666666, -0.49427208516666665, -0.60999045961666665, -0.8019933217316666, -1.0383953252121665, -1.2338767276485165, -1.3617137093539615, -1.478199596547773, -1.5417397175834409, -1.6012178023084085, -1.5588524616158859, -1.56219672313112, -1.4805377061917839, -1.3003763943342488, -1.1562634760339741, -1.0553844332237818, -0.90076910325664727, -0.75953837227965304, -0.68167686059575716, -0.64817380241703004, -0.73572166169192099, -0.74900516318434462, -0.67730361422904128, -0.65711252996032887, -0.74797877097223009, -0.73358513968056105, -0.56150959777639275, -0.34805671844347491, -0.2316397029104324, -0.14714779203730266, -0.067003454426111858, -0.010902418098278299, 0.022368307331205189, 0.29765781513184358, 0.82336047059229034, 1.3623523294146032, 1.8446466305902223, 2.2152526414131555, 2.5556768489892088, 2.9049737942924461, 3.194481656004712, 3.2681371592032984, 3.1696960114423089, 3.0227872080096159, 2.7969510456067308, 2.5698657319247116, 2.2369060123472981, 2.0458342086431083, 1.8520839460501757, 1.7224587622351228, 1.7817211335645857, 1.89220479349521, 1.8825433554466469, 1.6837803488126526, 1.3796462441688568, 1.1607523709181997, 1.1935266596427399, 1.1954686617499179, 1.0738280632249424, 0.8896796442574596, 0.73677575098022163, 0.61774302568615513, 0.49242011798030855, 0.33569408258621597, 0.12698585781035115, 0.1548901004672458, 0.17442307032707205, -0.066903850771049572, -0.24483269553973469, -0.41738288687781422, -0.51416802081446988, -0.42891761457012889, -0.50124233019909026, -0.74986963113936311, -0.78590874179755421, -0.65813611925828785, -0.50869528348080151, -0.64708669843656108, -0.8099606889055927, -0.7679724822339149, -0.68158073756374038, -0.76510651629461823, -0.98257456140623267, -1.4138021929843627, -2.0186615350890538, -2.4210630745623378, -2.4597441521936361, -2.4568209065355453, -2.4757746345748819, -2.4410422442024169, -2.3747295709416916, -2.1243106996591843, -1.9580174897614291, -1.7636122428330003, -1.6275285699831001, -1.61926999898817, -1.7004889992917189, -1.8743422995042032, -2.2000396096529422, -2.4700277267570594, -2.6650194087299415, -2.7925135861109589, -2.917759510277671, -2.9724316571943694, -2.8607021600360589, -2.7134915120252412, -2.5024440584176686, -2.306710840892368, -2.1876975886246575, -1.9453883120372601, -1.6377718184260821, -1.4374402728982574, -1.2822081910287801, -1.0775457337201459, -1.0152820136041021, -0.89069740952287146, -0.62348818666601002, -0.26544173066620702, 0.19219078853365509, 0.5875335519735585, 0.90327348638149085, 1.2742914404670436, 1.4500040083269305, 1.5790028058288512, 1.6183019640801959, 1.366811374856137, 1.0497679623992959, 0.63883757367950711, 0.32418630157565492, 0.037930411102958417, -0.045448712227929108, -0.17881409855955038, -0.33216986899168521, -0.44251890829417961, -0.50776323580592564}
//double smooth2Zy[140] = {-9.8778333333333332, -9.911483333333333, -9.9920383333333334, -9.9674268333333327, -9.9291987833333337, -9.8424391483333338, -9.760707403833333, -9.7274951826833327, -9.7732466278783328, -9.7842726395148318, -9.9089908476603803, -9.8672935933622661, -9.8591055153535869, -9.9493738607475102, -10.009561702523257, -9.9496931917662792, -9.8927852342363956, -9.9189496639654759, -9.8742647647758321, -9.7949853353430818, -9.7514897347401561, -9.7270428143181089, -9.7699299700226749, -9.7939509790158716, -9.7477656853111103, -9.6644359797177763, -9.5191051858024434, -9.5613736300617109, -9.9119615410431976, -10.112373078730238, -10.111661155111166, -10.099162808577816, -10.090413966004471, -10.090289776203129, -10.105202843342189, -10.043641990339532, -10.003549393237673, -9.8944845752663699, -9.7761392026864584, -9.8942974418805196, -9.9710082093163628, -9.8777057465214533, -9.9083940225650178, -9.860875815795513, -9.7286130710568592, -9.4290291497398009, -9.2403204048178598, -9.0842242833725013, -8.8879569983607496, -8.8585698988525241, -8.8349989291967663, -8.8544992504377369, -8.8711494753064155, -8.8288046327144905, -8.7871632429001423, -8.6680142700300991, -8.6146099890210692, -8.5892269923147477, -8.7784588946203232, -9.1449212262342261, -9.3504448583639572, -9.3293114008547704, -9.2725179805983391, -9.2927625864188368, -9.4029338104931863, -9.4830536673452297, -9.5211375671416594, -9.5837962969991608, -9.6606574078994125, -9.7774601855295877, -9.6492221298707115, -9.5744554909094983, -9.5581188436366489, -9.648683190545654, -9.7660782333819576, -9.8362547633673696, -9.7743783343571593, -9.7790648340500113, -9.9443453838350067, -9.8290417686845046, -9.6253292380791535, -9.5277304666554059, -9.8134113266587839, -10.073387928661148, -10.102371550062802, -9.7806600850439604, -9.7324620595307714, -9.9807234416715396, -10.358506409170078, -10.781954486419053, -11.252368140493337, -11.443657698345335, -11.451560388841735, -11.409092272189215, -11.35836459053245, -11.181855213372714, -10.929298649360899, -10.668509054552629, -10.374956338186839, -10.016469436730787, -9.7865286057115508, -9.5805700239980851, -9.3613990167986589, -9.1989793117590608, -9.106285518231342, -9.0803998627619382, -9.0592799039333567, -9.1164959327533488, -9.0635471529273435, -8.9334830070491407, -9.1724381049343986, -9.4477066734540784, -9.5983946714178536, -9.637876269992498, -9.5335133889947485, -9.4484593722963233, -9.5479215606074259, -9.7645450924251982, -9.9851815646976387, -10.121627095288346, -10.058138966701842, -9.9146972766912889, -9.673288093683901, -9.51030166557873, -9.4382111659051091, -9.5047478161335768, -9.6023234712935022, -9.7066264299054517, -9.7676385009338169, -9.8163469506536707, -9.970442865457569, -10.087310005820298, -10.091117004074208, -10.003781902851944, -9.9156473319963609, -9.7579531323974535, -9.5965671926782168, -9.4595970348747507, -9.4207179244123243, -9.4175025470886258}
//double smooth2Zz[140] = {0.35666666666666658, 0.4506666666666666, 0.39946666666666664, 0.41762666666666665, 0.47833866666666663, 0.53583706666666664, 0.4890859466666666, 0.39036016266666657, 0.32125211386666658, 0.24887647970666657, 0.2522135357946666, 0.23954947505626661, 0.14668463253938663, 0.036679242777570634, 0.046675469944299441, 0.13467282896100963, 0.15727098027270675, 0.15808968619089472, 0.1136627803336263, 0.11556394623353841, 0.23089476236347689, 0.29962633365443381, 0.31173843355810366, 0.22721690349067256, 0.18305183244347079, 0.31713628271042954, 0.45599539789730065, 0.46319677852811048, 0.39023774496967734, 0.42916642147877415, 0.48341649503514189, 0.55739154652459932, 0.58817408256721948, 0.57372185779705365, 0.59660530045793747, 0.62162371032055619, 0.53413659722438933, 0.48189561805707248, 0.46632693263995073, 0.44342885284796546, 0.54740019699357578, 0.65318013789550311, 0.81422609652685218, 0.94195826756879653, 1.0523707872981576, 1.1716595511087102, 1.2311616857760972, 1.305813180043268, 1.3100692260302875, 1.3340484582212011, 1.2038339207548407, 0.99568374452838848, 0.79897862116987184, 0.63128503481891018, 0.66989952437323708, 0.73292966706126594, 0.79205076694288612, 0.88743553686002019, 1.0532048758020141, 1.1932434130614098, 1.3572703891429869, 1.3940892724000908, 1.2878624906800635, 1.1445037434760446, 0.84315262043323114, 0.75220683430326174, 0.69754478401228326, 0.65328134880859823, 0.79929694416601871, 0.99750786091621313, 1.1692555026413491, 1.2174788518489443, 1.158235196294261, 1.2037646374059827, 1.1996352461841879, 1.2357446723289316, 1.4410212706302521, 1.5577148894411765, 1.6244004226088236, 1.5450802958261765, 1.5435562070783233, 1.7164893449548262, 1.9275425414683782, 2.2192797790278647, 2.4024958453195051, 2.5217470917236535, 2.5242229642065572, 2.4299560749445899, 2.3009692524612126, 2.1266784767228488, 1.9266749337059941, 1.849672453594196, 1.9697707175159369, 2.1318395022611556, 2.2482876515828085, 2.3718013561079658, 2.4612609492755757, 2.5328826644929032, 2.7090178651450323, 2.7273125056015224, 2.7581187539210656, 2.7346831277447459, 2.6102781894213218, 2.316194732594925, 1.8853363128164475, 1.4937354189715131, 1.315614793280059, 1.4369303552960413, 1.7228512487072289, 1.9469958740950601, 1.8938971118665422, 1.8597279783065794, 2.0248095848146055, 2.3863667093702237, 2.5224566965591566, 2.5667196875914096, 2.5287037813139865, 2.6610926469197906, 2.7897648528438532, 3.0508353969906974, 3.2545847778934878, 3.2742093445254414, 3.2009465411678089, 3.191662578817466, 3.0891638051722259, 3.1284146636205579, 3.1888902645343906, 3.4142231851740732, 3.7189562296218508, 3.9922693607352953, 4.0695885525147064, 4.0127119867602943, 3.8288983907322058, 3.5412288735125443, 3.2588602114587806, 2.9652021480211461, 2.9006415036148026, 2.8944490525303617, 2.9261143367712528, 2.90628003573987};

float average(float *array, int begin, int end) {
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
    float sum = 0;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
    int i;
    for(i = begin; i < end; i++) {
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e00d      	b.n	8002938 <average+0x34>
        sum += array[i];
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f7fe f90b 	bl	8000b44 <__addsf3>
 800292e:	4603      	mov	r3, r0
 8002930:	617b      	str	r3, [r7, #20]
//double smooth2Zz[140] = {0.35666666666666658, 0.4506666666666666, 0.39946666666666664, 0.41762666666666665, 0.47833866666666663, 0.53583706666666664, 0.4890859466666666, 0.39036016266666657, 0.32125211386666658, 0.24887647970666657, 0.2522135357946666, 0.23954947505626661, 0.14668463253938663, 0.036679242777570634, 0.046675469944299441, 0.13467282896100963, 0.15727098027270675, 0.15808968619089472, 0.1136627803336263, 0.11556394623353841, 0.23089476236347689, 0.29962633365443381, 0.31173843355810366, 0.22721690349067256, 0.18305183244347079, 0.31713628271042954, 0.45599539789730065, 0.46319677852811048, 0.39023774496967734, 0.42916642147877415, 0.48341649503514189, 0.55739154652459932, 0.58817408256721948, 0.57372185779705365, 0.59660530045793747, 0.62162371032055619, 0.53413659722438933, 0.48189561805707248, 0.46632693263995073, 0.44342885284796546, 0.54740019699357578, 0.65318013789550311, 0.81422609652685218, 0.94195826756879653, 1.0523707872981576, 1.1716595511087102, 1.2311616857760972, 1.305813180043268, 1.3100692260302875, 1.3340484582212011, 1.2038339207548407, 0.99568374452838848, 0.79897862116987184, 0.63128503481891018, 0.66989952437323708, 0.73292966706126594, 0.79205076694288612, 0.88743553686002019, 1.0532048758020141, 1.1932434130614098, 1.3572703891429869, 1.3940892724000908, 1.2878624906800635, 1.1445037434760446, 0.84315262043323114, 0.75220683430326174, 0.69754478401228326, 0.65328134880859823, 0.79929694416601871, 0.99750786091621313, 1.1692555026413491, 1.2174788518489443, 1.158235196294261, 1.2037646374059827, 1.1996352461841879, 1.2357446723289316, 1.4410212706302521, 1.5577148894411765, 1.6244004226088236, 1.5450802958261765, 1.5435562070783233, 1.7164893449548262, 1.9275425414683782, 2.2192797790278647, 2.4024958453195051, 2.5217470917236535, 2.5242229642065572, 2.4299560749445899, 2.3009692524612126, 2.1266784767228488, 1.9266749337059941, 1.849672453594196, 1.9697707175159369, 2.1318395022611556, 2.2482876515828085, 2.3718013561079658, 2.4612609492755757, 2.5328826644929032, 2.7090178651450323, 2.7273125056015224, 2.7581187539210656, 2.7346831277447459, 2.6102781894213218, 2.316194732594925, 1.8853363128164475, 1.4937354189715131, 1.315614793280059, 1.4369303552960413, 1.7228512487072289, 1.9469958740950601, 1.8938971118665422, 1.8597279783065794, 2.0248095848146055, 2.3863667093702237, 2.5224566965591566, 2.5667196875914096, 2.5287037813139865, 2.6610926469197906, 2.7897648528438532, 3.0508353969906974, 3.2545847778934878, 3.2742093445254414, 3.2009465411678089, 3.191662578817466, 3.0891638051722259, 3.1284146636205579, 3.1888902645343906, 3.4142231851740732, 3.7189562296218508, 3.9922693607352953, 4.0695885525147064, 4.0127119867602943, 3.8288983907322058, 3.5412288735125443, 3.2588602114587806, 2.9652021480211461, 2.9006415036148026, 2.8944490525303617, 2.9261143367712528, 2.90628003573987};

float average(float *array, int begin, int end) {
    float sum = 0;
    int i;
    for(i = begin; i < end; i++) {
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	3301      	adds	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	dbed      	blt.n	800291c <average+0x18>
        sum += array[i];
    }
    return sum / (float) end - begin;
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe f9b3 	bl	8000cac <__aeabi_i2f>
 8002946:	4603      	mov	r3, r0
 8002948:	4619      	mov	r1, r3
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7fe fab6 	bl	8000ebc <__aeabi_fdiv>
 8002950:	4603      	mov	r3, r0
 8002952:	461c      	mov	r4, r3
 8002954:	68b8      	ldr	r0, [r7, #8]
 8002956:	f7fe f9a9 	bl	8000cac <__aeabi_i2f>
 800295a:	4603      	mov	r3, r0
 800295c:	4619      	mov	r1, r3
 800295e:	4620      	mov	r0, r4
 8002960:	f7fe f8ee 	bl	8000b40 <__aeabi_fsub>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop

08002970 <min>:

float min(float a, float b, float c) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
    if(a < b) {
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fe fb86 	bl	8001090 <__aeabi_fcmplt>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <min+0x30>
        return a < c ? a : c;
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7fe fb7f 	bl	8001090 <__aeabi_fcmplt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <min+0x2c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	e00c      	b.n	80029b6 <min+0x46>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	e00a      	b.n	80029b6 <min+0x46>
    }
    return b < c ? b : c;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	f7fe fb74 	bl	8001090 <__aeabi_fcmplt>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <min+0x42>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	e000      	b.n	80029b4 <min+0x44>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	bf00      	nop
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop

080029c0 <ewma>:

void ewma(float *array, int size, float *result) {
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]

    int s = size < 6 ? size : 6;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	bfa8      	it	ge
 80029d2:	2306      	movge	r3, #6
 80029d4:	617b      	str	r3, [r7, #20]
    float forecasted = average(array, 0, s);
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	2100      	movs	r1, #0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff ff92 	bl	8002904 <average>
 80029e0:	61f8      	str	r0, [r7, #28]
    float smoothed = 0;
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

    int i;

    for (i = 1; i <= size; i++) {
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e037      	b.n	8002a5e <ewma+0x9e>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f4:	3b01      	subs	r3, #1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fd46 	bl	8000490 <__aeabi_f2d>
 8002a04:	a31a      	add	r3, pc, #104	; (adr r3, 8002a70 <ewma+0xb0>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fd95 	bl	8000538 <__aeabi_dmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	4625      	mov	r5, r4
 8002a14:	461c      	mov	r4, r3
 8002a16:	69f8      	ldr	r0, [r7, #28]
 8002a18:	f7fd fd3a 	bl	8000490 <__aeabi_f2d>
 8002a1c:	a316      	add	r3, pc, #88	; (adr r3, 8002a78 <ewma+0xb8>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fd89 	bl	8000538 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fbd1 	bl	80001d4 <__adddf3>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	4618      	mov	r0, r3
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f7fe f82d 	bl	8000a98 <__aeabi_d2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	613b      	str	r3, [r7, #16]
        forecasted = smoothed;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	61fb      	str	r3, [r7, #28]
        result[i - 1] = smoothed;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	601a      	str	r2, [r3, #0]
    float forecasted = average(array, 0, s);
    float smoothed = 0;

    int i;

    for (i = 1; i <= size; i++) {
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	ddc3      	ble.n	80029ee <ewma+0x2e>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
        forecasted = smoothed;
        result[i - 1] = smoothed;
    }

}
 8002a66:	bf00      	nop
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	33333333 	.word	0x33333333
 8002a74:	3fd33333 	.word	0x3fd33333
 8002a78:	66666666 	.word	0x66666666
 8002a7c:	3fe66666 	.word	0x3fe66666

08002a80 <dtwDistance>:

float dtwDistance(float *ax, float *ay, float *az, int sa, float *bx, float *by, float *bz, int sb) {
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	b093      	sub	sp, #76	; 0x4c
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	61f8      	str	r0, [r7, #28]
 8002a8a:	61b9      	str	r1, [r7, #24]
 8002a8c:	617a      	str	r2, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	466b      	mov	r3, sp
 8002a92:	607b      	str	r3, [r7, #4]

	float acc[sb][sa];
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	f04f 0400 	mov.w	r4, #0
 8002aa8:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8002aac:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8002ab0:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009c      	lsls	r4, r3, #2
 8002ab8:	60f9      	str	r1, [r7, #12]
 8002aba:	460b      	mov	r3, r1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac0:	60ba      	str	r2, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	fb02 fc01 	mul.w	ip, r2, r1
 8002ad6:	fb00 fe03 	mul.w	lr, r0, r3
 8002ada:	44e6      	add	lr, ip
 8002adc:	fba0 2302 	umull	r2, r3, r0, r2
 8002ae0:	eb0e 0103 	add.w	r1, lr, r3
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8002aea:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8002aee:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	fb02 fc01 	mul.w	ip, r2, r1
 8002b06:	fb00 fe03 	mul.w	lr, r0, r3
 8002b0a:	44e6      	add	lr, ip
 8002b0c:	fba0 2302 	umull	r2, r3, r0, r2
 8002b10:	eb0e 0103 	add.w	r1, lr, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	015e      	lsls	r6, r3, #5
 8002b18:	ea46 66d2 	orr.w	r6, r6, r2, lsr #27
 8002b1c:	0155      	lsls	r5, r2, #5
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3303      	adds	r3, #3
 8002b2a:	3307      	adds	r3, #7
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	ebad 0d03 	sub.w	sp, sp, r3
 8002b34:	466b      	mov	r3, sp
 8002b36:	3303      	adds	r3, #3
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f7fd fff9 	bl	8000b40 <__aeabi_fsub>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fc9d 	bl	8000490 <__aeabi_f2d>
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b5e:	f000 fe35 	bl	80037cc <pow>
 8002b62:	4605      	mov	r5, r0
 8002b64:	460e      	mov	r6, r1
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fd ffe5 	bl	8000b40 <__aeabi_fsub>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc89 	bl	8000490 <__aeabi_f2d>
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b86:	f000 fe21 	bl	80037cc <pow>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4628      	mov	r0, r5
 8002b90:	4631      	mov	r1, r6
 8002b92:	f7fd fb1f 	bl	80001d4 <__adddf3>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4615      	mov	r5, r2
 8002b9c:	461e      	mov	r6, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7fd ffc9 	bl	8000b40 <__aeabi_fsub>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc6d 	bl	8000490 <__aeabi_f2d>
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bbe:	f000 fe05 	bl	80037cc <pow>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	4631      	mov	r1, r6
 8002bca:	f7fd fb03 	bl	80001d4 <__adddf3>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ff5f 	bl	8000a98 <__aeabi_d2f>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	601a      	str	r2, [r3, #0]

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 8002be0:	2301      	movs	r3, #1
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
 8002be4:	e06a      	b.n	8002cbc <dtwDistance+0x23c>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
 8002be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f7fd ffa2 	bl	8000b40 <__aeabi_fsub>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc46 	bl	8000490 <__aeabi_f2d>
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c0c:	f000 fdde 	bl	80037cc <pow>
 8002c10:	4605      	mov	r5, r0
 8002c12:	460e      	mov	r6, r1
 8002c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7fd ff8b 	bl	8000b40 <__aeabi_fsub>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc2f 	bl	8000490 <__aeabi_f2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3a:	f000 fdc7 	bl	80037cc <pow>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4628      	mov	r0, r5
 8002c44:	4631      	mov	r1, r6
 8002c46:	f7fd fac5 	bl	80001d4 <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4615      	mov	r5, r2
 8002c50:	461e      	mov	r6, r3
 8002c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4413      	add	r3, r2
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7fd ff6c 	bl	8000b40 <__aeabi_fsub>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc10 	bl	8000490 <__aeabi_f2d>
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c78:	f000 fda8 	bl	80037cc <pow>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4628      	mov	r0, r5
 8002c82:	4631      	mov	r1, r6
 8002c84:	f7fd faa6 	bl	80001d4 <__adddf3>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ff02 	bl	8000a98 <__aeabi_d2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
        acc[0][i] = acc[0][i - 1] + dist;
 8002c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd ff4d 	bl	8000b44 <__addsf3>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 8002cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb8:	3301      	adds	r3, #1
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
 8002cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	db90      	blt.n	8002be6 <dtwDistance+0x166>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc8:	e06d      	b.n	8002da6 <dtwDistance+0x326>
        dist = pow(ax[0] - bx[i], 2.0) + pow(ay[0] - by[i], 2.0) + pow(az[0] - bz[i], 2.0);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff31 	bl	8000b40 <__aeabi_fsub>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fbd5 	bl	8000490 <__aeabi_f2d>
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cee:	f000 fd6d 	bl	80037cc <pow>
 8002cf2:	4605      	mov	r5, r0
 8002cf4:	460e      	mov	r6, r1
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d00:	4413      	add	r3, r2
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd ff1b 	bl	8000b40 <__aeabi_fsub>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fbbf 	bl	8000490 <__aeabi_f2d>
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1a:	f000 fd57 	bl	80037cc <pow>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4628      	mov	r0, r5
 8002d24:	4631      	mov	r1, r6
 8002d26:	f7fd fa55 	bl	80001d4 <__adddf3>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4615      	mov	r5, r2
 8002d30:	461e      	mov	r6, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd fefd 	bl	8000b40 <__aeabi_fsub>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fba1 	bl	8000490 <__aeabi_f2d>
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d56:	f000 fd39 	bl	80037cc <pow>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4628      	mov	r0, r5
 8002d60:	4631      	mov	r1, r6
 8002d62:	f7fd fa37 	bl	80001d4 <__adddf3>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7fd fe93 	bl	8000a98 <__aeabi_d2f>
 8002d72:	4603      	mov	r3, r0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
        acc[i][0] = acc[i - 1][0] + dist;
 8002d76:	08a5      	lsrs	r5, r4, #2
 8002d78:	08a2      	lsrs	r2, r4, #2
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7c:	1e59      	subs	r1, r3, #1
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	fb01 f202 	mul.w	r2, r1, r2
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd feda 	bl	8000b44 <__addsf3>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d98:	fb02 f205 	mul.w	r2, r2, r5
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 8002da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da2:	3301      	adds	r3, #1
 8002da4:	643b      	str	r3, [r7, #64]	; 0x40
 8002da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	db8d      	blt.n	8002cca <dtwDistance+0x24a>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumulated distance - Remaining
    float m;
    for (int i = 1; i < sb; i++) {
 8002dae:	2301      	movs	r3, #1
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	e0a0      	b.n	8002ef6 <dtwDistance+0x476>
        for (int j = 1; j < sa; j++) {
 8002db4:	2301      	movs	r3, #1
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db8:	e095      	b.n	8002ee6 <dtwDistance+0x466>
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd feb6 	bl	8000b40 <__aeabi_fsub>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fb5a 	bl	8000490 <__aeabi_f2d>
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002de4:	f000 fcf2 	bl	80037cc <pow>
 8002de8:	4605      	mov	r5, r0
 8002dea:	460e      	mov	r6, r1
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fe9d 	bl	8000b40 <__aeabi_fsub>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb41 	bl	8000490 <__aeabi_f2d>
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e16:	f000 fcd9 	bl	80037cc <pow>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4628      	mov	r0, r5
 8002e20:	4631      	mov	r1, r6
 8002e22:	f7fd f9d7 	bl	80001d4 <__adddf3>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4615      	mov	r5, r2
 8002e2c:	461e      	mov	r6, r3
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4413      	add	r3, r2
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e3e:	4413      	add	r3, r2
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd fe7c 	bl	8000b40 <__aeabi_fsub>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fb20 	bl	8000490 <__aeabi_f2d>
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e58:	f000 fcb8 	bl	80037cc <pow>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4628      	mov	r0, r5
 8002e62:	4631      	mov	r1, r6
 8002e64:	f7fd f9b6 	bl	80001d4 <__adddf3>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe12 	bl	8000a98 <__aeabi_d2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
            m = min(acc[i - 1][j - 1],
 8002e78:	08a1      	lsrs	r1, r4, #2
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	fb00 f101 	mul.w	r1, r0, r1
 8002e88:	440a      	add	r2, r1
 8002e8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8002e8e:	08a2      	lsrs	r2, r4, #2
                    acc[i - 1][j],
 8002e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e92:	1e59      	subs	r1, r3, #1
    // Accumulated distance - Remaining
    float m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	fb01 f102 	mul.w	r1, r1, r2
 8002e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9c:	440a      	add	r2, r1
 8002e9e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8002ea2:	08a1      	lsrs	r1, r4, #2
                    acc[i - 1][j],
                    acc[i][j - 1]);
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	1e5a      	subs	r2, r3, #1
    // Accumulated distance - Remaining
    float m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002eac:	fb00 f101 	mul.w	r1, r0, r1
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4631      	mov	r1, r6
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7ff fd58 	bl	8002970 <min>
 8002ec0:	6278      	str	r0, [r7, #36]	; 0x24
                    acc[i - 1][j],
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
 8002ec2:	08a5      	lsrs	r5, r4, #2
 8002ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec8:	f7fd fe3c 	bl	8000b44 <__addsf3>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed4:	fb02 f105 	mul.w	r1, r2, r5
 8002ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eda:	440a      	add	r2, r1
 8002edc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    }

    // Accumulated distance - Remaining
    float m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f6ff af65 	blt.w	8002dba <dtwDistance+0x33a>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumulated distance - Remaining
    float m;
    for (int i = 1; i < sb; i++) {
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	f6ff af5a 	blt.w	8002db4 <dtwDistance+0x334>
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
        }
    }

    return sqrt(acc[sb - 1][sa - 1]);
 8002f00:	08a1      	lsrs	r1, r4, #2
 8002f02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f04:	1e58      	subs	r0, r3, #1
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	fb00 f101 	mul.w	r1, r0, r1
 8002f10:	440a      	add	r2, r1
 8002f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd faba 	bl	8000490 <__aeabi_f2d>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	460c      	mov	r4, r1
 8002f20:	4618      	mov	r0, r3
 8002f22:	4621      	mov	r1, r4
 8002f24:	f000 fdb8 	bl	8003a98 <sqrt>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4621      	mov	r1, r4
 8002f30:	f7fd fdb2 	bl	8000a98 <__aeabi_d2f>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	374c      	adds	r7, #76	; 0x4c
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f44 <newLinkedList>:
 *      Author: Alan
 */

#include "LinkedList.h"

LinkedList * newLinkedList() {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
    LinkedList *list = (LinkedList *) malloc(sizeof(LinkedList));
 8002f4a:	2008      	movs	r0, #8
 8002f4c:	f000 fb70 	bl	8003630 <malloc>
 8002f50:	4603      	mov	r3, r0
 8002f52:	607b      	str	r3, [r7, #4]
    list->value = 0.0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    list->next = NULL;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
    return list;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prependToLinkedList>:
        head = head->next;
    }
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

    if(!head) { return; }
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <prependToLinkedList+0x2c>

    LinkedList *new = newLinkedList();
 8002f7c:	f7ff ffe2 	bl	8002f44 <newLinkedList>
 8002f80:	60f8      	str	r0, [r7, #12]
    new->value = value;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	601a      	str	r2, [r3, #0]
    new->next = head->next;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	605a      	str	r2, [r3, #4]
    head->next = new;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e000      	b.n	8002f9a <prependToLinkedList+0x2e>
    printf("\n");
}

void prependToLinkedList(LinkedList *head, float value) {

    if(!head) { return; }
 8002f98:	bf00      	nop
    LinkedList *new = newLinkedList();
    new->value = value;
    new->next = head->next;
    head->next = new;

}
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <arrayFromLinkedList>:
    new->value = value;
    head->next = new;

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]

    if(!head) { return; }
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d015      	beq.n	8002fde <arrayFromLinkedList+0x3e>

    while (head->next && size > 0) {
 8002fb2:	e00c      	b.n	8002fce <arrayFromLinkedList+0x2e>
        head = head->next;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
        destination[--size] = head->value;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	601a      	str	r2, [r3, #0]

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }

    while (head->next && size > 0) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <arrayFromLinkedList+0x40>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dceb      	bgt.n	8002fb4 <arrayFromLinkedList+0x14>
 8002fdc:	e000      	b.n	8002fe0 <arrayFromLinkedList+0x40>

}

void arrayFromLinkedList(LinkedList *head, float *destination, int size) {

    if(!head) { return; }
 8002fde:	bf00      	nop
    while (head->next && size > 0) {
        head = head->next;
        destination[--size] = head->value;
    }

}
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <freeLinkedList>:

void freeLinkedList(LinkedList *head) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

    if(!head) { return; }
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d014      	beq.n	8003020 <freeLinkedList+0x38>

    LinkedList *current;
    current = head;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
    head = head->next;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	607b      	str	r3, [r7, #4]
    current->next = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]

    while (head) {
 8003006:	e007      	b.n	8003018 <freeLinkedList+0x30>
        current = head;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	60fb      	str	r3, [r7, #12]
        head = head->next;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	607b      	str	r3, [r7, #4]
        free(current);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fb14 	bl	8003640 <free>
    LinkedList *current;
    current = head;
    head = head->next;
    current->next = NULL;

    while (head) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f4      	bne.n	8003008 <freeLinkedList+0x20>
 800301e:	e000      	b.n	8003022 <freeLinkedList+0x3a>

}

void freeLinkedList(LinkedList *head) {

    if(!head) { return; }
 8003020:	bf00      	nop
        current = head;
        head = head->next;
        free(current);
    }

}
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <Delayms+0x50>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003036:	f3ef 8305 	mrs	r3, IPSR
 800303a:	60fb      	str	r3, [r7, #12]
  return(result);
 800303c:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 800303e:	2b00      	cmp	r3, #0
 8003040:	d111      	bne.n	8003066 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8003042:	bf00      	nop
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <Delayms+0x50>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d3f8      	bcc.n	8003044 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8003052:	e00b      	b.n	800306c <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <Delayms+0x54>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <Delayms+0x3e>
				millis--;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f3      	bne.n	8003054 <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000db8 	.word	0x20000db8
 800307c:	e000e010 	.word	0xe000e010

08003080 <setup>:
// Letter Z
float smooth2Zx[140] = {-0.26316666666666666, -0.12121666666666664, -0.15685166666666664, -0.2537961666666666, -0.25565731666666663, -0.3889601216666666, -0.49427208516666665, -0.60999045961666665, -0.8019933217316666, -1.0383953252121665, -1.2338767276485165, -1.3617137093539615, -1.478199596547773, -1.5417397175834409, -1.6012178023084085, -1.5588524616158859, -1.56219672313112, -1.4805377061917839, -1.3003763943342488, -1.1562634760339741, -1.0553844332237818, -0.90076910325664727, -0.75953837227965304, -0.68167686059575716, -0.64817380241703004, -0.73572166169192099, -0.74900516318434462, -0.67730361422904128, -0.65711252996032887, -0.74797877097223009, -0.73358513968056105, -0.56150959777639275, -0.34805671844347491, -0.2316397029104324, -0.14714779203730266, -0.067003454426111858, -0.010902418098278299, 0.022368307331205189, 0.29765781513184358, 0.82336047059229034, 1.3623523294146032, 1.8446466305902223, 2.2152526414131555, 2.5556768489892088, 2.9049737942924461, 3.194481656004712, 3.2681371592032984, 3.1696960114423089, 3.0227872080096159, 2.7969510456067308, 2.5698657319247116, 2.2369060123472981, 2.0458342086431083, 1.8520839460501757, 1.7224587622351228, 1.7817211335645857, 1.89220479349521, 1.8825433554466469, 1.6837803488126526, 1.3796462441688568, 1.1607523709181997, 1.1935266596427399, 1.1954686617499179, 1.0738280632249424, 0.8896796442574596, 0.73677575098022163, 0.61774302568615513, 0.49242011798030855, 0.33569408258621597, 0.12698585781035115, 0.1548901004672458, 0.17442307032707205, -0.066903850771049572, -0.24483269553973469, -0.41738288687781422, -0.51416802081446988, -0.42891761457012889, -0.50124233019909026, -0.74986963113936311, -0.78590874179755421, -0.65813611925828785, -0.50869528348080151, -0.64708669843656108, -0.8099606889055927, -0.7679724822339149, -0.68158073756374038, -0.76510651629461823, -0.98257456140623267, -1.4138021929843627, -2.0186615350890538, -2.4210630745623378, -2.4597441521936361, -2.4568209065355453, -2.4757746345748819, -2.4410422442024169, -2.3747295709416916, -2.1243106996591843, -1.9580174897614291, -1.7636122428330003, -1.6275285699831001, -1.61926999898817, -1.7004889992917189, -1.8743422995042032, -2.2000396096529422, -2.4700277267570594, -2.6650194087299415, -2.7925135861109589, -2.917759510277671, -2.9724316571943694, -2.8607021600360589, -2.7134915120252412, -2.5024440584176686, -2.306710840892368, -2.1876975886246575, -1.9453883120372601, -1.6377718184260821, -1.4374402728982574, -1.2822081910287801, -1.0775457337201459, -1.0152820136041021, -0.89069740952287146, -0.62348818666601002, -0.26544173066620702, 0.19219078853365509, 0.5875335519735585, 0.90327348638149085, 1.2742914404670436, 1.4500040083269305, 1.5790028058288512, 1.6183019640801959, 1.366811374856137, 1.0497679623992959, 0.63883757367950711, 0.32418630157565492, 0.037930411102958417, -0.045448712227929108, -0.17881409855955038, -0.33216986899168521, -0.44251890829417961, -0.50776323580592564};
float smooth2Zy[140] = {-9.8778333333333332, -9.911483333333333, -9.9920383333333334, -9.9674268333333327, -9.9291987833333337, -9.8424391483333338, -9.760707403833333, -9.7274951826833327, -9.7732466278783328, -9.7842726395148318, -9.9089908476603803, -9.8672935933622661, -9.8591055153535869, -9.9493738607475102, -10.009561702523257, -9.9496931917662792, -9.8927852342363956, -9.9189496639654759, -9.8742647647758321, -9.7949853353430818, -9.7514897347401561, -9.7270428143181089, -9.7699299700226749, -9.7939509790158716, -9.7477656853111103, -9.6644359797177763, -9.5191051858024434, -9.5613736300617109, -9.9119615410431976, -10.112373078730238, -10.111661155111166, -10.099162808577816, -10.090413966004471, -10.090289776203129, -10.105202843342189, -10.043641990339532, -10.003549393237673, -9.8944845752663699, -9.7761392026864584, -9.8942974418805196, -9.9710082093163628, -9.8777057465214533, -9.9083940225650178, -9.860875815795513, -9.7286130710568592, -9.4290291497398009, -9.2403204048178598, -9.0842242833725013, -8.8879569983607496, -8.8585698988525241, -8.8349989291967663, -8.8544992504377369, -8.8711494753064155, -8.8288046327144905, -8.7871632429001423, -8.6680142700300991, -8.6146099890210692, -8.5892269923147477, -8.7784588946203232, -9.1449212262342261, -9.3504448583639572, -9.3293114008547704, -9.2725179805983391, -9.2927625864188368, -9.4029338104931863, -9.4830536673452297, -9.5211375671416594, -9.5837962969991608, -9.6606574078994125, -9.7774601855295877, -9.6492221298707115, -9.5744554909094983, -9.5581188436366489, -9.648683190545654, -9.7660782333819576, -9.8362547633673696, -9.7743783343571593, -9.7790648340500113, -9.9443453838350067, -9.8290417686845046, -9.6253292380791535, -9.5277304666554059, -9.8134113266587839, -10.073387928661148, -10.102371550062802, -9.7806600850439604, -9.7324620595307714, -9.9807234416715396, -10.358506409170078, -10.781954486419053, -11.252368140493337, -11.443657698345335, -11.451560388841735, -11.409092272189215, -11.35836459053245, -11.181855213372714, -10.929298649360899, -10.668509054552629, -10.374956338186839, -10.016469436730787, -9.7865286057115508, -9.5805700239980851, -9.3613990167986589, -9.1989793117590608, -9.106285518231342, -9.0803998627619382, -9.0592799039333567, -9.1164959327533488, -9.0635471529273435, -8.9334830070491407, -9.1724381049343986, -9.4477066734540784, -9.5983946714178536, -9.637876269992498, -9.5335133889947485, -9.4484593722963233, -9.5479215606074259, -9.7645450924251982, -9.9851815646976387, -10.121627095288346, -10.058138966701842, -9.9146972766912889, -9.673288093683901, -9.51030166557873, -9.4382111659051091, -9.5047478161335768, -9.6023234712935022, -9.7066264299054517, -9.7676385009338169, -9.8163469506536707, -9.970442865457569, -10.087310005820298, -10.091117004074208, -10.003781902851944, -9.9156473319963609, -9.7579531323974535, -9.5965671926782168, -9.4595970348747507, -9.4207179244123243, -9.4175025470886258};
float smooth2Zz[140] = {0.35666666666666658, 0.4506666666666666, 0.39946666666666664, 0.41762666666666665, 0.47833866666666663, 0.53583706666666664, 0.4890859466666666, 0.39036016266666657, 0.32125211386666658, 0.24887647970666657, 0.2522135357946666, 0.23954947505626661, 0.14668463253938663, 0.036679242777570634, 0.046675469944299441, 0.13467282896100963, 0.15727098027270675, 0.15808968619089472, 0.1136627803336263, 0.11556394623353841, 0.23089476236347689, 0.29962633365443381, 0.31173843355810366, 0.22721690349067256, 0.18305183244347079, 0.31713628271042954, 0.45599539789730065, 0.46319677852811048, 0.39023774496967734, 0.42916642147877415, 0.48341649503514189, 0.55739154652459932, 0.58817408256721948, 0.57372185779705365, 0.59660530045793747, 0.62162371032055619, 0.53413659722438933, 0.48189561805707248, 0.46632693263995073, 0.44342885284796546, 0.54740019699357578, 0.65318013789550311, 0.81422609652685218, 0.94195826756879653, 1.0523707872981576, 1.1716595511087102, 1.2311616857760972, 1.305813180043268, 1.3100692260302875, 1.3340484582212011, 1.2038339207548407, 0.99568374452838848, 0.79897862116987184, 0.63128503481891018, 0.66989952437323708, 0.73292966706126594, 0.79205076694288612, 0.88743553686002019, 1.0532048758020141, 1.1932434130614098, 1.3572703891429869, 1.3940892724000908, 1.2878624906800635, 1.1445037434760446, 0.84315262043323114, 0.75220683430326174, 0.69754478401228326, 0.65328134880859823, 0.79929694416601871, 0.99750786091621313, 1.1692555026413491, 1.2174788518489443, 1.158235196294261, 1.2037646374059827, 1.1996352461841879, 1.2357446723289316, 1.4410212706302521, 1.5577148894411765, 1.6244004226088236, 1.5450802958261765, 1.5435562070783233, 1.7164893449548262, 1.9275425414683782, 2.2192797790278647, 2.4024958453195051, 2.5217470917236535, 2.5242229642065572, 2.4299560749445899, 2.3009692524612126, 2.1266784767228488, 1.9266749337059941, 1.849672453594196, 1.9697707175159369, 2.1318395022611556, 2.2482876515828085, 2.3718013561079658, 2.4612609492755757, 2.5328826644929032, 2.7090178651450323, 2.7273125056015224, 2.7581187539210656, 2.7346831277447459, 2.6102781894213218, 2.316194732594925, 1.8853363128164475, 1.4937354189715131, 1.315614793280059, 1.4369303552960413, 1.7228512487072289, 1.9469958740950601, 1.8938971118665422, 1.8597279783065794, 2.0248095848146055, 2.3863667093702237, 2.5224566965591566, 2.5667196875914096, 2.5287037813139865, 2.6610926469197906, 2.7897648528438532, 3.0508353969906974, 3.2545847778934878, 3.2742093445254414, 3.2009465411678089, 3.191662578817466, 3.0891638051722259, 3.1284146636205579, 3.1888902645343906, 3.4142231851740732, 3.7189562296218508, 3.9922693607352953, 4.0695885525147064, 4.0127119867602943, 3.8288983907322058, 3.5412288735125443, 3.2588602114587806, 2.9652021480211461, 2.9006415036148026, 2.8944490525303617, 2.9261143367712528, 2.90628003573987};

void setup() {
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	SystemInit();
 8003084:	f000 fa06 	bl	8003494 <SystemInit>
	TM_DELAY_Init();
 8003088:	f7fe fc74 	bl	8001974 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 800308c:	f7fe fc9a 	bl	80019c4 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8003090:	2103      	movs	r1, #3
 8003092:	2000      	movs	r0, #0
 8003094:	f7fe fe44 	bl	8001d20 <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8003098:	f7fe fcac 	bl	80019f4 <TM_DISCO_ButtonInit>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <main>:

int main(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	f5ad 6d1a 	sub.w	sp, sp, #2464	; 0x9a0
 80030a6:	af04      	add	r7, sp, #16

	setup();
 80030a8:	f7ff ffea 	bl	8003080 <setup>

	int count = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c

	// Raw signals
	LinkedList *signalX = newLinkedList();
 80030b2:	f7ff ff47 	bl	8002f44 <newLinkedList>
 80030b6:	f8c7 0984 	str.w	r0, [r7, #2436]	; 0x984
	LinkedList *signalY = newLinkedList();
 80030ba:	f7ff ff43 	bl	8002f44 <newLinkedList>
 80030be:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980
	LinkedList *signalZ = newLinkedList();
 80030c2:	f7ff ff3f 	bl	8002f44 <newLinkedList>
 80030c6:	f8c7 097c 	str.w	r0, [r7, #2428]	; 0x97c

	TM_LIS302DL_LIS3DSH_t Axes_Data;

	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());
 80030ca:	bf00      	nop
 80030cc:	4b83      	ldr	r3, [pc, #524]	; (80032dc <main+0x23c>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f9      	beq.n	80030cc <main+0x2c>

	TM_DISCO_LedOn(LED_RED | LED_GREEN);
 80030d8:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <main+0x240>)
 80030da:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80030de:	831a      	strh	r2, [r3, #24]

	while(TM_DISCO_ButtonPressed()) {
 80030e0:	e03c      	b.n	800315c <main+0xbc>

		// Adding accelerometer values
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 80030e2:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fe4a 	bl	8001d80 <TM_LIS302DL_LIS3DSH_ReadAxes>
		prependToLinkedList(signalX, (float) Axes_Data.X / ACCELEROMETER_DATA_DIVIDER);
 80030ec:	f9b7 3960 	ldrsh.w	r3, [r7, #2400]	; 0x960
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fddb 	bl	8000cac <__aeabi_i2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	497a      	ldr	r1, [pc, #488]	; (80032e4 <main+0x244>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fede 	bl	8000ebc <__aeabi_fdiv>
 8003100:	4603      	mov	r3, r0
 8003102:	4619      	mov	r1, r3
 8003104:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 8003108:	f7ff ff30 	bl	8002f6c <prependToLinkedList>
		prependToLinkedList(signalY, (float) Axes_Data.Y / ACCELEROMETER_DATA_DIVIDER);
 800310c:	f9b7 3962 	ldrsh.w	r3, [r7, #2402]	; 0x962
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fdcb 	bl	8000cac <__aeabi_i2f>
 8003116:	4603      	mov	r3, r0
 8003118:	4972      	ldr	r1, [pc, #456]	; (80032e4 <main+0x244>)
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fece 	bl	8000ebc <__aeabi_fdiv>
 8003120:	4603      	mov	r3, r0
 8003122:	4619      	mov	r1, r3
 8003124:	f8d7 0980 	ldr.w	r0, [r7, #2432]	; 0x980
 8003128:	f7ff ff20 	bl	8002f6c <prependToLinkedList>
		prependToLinkedList(signalZ, (float) Axes_Data.Z / ACCELEROMETER_DATA_DIVIDER);
 800312c:	f9b7 3964 	ldrsh.w	r3, [r7, #2404]	; 0x964
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fdbb 	bl	8000cac <__aeabi_i2f>
 8003136:	4603      	mov	r3, r0
 8003138:	496a      	ldr	r1, [pc, #424]	; (80032e4 <main+0x244>)
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd febe 	bl	8000ebc <__aeabi_fdiv>
 8003140:	4603      	mov	r3, r0
 8003142:	4619      	mov	r1, r3
 8003144:	f8d7 097c 	ldr.w	r0, [r7, #2428]	; 0x97c
 8003148:	f7ff ff10 	bl	8002f6c <prependToLinkedList>
		count++;
 800314c:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8003150:	3301      	adds	r3, #1
 8003152:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c

		Delayms(SAMPLEPERIOD);
 8003156:	2014      	movs	r0, #20
 8003158:	f7ff ff66 	bl	8003028 <Delayms>
	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());

	TM_DISCO_LedOn(LED_RED | LED_GREEN);

	while(TM_DISCO_ButtonPressed()) {
 800315c:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <main+0x23c>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1bc      	bne.n	80030e2 <main+0x42>

		Delayms(SAMPLEPERIOD);

	}

	TM_DISCO_LedOff(LED_RED | LED_GREEN);
 8003168:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <main+0x240>)
 800316a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800316e:	835a      	strh	r2, [r3, #26]

	// Allocating the temporary arrays to store the raw signal
	float *tempX = (float *) malloc(count * sizeof(float));
 8003170:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa5a 	bl	8003630 <malloc>
 800317c:	4603      	mov	r3, r0
 800317e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
	float *tempY = (float *) malloc(count * sizeof(float));
 8003182:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fa51 	bl	8003630 <malloc>
 800318e:	4603      	mov	r3, r0
 8003190:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
	float *tempZ = (float *) malloc(count * sizeof(float));
 8003194:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa48 	bl	8003630 <malloc>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970

	// Filling up the temporary raw signal arrays
	arrayFromLinkedList(signalX, tempX, count);
 80031a6:	f8d7 298c 	ldr.w	r2, [r7, #2444]	; 0x98c
 80031aa:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 80031ae:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 80031b2:	f7ff fef5 	bl	8002fa0 <arrayFromLinkedList>
	arrayFromLinkedList(signalY, tempY, count);
 80031b6:	f8d7 298c 	ldr.w	r2, [r7, #2444]	; 0x98c
 80031ba:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 80031be:	f8d7 0980 	ldr.w	r0, [r7, #2432]	; 0x980
 80031c2:	f7ff feed 	bl	8002fa0 <arrayFromLinkedList>
	arrayFromLinkedList(signalZ, tempZ, count);
 80031c6:	f8d7 298c 	ldr.w	r2, [r7, #2444]	; 0x98c
 80031ca:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 80031ce:	f8d7 097c 	ldr.w	r0, [r7, #2428]	; 0x97c
 80031d2:	f7ff fee5 	bl	8002fa0 <arrayFromLinkedList>

	// Freeing the memory for the linked lists
	freeLinkedList(signalX);
 80031d6:	f8d7 0984 	ldr.w	r0, [r7, #2436]	; 0x984
 80031da:	f7ff ff05 	bl	8002fe8 <freeLinkedList>
	freeLinkedList(signalY);
 80031de:	f8d7 0980 	ldr.w	r0, [r7, #2432]	; 0x980
 80031e2:	f7ff ff01 	bl	8002fe8 <freeLinkedList>
	freeLinkedList(signalZ);
 80031e6:	f8d7 097c 	ldr.w	r0, [r7, #2428]	; 0x97c
 80031ea:	f7ff fefd 	bl	8002fe8 <freeLinkedList>

	// Allocating arrays for the smoothed signals
	float smoothX[200];
	float smoothY[200];
	float smoothZ[200];
	int i = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
	for(i = 0; i < 200; i++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
 80031fa:	e018      	b.n	800322e <main+0x18e>
		smoothX[i] = 666.666;
 80031fc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003200:	f8d7 2988 	ldr.w	r2, [r7, #2440]	; 0x988
 8003204:	4938      	ldr	r1, [pc, #224]	; (80032e8 <main+0x248>)
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		smoothY[i] = 666.666;
 800320a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800320e:	f8d7 2988 	ldr.w	r2, [r7, #2440]	; 0x988
 8003212:	4935      	ldr	r1, [pc, #212]	; (80032e8 <main+0x248>)
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		smoothZ[i] = 666.666;
 8003218:	463b      	mov	r3, r7
 800321a:	f8d7 2988 	ldr.w	r2, [r7, #2440]	; 0x988
 800321e:	4932      	ldr	r1, [pc, #200]	; (80032e8 <main+0x248>)
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	// Allocating arrays for the smoothed signals
	float smoothX[200];
	float smoothY[200];
	float smoothZ[200];
	int i = 0;
	for(i = 0; i < 200; i++) {
 8003224:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8003228:	3301      	adds	r3, #1
 800322a:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
 800322e:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8003232:	2bc7      	cmp	r3, #199	; 0xc7
 8003234:	dde2      	ble.n	80031fc <main+0x15c>
		smoothY[i] = 666.666;
		smoothZ[i] = 666.666;
	}

	// Calculating the smoothed values
	ewma(tempX, count, smoothX);
 8003236:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800323a:	461a      	mov	r2, r3
 800323c:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8003240:	f8d7 0978 	ldr.w	r0, [r7, #2424]	; 0x978
 8003244:	f7ff fbbc 	bl	80029c0 <ewma>
	ewma(tempY, count, smoothY);
 8003248:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8003252:	f8d7 0974 	ldr.w	r0, [r7, #2420]	; 0x974
 8003256:	f7ff fbb3 	bl	80029c0 <ewma>
	ewma(tempZ, count, smoothZ);
 800325a:	463b      	mov	r3, r7
 800325c:	461a      	mov	r2, r3
 800325e:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8003262:	f8d7 0970 	ldr.w	r0, [r7, #2416]	; 0x970
 8003266:	f7ff fbab 	bl	80029c0 <ewma>

	float o = dtwDistance(smoothX, smoothY, smoothZ, count, smooth2Ox, smooth2Oy, smooth2Oz, 140);
 800326a:	463a      	mov	r2, r7
 800326c:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003270:	f507 60c8 	add.w	r0, r7, #1600	; 0x640
 8003274:	238c      	movs	r3, #140	; 0x8c
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <main+0x24c>)
 800327a:	9302      	str	r3, [sp, #8]
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <main+0x250>)
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <main+0x254>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8003288:	f7ff fbfa 	bl	8002a80 <dtwDistance>
 800328c:	f8c7 096c 	str.w	r0, [r7, #2412]	; 0x96c
	float z = dtwDistance(smoothX, smoothY, smoothZ, count, smooth2Zx, smooth2Zy, smooth2Zz, 140);
 8003290:	463a      	mov	r2, r7
 8003292:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003296:	f507 60c8 	add.w	r0, r7, #1600	; 0x640
 800329a:	238c      	movs	r3, #140	; 0x8c
 800329c:	9303      	str	r3, [sp, #12]
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <main+0x258>)
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <main+0x25c>)
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <main+0x260>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 80032ae:	f7ff fbe7 	bl	8002a80 <dtwDistance>
 80032b2:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968

	if(o < z) {
 80032b6:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 80032ba:	f8d7 096c 	ldr.w	r0, [r7, #2412]	; 0x96c
 80032be:	f7fd fee7 	bl	8001090 <__aeabi_fcmplt>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <main+0x232>
		TM_DISCO_LedOn(LED_ORANGE);
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <main+0x240>)
 80032ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ce:	831a      	strh	r2, [r3, #24]
 80032d0:	e003      	b.n	80032da <main+0x23a>
	} else {
		TM_DISCO_LedOn(LED_BLUE);
 80032d2:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <main+0x240>)
 80032d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032d8:	831a      	strh	r2, [r3, #24]
	}

	while(1);
 80032da:	e7fe      	b.n	80032da <main+0x23a>
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	42c80000 	.word	0x42c80000
 80032e8:	4426aaa0 	.word	0x4426aaa0
 80032ec:	20000470 	.word	0x20000470
 80032f0:	20000240 	.word	0x20000240
 80032f4:	20000010 	.word	0x20000010
 80032f8:	20000b00 	.word	0x20000b00
 80032fc:	200008d0 	.word	0x200008d0
 8003300:	200006a0 	.word	0x200006a0

08003304 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 800330e:	bf00      	nop
}
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 800331c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

	while(*s){
 8003332:	e013      	b.n	800335c <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8003334:	bf00      	nop
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f8      	beq.n	8003336 <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe f936 	bl	80015c0 <USART_SendData>
		*s++;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	603a      	str	r2, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e6      	bne.n	8003334 <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop

08003370 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8003376:	f240 5125 	movw	r1, #1317	; 0x525
 800337a:	4814      	ldr	r0, [pc, #80]	; (80033cc <USART1_IRQHandler+0x5c>)
 800337c:	f7fe f932 	bl	80015e4 <USART_GetITStatus>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01e      	beq.n	80033c4 <USART1_IRQHandler+0x54>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <USART1_IRQHandler+0x5c>)
 8003388:	889b      	ldrh	r3, [r3, #4]
 800338a:	b29b      	uxth	r3, r3
 800338c:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2b0a      	cmp	r3, #10
 8003392:	d010      	beq.n	80033b6 <USART1_IRQHandler+0x46>
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <USART1_IRQHandler+0x60>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b0b      	cmp	r3, #11
 800339a:	d80c      	bhi.n	80033b6 <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <USART1_IRQHandler+0x60>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <USART1_IRQHandler+0x64>)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	5453      	strb	r3, [r2, r1]
			cnt++;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <USART1_IRQHandler+0x60>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <USART1_IRQHandler+0x60>)
 80033b2:	701a      	strb	r2, [r3, #0]
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}
 80033b4:	e006      	b.n	80033c4 <USART1_IRQHandler+0x54>
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <USART1_IRQHandler+0x60>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
			USART_puts(USART1, received_string);
 80033bc:	4905      	ldr	r1, [pc, #20]	; (80033d4 <USART1_IRQHandler+0x64>)
 80033be:	4803      	ldr	r0, [pc, #12]	; (80033cc <USART1_IRQHandler+0x5c>)
 80033c0:	f7ff ffb2 	bl	8003328 <USART_puts>
		}
	}
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40011000 	.word	0x40011000
 80033d0:	20000df4 	.word	0x20000df4
 80033d4:	20000e88 	.word	0x20000e88

080033d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003410 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033de:	e003      	b.n	80033e8 <LoopCopyDataInit>

080033e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033e6:	3104      	adds	r1, #4

080033e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033e8:	480b      	ldr	r0, [pc, #44]	; (8003418 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033f0:	d3f6      	bcc.n	80033e0 <CopyDataInit>
  ldr  r2, =_sbss
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033f4:	e002      	b.n	80033fc <LoopFillZerobss>

080033f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033f8:	f842 3b04 	str.w	r3, [r2], #4

080033fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003400:	d3f9      	bcc.n	80033f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003402:	f000 f847 	bl	8003494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003406:	f000 f8ed 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340a:	f7ff fe49 	bl	80030a0 <main>
  bx  lr    
 800340e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003410:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003414:	08004988 	.word	0x08004988
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003418:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800341c:	20000d9c 	.word	0x20000d9c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003420:	20000d9c 	.word	0x20000d9c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003424:	20000e9c 	.word	0x20000e9c

08003428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003428:	e7fe      	b.n	8003428 <ADC_IRQHandler>
	...

0800342c <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <_sbrk+0x58>)
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <_sbrk+0x5c>)
 8003438:	4413      	add	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <_sbrk+0x60>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <_sbrk+0x1e>
    heap_end = &end;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <_sbrk+0x60>)
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <_sbrk+0x58>)
 8003448:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <_sbrk+0x60>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <_sbrk+0x60>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	429a      	cmp	r2, r3
 800345c:	d905      	bls.n	800346a <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <_sbrk+0x64>)
 8003460:	220c      	movs	r2, #12
 8003462:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	e006      	b.n	8003478 <_sbrk+0x4c>
  }

  heap_end += incr;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <_sbrk+0x60>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	4a06      	ldr	r2, [pc, #24]	; (800348c <_sbrk+0x60>)
 8003474:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8003476:	68bb      	ldr	r3, [r7, #8]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000e9c 	.word	0x20000e9c
 8003488:	00005000 	.word	0x00005000
 800348c:	20000df8 	.word	0x20000df8
 8003490:	20000e98 	.word	0x20000e98

08003494 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <SystemInit+0x50>)
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <SystemInit+0x50>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <SystemInit+0x50>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <SystemInit+0x50>)
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <SystemInit+0x50>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <SystemInit+0x50>)
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <SystemInit+0x54>)
 80034be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034c0:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <SystemInit+0x50>)
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <SystemInit+0x50>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <SystemInit+0x50>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80034d2:	f000 f80d 	bl	80034f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <SystemInit+0x58>)
 80034d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034dc:	609a      	str	r2, [r3, #8]
#endif
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	24003010 	.word	0x24003010
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80034fe:	4a35      	ldr	r2, [pc, #212]	; (80035d4 <SetSysClock+0xe4>)
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <SetSysClock+0xe4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <SetSysClock+0xe4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <SetSysClock+0x38>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003526:	d1f0      	bne.n	800350a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <SetSysClock+0xe4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003534:	2301      	movs	r3, #1
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	e001      	b.n	800353e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800353a:	2300      	movs	r3, #0
 800353c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d142      	bne.n	80035ca <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <SetSysClock+0xe4>)
 8003546:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <SetSysClock+0xe4>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <SetSysClock+0xe8>)
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <SetSysClock+0xe8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <SetSysClock+0xe4>)
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <SetSysClock+0xe4>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <SetSysClock+0xe4>)
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <SetSysClock+0xe4>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <SetSysClock+0xe4>)
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <SetSysClock+0xe4>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800357a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <SetSysClock+0xe4>)
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <SetSysClock+0xec>)
 8003580:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <SetSysClock+0xe4>)
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <SetSysClock+0xe4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800358e:	bf00      	nop
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <SetSysClock+0xe4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f9      	beq.n	8003590 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <SetSysClock+0xf0>)
 800359e:	f240 6205 	movw	r2, #1541	; 0x605
 80035a2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80035a4:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <SetSysClock+0xe4>)
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <SetSysClock+0xe4>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <SetSysClock+0xe4>)
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <SetSysClock+0xe4>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80035bc:	bf00      	nop
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SetSysClock+0xe4>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d1f9      	bne.n	80035be <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000
 80035dc:	07405408 	.word	0x07405408
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <__libc_init_array+0x3c>)
 80035e8:	4c0e      	ldr	r4, [pc, #56]	; (8003624 <__libc_init_array+0x40>)
 80035ea:	1ae4      	subs	r4, r4, r3
 80035ec:	10a4      	asrs	r4, r4, #2
 80035ee:	2500      	movs	r5, #0
 80035f0:	461e      	mov	r6, r3
 80035f2:	42a5      	cmp	r5, r4
 80035f4:	d004      	beq.n	8003600 <__libc_init_array+0x1c>
 80035f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035fa:	4798      	blx	r3
 80035fc:	3501      	adds	r5, #1
 80035fe:	e7f8      	b.n	80035f2 <__libc_init_array+0xe>
 8003600:	f001 f95a 	bl	80048b8 <_init>
 8003604:	4c08      	ldr	r4, [pc, #32]	; (8003628 <__libc_init_array+0x44>)
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <__libc_init_array+0x48>)
 8003608:	1ae4      	subs	r4, r4, r3
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2500      	movs	r5, #0
 800360e:	461e      	mov	r6, r3
 8003610:	42a5      	cmp	r5, r4
 8003612:	d004      	beq.n	800361e <__libc_init_array+0x3a>
 8003614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003618:	4798      	blx	r3
 800361a:	3501      	adds	r5, #1
 800361c:	e7f8      	b.n	8003610 <__libc_init_array+0x2c>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	08004980 	.word	0x08004980
 8003624:	08004980 	.word	0x08004980
 8003628:	08004984 	.word	0x08004984
 800362c:	08004980 	.word	0x08004980

08003630 <malloc>:
 8003630:	4b02      	ldr	r3, [pc, #8]	; (800363c <malloc+0xc>)
 8003632:	4601      	mov	r1, r0
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f000 b859 	b.w	80036ec <_malloc_r>
 800363a:	bf00      	nop
 800363c:	20000d94 	.word	0x20000d94

08003640 <free>:
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <free+0xc>)
 8003642:	4601      	mov	r1, r0
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	f000 b803 	b.w	8003650 <_free_r>
 800364a:	bf00      	nop
 800364c:	20000d94 	.word	0x20000d94

08003650 <_free_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4605      	mov	r5, r0
 8003654:	2900      	cmp	r1, #0
 8003656:	d046      	beq.n	80036e6 <_free_r+0x96>
 8003658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800365c:	1f0c      	subs	r4, r1, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	18e4      	addlt	r4, r4, r3
 8003664:	f000 f8b0 	bl	80037c8 <__malloc_lock>
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <_free_r+0x98>)
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	4611      	mov	r1, r2
 800366e:	b913      	cbnz	r3, 8003676 <_free_r+0x26>
 8003670:	6063      	str	r3, [r4, #4]
 8003672:	6014      	str	r4, [r2, #0]
 8003674:	e032      	b.n	80036dc <_free_r+0x8c>
 8003676:	42a3      	cmp	r3, r4
 8003678:	d90e      	bls.n	8003698 <_free_r+0x48>
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	18a0      	adds	r0, r4, r2
 800367e:	4283      	cmp	r3, r0
 8003680:	bf04      	itt	eq
 8003682:	6818      	ldreq	r0, [r3, #0]
 8003684:	685b      	ldreq	r3, [r3, #4]
 8003686:	6063      	str	r3, [r4, #4]
 8003688:	bf04      	itt	eq
 800368a:	1812      	addeq	r2, r2, r0
 800368c:	6022      	streq	r2, [r4, #0]
 800368e:	600c      	str	r4, [r1, #0]
 8003690:	e024      	b.n	80036dc <_free_r+0x8c>
 8003692:	42a2      	cmp	r2, r4
 8003694:	d803      	bhi.n	800369e <_free_r+0x4e>
 8003696:	4613      	mov	r3, r2
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	2a00      	cmp	r2, #0
 800369c:	d1f9      	bne.n	8003692 <_free_r+0x42>
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	1819      	adds	r1, r3, r0
 80036a2:	42a1      	cmp	r1, r4
 80036a4:	d10b      	bne.n	80036be <_free_r+0x6e>
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	4401      	add	r1, r0
 80036aa:	1858      	adds	r0, r3, r1
 80036ac:	4282      	cmp	r2, r0
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	d114      	bne.n	80036dc <_free_r+0x8c>
 80036b2:	6810      	ldr	r0, [r2, #0]
 80036b4:	6852      	ldr	r2, [r2, #4]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	4401      	add	r1, r0
 80036ba:	6019      	str	r1, [r3, #0]
 80036bc:	e00e      	b.n	80036dc <_free_r+0x8c>
 80036be:	d902      	bls.n	80036c6 <_free_r+0x76>
 80036c0:	230c      	movs	r3, #12
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	e00a      	b.n	80036dc <_free_r+0x8c>
 80036c6:	6821      	ldr	r1, [r4, #0]
 80036c8:	1860      	adds	r0, r4, r1
 80036ca:	4282      	cmp	r2, r0
 80036cc:	bf04      	itt	eq
 80036ce:	6810      	ldreq	r0, [r2, #0]
 80036d0:	6852      	ldreq	r2, [r2, #4]
 80036d2:	6062      	str	r2, [r4, #4]
 80036d4:	bf04      	itt	eq
 80036d6:	1809      	addeq	r1, r1, r0
 80036d8:	6021      	streq	r1, [r4, #0]
 80036da:	605c      	str	r4, [r3, #4]
 80036dc:	4628      	mov	r0, r5
 80036de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e2:	f000 b872 	b.w	80037ca <__malloc_unlock>
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	20000e00 	.word	0x20000e00

080036ec <_malloc_r>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	1ccd      	adds	r5, r1, #3
 80036f0:	f025 0503 	bic.w	r5, r5, #3
 80036f4:	3508      	adds	r5, #8
 80036f6:	2d0c      	cmp	r5, #12
 80036f8:	bf38      	it	cc
 80036fa:	250c      	movcc	r5, #12
 80036fc:	2d00      	cmp	r5, #0
 80036fe:	4606      	mov	r6, r0
 8003700:	db01      	blt.n	8003706 <_malloc_r+0x1a>
 8003702:	42a9      	cmp	r1, r5
 8003704:	d902      	bls.n	800370c <_malloc_r+0x20>
 8003706:	230c      	movs	r3, #12
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	e046      	b.n	800379a <_malloc_r+0xae>
 800370c:	f000 f85c 	bl	80037c8 <__malloc_lock>
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <_malloc_r+0xb4>)
 8003712:	681c      	ldr	r4, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	4621      	mov	r1, r4
 8003718:	b1a1      	cbz	r1, 8003744 <_malloc_r+0x58>
 800371a:	680b      	ldr	r3, [r1, #0]
 800371c:	1b5b      	subs	r3, r3, r5
 800371e:	d40e      	bmi.n	800373e <_malloc_r+0x52>
 8003720:	2b0b      	cmp	r3, #11
 8003722:	d903      	bls.n	800372c <_malloc_r+0x40>
 8003724:	600b      	str	r3, [r1, #0]
 8003726:	18cc      	adds	r4, r1, r3
 8003728:	50cd      	str	r5, [r1, r3]
 800372a:	e01e      	b.n	800376a <_malloc_r+0x7e>
 800372c:	428c      	cmp	r4, r1
 800372e:	bf0d      	iteet	eq
 8003730:	6863      	ldreq	r3, [r4, #4]
 8003732:	684b      	ldrne	r3, [r1, #4]
 8003734:	6063      	strne	r3, [r4, #4]
 8003736:	6013      	streq	r3, [r2, #0]
 8003738:	bf18      	it	ne
 800373a:	460c      	movne	r4, r1
 800373c:	e015      	b.n	800376a <_malloc_r+0x7e>
 800373e:	460c      	mov	r4, r1
 8003740:	6849      	ldr	r1, [r1, #4]
 8003742:	e7e9      	b.n	8003718 <_malloc_r+0x2c>
 8003744:	4c17      	ldr	r4, [pc, #92]	; (80037a4 <_malloc_r+0xb8>)
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	b91b      	cbnz	r3, 8003752 <_malloc_r+0x66>
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f82c 	bl	80037a8 <_sbrk_r>
 8003750:	6020      	str	r0, [r4, #0]
 8003752:	4629      	mov	r1, r5
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f827 	bl	80037a8 <_sbrk_r>
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	d018      	beq.n	8003790 <_malloc_r+0xa4>
 800375e:	1cc4      	adds	r4, r0, #3
 8003760:	f024 0403 	bic.w	r4, r4, #3
 8003764:	42a0      	cmp	r0, r4
 8003766:	d10d      	bne.n	8003784 <_malloc_r+0x98>
 8003768:	6025      	str	r5, [r4, #0]
 800376a:	4630      	mov	r0, r6
 800376c:	f000 f82d 	bl	80037ca <__malloc_unlock>
 8003770:	f104 000b 	add.w	r0, r4, #11
 8003774:	1d23      	adds	r3, r4, #4
 8003776:	f020 0007 	bic.w	r0, r0, #7
 800377a:	1ac3      	subs	r3, r0, r3
 800377c:	d00e      	beq.n	800379c <_malloc_r+0xb0>
 800377e:	425a      	negs	r2, r3
 8003780:	50e2      	str	r2, [r4, r3]
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	1a21      	subs	r1, r4, r0
 8003786:	4630      	mov	r0, r6
 8003788:	f000 f80e 	bl	80037a8 <_sbrk_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d1eb      	bne.n	8003768 <_malloc_r+0x7c>
 8003790:	230c      	movs	r3, #12
 8003792:	6033      	str	r3, [r6, #0]
 8003794:	4630      	mov	r0, r6
 8003796:	f000 f818 	bl	80037ca <__malloc_unlock>
 800379a:	2000      	movs	r0, #0
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	bf00      	nop
 80037a0:	20000e00 	.word	0x20000e00
 80037a4:	20000dfc 	.word	0x20000dfc

080037a8 <_sbrk_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4c06      	ldr	r4, [pc, #24]	; (80037c4 <_sbrk_r+0x1c>)
 80037ac:	2300      	movs	r3, #0
 80037ae:	4605      	mov	r5, r0
 80037b0:	4608      	mov	r0, r1
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	f7ff fe3a 	bl	800342c <_sbrk>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_sbrk_r+0x1a>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_sbrk_r+0x1a>
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	20000e98 	.word	0x20000e98

080037c8 <__malloc_lock>:
 80037c8:	4770      	bx	lr

080037ca <__malloc_unlock>:
 80037ca:	4770      	bx	lr

080037cc <pow>:
 80037cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d0:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8003a94 <pow+0x2c8>
 80037d4:	b08f      	sub	sp, #60	; 0x3c
 80037d6:	461d      	mov	r5, r3
 80037d8:	4682      	mov	sl, r0
 80037da:	468b      	mov	fp, r1
 80037dc:	4614      	mov	r4, r2
 80037de:	f000 f9b3 	bl	8003b48 <__ieee754_pow>
 80037e2:	f999 3000 	ldrsb.w	r3, [r9]
 80037e6:	9302      	str	r3, [sp, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e9cd 0100 	strd	r0, r1, [sp]
 80037ee:	46c8      	mov	r8, r9
 80037f0:	f000 813d 	beq.w	8003a6e <pow+0x2a2>
 80037f4:	4622      	mov	r2, r4
 80037f6:	462b      	mov	r3, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7fd f936 	bl	8000a6c <__aeabi_dcmpun>
 8003800:	4606      	mov	r6, r0
 8003802:	2800      	cmp	r0, #0
 8003804:	f040 8133 	bne.w	8003a6e <pow+0x2a2>
 8003808:	4652      	mov	r2, sl
 800380a:	465b      	mov	r3, fp
 800380c:	4650      	mov	r0, sl
 800380e:	4659      	mov	r1, fp
 8003810:	f7fd f92c 	bl	8000a6c <__aeabi_dcmpun>
 8003814:	9003      	str	r0, [sp, #12]
 8003816:	b1d0      	cbz	r0, 800384e <pow+0x82>
 8003818:	2200      	movs	r2, #0
 800381a:	2300      	movs	r3, #0
 800381c:	4620      	mov	r0, r4
 800381e:	4629      	mov	r1, r5
 8003820:	f7fd f8f2 	bl	8000a08 <__aeabi_dcmpeq>
 8003824:	2800      	cmp	r0, #0
 8003826:	f000 8122 	beq.w	8003a6e <pow+0x2a2>
 800382a:	2301      	movs	r3, #1
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <pow+0x2ac>)
 8003830:	9305      	str	r3, [sp, #20]
 8003832:	4b92      	ldr	r3, [pc, #584]	; (8003a7c <pow+0x2b0>)
 8003834:	960c      	str	r6, [sp, #48]	; 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800383c:	9b02      	ldr	r3, [sp, #8]
 800383e:	2b02      	cmp	r3, #2
 8003840:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003844:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003848:	f040 8084 	bne.w	8003954 <pow+0x188>
 800384c:	e10c      	b.n	8003a68 <pow+0x29c>
 800384e:	2600      	movs	r6, #0
 8003850:	2700      	movs	r7, #0
 8003852:	4632      	mov	r2, r6
 8003854:	463b      	mov	r3, r7
 8003856:	4650      	mov	r0, sl
 8003858:	4659      	mov	r1, fp
 800385a:	f7fd f8d5 	bl	8000a08 <__aeabi_dcmpeq>
 800385e:	2800      	cmp	r0, #0
 8003860:	d03f      	beq.n	80038e2 <pow+0x116>
 8003862:	4632      	mov	r2, r6
 8003864:	463b      	mov	r3, r7
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f7fd f8cd 	bl	8000a08 <__aeabi_dcmpeq>
 800386e:	4680      	mov	r8, r0
 8003870:	b198      	cbz	r0, 800389a <pow+0xce>
 8003872:	2301      	movs	r3, #1
 8003874:	9304      	str	r3, [sp, #16]
 8003876:	4b80      	ldr	r3, [pc, #512]	; (8003a78 <pow+0x2ac>)
 8003878:	9305      	str	r3, [sp, #20]
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	930c      	str	r3, [sp, #48]	; 0x30
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003884:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003888:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d061      	beq.n	8003954 <pow+0x188>
 8003890:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <pow+0x2b0>)
 8003892:	2200      	movs	r2, #0
 8003894:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003898:	e0e0      	b.n	8003a5c <pow+0x290>
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f000 fef4 	bl	800468a <finite>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	f000 80e3 	beq.w	8003a6e <pow+0x2a2>
 80038a8:	4632      	mov	r2, r6
 80038aa:	463b      	mov	r3, r7
 80038ac:	4620      	mov	r0, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	f7fd f8b4 	bl	8000a1c <__aeabi_dcmplt>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f000 80da 	beq.w	8003a6e <pow+0x2a2>
 80038ba:	2301      	movs	r3, #1
 80038bc:	9304      	str	r3, [sp, #16]
 80038be:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <pow+0x2ac>)
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	f999 3000 	ldrsb.w	r3, [r9]
 80038c6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80038ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80038ce:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d030      	beq.n	8003938 <pow+0x16c>
 80038d6:	496a      	ldr	r1, [pc, #424]	; (8003a80 <pow+0x2b4>)
 80038d8:	2000      	movs	r0, #0
 80038da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038de:	2b02      	cmp	r3, #2
 80038e0:	e037      	b.n	8003952 <pow+0x186>
 80038e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038e6:	f000 fed0 	bl	800468a <finite>
 80038ea:	9002      	str	r0, [sp, #8]
 80038ec:	2800      	cmp	r0, #0
 80038ee:	f040 808a 	bne.w	8003a06 <pow+0x23a>
 80038f2:	4650      	mov	r0, sl
 80038f4:	4659      	mov	r1, fp
 80038f6:	f000 fec8 	bl	800468a <finite>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f000 8083 	beq.w	8003a06 <pow+0x23a>
 8003900:	4620      	mov	r0, r4
 8003902:	4629      	mov	r1, r5
 8003904:	f000 fec1 	bl	800468a <finite>
 8003908:	2800      	cmp	r0, #0
 800390a:	d07c      	beq.n	8003a06 <pow+0x23a>
 800390c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fd f8aa 	bl	8000a6c <__aeabi_dcmpun>
 8003918:	f999 9000 	ldrsb.w	r9, [r9]
 800391c:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <pow+0x2ac>)
 800391e:	b310      	cbz	r0, 8003966 <pow+0x19a>
 8003920:	2201      	movs	r2, #1
 8003922:	9305      	str	r3, [sp, #20]
 8003924:	9b02      	ldr	r3, [sp, #8]
 8003926:	9204      	str	r2, [sp, #16]
 8003928:	930c      	str	r3, [sp, #48]	; 0x30
 800392a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800392e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003932:	f1b9 0f00 	cmp.w	r9, #0
 8003936:	d102      	bne.n	800393e <pow+0x172>
 8003938:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800393c:	e00a      	b.n	8003954 <pow+0x188>
 800393e:	4632      	mov	r2, r6
 8003940:	463b      	mov	r3, r7
 8003942:	4630      	mov	r0, r6
 8003944:	4639      	mov	r1, r7
 8003946:	f7fc ff21 	bl	800078c <__aeabi_ddiv>
 800394a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800394e:	f1b9 0f02 	cmp.w	r9, #2
 8003952:	d004      	beq.n	800395e <pow+0x192>
 8003954:	a804      	add	r0, sp, #16
 8003956:	f000 fe9e 	bl	8004696 <matherr>
 800395a:	2800      	cmp	r0, #0
 800395c:	d17e      	bne.n	8003a5c <pow+0x290>
 800395e:	f000 ffa5 	bl	80048ac <__errno>
 8003962:	2321      	movs	r3, #33	; 0x21
 8003964:	e079      	b.n	8003a5a <pow+0x28e>
 8003966:	2203      	movs	r2, #3
 8003968:	9204      	str	r2, [sp, #16]
 800396a:	9305      	str	r3, [sp, #20]
 800396c:	900c      	str	r0, [sp, #48]	; 0x30
 800396e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003972:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003976:	f1b9 0f00 	cmp.w	r9, #0
 800397a:	d122      	bne.n	80039c2 <pow+0x1f6>
 800397c:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <pow+0x2b8>)
 800397e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003982:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003986:	4650      	mov	r0, sl
 8003988:	4632      	mov	r2, r6
 800398a:	463b      	mov	r3, r7
 800398c:	4659      	mov	r1, fp
 800398e:	f7fd f845 	bl	8000a1c <__aeabi_dcmplt>
 8003992:	2800      	cmp	r0, #0
 8003994:	d05a      	beq.n	8003a4c <pow+0x280>
 8003996:	2200      	movs	r2, #0
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <pow+0x2bc>)
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fdcb 	bl	8000538 <__aeabi_dmul>
 80039a2:	4604      	mov	r4, r0
 80039a4:	460d      	mov	r5, r1
 80039a6:	f000 fe7f 	bl	80046a8 <rint>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7fd f829 	bl	8000a08 <__aeabi_dcmpeq>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d144      	bne.n	8003a44 <pow+0x278>
 80039ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80039be:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <pow+0x2c0>)
 80039c0:	e01e      	b.n	8003a00 <pow+0x234>
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <pow+0x2c4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039ca:	4650      	mov	r0, sl
 80039cc:	4632      	mov	r2, r6
 80039ce:	463b      	mov	r3, r7
 80039d0:	4659      	mov	r1, fp
 80039d2:	f7fd f823 	bl	8000a1c <__aeabi_dcmplt>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d034      	beq.n	8003a44 <pow+0x278>
 80039da:	2200      	movs	r2, #0
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <pow+0x2bc>)
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7fc fda9 	bl	8000538 <__aeabi_dmul>
 80039e6:	4604      	mov	r4, r0
 80039e8:	460d      	mov	r5, r1
 80039ea:	f000 fe5d 	bl	80046a8 <rint>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7fd f807 	bl	8000a08 <__aeabi_dcmpeq>
 80039fa:	bb18      	cbnz	r0, 8003a44 <pow+0x278>
 80039fc:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <pow+0x2b4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a04:	e01e      	b.n	8003a44 <pow+0x278>
 8003a06:	2600      	movs	r6, #0
 8003a08:	2700      	movs	r7, #0
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a12:	f7fc fff9 	bl	8000a08 <__aeabi_dcmpeq>
 8003a16:	b350      	cbz	r0, 8003a6e <pow+0x2a2>
 8003a18:	4650      	mov	r0, sl
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	f000 fe35 	bl	800468a <finite>
 8003a20:	b328      	cbz	r0, 8003a6e <pow+0x2a2>
 8003a22:	4620      	mov	r0, r4
 8003a24:	4629      	mov	r1, r5
 8003a26:	f000 fe30 	bl	800468a <finite>
 8003a2a:	b300      	cbz	r0, 8003a6e <pow+0x2a2>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <pow+0x2ac>)
 8003a36:	9305      	str	r3, [sp, #20]
 8003a38:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003a3c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8003a40:	2300      	movs	r3, #0
 8003a42:	930c      	str	r3, [sp, #48]	; 0x30
 8003a44:	f998 3000 	ldrsb.w	r3, [r8]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d003      	beq.n	8003a54 <pow+0x288>
 8003a4c:	a804      	add	r0, sp, #16
 8003a4e:	f000 fe22 	bl	8004696 <matherr>
 8003a52:	b918      	cbnz	r0, 8003a5c <pow+0x290>
 8003a54:	f000 ff2a 	bl	80048ac <__errno>
 8003a58:	2322      	movs	r3, #34	; 0x22
 8003a5a:	6003      	str	r3, [r0, #0]
 8003a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a5e:	b11b      	cbz	r3, 8003a68 <pow+0x29c>
 8003a60:	f000 ff24 	bl	80048ac <__errno>
 8003a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a66:	6003      	str	r3, [r0, #0]
 8003a68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a6c:	e001      	b.n	8003a72 <pow+0x2a6>
 8003a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a72:	b00f      	add	sp, #60	; 0x3c
 8003a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a78:	08004932 	.word	0x08004932
 8003a7c:	3ff00000 	.word	0x3ff00000
 8003a80:	fff00000 	.word	0xfff00000
 8003a84:	47efffff 	.word	0x47efffff
 8003a88:	3fe00000 	.word	0x3fe00000
 8003a8c:	c7efffff 	.word	0xc7efffff
 8003a90:	7ff00000 	.word	0x7ff00000
 8003a94:	20000d98 	.word	0x20000d98

08003a98 <sqrt>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	b08b      	sub	sp, #44	; 0x2c
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	460f      	mov	r7, r1
 8003aa2:	f000 fd45 	bl	8004530 <__ieee754_sqrt>
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <sqrt+0xa8>)
 8003aa8:	f993 a000 	ldrsb.w	sl, [r3]
 8003aac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	d03f      	beq.n	8003b36 <sqrt+0x9e>
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	463b      	mov	r3, r7
 8003aba:	4630      	mov	r0, r6
 8003abc:	4639      	mov	r1, r7
 8003abe:	f7fc ffd5 	bl	8000a6c <__aeabi_dcmpun>
 8003ac2:	4683      	mov	fp, r0
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d136      	bne.n	8003b36 <sqrt+0x9e>
 8003ac8:	f04f 0800 	mov.w	r8, #0
 8003acc:	f04f 0900 	mov.w	r9, #0
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7fc ffa0 	bl	8000a1c <__aeabi_dcmplt>
 8003adc:	b358      	cbz	r0, 8003b36 <sqrt+0x9e>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <sqrt+0xac>)
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f8cd b020 	str.w	fp, [sp, #32]
 8003aea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003af2:	f1ba 0f00 	cmp.w	sl, #0
 8003af6:	d102      	bne.n	8003afe <sqrt+0x66>
 8003af8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003afc:	e00a      	b.n	8003b14 <sqrt+0x7c>
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	4640      	mov	r0, r8
 8003b04:	4649      	mov	r1, r9
 8003b06:	f7fc fe41 	bl	800078c <__aeabi_ddiv>
 8003b0a:	f1ba 0f02 	cmp.w	sl, #2
 8003b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b12:	d003      	beq.n	8003b1c <sqrt+0x84>
 8003b14:	4668      	mov	r0, sp
 8003b16:	f000 fdbe 	bl	8004696 <matherr>
 8003b1a:	b918      	cbnz	r0, 8003b24 <sqrt+0x8c>
 8003b1c:	f000 fec6 	bl	80048ac <__errno>
 8003b20:	2321      	movs	r3, #33	; 0x21
 8003b22:	6003      	str	r3, [r0, #0]
 8003b24:	9b08      	ldr	r3, [sp, #32]
 8003b26:	b11b      	cbz	r3, 8003b30 <sqrt+0x98>
 8003b28:	f000 fec0 	bl	80048ac <__errno>
 8003b2c:	9b08      	ldr	r3, [sp, #32]
 8003b2e:	6003      	str	r3, [r0, #0]
 8003b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b34:	e001      	b.n	8003b3a <sqrt+0xa2>
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	b00b      	add	sp, #44	; 0x2c
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b40:	20000d98 	.word	0x20000d98
 8003b44:	08004936 	.word	0x08004936

08003b48 <__ieee754_pow>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	b091      	sub	sp, #68	; 0x44
 8003b4e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b52:	e89d 0208 	ldmia.w	sp, {r3, r9}
 8003b56:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003b5a:	4607      	mov	r7, r0
 8003b5c:	4682      	mov	sl, r0
 8003b5e:	ea56 0003 	orrs.w	r0, r6, r3
 8003b62:	460c      	mov	r4, r1
 8003b64:	4688      	mov	r8, r1
 8003b66:	f000 8497 	beq.w	8004498 <__ieee754_pow+0x950>
 8003b6a:	4abd      	ldr	r2, [pc, #756]	; (8003e60 <__ieee754_pow+0x318>)
 8003b6c:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 8003b70:	4295      	cmp	r5, r2
 8003b72:	dc08      	bgt.n	8003b86 <__ieee754_pow+0x3e>
 8003b74:	d102      	bne.n	8003b7c <__ieee754_pow+0x34>
 8003b76:	b937      	cbnz	r7, 8003b86 <__ieee754_pow+0x3e>
 8003b78:	f000 bc99 	b.w	80044ae <__ieee754_pow+0x966>
 8003b7c:	4296      	cmp	r6, r2
 8003b7e:	dc02      	bgt.n	8003b86 <__ieee754_pow+0x3e>
 8003b80:	4296      	cmp	r6, r2
 8003b82:	d10e      	bne.n	8003ba2 <__ieee754_pow+0x5a>
 8003b84:	b16b      	cbz	r3, 8003ba2 <__ieee754_pow+0x5a>
 8003b86:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003b8a:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003b8e:	ea55 000a 	orrs.w	r0, r5, sl
 8003b92:	f000 8481 	beq.w	8004498 <__ieee754_pow+0x950>
 8003b96:	48b3      	ldr	r0, [pc, #716]	; (8003e64 <__ieee754_pow+0x31c>)
 8003b98:	b011      	add	sp, #68	; 0x44
 8003b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9e:	f000 bd7d 	b.w	800469c <nan>
 8003ba2:	f1b8 0f00 	cmp.w	r8, #0
 8003ba6:	da2a      	bge.n	8003bfe <__ieee754_pow+0xb6>
 8003ba8:	4aaf      	ldr	r2, [pc, #700]	; (8003e68 <__ieee754_pow+0x320>)
 8003baa:	4296      	cmp	r6, r2
 8003bac:	dc24      	bgt.n	8003bf8 <__ieee754_pow+0xb0>
 8003bae:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8003bb2:	4296      	cmp	r6, r2
 8003bb4:	dd23      	ble.n	8003bfe <__ieee754_pow+0xb6>
 8003bb6:	1532      	asrs	r2, r6, #20
 8003bb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003bbc:	2a14      	cmp	r2, #20
 8003bbe:	dd0c      	ble.n	8003bda <__ieee754_pow+0x92>
 8003bc0:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8003bc4:	fa23 f102 	lsr.w	r1, r3, r2
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d116      	bne.n	8003bfe <__ieee754_pow+0xb6>
 8003bd0:	f001 0101 	and.w	r1, r1, #1
 8003bd4:	f1c1 0b02 	rsb	fp, r1, #2
 8003bd8:	e013      	b.n	8003c02 <__ieee754_pow+0xba>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d155      	bne.n	8003c8a <__ieee754_pow+0x142>
 8003bde:	f1c2 0214 	rsb	r2, r2, #20
 8003be2:	fa46 f102 	asr.w	r1, r6, r2
 8003be6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bea:	4296      	cmp	r6, r2
 8003bec:	d12a      	bne.n	8003c44 <__ieee754_pow+0xfc>
 8003bee:	f001 0101 	and.w	r1, r1, #1
 8003bf2:	f1c1 0b02 	rsb	fp, r1, #2
 8003bf6:	e026      	b.n	8003c46 <__ieee754_pow+0xfe>
 8003bf8:	f04f 0b02 	mov.w	fp, #2
 8003bfc:	e001      	b.n	8003c02 <__ieee754_pow+0xba>
 8003bfe:	f04f 0b00 	mov.w	fp, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d143      	bne.n	8003c8e <__ieee754_pow+0x146>
 8003c06:	4a96      	ldr	r2, [pc, #600]	; (8003e60 <__ieee754_pow+0x318>)
 8003c08:	4296      	cmp	r6, r2
 8003c0a:	d11c      	bne.n	8003c46 <__ieee754_pow+0xfe>
 8003c0c:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8003c10:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8003c14:	ea52 020a 	orrs.w	r2, r2, sl
 8003c18:	f000 843f 	beq.w	800449a <__ieee754_pow+0x952>
 8003c1c:	4b93      	ldr	r3, [pc, #588]	; (8003e6c <__ieee754_pow+0x324>)
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	dd07      	ble.n	8003c32 <__ieee754_pow+0xea>
 8003c22:	f1b9 0f00 	cmp.w	r9, #0
 8003c26:	f280 843a 	bge.w	800449e <__ieee754_pow+0x956>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f000 bc43 	b.w	80044b8 <__ieee754_pow+0x970>
 8003c32:	f1b9 0f00 	cmp.w	r9, #0
 8003c36:	daf8      	bge.n	8003c2a <__ieee754_pow+0xe2>
 8003c38:	9a01      	ldr	r2, [sp, #4]
 8003c3a:	9b00      	ldr	r3, [sp, #0]
 8003c3c:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8003c40:	f000 bc3a 	b.w	80044b8 <__ieee754_pow+0x970>
 8003c44:	469b      	mov	fp, r3
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <__ieee754_pow+0x328>)
 8003c48:	429e      	cmp	r6, r3
 8003c4a:	d108      	bne.n	8003c5e <__ieee754_pow+0x116>
 8003c4c:	f1b9 0f00 	cmp.w	r9, #0
 8003c50:	f280 8428 	bge.w	80044a4 <__ieee754_pow+0x95c>
 8003c54:	463a      	mov	r2, r7
 8003c56:	4623      	mov	r3, r4
 8003c58:	2000      	movs	r0, #0
 8003c5a:	4985      	ldr	r1, [pc, #532]	; (8003e70 <__ieee754_pow+0x328>)
 8003c5c:	e03e      	b.n	8003cdc <__ieee754_pow+0x194>
 8003c5e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003c62:	d105      	bne.n	8003c70 <__ieee754_pow+0x128>
 8003c64:	463a      	mov	r2, r7
 8003c66:	4623      	mov	r3, r4
 8003c68:	4638      	mov	r0, r7
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	f000 bc11 	b.w	8004492 <__ieee754_pow+0x94a>
 8003c70:	4b80      	ldr	r3, [pc, #512]	; (8003e74 <__ieee754_pow+0x32c>)
 8003c72:	4599      	cmp	r9, r3
 8003c74:	d10b      	bne.n	8003c8e <__ieee754_pow+0x146>
 8003c76:	f1b8 0f00 	cmp.w	r8, #0
 8003c7a:	db08      	blt.n	8003c8e <__ieee754_pow+0x146>
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	4621      	mov	r1, r4
 8003c80:	b011      	add	sp, #68	; 0x44
 8003c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c86:	f000 bc53 	b.w	8004530 <__ieee754_sqrt>
 8003c8a:	f04f 0b00 	mov.w	fp, #0
 8003c8e:	4638      	mov	r0, r7
 8003c90:	4621      	mov	r1, r4
 8003c92:	f000 fcf7 	bl	8004684 <fabs>
 8003c96:	f1ba 0f00 	cmp.w	sl, #0
 8003c9a:	d12a      	bne.n	8003cf2 <__ieee754_pow+0x1aa>
 8003c9c:	b125      	cbz	r5, 8003ca8 <__ieee754_pow+0x160>
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <__ieee754_pow+0x328>)
 8003ca0:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d124      	bne.n	8003cf2 <__ieee754_pow+0x1aa>
 8003ca8:	f1b9 0f00 	cmp.w	r9, #0
 8003cac:	da05      	bge.n	8003cba <__ieee754_pow+0x172>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	496e      	ldr	r1, [pc, #440]	; (8003e70 <__ieee754_pow+0x328>)
 8003cb6:	f7fc fd69 	bl	800078c <__aeabi_ddiv>
 8003cba:	f1b8 0f00 	cmp.w	r8, #0
 8003cbe:	f280 83f4 	bge.w	80044aa <__ieee754_pow+0x962>
 8003cc2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003cc6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003cca:	ea55 030b 	orrs.w	r3, r5, fp
 8003cce:	d108      	bne.n	8003ce2 <__ieee754_pow+0x19a>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	f7fc fa7c 	bl	80001d0 <__aeabi_dsub>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	f7fc fd56 	bl	800078c <__aeabi_ddiv>
 8003ce0:	e3e3      	b.n	80044aa <__ieee754_pow+0x962>
 8003ce2:	f1bb 0f01 	cmp.w	fp, #1
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f040 83e6 	bne.w	80044b8 <__ieee754_pow+0x970>
 8003cec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003cf0:	e3e2      	b.n	80044b8 <__ieee754_pow+0x970>
 8003cf2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8003cf6:	f108 33ff 	add.w	r3, r8, #4294967295
 8003cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8003cfc:	ea5b 0303 	orrs.w	r3, fp, r3
 8003d00:	d104      	bne.n	8003d0c <__ieee754_pow+0x1c4>
 8003d02:	463a      	mov	r2, r7
 8003d04:	4623      	mov	r3, r4
 8003d06:	4638      	mov	r0, r7
 8003d08:	4621      	mov	r1, r4
 8003d0a:	e7e3      	b.n	8003cd4 <__ieee754_pow+0x18c>
 8003d0c:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <__ieee754_pow+0x330>)
 8003d0e:	429e      	cmp	r6, r3
 8003d10:	dd6d      	ble.n	8003dee <__ieee754_pow+0x2a6>
 8003d12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003d16:	429e      	cmp	r6, r3
 8003d18:	dd0b      	ble.n	8003d32 <__ieee754_pow+0x1ea>
 8003d1a:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <__ieee754_pow+0x324>)
 8003d1c:	429d      	cmp	r5, r3
 8003d1e:	dc0e      	bgt.n	8003d3e <__ieee754_pow+0x1f6>
 8003d20:	f1b9 0f00 	cmp.w	r9, #0
 8003d24:	da81      	bge.n	8003c2a <__ieee754_pow+0xe2>
 8003d26:	a344      	add	r3, pc, #272	; (adr r3, 8003e38 <__ieee754_pow+0x2f0>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	e3af      	b.n	8004492 <__ieee754_pow+0x94a>
 8003d32:	4b52      	ldr	r3, [pc, #328]	; (8003e7c <__ieee754_pow+0x334>)
 8003d34:	429d      	cmp	r5, r3
 8003d36:	ddf3      	ble.n	8003d20 <__ieee754_pow+0x1d8>
 8003d38:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <__ieee754_pow+0x328>)
 8003d3a:	429d      	cmp	r5, r3
 8003d3c:	dd03      	ble.n	8003d46 <__ieee754_pow+0x1fe>
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	dcf0      	bgt.n	8003d26 <__ieee754_pow+0x1de>
 8003d44:	e771      	b.n	8003c2a <__ieee754_pow+0xe2>
 8003d46:	2200      	movs	r2, #0
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <__ieee754_pow+0x328>)
 8003d4a:	f7fc fa41 	bl	80001d0 <__aeabi_dsub>
 8003d4e:	a33c      	add	r3, pc, #240	; (adr r3, 8003e40 <__ieee754_pow+0x2f8>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
 8003d58:	f7fc fbee 	bl	8000538 <__aeabi_dmul>
 8003d5c:	a33a      	add	r3, pc, #232	; (adr r3, 8003e48 <__ieee754_pow+0x300>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	4606      	mov	r6, r0
 8003d64:	460f      	mov	r7, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fbe5 	bl	8000538 <__aeabi_dmul>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d74:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <__ieee754_pow+0x338>)
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fbdd 	bl	8000538 <__aeabi_dmul>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	a133      	add	r1, pc, #204	; (adr r1, 8003e50 <__ieee754_pow+0x308>)
 8003d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d88:	f7fc fa22 	bl	80001d0 <__aeabi_dsub>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	462b      	mov	r3, r5
 8003d90:	f7fc fbd2 	bl	8000538 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	2000      	movs	r0, #0
 8003d9a:	4936      	ldr	r1, [pc, #216]	; (8003e74 <__ieee754_pow+0x32c>)
 8003d9c:	f7fc fa18 	bl	80001d0 <__aeabi_dsub>
 8003da0:	4622      	mov	r2, r4
 8003da2:	462b      	mov	r3, r5
 8003da4:	4680      	mov	r8, r0
 8003da6:	4689      	mov	r9, r1
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fbc4 	bl	8000538 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc fbbe 	bl	8000538 <__aeabi_dmul>
 8003dbc:	a326      	add	r3, pc, #152	; (adr r3, 8003e58 <__ieee754_pow+0x310>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fbb9 	bl	8000538 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dce:	f7fc f9ff 	bl	80001d0 <__aeabi_dsub>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	460d      	mov	r5, r1
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc f9f9 	bl	80001d4 <__adddf3>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003de8:	4632      	mov	r2, r6
 8003dea:	463b      	mov	r3, r7
 8003dec:	e1a7      	b.n	800413e <__ieee754_pow+0x5f6>
 8003dee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	da05      	bge.n	8003e04 <__ieee754_pow+0x2bc>
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <__ieee754_pow+0x33c>)
 8003dfa:	f7fc fb9d 	bl	8000538 <__aeabi_dmul>
 8003dfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003e02:	460d      	mov	r5, r1
 8003e04:	152b      	asrs	r3, r5, #20
 8003e06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <__ieee754_pow+0x340>)
 8003e0e:	9307      	str	r3, [sp, #28]
 8003e10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003e14:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003e1e:	dd07      	ble.n	8003e30 <__ieee754_pow+0x2e8>
 8003e20:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <__ieee754_pow+0x344>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	dd34      	ble.n	8003e90 <__ieee754_pow+0x348>
 8003e26:	9b07      	ldr	r3, [sp, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003e30:	f04f 0a00 	mov.w	sl, #0
 8003e34:	e02e      	b.n	8003e94 <__ieee754_pow+0x34c>
 8003e36:	bf00      	nop
 8003e38:	8800759c 	.word	0x8800759c
 8003e3c:	7e37e43c 	.word	0x7e37e43c
 8003e40:	60000000 	.word	0x60000000
 8003e44:	3ff71547 	.word	0x3ff71547
 8003e48:	f85ddf44 	.word	0xf85ddf44
 8003e4c:	3e54ae0b 	.word	0x3e54ae0b
 8003e50:	55555555 	.word	0x55555555
 8003e54:	3fd55555 	.word	0x3fd55555
 8003e58:	652b82fe 	.word	0x652b82fe
 8003e5c:	3ff71547 	.word	0x3ff71547
 8003e60:	7ff00000 	.word	0x7ff00000
 8003e64:	08004931 	.word	0x08004931
 8003e68:	433fffff 	.word	0x433fffff
 8003e6c:	3fefffff 	.word	0x3fefffff
 8003e70:	3ff00000 	.word	0x3ff00000
 8003e74:	3fe00000 	.word	0x3fe00000
 8003e78:	41e00000 	.word	0x41e00000
 8003e7c:	3feffffe 	.word	0x3feffffe
 8003e80:	3fd00000 	.word	0x3fd00000
 8003e84:	43400000 	.word	0x43400000
 8003e88:	0003988e 	.word	0x0003988e
 8003e8c:	000bb679 	.word	0x000bb679
 8003e90:	f04f 0a01 	mov.w	sl, #1
 8003e94:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003e98:	930c      	str	r3, [sp, #48]	; 0x30
 8003e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e9c:	4bd0      	ldr	r3, [pc, #832]	; (80041e0 <__ieee754_pow+0x698>)
 8003e9e:	4413      	add	r3, r2
 8003ea0:	cb18      	ldmia	r3, {r3, r4}
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003eb0:	f7fc f98e 	bl	80001d0 <__aeabi_dsub>
 8003eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003eb8:	4606      	mov	r6, r0
 8003eba:	460f      	mov	r7, r1
 8003ebc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ec0:	f7fc f988 	bl	80001d4 <__adddf3>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	2000      	movs	r0, #0
 8003eca:	49c6      	ldr	r1, [pc, #792]	; (80041e4 <__ieee754_pow+0x69c>)
 8003ecc:	f7fc fc5e 	bl	800078c <__aeabi_ddiv>
 8003ed0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc fb2c 	bl	8000538 <__aeabi_dmul>
 8003ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ee4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ee8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9302      	str	r3, [sp, #8]
 8003ef0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003ef4:	106d      	asrs	r5, r5, #1
 8003ef6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003efa:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003efe:	2200      	movs	r2, #0
 8003f00:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	f7fc fb14 	bl	8000538 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc f95a 	bl	80001d0 <__aeabi_dsub>
 8003f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f20:	4606      	mov	r6, r0
 8003f22:	460f      	mov	r7, r1
 8003f24:	4620      	mov	r0, r4
 8003f26:	4629      	mov	r1, r5
 8003f28:	f7fc f952 	bl	80001d0 <__aeabi_dsub>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003f34:	f7fc f94c 	bl	80001d0 <__aeabi_dsub>
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	f7fc fafc 	bl	8000538 <__aeabi_dmul>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc f942 	bl	80001d0 <__aeabi_dsub>
 8003f4c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003f50:	f7fc faf2 	bl	8000538 <__aeabi_dmul>
 8003f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fc faea 	bl	8000538 <__aeabi_dmul>
 8003f64:	a38c      	add	r3, pc, #560	; (adr r3, 8004198 <__ieee754_pow+0x650>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	460d      	mov	r5, r1
 8003f6e:	f7fc fae3 	bl	8000538 <__aeabi_dmul>
 8003f72:	a38b      	add	r3, pc, #556	; (adr r3, 80041a0 <__ieee754_pow+0x658>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f7fc f92c 	bl	80001d4 <__adddf3>
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	f7fc fada 	bl	8000538 <__aeabi_dmul>
 8003f84:	a388      	add	r3, pc, #544	; (adr r3, 80041a8 <__ieee754_pow+0x660>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc f923 	bl	80001d4 <__adddf3>
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	f7fc fad1 	bl	8000538 <__aeabi_dmul>
 8003f96:	a386      	add	r3, pc, #536	; (adr r3, 80041b0 <__ieee754_pow+0x668>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc f91a 	bl	80001d4 <__adddf3>
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	f7fc fac8 	bl	8000538 <__aeabi_dmul>
 8003fa8:	a383      	add	r3, pc, #524	; (adr r3, 80041b8 <__ieee754_pow+0x670>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc f911 	bl	80001d4 <__adddf3>
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	f7fc fabf 	bl	8000538 <__aeabi_dmul>
 8003fba:	a381      	add	r3, pc, #516	; (adr r3, 80041c0 <__ieee754_pow+0x678>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc f908 	bl	80001d4 <__adddf3>
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	460f      	mov	r7, r1
 8003fca:	462b      	mov	r3, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc fab2 	bl	8000538 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4630      	mov	r0, r6
 8003fda:	4639      	mov	r1, r7
 8003fdc:	f7fc faac 	bl	8000538 <__aeabi_dmul>
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fec:	f7fc f8f2 	bl	80001d4 <__adddf3>
 8003ff0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ff4:	f7fc faa0 	bl	8000538 <__aeabi_dmul>
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	f7fc f8ea 	bl	80001d4 <__adddf3>
 8004000:	4642      	mov	r2, r8
 8004002:	4606      	mov	r6, r0
 8004004:	460f      	mov	r7, r1
 8004006:	464b      	mov	r3, r9
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc fa94 	bl	8000538 <__aeabi_dmul>
 8004010:	2200      	movs	r2, #0
 8004012:	4b75      	ldr	r3, [pc, #468]	; (80041e8 <__ieee754_pow+0x6a0>)
 8004014:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004018:	f7fc f8dc 	bl	80001d4 <__adddf3>
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	f7fc f8d8 	bl	80001d4 <__adddf3>
 8004024:	9802      	ldr	r0, [sp, #8]
 8004026:	460d      	mov	r5, r1
 8004028:	4604      	mov	r4, r0
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4640      	mov	r0, r8
 8004030:	4649      	mov	r1, r9
 8004032:	f7fc fa81 	bl	8000538 <__aeabi_dmul>
 8004036:	2200      	movs	r2, #0
 8004038:	4680      	mov	r8, r0
 800403a:	4689      	mov	r9, r1
 800403c:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <__ieee754_pow+0x6a0>)
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc f8c5 	bl	80001d0 <__aeabi_dsub>
 8004046:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800404a:	f7fc f8c1 	bl	80001d0 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4630      	mov	r0, r6
 8004054:	4639      	mov	r1, r7
 8004056:	f7fc f8bb 	bl	80001d0 <__aeabi_dsub>
 800405a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800405e:	f7fc fa6b 	bl	8000538 <__aeabi_dmul>
 8004062:	4622      	mov	r2, r4
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	462b      	mov	r3, r5
 800406a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800406e:	f7fc fa63 	bl	8000538 <__aeabi_dmul>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4630      	mov	r0, r6
 8004078:	4639      	mov	r1, r7
 800407a:	f7fc f8ab 	bl	80001d4 <__adddf3>
 800407e:	4606      	mov	r6, r0
 8004080:	460f      	mov	r7, r1
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4640      	mov	r0, r8
 8004088:	4649      	mov	r1, r9
 800408a:	f7fc f8a3 	bl	80001d4 <__adddf3>
 800408e:	9802      	ldr	r0, [sp, #8]
 8004090:	a34d      	add	r3, pc, #308	; (adr r3, 80041c8 <__ieee754_pow+0x680>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	4604      	mov	r4, r0
 8004098:	460d      	mov	r5, r1
 800409a:	f7fc fa4d 	bl	8000538 <__aeabi_dmul>
 800409e:	4642      	mov	r2, r8
 80040a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80040a4:	464b      	mov	r3, r9
 80040a6:	4620      	mov	r0, r4
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7fc f891 	bl	80001d0 <__aeabi_dsub>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7fc f88b 	bl	80001d0 <__aeabi_dsub>
 80040ba:	a345      	add	r3, pc, #276	; (adr r3, 80041d0 <__ieee754_pow+0x688>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc fa3a 	bl	8000538 <__aeabi_dmul>
 80040c4:	a344      	add	r3, pc, #272	; (adr r3, 80041d8 <__ieee754_pow+0x690>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	4606      	mov	r6, r0
 80040cc:	460f      	mov	r7, r1
 80040ce:	4620      	mov	r0, r4
 80040d0:	4629      	mov	r1, r5
 80040d2:	f7fc fa31 	bl	8000538 <__aeabi_dmul>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	f7fc f879 	bl	80001d4 <__adddf3>
 80040e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <__ieee754_pow+0x6a4>)
 80040e6:	4413      	add	r3, r2
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f7fc f872 	bl	80001d4 <__adddf3>
 80040f0:	4604      	mov	r4, r0
 80040f2:	9807      	ldr	r0, [sp, #28]
 80040f4:	460d      	mov	r5, r1
 80040f6:	f7fc f9b9 	bl	800046c <__aeabi_i2d>
 80040fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040fc:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <__ieee754_pow+0x6a8>)
 80040fe:	4413      	add	r3, r2
 8004100:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	4622      	mov	r2, r4
 800410a:	462b      	mov	r3, r5
 800410c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004110:	f7fc f860 	bl	80001d4 <__adddf3>
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	f7fc f85c 	bl	80001d4 <__adddf3>
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	f7fc f858 	bl	80001d4 <__adddf3>
 8004124:	9802      	ldr	r0, [sp, #8]
 8004126:	4632      	mov	r2, r6
 8004128:	463b      	mov	r3, r7
 800412a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800412e:	f7fc f84f 	bl	80001d0 <__aeabi_dsub>
 8004132:	4642      	mov	r2, r8
 8004134:	464b      	mov	r3, r9
 8004136:	f7fc f84b 	bl	80001d0 <__aeabi_dsub>
 800413a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800413e:	f7fc f847 	bl	80001d0 <__aeabi_dsub>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc f841 	bl	80001d0 <__aeabi_dsub>
 800414e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004150:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004154:	4313      	orrs	r3, r2
 8004156:	bf0c      	ite	eq
 8004158:	4c26      	ldreq	r4, [pc, #152]	; (80041f4 <__ieee754_pow+0x6ac>)
 800415a:	4c22      	ldrne	r4, [pc, #136]	; (80041e4 <__ieee754_pow+0x69c>)
 800415c:	2300      	movs	r3, #0
 800415e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004162:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004166:	2400      	movs	r4, #0
 8004168:	4606      	mov	r6, r0
 800416a:	460f      	mov	r7, r1
 800416c:	4622      	mov	r2, r4
 800416e:	462b      	mov	r3, r5
 8004170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004174:	f7fc f82c 	bl	80001d0 <__aeabi_dsub>
 8004178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800417c:	f7fc f9dc 	bl	8000538 <__aeabi_dmul>
 8004180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004184:	4680      	mov	r8, r0
 8004186:	4689      	mov	r9, r1
 8004188:	4630      	mov	r0, r6
 800418a:	4639      	mov	r1, r7
 800418c:	f7fc f9d4 	bl	8000538 <__aeabi_dmul>
 8004190:	e032      	b.n	80041f8 <__ieee754_pow+0x6b0>
 8004192:	bf00      	nop
 8004194:	f3af 8000 	nop.w
 8004198:	4a454eef 	.word	0x4a454eef
 800419c:	3fca7e28 	.word	0x3fca7e28
 80041a0:	93c9db65 	.word	0x93c9db65
 80041a4:	3fcd864a 	.word	0x3fcd864a
 80041a8:	a91d4101 	.word	0xa91d4101
 80041ac:	3fd17460 	.word	0x3fd17460
 80041b0:	518f264d 	.word	0x518f264d
 80041b4:	3fd55555 	.word	0x3fd55555
 80041b8:	db6fabff 	.word	0xdb6fabff
 80041bc:	3fdb6db6 	.word	0x3fdb6db6
 80041c0:	33333303 	.word	0x33333303
 80041c4:	3fe33333 	.word	0x3fe33333
 80041c8:	e0000000 	.word	0xe0000000
 80041cc:	3feec709 	.word	0x3feec709
 80041d0:	dc3a03fd 	.word	0xdc3a03fd
 80041d4:	3feec709 	.word	0x3feec709
 80041d8:	145b01f5 	.word	0x145b01f5
 80041dc:	be3e2fe0 	.word	0xbe3e2fe0
 80041e0:	08004960 	.word	0x08004960
 80041e4:	3ff00000 	.word	0x3ff00000
 80041e8:	40080000 	.word	0x40080000
 80041ec:	08004950 	.word	0x08004950
 80041f0:	08004940 	.word	0x08004940
 80041f4:	bff00000 	.word	0xbff00000
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4640      	mov	r0, r8
 80041fe:	4649      	mov	r1, r9
 8004200:	f7fb ffe8 	bl	80001d4 <__adddf3>
 8004204:	4622      	mov	r2, r4
 8004206:	462b      	mov	r3, r5
 8004208:	4680      	mov	r8, r0
 800420a:	4689      	mov	r9, r1
 800420c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004210:	f7fc f992 	bl	8000538 <__aeabi_dmul>
 8004214:	460b      	mov	r3, r1
 8004216:	4604      	mov	r4, r0
 8004218:	460d      	mov	r5, r1
 800421a:	4602      	mov	r2, r0
 800421c:	4649      	mov	r1, r9
 800421e:	4640      	mov	r0, r8
 8004220:	e9cd 4500 	strd	r4, r5, [sp]
 8004224:	f7fb ffd6 	bl	80001d4 <__adddf3>
 8004228:	4bbb      	ldr	r3, [pc, #748]	; (8004518 <__ieee754_pow+0x9d0>)
 800422a:	4299      	cmp	r1, r3
 800422c:	4682      	mov	sl, r0
 800422e:	460f      	mov	r7, r1
 8004230:	460e      	mov	r6, r1
 8004232:	dd26      	ble.n	8004282 <__ieee754_pow+0x73a>
 8004234:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004238:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800423c:	4303      	orrs	r3, r0
 800423e:	d115      	bne.n	800426c <__ieee754_pow+0x724>
 8004240:	a39f      	add	r3, pc, #636	; (adr r3, 80044c0 <__ieee754_pow+0x978>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7fb ffc3 	bl	80001d4 <__adddf3>
 800424e:	4622      	mov	r2, r4
 8004250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004254:	462b      	mov	r3, r5
 8004256:	4650      	mov	r0, sl
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb ffb9 	bl	80001d0 <__aeabi_dsub>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004266:	f7fc fbf7 	bl	8000a58 <__aeabi_dcmpgt>
 800426a:	b348      	cbz	r0, 80042c0 <__ieee754_pow+0x778>
 800426c:	a396      	add	r3, pc, #600	; (adr r3, 80044c8 <__ieee754_pow+0x980>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004276:	f7fc f95f 	bl	8000538 <__aeabi_dmul>
 800427a:	a393      	add	r3, pc, #588	; (adr r3, 80044c8 <__ieee754_pow+0x980>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	e107      	b.n	8004492 <__ieee754_pow+0x94a>
 8004282:	4ba6      	ldr	r3, [pc, #664]	; (800451c <__ieee754_pow+0x9d4>)
 8004284:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004288:	429f      	cmp	r7, r3
 800428a:	dd19      	ble.n	80042c0 <__ieee754_pow+0x778>
 800428c:	4ba4      	ldr	r3, [pc, #656]	; (8004520 <__ieee754_pow+0x9d8>)
 800428e:	440b      	add	r3, r1
 8004290:	4303      	orrs	r3, r0
 8004292:	d10a      	bne.n	80042aa <__ieee754_pow+0x762>
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	f7fb ff9a 	bl	80001d0 <__aeabi_dsub>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fc fbc4 	bl	8000a30 <__aeabi_dcmple>
 80042a8:	b150      	cbz	r0, 80042c0 <__ieee754_pow+0x778>
 80042aa:	a389      	add	r3, pc, #548	; (adr r3, 80044d0 <__ieee754_pow+0x988>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b4:	f7fc f940 	bl	8000538 <__aeabi_dmul>
 80042b8:	a385      	add	r3, pc, #532	; (adr r3, 80044d0 <__ieee754_pow+0x988>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	e0e8      	b.n	8004492 <__ieee754_pow+0x94a>
 80042c0:	4a98      	ldr	r2, [pc, #608]	; (8004524 <__ieee754_pow+0x9dc>)
 80042c2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80042c6:	4293      	cmp	r3, r2
 80042c8:	dd25      	ble.n	8004316 <__ieee754_pow+0x7ce>
 80042ca:	151b      	asrs	r3, r3, #20
 80042cc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80042d0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80042d4:	fa4a f303 	asr.w	r3, sl, r3
 80042d8:	4433      	add	r3, r6
 80042da:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80042de:	4f92      	ldr	r7, [pc, #584]	; (8004528 <__ieee754_pow+0x9e0>)
 80042e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80042e4:	4117      	asrs	r7, r2
 80042e6:	ea23 0107 	bic.w	r1, r3, r7
 80042ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ee:	ea43 030a 	orr.w	r3, r3, sl
 80042f2:	2000      	movs	r0, #0
 80042f4:	f1c2 0a14 	rsb	sl, r2, #20
 80042f8:	fa43 fa0a 	asr.w	sl, r3, sl
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	bfb8      	it	lt
 8004308:	f1ca 0a00 	rsblt	sl, sl, #0
 800430c:	f7fb ff60 	bl	80001d0 <__aeabi_dsub>
 8004310:	e9cd 0100 	strd	r0, r1, [sp]
 8004314:	e001      	b.n	800431a <__ieee754_pow+0x7d2>
 8004316:	f04f 0a00 	mov.w	sl, #0
 800431a:	4642      	mov	r2, r8
 800431c:	464b      	mov	r3, r9
 800431e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004322:	f7fb ff57 	bl	80001d4 <__adddf3>
 8004326:	2000      	movs	r0, #0
 8004328:	a36b      	add	r3, pc, #428	; (adr r3, 80044d8 <__ieee754_pow+0x990>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	f7fc f901 	bl	8000538 <__aeabi_dmul>
 8004336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800433a:	4606      	mov	r6, r0
 800433c:	460f      	mov	r7, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fb ff45 	bl	80001d0 <__aeabi_dsub>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fb ff3f 	bl	80001d0 <__aeabi_dsub>
 8004352:	a363      	add	r3, pc, #396	; (adr r3, 80044e0 <__ieee754_pow+0x998>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fc f8ee 	bl	8000538 <__aeabi_dmul>
 800435c:	a362      	add	r3, pc, #392	; (adr r3, 80044e8 <__ieee754_pow+0x9a0>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	4680      	mov	r8, r0
 8004364:	4689      	mov	r9, r1
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fc f8e5 	bl	8000538 <__aeabi_dmul>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4640      	mov	r0, r8
 8004374:	4649      	mov	r1, r9
 8004376:	f7fb ff2d 	bl	80001d4 <__adddf3>
 800437a:	4604      	mov	r4, r0
 800437c:	460d      	mov	r5, r1
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4630      	mov	r0, r6
 8004384:	4639      	mov	r1, r7
 8004386:	f7fb ff25 	bl	80001d4 <__adddf3>
 800438a:	4632      	mov	r2, r6
 800438c:	463b      	mov	r3, r7
 800438e:	4680      	mov	r8, r0
 8004390:	4689      	mov	r9, r1
 8004392:	f7fb ff1d 	bl	80001d0 <__aeabi_dsub>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fb ff17 	bl	80001d0 <__aeabi_dsub>
 80043a2:	4642      	mov	r2, r8
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	464b      	mov	r3, r9
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fc f8c3 	bl	8000538 <__aeabi_dmul>
 80043b2:	a34f      	add	r3, pc, #316	; (adr r3, 80044f0 <__ieee754_pow+0x9a8>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	4604      	mov	r4, r0
 80043ba:	460d      	mov	r5, r1
 80043bc:	f7fc f8bc 	bl	8000538 <__aeabi_dmul>
 80043c0:	a34d      	add	r3, pc, #308	; (adr r3, 80044f8 <__ieee754_pow+0x9b0>)
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f7fb ff03 	bl	80001d0 <__aeabi_dsub>
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f7fc f8b3 	bl	8000538 <__aeabi_dmul>
 80043d2:	a34b      	add	r3, pc, #300	; (adr r3, 8004500 <__ieee754_pow+0x9b8>)
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fb fefc 	bl	80001d4 <__adddf3>
 80043dc:	4622      	mov	r2, r4
 80043de:	462b      	mov	r3, r5
 80043e0:	f7fc f8aa 	bl	8000538 <__aeabi_dmul>
 80043e4:	a348      	add	r3, pc, #288	; (adr r3, 8004508 <__ieee754_pow+0x9c0>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fb fef1 	bl	80001d0 <__aeabi_dsub>
 80043ee:	4622      	mov	r2, r4
 80043f0:	462b      	mov	r3, r5
 80043f2:	f7fc f8a1 	bl	8000538 <__aeabi_dmul>
 80043f6:	a346      	add	r3, pc, #280	; (adr r3, 8004510 <__ieee754_pow+0x9c8>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fb feea 	bl	80001d4 <__adddf3>
 8004400:	4622      	mov	r2, r4
 8004402:	462b      	mov	r3, r5
 8004404:	f7fc f898 	bl	8000538 <__aeabi_dmul>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4640      	mov	r0, r8
 800440e:	4649      	mov	r1, r9
 8004410:	f7fb fede 	bl	80001d0 <__aeabi_dsub>
 8004414:	4604      	mov	r4, r0
 8004416:	460d      	mov	r5, r1
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	f7fc f88a 	bl	8000538 <__aeabi_dmul>
 8004424:	2200      	movs	r2, #0
 8004426:	e9cd 0100 	strd	r0, r1, [sp]
 800442a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800442e:	4620      	mov	r0, r4
 8004430:	4629      	mov	r1, r5
 8004432:	f7fb fecd 	bl	80001d0 <__aeabi_dsub>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800443e:	f7fc f9a5 	bl	800078c <__aeabi_ddiv>
 8004442:	4632      	mov	r2, r6
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
 8004448:	463b      	mov	r3, r7
 800444a:	4640      	mov	r0, r8
 800444c:	4649      	mov	r1, r9
 800444e:	f7fc f873 	bl	8000538 <__aeabi_dmul>
 8004452:	4632      	mov	r2, r6
 8004454:	463b      	mov	r3, r7
 8004456:	f7fb febd 	bl	80001d4 <__adddf3>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fb feb5 	bl	80001d0 <__aeabi_dsub>
 8004466:	4642      	mov	r2, r8
 8004468:	464b      	mov	r3, r9
 800446a:	f7fb feb1 	bl	80001d0 <__aeabi_dsub>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	2000      	movs	r0, #0
 8004474:	492d      	ldr	r1, [pc, #180]	; (800452c <__ieee754_pow+0x9e4>)
 8004476:	f7fb feab 	bl	80001d0 <__aeabi_dsub>
 800447a:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800447e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004482:	da03      	bge.n	800448c <__ieee754_pow+0x944>
 8004484:	4652      	mov	r2, sl
 8004486:	f000 f99b 	bl	80047c0 <scalbn>
 800448a:	e000      	b.n	800448e <__ieee754_pow+0x946>
 800448c:	4621      	mov	r1, r4
 800448e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004492:	f7fc f851 	bl	8000538 <__aeabi_dmul>
 8004496:	e008      	b.n	80044aa <__ieee754_pow+0x962>
 8004498:	4603      	mov	r3, r0
 800449a:	4924      	ldr	r1, [pc, #144]	; (800452c <__ieee754_pow+0x9e4>)
 800449c:	e00c      	b.n	80044b8 <__ieee754_pow+0x970>
 800449e:	9b00      	ldr	r3, [sp, #0]
 80044a0:	9901      	ldr	r1, [sp, #4]
 80044a2:	e009      	b.n	80044b8 <__ieee754_pow+0x970>
 80044a4:	463b      	mov	r3, r7
 80044a6:	4621      	mov	r1, r4
 80044a8:	e006      	b.n	80044b8 <__ieee754_pow+0x970>
 80044aa:	4603      	mov	r3, r0
 80044ac:	e004      	b.n	80044b8 <__ieee754_pow+0x970>
 80044ae:	42ae      	cmp	r6, r5
 80044b0:	f73f ab71 	bgt.w	8003b96 <__ieee754_pow+0x4e>
 80044b4:	f7ff bb64 	b.w	8003b80 <__ieee754_pow+0x38>
 80044b8:	4618      	mov	r0, r3
 80044ba:	b011      	add	sp, #68	; 0x44
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c0:	652b82fe 	.word	0x652b82fe
 80044c4:	3c971547 	.word	0x3c971547
 80044c8:	8800759c 	.word	0x8800759c
 80044cc:	7e37e43c 	.word	0x7e37e43c
 80044d0:	c2f8f359 	.word	0xc2f8f359
 80044d4:	01a56e1f 	.word	0x01a56e1f
 80044d8:	00000000 	.word	0x00000000
 80044dc:	3fe62e43 	.word	0x3fe62e43
 80044e0:	fefa39ef 	.word	0xfefa39ef
 80044e4:	3fe62e42 	.word	0x3fe62e42
 80044e8:	0ca86c39 	.word	0x0ca86c39
 80044ec:	be205c61 	.word	0xbe205c61
 80044f0:	72bea4d0 	.word	0x72bea4d0
 80044f4:	3e663769 	.word	0x3e663769
 80044f8:	c5d26bf1 	.word	0xc5d26bf1
 80044fc:	3ebbbd41 	.word	0x3ebbbd41
 8004500:	af25de2c 	.word	0xaf25de2c
 8004504:	3f11566a 	.word	0x3f11566a
 8004508:	16bebd93 	.word	0x16bebd93
 800450c:	3f66c16c 	.word	0x3f66c16c
 8004510:	5555553e 	.word	0x5555553e
 8004514:	3fc55555 	.word	0x3fc55555
 8004518:	408fffff 	.word	0x408fffff
 800451c:	4090cbff 	.word	0x4090cbff
 8004520:	3f6f3400 	.word	0x3f6f3400
 8004524:	3fe00000 	.word	0x3fe00000
 8004528:	000fffff 	.word	0x000fffff
 800452c:	3ff00000 	.word	0x3ff00000

08004530 <__ieee754_sqrt>:
 8004530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004534:	4f52      	ldr	r7, [pc, #328]	; (8004680 <__ieee754_sqrt+0x150>)
 8004536:	f8df c148 	ldr.w	ip, [pc, #328]	; 8004680 <__ieee754_sqrt+0x150>
 800453a:	400f      	ands	r7, r1
 800453c:	4567      	cmp	r7, ip
 800453e:	4606      	mov	r6, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4686      	mov	lr, r0
 8004544:	460c      	mov	r4, r1
 8004546:	460b      	mov	r3, r1
 8004548:	4602      	mov	r2, r0
 800454a:	d108      	bne.n	800455e <__ieee754_sqrt+0x2e>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	f7fb fff2 	bl	8000538 <__aeabi_dmul>
 8004554:	4632      	mov	r2, r6
 8004556:	462b      	mov	r3, r5
 8004558:	f7fb fe3c 	bl	80001d4 <__adddf3>
 800455c:	e08d      	b.n	800467a <__ieee754_sqrt+0x14a>
 800455e:	2900      	cmp	r1, #0
 8004560:	dc0e      	bgt.n	8004580 <__ieee754_sqrt+0x50>
 8004562:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004566:	4307      	orrs	r7, r0
 8004568:	f000 8087 	beq.w	800467a <__ieee754_sqrt+0x14a>
 800456c:	b141      	cbz	r1, 8004580 <__ieee754_sqrt+0x50>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	f7fb fe2d 	bl	80001d0 <__aeabi_dsub>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	f7fc f907 	bl	800078c <__aeabi_ddiv>
 800457e:	e07c      	b.n	800467a <__ieee754_sqrt+0x14a>
 8004580:	1524      	asrs	r4, r4, #20
 8004582:	d112      	bne.n	80045aa <__ieee754_sqrt+0x7a>
 8004584:	b91b      	cbnz	r3, 800458e <__ieee754_sqrt+0x5e>
 8004586:	0ad3      	lsrs	r3, r2, #11
 8004588:	3c15      	subs	r4, #21
 800458a:	0552      	lsls	r2, r2, #21
 800458c:	e7fa      	b.n	8004584 <__ieee754_sqrt+0x54>
 800458e:	2100      	movs	r1, #0
 8004590:	02d8      	lsls	r0, r3, #11
 8004592:	d402      	bmi.n	800459a <__ieee754_sqrt+0x6a>
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	3101      	adds	r1, #1
 8004598:	e7fa      	b.n	8004590 <__ieee754_sqrt+0x60>
 800459a:	1e48      	subs	r0, r1, #1
 800459c:	1a24      	subs	r4, r4, r0
 800459e:	f1c1 0020 	rsb	r0, r1, #32
 80045a2:	fa22 f000 	lsr.w	r0, r2, r0
 80045a6:	4303      	orrs	r3, r0
 80045a8:	408a      	lsls	r2, r1
 80045aa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b2:	07e1      	lsls	r1, r4, #31
 80045b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b8:	bf42      	ittt	mi
 80045ba:	005b      	lslmi	r3, r3, #1
 80045bc:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 80045c0:	0052      	lslmi	r2, r2, #1
 80045c2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80045c6:	f04f 0e00 	mov.w	lr, #0
 80045ca:	440b      	add	r3, r1
 80045cc:	0056      	lsls	r6, r2, #1
 80045ce:	1064      	asrs	r4, r4, #1
 80045d0:	2216      	movs	r2, #22
 80045d2:	4677      	mov	r7, lr
 80045d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045d8:	1878      	adds	r0, r7, r1
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfde      	ittt	le
 80045de:	1a1b      	suble	r3, r3, r0
 80045e0:	1847      	addle	r7, r0, r1
 80045e2:	448e      	addle	lr, r1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 80045ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80045f0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80045f4:	d1f0      	bne.n	80045d8 <__ieee754_sqrt+0xa8>
 80045f6:	2520      	movs	r5, #32
 80045f8:	4694      	mov	ip, r2
 80045fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80045fe:	429f      	cmp	r7, r3
 8004600:	eb01 000c 	add.w	r0, r1, ip
 8004604:	db02      	blt.n	800460c <__ieee754_sqrt+0xdc>
 8004606:	d116      	bne.n	8004636 <__ieee754_sqrt+0x106>
 8004608:	42b0      	cmp	r0, r6
 800460a:	d813      	bhi.n	8004634 <__ieee754_sqrt+0x104>
 800460c:	2800      	cmp	r0, #0
 800460e:	eb00 0c01 	add.w	ip, r0, r1
 8004612:	da05      	bge.n	8004620 <__ieee754_sqrt+0xf0>
 8004614:	f1bc 0f00 	cmp.w	ip, #0
 8004618:	db02      	blt.n	8004620 <__ieee754_sqrt+0xf0>
 800461a:	f107 0801 	add.w	r8, r7, #1
 800461e:	e000      	b.n	8004622 <__ieee754_sqrt+0xf2>
 8004620:	46b8      	mov	r8, r7
 8004622:	1bdb      	subs	r3, r3, r7
 8004624:	42b0      	cmp	r0, r6
 8004626:	bf88      	it	hi
 8004628:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800462c:	1a36      	subs	r6, r6, r0
 800462e:	440a      	add	r2, r1
 8004630:	4647      	mov	r7, r8
 8004632:	e000      	b.n	8004636 <__ieee754_sqrt+0x106>
 8004634:	463b      	mov	r3, r7
 8004636:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 800463a:	3d01      	subs	r5, #1
 800463c:	4403      	add	r3, r0
 800463e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8004642:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004646:	d1da      	bne.n	80045fe <__ieee754_sqrt+0xce>
 8004648:	4333      	orrs	r3, r6
 800464a:	d007      	beq.n	800465c <__ieee754_sqrt+0x12c>
 800464c:	1c53      	adds	r3, r2, #1
 800464e:	bf13      	iteet	ne
 8004650:	f002 0301 	andne.w	r3, r2, #1
 8004654:	f10e 0e01 	addeq.w	lr, lr, #1
 8004658:	462a      	moveq	r2, r5
 800465a:	18d2      	addne	r2, r2, r3
 800465c:	ea4f 036e 	mov.w	r3, lr, asr #1
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004666:	f01e 0f01 	tst.w	lr, #1
 800466a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800466e:	bf18      	it	ne
 8004670:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 8004674:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 8004678:	4610      	mov	r0, r2
 800467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467e:	bf00      	nop
 8004680:	7ff00000 	.word	0x7ff00000

08004684 <fabs>:
 8004684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004688:	4770      	bx	lr

0800468a <finite>:
 800468a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800468e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004692:	0fc0      	lsrs	r0, r0, #31
 8004694:	4770      	bx	lr

08004696 <matherr>:
 8004696:	2000      	movs	r0, #0
 8004698:	4770      	bx	lr
	...

0800469c <nan>:
 800469c:	2000      	movs	r0, #0
 800469e:	4901      	ldr	r1, [pc, #4]	; (80046a4 <nan+0x8>)
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	7ff80000 	.word	0x7ff80000

080046a8 <rint>:
 80046a8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ae:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 80046b2:	f1be 0f13 	cmp.w	lr, #19
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4607      	mov	r7, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	4606      	mov	r6, r0
 80046c0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80046c4:	dc44      	bgt.n	8004750 <rint+0xa8>
 80046c6:	f1be 0f00 	cmp.w	lr, #0
 80046ca:	da26      	bge.n	800471a <rint+0x72>
 80046cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d0:	4301      	orrs	r1, r0
 80046d2:	d06d      	beq.n	80047b0 <rint+0x108>
 80046d4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80046d8:	430f      	orrs	r7, r1
 80046da:	427b      	negs	r3, r7
 80046dc:	431f      	orrs	r7, r3
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <rint+0x110>)
 80046e0:	0b3f      	lsrs	r7, r7, #12
 80046e2:	0c64      	lsrs	r4, r4, #17
 80046e4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 80046e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80046ec:	0464      	lsls	r4, r4, #17
 80046ee:	ea47 0104 	orr.w	r1, r7, r4
 80046f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80046f6:	4632      	mov	r2, r6
 80046f8:	463b      	mov	r3, r7
 80046fa:	f7fb fd6b 	bl	80001d4 <__adddf3>
 80046fe:	e9cd 0100 	strd	r0, r1, [sp]
 8004702:	4632      	mov	r2, r6
 8004704:	463b      	mov	r3, r7
 8004706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800470a:	f7fb fd61 	bl	80001d0 <__aeabi_dsub>
 800470e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004712:	4602      	mov	r2, r0
 8004714:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8004718:	e04a      	b.n	80047b0 <rint+0x108>
 800471a:	4928      	ldr	r1, [pc, #160]	; (80047bc <rint+0x114>)
 800471c:	fa41 f10e 	asr.w	r1, r1, lr
 8004720:	ea03 0001 	and.w	r0, r3, r1
 8004724:	4310      	orrs	r0, r2
 8004726:	d043      	beq.n	80047b0 <rint+0x108>
 8004728:	084b      	lsrs	r3, r1, #1
 800472a:	ea04 0203 	and.w	r2, r4, r3
 800472e:	ea52 0607 	orrs.w	r6, r2, r7
 8004732:	d029      	beq.n	8004788 <rint+0xe0>
 8004734:	ea24 0303 	bic.w	r3, r4, r3
 8004738:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800473c:	f1be 0f13 	cmp.w	lr, #19
 8004740:	fa44 f40e 	asr.w	r4, r4, lr
 8004744:	bf0c      	ite	eq
 8004746:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800474a:	2600      	movne	r6, #0
 800474c:	431c      	orrs	r4, r3
 800474e:	e01b      	b.n	8004788 <rint+0xe0>
 8004750:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 8004754:	dd05      	ble.n	8004762 <rint+0xba>
 8004756:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 800475a:	d129      	bne.n	80047b0 <rint+0x108>
 800475c:	f7fb fd3a 	bl	80001d4 <__adddf3>
 8004760:	e028      	b.n	80047b4 <rint+0x10c>
 8004762:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8004766:	f04f 31ff 	mov.w	r1, #4294967295
 800476a:	fa21 f10c 	lsr.w	r1, r1, ip
 800476e:	4208      	tst	r0, r1
 8004770:	d01e      	beq.n	80047b0 <rint+0x108>
 8004772:	084b      	lsrs	r3, r1, #1
 8004774:	4218      	tst	r0, r3
 8004776:	bf1f      	itttt	ne
 8004778:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800477c:	ea20 0303 	bicne.w	r3, r0, r3
 8004780:	fa46 fc0c 	asrne.w	ip, r6, ip
 8004784:	ea4c 0603 	orrne.w	r6, ip, r3
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <rint+0x110>)
 800478a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800478e:	4621      	mov	r1, r4
 8004790:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004794:	4630      	mov	r0, r6
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	f7fb fd1b 	bl	80001d4 <__adddf3>
 800479e:	e9cd 0100 	strd	r0, r1, [sp]
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047aa:	f7fb fd11 	bl	80001d0 <__aeabi_dsub>
 80047ae:	e001      	b.n	80047b4 <rint+0x10c>
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	b003      	add	sp, #12
 80047b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b8:	08004970 	.word	0x08004970
 80047bc:	000fffff 	.word	0x000fffff

080047c0 <scalbn>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	4616      	mov	r6, r2
 80047c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	460b      	mov	r3, r1
 80047ce:	b98a      	cbnz	r2, 80047f4 <scalbn+0x34>
 80047d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047d4:	4303      	orrs	r3, r0
 80047d6:	d050      	beq.n	800487a <scalbn+0xba>
 80047d8:	2200      	movs	r2, #0
 80047da:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <scalbn+0xd0>)
 80047dc:	f7fb feac 	bl	8000538 <__aeabi_dmul>
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <scalbn+0xd4>)
 80047e2:	4296      	cmp	r6, r2
 80047e4:	4604      	mov	r4, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	460b      	mov	r3, r1
 80047ea:	db34      	blt.n	8004856 <scalbn+0x96>
 80047ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80047f0:	3a36      	subs	r2, #54	; 0x36
 80047f2:	e008      	b.n	8004806 <scalbn+0x46>
 80047f4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80047f8:	42ba      	cmp	r2, r7
 80047fa:	d104      	bne.n	8004806 <scalbn+0x46>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	f7fb fce8 	bl	80001d4 <__adddf3>
 8004804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004806:	4432      	add	r2, r6
 8004808:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800480c:	428a      	cmp	r2, r1
 800480e:	dd02      	ble.n	8004816 <scalbn+0x56>
 8004810:	4622      	mov	r2, r4
 8004812:	462b      	mov	r3, r5
 8004814:	e011      	b.n	800483a <scalbn+0x7a>
 8004816:	2a00      	cmp	r2, #0
 8004818:	dd06      	ble.n	8004828 <scalbn+0x68>
 800481a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800481e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004826:	e028      	b.n	800487a <scalbn+0xba>
 8004828:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800482c:	da17      	bge.n	800485e <scalbn+0x9e>
 800482e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004832:	429e      	cmp	r6, r3
 8004834:	4622      	mov	r2, r4
 8004836:	462b      	mov	r3, r5
 8004838:	dd08      	ble.n	800484c <scalbn+0x8c>
 800483a:	a111      	add	r1, pc, #68	; (adr r1, 8004880 <scalbn+0xc0>)
 800483c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004840:	f000 f82c 	bl	800489c <copysign>
 8004844:	a30e      	add	r3, pc, #56	; (adr r3, 8004880 <scalbn+0xc0>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	e013      	b.n	8004874 <scalbn+0xb4>
 800484c:	a10e      	add	r1, pc, #56	; (adr r1, 8004888 <scalbn+0xc8>)
 800484e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004852:	f000 f823 	bl	800489c <copysign>
 8004856:	a30c      	add	r3, pc, #48	; (adr r3, 8004888 <scalbn+0xc8>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	e00a      	b.n	8004874 <scalbn+0xb4>
 800485e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004862:	3236      	adds	r2, #54	; 0x36
 8004864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004868:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <scalbn+0xd8>)
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	2200      	movs	r2, #0
 8004874:	f7fb fe60 	bl	8000538 <__aeabi_dmul>
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004880:	8800759c 	.word	0x8800759c
 8004884:	7e37e43c 	.word	0x7e37e43c
 8004888:	c2f8f359 	.word	0xc2f8f359
 800488c:	01a56e1f 	.word	0x01a56e1f
 8004890:	43500000 	.word	0x43500000
 8004894:	ffff3cb0 	.word	0xffff3cb0
 8004898:	3c900000 	.word	0x3c900000

0800489c <copysign>:
 800489c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80048a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	ea42 0103 	orr.w	r1, r2, r3
 80048a8:	4770      	bx	lr
	...

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	; (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000d94 	.word	0x20000d94

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
