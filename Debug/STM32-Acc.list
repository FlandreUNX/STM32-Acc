
C:\Users\Alan\Atollic\TrueSTUDIO\ARM_workspace_7.0\STM32-Acc\Debug\STM32-Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          000000f0  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000114  20000114  00020024  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000843f  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019b9  00000000  00000000  0002848d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e0  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ae4  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000032cc  00000000  00000000  0002ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002860  00000000  00000000  00031f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002050 	.word	0x08002050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002050 	.word	0x08002050

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b26      	ldr	r3, [pc, #152]	; (8000280 <NVIC_Init+0xb8>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <NVIC_Init+0xbc>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a13      	ldr	r2, [pc, #76]	; (8000284 <NVIC_Init+0xbc>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490b      	ldr	r1, [pc, #44]	; (8000284 <NVIC_Init+0xbc>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	e000e100 	.word	0xe000e100

08000288 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <DAC_SetChannel1Data+0x30>)
 800029a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	3308      	adds	r3, #8
 80002a4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	461a      	mov	r2, r3
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40007400 	.word	0x40007400

080002bc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	4b24      	ldr	r3, [pc, #144]	; (8000364 <DMA_Init+0xa8>)
 80002d4:	4013      	ands	r3, r2
 80002d6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000304:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800030a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000310:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4313      	orrs	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 0307 	bic.w	r3, r3, #7
 800032a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4313      	orrs	r3, r2
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	691a      	ldr	r2, [r3, #16]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	60da      	str	r2, [r3, #12]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	f01c803f 	.word	0xf01c803f

08000368 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d006      	beq.n	8000388 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000386:	e005      	b.n	8000394 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f023 0201 	bic.w	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	601a      	str	r2, [r3, #0]
  }
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
 80003bc:	e001      	b.n	80003c2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <DMA_GetFlagStatus+0x68>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d802      	bhi.n	80003f0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <DMA_GetFlagStatus+0x6c>)
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	e001      	b.n	80003f4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <DMA_GetFlagStatus+0x70>)
 80003f2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d003      	beq.n	8000406 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e002      	b.n	800040c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000412:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000416:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000422:	2301      	movs	r3, #1
 8000424:	75fb      	strb	r3, [r7, #23]
 8000426:	e001      	b.n	800042c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800042c:	7dfb      	ldrb	r3, [r7, #23]
}
 800042e:	4618      	mov	r0, r3
 8000430:	371c      	adds	r7, #28
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	4002640f 	.word	0x4002640f
 800043c:	40026000 	.word	0x40026000
 8000440:	40026400 	.word	0x40026400

08000444 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <DMA_ClearFlag+0x50>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d802      	bhi.n	800045c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <DMA_ClearFlag+0x54>)
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	e001      	b.n	8000460 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <DMA_ClearFlag+0x58>)
 800045e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d007      	beq.n	800047a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000470:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000478:	e006      	b.n	8000488 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	6093      	str	r3, [r2, #8]
  }    
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	4002640f 	.word	0x4002640f
 8000498:	40026000 	.word	0x40026000
 800049c:	40026400 	.word	0x40026400

080004a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e076      	b.n	80005aa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004bc:	2201      	movs	r2, #1
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d165      	bne.n	80005a4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	2103      	movs	r1, #3
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	401a      	ands	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	4619      	mov	r1, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d003      	beq.n	8000516 <GPIO_Init+0x76>
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d12e      	bne.n	8000574 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2103      	movs	r1, #3
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	401a      	ands	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	4619      	mov	r1, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	431a      	orrs	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	b29b      	uxth	r3, r3
 800054c:	2101      	movs	r1, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	401a      	ands	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	4619      	mov	r1, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	b29b      	uxth	r3, r3
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	b29b      	uxth	r3, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	401a      	ands	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68da      	ldr	r2, [r3, #12]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	4619      	mov	r1, r3
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d985      	bls.n	80004bc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80005b0:	bf00      	nop
 80005b2:	371c      	adds	r7, #28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
 80005c8:	4613      	mov	r3, r2
 80005ca:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005d4:	787a      	ldrb	r2, [r7, #1]
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	f003 0307 	and.w	r3, r3, #7
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	08db      	lsrs	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3208      	adds	r2, #8
 80005f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	210f      	movs	r1, #15
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	ea02 0103 	and.w	r1, r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f100 0208 	add.w	r2, r0, #8
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b29b      	uxth	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3208      	adds	r2, #8
 8000626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b29b      	uxth	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3208      	adds	r2, #8
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800066c:	4b48      	ldr	r3, [pc, #288]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f003 030c 	and.w	r3, r3, #12
 8000674:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d007      	beq.n	800068c <RCC_GetClocksFreq+0x40>
 800067c:	2b08      	cmp	r3, #8
 800067e:	d009      	beq.n	8000694 <RCC_GetClocksFreq+0x48>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d13f      	bne.n	8000704 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a43      	ldr	r2, [pc, #268]	; (8000794 <RCC_GetClocksFreq+0x148>)
 8000688:	601a      	str	r2, [r3, #0]
      break;
 800068a:	e03f      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a42      	ldr	r2, [pc, #264]	; (8000798 <RCC_GetClocksFreq+0x14c>)
 8000690:	601a      	str	r2, [r3, #0]
      break;
 8000692:	e03b      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <RCC_GetClocksFreq+0x144>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069c:	0d9b      	lsrs	r3, r3, #22
 800069e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006b0:	4a39      	ldr	r2, [pc, #228]	; (8000798 <RCC_GetClocksFreq+0x14c>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006ba:	6859      	ldr	r1, [r3, #4]
 80006bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80006c0:	400b      	ands	r3, r1
 80006c2:	099b      	lsrs	r3, r3, #6
 80006c4:	fb03 f302 	mul.w	r3, r3, r2
 80006c8:	61fb      	str	r3, [r7, #28]
 80006ca:	e00c      	b.n	80006e6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <RCC_GetClocksFreq+0x148>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006d6:	6859      	ldr	r1, [r3, #4]
 80006d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80006dc:	400b      	ands	r3, r1
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	fb03 f302 	mul.w	r3, r3, r2
 80006e4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <RCC_GetClocksFreq+0x144>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	3301      	adds	r3, #1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
      break;
 8000702:	e003      	b.n	800070c <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <RCC_GetClocksFreq+0x148>)
 8000708:	601a      	str	r2, [r3, #0]
      break;
 800070a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000714:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <RCC_GetClocksFreq+0x150>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	40da      	lsrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <RCC_GetClocksFreq+0x144>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800073c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	0a9b      	lsrs	r3, r3, #10
 8000742:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <RCC_GetClocksFreq+0x150>)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	40da      	lsrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <RCC_GetClocksFreq+0x144>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000764:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	0b5b      	lsrs	r3, r3, #13
 800076a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <RCC_GetClocksFreq+0x150>)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	40da      	lsrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	60da      	str	r2, [r3, #12]
}
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	00f42400 	.word	0x00f42400
 8000798:	007a1200 	.word	0x007a1200
 800079c:	20000000 	.word	0x20000000

080007a0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007be:	e006      	b.n	80007ce <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007c0:	4905      	ldr	r1, [pc, #20]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <RCC_AHB1PeriphClockCmd+0x38>)
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ee:	4909      	ldr	r1, [pc, #36]	; (8000814 <RCC_APB2PeriphClockCmd+0x38>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <RCC_APB2PeriphClockCmd+0x38>)
 80007f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007fa:	e006      	b.n	800080a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007fc:	4905      	ldr	r1, [pc, #20]	; (8000814 <RCC_APB2PeriphClockCmd+0x38>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <RCC_APB2PeriphClockCmd+0x38>)
 8000800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	43db      	mvns	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800

08000818 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000832:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	885b      	ldrh	r3, [r3, #2]
 800083c:	4313      	orrs	r3, r2
 800083e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000844:	4313      	orrs	r3, r2
 8000846:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800084c:	4313      	orrs	r3, r2
 800084e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000854:	4313      	orrs	r3, r2
 8000856:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800085c:	4313      	orrs	r3, r2
 800085e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000864:	4313      	orrs	r3, r2
 8000866:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800086c:	4313      	orrs	r3, r2
 800086e:	b29a      	uxth	r2, r3
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	4313      	orrs	r3, r2
 8000874:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	89fa      	ldrh	r2, [r7, #14]
 800087a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8b9b      	ldrh	r3, [r3, #28]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000886:	b29a      	uxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	8a1a      	ldrh	r2, [r3, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	821a      	strh	r2, [r3, #16]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2207      	movs	r2, #7
 80008dc:	821a      	strh	r2, [r3, #16]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	887a      	ldrh	r2, [r7, #2]
 80008f8:	819a      	strh	r2, [r3, #12]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	891b      	ldrh	r3, [r3, #8]
 8000918:	b29a      	uxth	r2, r3
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	4013      	ands	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e001      	b.n	800092e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	8a1b      	ldrh	r3, [r3, #16]
 800095a:	b29b      	uxth	r3, r3
 800095c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	88db      	ldrh	r3, [r3, #6]
 800096a:	461a      	mov	r2, r3
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	4313      	orrs	r3, r2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	899b      	ldrh	r3, [r3, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000988:	f023 030c 	bic.w	r3, r3, #12
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	889a      	ldrh	r2, [r3, #4]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	4313      	orrs	r3, r2
 8000998:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800099e:	4313      	orrs	r3, r2
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	4313      	orrs	r3, r2
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8a9b      	ldrh	r3, [r3, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	899b      	ldrh	r3, [r3, #12]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	4313      	orrs	r3, r2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe36 	bl	800064c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a30      	ldr	r2, [pc, #192]	; (8000aa4 <USART_Init+0x168>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d003      	beq.n	80009f0 <USART_Init+0xb4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <USART_Init+0x16c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d102      	bne.n	80009f6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	623b      	str	r3, [r7, #32]
 80009f4:	e001      	b.n	80009fa <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	899b      	ldrh	r3, [r3, #12]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da0c      	bge.n	8000a20 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a06:	6a3a      	ldr	r2, [r7, #32]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	009a      	lsls	r2, r3, #2
 8000a10:	441a      	add	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	61fb      	str	r3, [r7, #28]
 8000a1e:	e00b      	b.n	8000a38 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a20:	6a3a      	ldr	r2, [r7, #32]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	009a      	lsls	r2, r3, #2
 8000a2a:	441a      	add	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <USART_Init+0x170>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	2264      	movs	r2, #100	; 0x64
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	899b      	ldrh	r3, [r3, #12]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0c      	bge.n	8000a7c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	3332      	adds	r3, #50	; 0x32
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <USART_Init+0x170>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a76:	4313      	orrs	r3, r2
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7a:	e00b      	b.n	8000a94 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	3332      	adds	r3, #50	; 0x32
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <USART_Init+0x170>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	095b      	lsrs	r3, r3, #5
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4313      	orrs	r3, r2
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	811a      	strh	r2, [r3, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40011400 	.word	0x40011400
 8000aac:	51eb851f 	.word	0x51eb851f

08000ab0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d008      	beq.n	8000ad4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	899b      	ldrh	r3, [r3, #12]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000ad2:	e007      	b.n	8000ae4 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	899b      	ldrh	r3, [r3, #12]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	819a      	strh	r2, [r3, #12]
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	809a      	strh	r2, [r3, #4]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	095b      	lsrs	r3, r3, #5
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	f003 031f 	and.w	r3, r3, #31
 8000b48:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d103      	bne.n	8000b62 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e009      	b.n	8000b76 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d103      	bne.n	8000b70 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3310      	adds	r3, #16
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e002      	b.n	8000b76 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3314      	adds	r3, #20
 8000b74:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b76:	787b      	ldrb	r3, [r7, #1]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	6811      	ldr	r1, [r2, #0]
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b88:	e006      	b.n	8000b98 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	6811      	ldr	r1, [r2, #0]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	43d2      	mvns	r2, r2
 8000b94:	400a      	ands	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  }
}
 8000b98:	bf00      	nop
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d107      	bne.n	8000bf2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	899b      	ldrh	r3, [r3, #12]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e011      	b.n	8000c16 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d107      	bne.n	8000c08 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	8a1b      	ldrh	r3, [r3, #16]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	4013      	ands	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e006      	b.n	8000c16 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	8a9b      	ldrh	r3, [r3, #20]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4013      	ands	r3, r2
 8000c14:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000c1e:	2201      	movs	r2, #1
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <USART_GetITStatus+0xa4>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000c42:	2301      	movs	r3, #1
 8000c44:	74fb      	strb	r3, [r7, #19]
 8000c46:	e001      	b.n	8000c4c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000c4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	371c      	adds	r7, #28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <Audio_MAL_IRQHandler+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4610      	mov	r0, r2
 8000c68:	f7ff fbb2 	bl	80003d0 <DMA_GetFlagStatus>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d062      	beq.n	8000d38 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d04a      	beq.n	8000d10 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c7a:	bf00      	nop
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb8d 	bl	80003a0 <DMA_GetCmdStatus>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f7      	bne.n	8000c7c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <Audio_MAL_IRQHandler+0xe8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f7ff fbd4 	bl	8000444 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <Audio_MAL_IRQHandler+0xf0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <Audio_MAL_IRQHandler+0xf4>)
 8000ca4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	bf28      	it	cs
 8000cb2:	4613      	movcs	r3, r2
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <Audio_MAL_IRQHandler+0xf4>)
 8000cb6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4923      	ldr	r1, [pc, #140]	; (8000d4c <Audio_MAL_IRQHandler+0xf4>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fafc 	bl	80002bc <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fb4c 	bl	8000368 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <Audio_MAL_IRQHandler+0xf0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	bf28      	it	cs
 8000ce0:	460b      	movcs	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <Audio_MAL_IRQHandler+0xf0>)
 8000ce8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf28      	it	cs
 8000cfa:	460b      	movcs	r3, r1
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <Audio_MAL_IRQHandler+0xec>)
 8000d00:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2101      	movs	r1, #1
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb2d 	bl	8000368 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d0e:	e013      	b.n	8000d38 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb26 	bl	8000368 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <Audio_MAL_IRQHandler+0xe4>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <Audio_MAL_IRQHandler+0xe8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	4610      	mov	r0, r2
 8000d28:	f7ff fb8c 	bl	8000444 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <Audio_MAL_IRQHandler+0xf0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 ffce 	bl	8001cd4 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000018 	.word	0x20000018
 8000d40:	2000001c 	.word	0x2000001c
 8000d44:	20000010 	.word	0x20000010
 8000d48:	20000080 	.word	0x20000080
 8000d4c:	200000c0 	.word	0x200000c0

08000d50 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d54:	f7ff ff80 	bl	8000c58 <Audio_MAL_IRQHandler>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d60:	f7ff ff7a 	bl	8000c58 <Audio_MAL_IRQHandler>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <SPI3_IRQHandler+0x3c>)
 8000d70:	f7ff fdc8 	bl	8000904 <SPI_I2S_GetFlagStatus>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d011      	beq.n	8000d9e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SPI3_IRQHandler+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d106      	bne.n	8000d90 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d82:	f000 ffb1 	bl	8001ce8 <EVAL_AUDIO_GetSampleCallBack>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff fa7c 	bl	8000288 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d90:	f000 ffaa 	bl	8001ce8 <EVAL_AUDIO_GetSampleCallBack>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <SPI3_IRQHandler+0x3c>)
 8000d9a:	f7ff fda5 	bl	80008e8 <SPI_I2S_SendData>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40003c00 	.word	0x40003c00
 8000da8:	20000014 	.word	0x20000014

08000dac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da0b      	bge.n	8000dd8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000dc0:	490d      	ldr	r1, [pc, #52]	; (8000df8 <NVIC_SetPriority+0x4c>)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	3b04      	subs	r3, #4
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000dd6:	e009      	b.n	8000dec <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000dd8:	4908      	ldr	r1, [pc, #32]	; (8000dfc <NVIC_SetPriority+0x50>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0e:	d301      	bcc.n	8000e14 <SysTick_Config+0x14>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e011      	b.n	8000e38 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000e20:	210f      	movs	r1, #15
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f7ff ffc1 	bl	8000dac <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <SysTick_Config+0x40>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <SysTick_Handler+0xe4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a35      	ldr	r2, [pc, #212]	; (8000f28 <SysTick_Handler+0xe4>)
 8000e52:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <SysTick_Handler+0xe8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <SysTick_Handler+0x22>
		TM_Time2--;
 8000e5c:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <SysTick_Handler+0xe8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <SysTick_Handler+0xe8>)
 8000e64:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8000e66:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	e052      	b.n	8000f16 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <SysTick_Handler+0xec>)
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d048      	beq.n	8000f10 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <SysTick_Handler+0xec>)
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d040      	beq.n	8000f10 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <SysTick_Handler+0xec>)
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d038      	beq.n	8000f10 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <SysTick_Handler+0xec>)
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	3a01      	subs	r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <SysTick_Handler+0xec>)
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d128      	bne.n	8000f10 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SysTick_Handler+0xec>)
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4918      	ldr	r1, [pc, #96]	; (8000f30 <SysTick_Handler+0xec>)
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <SysTick_Handler+0xec>)
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4912      	ldr	r1, [pc, #72]	; (8000f30 <SysTick_Handler+0xec>)
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <SysTick_Handler+0xec>)
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Handler+0xec>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3301      	adds	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SysTick_Handler+0xec>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3a7      	bcc.n	8000e70 <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000040 	.word	0x20000040
 8000f2c:	20000044 	.word	0x20000044
 8000f30:	2000004c 	.word	0x2000004c

08000f34 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <TM_DELAY_Init+0x3c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <TM_DELAY_Init+0x40>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	099b      	lsrs	r3, r3, #6
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5b 	bl	8000e00 <SysTick_Config>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d000      	beq.n	8000f52 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8000f50:	e7fe      	b.n	8000f50 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <TM_DELAY_Init+0x3c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	099b      	lsrs	r3, r3, #6
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <TM_DELAY_Init+0x44>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0a9b      	lsrs	r3, r3, #10
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <TM_DELAY_Init+0x48>)
 8000f62:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <TM_DELAY_Init+0x4c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000020 	.word	0x20000020
 8000f74:	10624dd3 	.word	0x10624dd3
 8000f78:	02659117 	.word	0x02659117
 8000f7c:	200000fc 	.word	0x200000fc
 8000f80:	20000048 	.word	0x20000048

08000f84 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <TM_DISCO_LedInit+0x2c>)
 8000f9c:	f000 f81c 	bl	8000fd8 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <TM_DISCO_LedInit+0x2c>)
 8000fa2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000fa6:	835a      	strh	r2, [r3, #26]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TM_DISCO_ButtonInit+0x20>)
 8000fca:	f000 f805 	bl	8000fd8 <TM_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	807b      	strh	r3, [r7, #2]
 8000fea:	460b      	mov	r3, r1
 8000fec:	707b      	strb	r3, [r7, #1]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00e      	beq.n	8001016 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f875 	bl	80010e8 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000ffe:	7838      	ldrb	r0, [r7, #0]
 8001000:	787a      	ldrb	r2, [r7, #1]
 8001002:	8879      	ldrh	r1, [r7, #2]
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	7c3b      	ldrb	r3, [r7, #16]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4603      	mov	r3, r0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f882 	bl	8001118 <TM_GPIO_INT_Init>
 8001014:	e000      	b.n	8001018 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001016:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop

08001020 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4603      	mov	r3, r0
 8001030:	807b      	strh	r3, [r7, #2]
 8001032:	460b      	mov	r3, r1
 8001034:	707b      	strb	r3, [r7, #1]
 8001036:	4613      	mov	r3, r2
 8001038:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d03e      	beq.n	80010be <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f851 	bl	80010e8 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e029      	b.n	80010a0 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	fa42 f303 	asr.w	r3, r2, r3
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01d      	beq.n	8001098 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	08d9      	lsrs	r1, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3108      	adds	r1, #8
 8001068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800106c:	68f9      	ldr	r1, [r7, #12]
 800106e:	f001 0107 	and.w	r1, r1, #7
 8001072:	0089      	lsls	r1, r1, #2
 8001074:	200f      	movs	r0, #15
 8001076:	fa00 f101 	lsl.w	r1, r0, r1
 800107a:	43c9      	mvns	r1, r1
 800107c:	400b      	ands	r3, r1
 800107e:	7f38      	ldrb	r0, [r7, #28]
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	f001 0107 	and.w	r1, r1, #7
 8001086:	0089      	lsls	r1, r1, #2
 8001088:	fa00 f101 	lsl.w	r1, r0, r1
 800108c:	4319      	orrs	r1, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001096:	e000      	b.n	800109a <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001098:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d9d2      	bls.n	800104c <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80010a6:	787a      	ldrb	r2, [r7, #1]
 80010a8:	8879      	ldrh	r1, [r7, #2]
 80010aa:	7e3b      	ldrb	r3, [r7, #24]
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	783b      	ldrb	r3, [r7, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	4613      	mov	r3, r2
 80010b4:	2202      	movs	r2, #2
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f82e 	bl	8001118 <TM_GPIO_INT_Init>
 80010bc:	e000      	b.n	80010c0 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 80010be:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop

080010c8 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80010d6:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80010da:	0a9b      	lsrs	r3, r3, #10
 80010dc:	b29b      	uxth	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffe9 	bl	80010c8 <TM_GPIO_GetPortSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	fa03 f102 	lsl.w	r1, r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <TM_GPIO_INT_EnableClock+0x2c>)
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <TM_GPIO_INT_EnableClock+0x2c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	430b      	orrs	r3, r1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	4603      	mov	r3, r0
 8001128:	807b      	strh	r3, [r7, #2]
 800112a:	460b      	mov	r3, r1
 800112c:	707b      	strb	r3, [r7, #1]
 800112e:	4613      	mov	r3, r2
 8001130:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffc8 	bl	80010c8 <TM_GPIO_GetPortSource>
 8001138:	4603      	mov	r3, r0
 800113a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e067      	b.n	8001212 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d05b      	beq.n	800120a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	7bba      	ldrb	r2, [r7, #14]
 8001156:	4932      	ldr	r1, [pc, #200]	; (8001220 <TM_GPIO_INT_Init+0x108>)
 8001158:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800115c:	b211      	sxth	r1, r2
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	b212      	sxth	r2, r2
 8001168:	430a      	orrs	r2, r1
 800116a:	b212      	sxth	r2, r2
 800116c:	b291      	uxth	r1, r2
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <TM_GPIO_INT_Init+0x108>)
 8001170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	0052      	lsls	r2, r2, #1
 800117c:	2103      	movs	r1, #3
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	43d2      	mvns	r2, r2
 8001184:	4013      	ands	r3, r2
 8001186:	7e39      	ldrb	r1, [r7, #24]
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2103      	movs	r1, #3
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4013      	ands	r3, r2
 80011a8:	7879      	ldrb	r1, [r7, #1]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d002      	beq.n	80011c4 <TM_GPIO_INT_Init+0xac>
 80011be:	787b      	ldrb	r3, [r7, #1]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	b292      	uxth	r2, r2
 80011d2:	43d2      	mvns	r2, r2
 80011d4:	401a      	ands	r2, r3
 80011d6:	7839      	ldrb	r1, [r7, #0]
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2103      	movs	r1, #3
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	7f39      	ldrb	r1, [r7, #28]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	0052      	lsls	r2, r2, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	e000      	b.n	800120c <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 800120a:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d994      	bls.n	8001142 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000064 	.word	0x20000064

08001224 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <TM_SPI_Send+0x1e>
 800123e:	2300      	movs	r3, #0
 8001240:	e025      	b.n	800128e <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001242:	bf00      	nop
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	b29b      	uxth	r3, r3
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f8      	beq.n	8001244 <TM_SPI_Send+0x20>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	b29b      	uxth	r3, r3
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f1      	bne.n	8001244 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001268:	bf00      	nop
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	891b      	ldrh	r3, [r3, #8]
 800126e:	b29b      	uxth	r3, r3
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f8      	beq.n	800126a <TM_SPI_Send+0x46>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f1      	bne.n	800126a <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	899b      	ldrh	r3, [r3, #12]
 800128a:	b29b      	uxth	r3, r3
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 800129e:	f000 f9db 	bl	8001658 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80012a2:	f000 f84d 	bl	8001340 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	2201      	movs	r2, #1
 80012aa:	210f      	movs	r1, #15
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f8a5 	bl	80013fc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b3b      	cmp	r3, #59	; 0x3b
 80012b6:	d104      	bne.n	80012c2 <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80012be:	2301      	movs	r3, #1
 80012c0:	e008      	b.n	80012d4 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b3f      	cmp	r3, #63	; 0x3f
 80012c6:	d104      	bne.n	80012d2 <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e000      	b.n	80012d4 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000007a 	.word	0x2000007a

080012e0 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 80012f0:	f000 f826 	bl	8001340 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 80012f4:	f000 f9b0 	bl	8001658 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80012f8:	f7ff ffce 	bl	8001298 <TM_LIS302DL_LIS3DSH_Detect>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8001302:	79ba      	ldrb	r2, [r7, #6]
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f927 	bl	800155c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800130e:	2301      	movs	r3, #1
 8001310:	e010      	b.n	8001334 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001312:	f7ff ffc1 	bl	8001298 <TM_LIS302DL_LIS3DSH_Detect>
 8001316:	4603      	mov	r3, r0
 8001318:	2b02      	cmp	r3, #2
 800131a:	d107      	bne.n	800132c <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f896 	bl	8001454 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001328:	2302      	movs	r3, #2
 800132a:	e003      	b.n	8001334 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000007a 	.word	0x2000007a

08001340 <TM_LIS302DL_LIS3DSH_INT_InitPins>:
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
}

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d11d      	bne.n	800138a <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 800134e:	2100      	movs	r1, #0
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8001352:	f000 f993 	bl	800167c <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8001356:	2101      	movs	r1, #1
 8001358:	2010      	movs	r0, #16
 800135a:	f7ff fa21 	bl	80007a0 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 800135e:	2308      	movs	r3, #8
 8001360:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001362:	2301      	movs	r3, #1
 8001364:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001366:	2300      	movs	r3, #0
 8001368:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800136a:	2301      	movs	r3, #1
 800136c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 800136e:	2301      	movs	r3, #1
 8001370:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001378:	f7ff f892 	bl	80004a0 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 800137e:	2208      	movs	r2, #8
 8001380:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e000      	b.n	800138c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 800138a:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000007b 	.word	0x2000007b
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000

080013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80013b2:	2208      	movs	r2, #8
 80013b4:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80013b6:	78bb      	ldrb	r3, [r7, #2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d907      	bls.n	80013cc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d103      	bne.n	80013cc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80013d2:	f7ff ff27 	bl	8001224 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	461a      	mov	r2, r3
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 80013de:	f000 f9bd 	bl	800175c <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 80013e4:	2208      	movs	r2, #8
 80013e6:	831a      	strh	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	2000007a 	.word	0x2000007a
 80013f8:	40013000 	.word	0x40013000

080013fc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
 8001408:	4613      	mov	r3, r2
 800140a:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 800140e:	2208      	movs	r2, #8
 8001410:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001418:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 800141a:	78bb      	ldrb	r3, [r7, #2]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d903      	bls.n	8001428 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001426:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 800142e:	f7ff fef9 	bl	8001224 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8001432:	78bb      	ldrb	r3, [r7, #2]
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 800143a:	f000 f9d3 	bl	80017e4 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001440:	2208      	movs	r2, #8
 8001442:	831a      	strh	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40013000 	.word	0x40013000

08001454 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8001464:	2367      	movs	r3, #103	; 0x67
 8001466:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001470:	4a35      	ldr	r2, [pc, #212]	; (8001548 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e02a      	b.n	80014cc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d107      	bne.n	800148c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e01f      	b.n	80014cc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d107      	bne.n	80014a2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800149c:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e014      	b.n	80014cc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d107      	bne.n	80014b8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	f043 0318 	orr.w	r3, r3, #24
 80014ae:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e009      	b.n	80014cc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d13b      	bne.n	8001536 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 80014ca:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01a      	beq.n	8001508 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	81fb      	strh	r3, [r7, #14]
 80014e0:	e012      	b.n	8001508 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d106      	bne.n	80014f6 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014f2:	81fb      	strh	r3, [r7, #14]
 80014f4:	e008      	b.n	8001508 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d11e      	bne.n	800153a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001502:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001506:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 800150e:	f107 030d 	add.w	r3, r7, #13
 8001512:	2201      	movs	r2, #1
 8001514:	2120      	movs	r1, #32
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff42 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 800151c:	89fb      	ldrh	r3, [r7, #14]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	b29b      	uxth	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001526:	f107 030d 	add.w	r3, r7, #13
 800152a:	2201      	movs	r2, #1
 800152c:	2124      	movs	r1, #36	; 0x24
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff36 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001534:	e002      	b.n	800153c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 8001536:	bf00      	nop
 8001538:	e000      	b.n	800153c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 800153a:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000100 	.word	0x20000100
 8001548:	3d75c28f 	.word	0x3d75c28f
 800154c:	3df5c28f 	.word	0x3df5c28f
 8001550:	3e3851ec 	.word	0x3e3851ec
 8001554:	3e75c28f 	.word	0x3e75c28f
 8001558:	3f3ae148 	.word	0x3f3ae148

0800155c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800156c:	f107 030e 	add.w	r3, r7, #14
 8001570:	2201      	movs	r2, #1
 8001572:	2121      	movs	r1, #33	; 0x21
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff41 	bl	80013fc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	b29b      	uxth	r3, r3
 8001582:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001584:	f107 030e 	add.w	r3, r7, #14
 8001588:	2201      	movs	r2, #1
 800158a:	2121      	movs	r1, #33	; 0x21
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff07 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8001592:	2347      	movs	r3, #71	; 0x47
 8001594:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d105      	bne.n	80015a8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80015a2:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e00a      	b.n	80015be <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d147      	bne.n	800163e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 80015bc:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80015be:	f107 030e 	add.w	r3, r7, #14
 80015c2:	2201      	movs	r2, #1
 80015c4:	2120      	movs	r1, #32
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff feea 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80015cc:	f107 030e 	add.w	r3, r7, #14
 80015d0:	2201      	movs	r2, #1
 80015d2:	2121      	movs	r1, #33	; 0x21
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fee3 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d102      	bne.n	80015fa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	e019      	b.n	800162e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d105      	bne.n	800160c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	e010      	b.n	800162e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	2b06      	cmp	r3, #6
 8001610:	d105      	bne.n	800161e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	b29b      	uxth	r3, r3
 800161a:	81fb      	strh	r3, [r7, #14]
 800161c:	e007      	b.n	800162e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	2b07      	cmp	r3, #7
 8001622:	d10e      	bne.n	8001642 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	f043 0303 	orr.w	r3, r3, #3
 800162a:	b29b      	uxth	r3, r3
 800162c:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800162e:	f107 030e 	add.w	r3, r7, #14
 8001632:	2201      	movs	r2, #1
 8001634:	2121      	movs	r1, #33	; 0x21
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff feb2 	bl	80013a0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 800163c:	e002      	b.n	8001644 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 800163e:	bf00      	nop
 8001640:	e000      	b.n	8001644 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 8001642:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000100 	.word	0x20000100
 8001650:	41900000 	.word	0x41900000
 8001654:	42900000 	.word	0x42900000

08001658 <TM_LIS302DL_LIS3DSH_INT_Delay>:
	SwitchXY  = Axes_Data->X;
	Axes_Data->X = Axes_Data->Y;
	Axes_Data->X = -SwitchXY;
}

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 8001660:	607b      	str	r3, [r7, #4]
	while (delay--);
 8001662:	bf00      	nop
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1fa      	bne.n	8001664 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	000f4240 	.word	0x000f4240

0800167c <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <TM_SPI_Init+0xc8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d10a      	bne.n	80016a6 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8001690:	78f9      	ldrb	r1, [r7, #3]
 8001692:	2300      	movs	r3, #0
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	f44f 7382 	mov.w	r3, #260	; 0x104
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2320      	movs	r3, #32
 800169e:	2200      	movs	r2, #0
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <TM_SPI_Init+0xc8>)
 80016a2:	f000 f8f5 	bl	8001890 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <TM_SPI_Init+0xcc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10a      	bne.n	80016c4 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 80016ae:	78f9      	ldrb	r1, [r7, #3]
 80016b0:	2300      	movs	r3, #0
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2320      	movs	r3, #32
 80016bc:	2200      	movs	r2, #0
 80016be:	4822      	ldr	r0, [pc, #136]	; (8001748 <TM_SPI_Init+0xcc>)
 80016c0:	f000 f8e6 	bl	8001890 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <TM_SPI_Init+0xd0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d10a      	bne.n	80016e2 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 80016cc:	78f9      	ldrb	r1, [r7, #3]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2320      	movs	r3, #32
 80016da:	2200      	movs	r2, #0
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <TM_SPI_Init+0xd0>)
 80016de:	f000 f8d7 	bl	8001890 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <TM_SPI_Init+0xd4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10a      	bne.n	8001700 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 80016ea:	78f9      	ldrb	r1, [r7, #3]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2320      	movs	r3, #32
 80016f8:	2200      	movs	r2, #0
 80016fa:	4815      	ldr	r0, [pc, #84]	; (8001750 <TM_SPI_Init+0xd4>)
 80016fc:	f000 f8c8 	bl	8001890 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a14      	ldr	r2, [pc, #80]	; (8001754 <TM_SPI_Init+0xd8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10a      	bne.n	800171e <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8001708:	78f9      	ldrb	r1, [r7, #3]
 800170a:	2300      	movs	r3, #0
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2320      	movs	r3, #32
 8001716:	2200      	movs	r2, #0
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <TM_SPI_Init+0xd8>)
 800171a:	f000 f8b9 	bl	8001890 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <TM_SPI_Init+0xdc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10a      	bne.n	800173c <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8001726:	78f9      	ldrb	r1, [r7, #3]
 8001728:	2300      	movs	r3, #0
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2320      	movs	r3, #32
 8001734:	2200      	movs	r2, #0
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <TM_SPI_Init+0xdc>)
 8001738:	f000 f8aa 	bl	8001890 <TM_SPIx_Init>
	}
#endif
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013000 	.word	0x40013000
 8001748:	40003800 	.word	0x40003800
 800174c:	40003c00 	.word	0x40003c00
 8001750:	40013400 	.word	0x40013400
 8001754:	40015000 	.word	0x40015000
 8001758:	40015400 	.word	0x40015400

0800175c <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d031      	beq.n	80017da <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001776:	bf00      	nop
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	891b      	ldrh	r3, [r3, #8]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f8      	beq.n	8001778 <TM_SPI_WriteMulti+0x1c>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	891b      	ldrh	r3, [r3, #8]
 800178a:	b29b      	uxth	r3, r3
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f1      	bne.n	8001778 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e01a      	b.n	80017d0 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 80017a8:	bf00      	nop
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	891b      	ldrh	r3, [r3, #8]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f8      	beq.n	80017aa <TM_SPI_WriteMulti+0x4e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	891b      	ldrh	r3, [r3, #8]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f1      	bne.n	80017aa <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3e0      	bcc.n	800179a <TM_SPI_WriteMulti+0x3e>
 80017d8:	e000      	b.n	80017dc <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80017da:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d034      	beq.n	800186c <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001802:	bf00      	nop
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	891b      	ldrh	r3, [r3, #8]
 8001808:	b29b      	uxth	r3, r3
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f8      	beq.n	8001804 <TM_SPI_ReadMulti+0x20>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	891b      	ldrh	r3, [r3, #8]
 8001816:	b29b      	uxth	r3, r3
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f1      	bne.n	8001804 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e01d      	b.n	8001862 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 800182e:	bf00      	nop
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	891b      	ldrh	r3, [r3, #8]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f8      	beq.n	8001830 <TM_SPI_ReadMulti+0x4c>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	891b      	ldrh	r3, [r3, #8]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f1      	bne.n	8001830 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	8992      	ldrh	r2, [r2, #12]
 8001856:	b292      	uxth	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d3dd      	bcc.n	8001826 <TM_SPI_ReadMulti+0x42>
 800186a:	e000      	b.n	800186e <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800186c:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	70fb      	strb	r3, [r7, #3]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70bb      	strb	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fff6 	bl	80008a0 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a51      	ldr	r2, [pc, #324]	; (80019fc <TM_SPIx_Init+0x16c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d10b      	bne.n	80018d4 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <TM_SPIx_Init+0x170>)
 80018be:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <TM_SPIx_Init+0x170>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8a4 	bl	8001a18 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <TM_SPIx_Init+0x174>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d10b      	bne.n	80018f4 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <TM_SPIx_Init+0x170>)
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <TM_SPIx_Init+0x170>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f8c4 	bl	8001a78 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a44      	ldr	r2, [pc, #272]	; (8001a08 <TM_SPIx_Init+0x178>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10b      	bne.n	8001914 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80018fc:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <TM_SPIx_Init+0x170>)
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <TM_SPIx_Init+0x170>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f900 	bl	8001b10 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8001910:	2300      	movs	r3, #0
 8001912:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <TM_SPIx_Init+0x17c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d10b      	bne.n	8001934 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <TM_SPIx_Init+0x170>)
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <TM_SPIx_Init+0x170>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001926:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f922 	bl	8001b74 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8001930:	2300      	movs	r3, #0
 8001932:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a36      	ldr	r2, [pc, #216]	; (8001a10 <TM_SPIx_Init+0x180>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10b      	bne.n	8001954 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <TM_SPIx_Init+0x170>)
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <TM_SPIx_Init+0x170>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001946:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f942 	bl	8001bd4 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8001950:	2300      	movs	r3, #0
 8001952:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <TM_SPIx_Init+0x184>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d10b      	bne.n	8001974 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <TM_SPIx_Init+0x170>)
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <TM_SPIx_Init+0x170>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f96e 	bl	8001c4c <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8001970:	2300      	movs	r3, #0
 8001972:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8001974:	883b      	ldrh	r3, [r7, #0]
 8001976:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001978:	2300      	movs	r3, #0
 800197a:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 800197c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800197e:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8001980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001982:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001988:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 800198a:	78bb      	ldrb	r3, [r7, #2]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001990:	2300      	movs	r3, #0
 8001992:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001994:	2300      	movs	r3, #0
 8001996:	82bb      	strh	r3, [r7, #20]
 8001998:	e016      	b.n	80019c8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d104      	bne.n	80019aa <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80019a0:	2300      	movs	r3, #0
 80019a2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 80019a4:	2301      	movs	r3, #1
 80019a6:	82bb      	strh	r3, [r7, #20]
 80019a8:	e00e      	b.n	80019c8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 80019aa:	78bb      	ldrb	r3, [r7, #2]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d104      	bne.n	80019ba <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 80019b0:	2302      	movs	r3, #2
 80019b2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80019b4:	2300      	movs	r3, #0
 80019b6:	82bb      	strh	r3, [r7, #20]
 80019b8:	e006      	b.n	80019c8 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d103      	bne.n	80019c8 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 80019c0:	2302      	movs	r3, #2
 80019c2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 80019c4:	2301      	movs	r3, #1
 80019c6:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe ff1a 	bl	8000818 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	801a      	strh	r2, [r3, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013000 	.word	0x40013000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40003800 	.word	0x40003800
 8001a08:	40003c00 	.word	0x40003c00
 8001a0c:	40013400 	.word	0x40013400
 8001a10:	40015000 	.word	0x40015000
 8001a14:	40015400 	.word	0x40015400

08001a18 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001a28:	2305      	movs	r3, #5
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	2200      	movs	r2, #0
 8001a34:	21e0      	movs	r1, #224	; 0xe0
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <TM_SPI1_INT_InitPins+0x54>)
 8001a38:	f7ff faf2 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d109      	bne.n	8001a56 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8001a42:	2305      	movs	r3, #5
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2303      	movs	r3, #3
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2138      	movs	r1, #56	; 0x38
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <TM_SPI1_INT_InitPins+0x58>)
 8001a52:	f7ff fae5 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d103      	bne.n	8001a64 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <TM_SPI1_INT_InitPins+0x5c>)
 8001a60:	f7ff ff0a 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40013000 	.word	0x40013000

08001a78 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d114      	bne.n	8001ab2 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001a88:	2305      	movs	r3, #5
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a98:	4819      	ldr	r0, [pc, #100]	; (8001b00 <TM_SPI2_INT_InitPins+0x88>)
 8001a9a:	f7ff fac1 	bl	8001020 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	210c      	movs	r1, #12
 8001aac:	4815      	ldr	r0, [pc, #84]	; (8001b04 <TM_SPI2_INT_InitPins+0x8c>)
 8001aae:	f7ff fab7 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10a      	bne.n	8001ace <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001ab8:	2305      	movs	r3, #5
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2303      	movs	r3, #3
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <TM_SPI2_INT_InitPins+0x88>)
 8001aca:	f7ff faa9 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d109      	bne.n	8001ae8 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2303      	movs	r3, #3
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	210d      	movs	r1, #13
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <TM_SPI2_INT_InitPins+0x90>)
 8001ae4:	f7ff fa9c 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d103      	bne.n	8001af6 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8001aee:	2105      	movs	r1, #5
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <TM_SPI2_INT_InitPins+0x94>)
 8001af2:	f7ff fec1 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40003800 	.word	0x40003800

08001b10 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001b20:	2306      	movs	r3, #6
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2303      	movs	r3, #3
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2138      	movs	r1, #56	; 0x38
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <TM_SPI3_INT_InitPins+0x58>)
 8001b30:	f7ff fa76 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10a      	bne.n	8001b50 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2303      	movs	r3, #3
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <TM_SPI3_INT_InitPins+0x5c>)
 8001b4c:	f7ff fa68 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d103      	bne.n	8001b5e <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 8001b56:	2106      	movs	r1, #6
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <TM_SPI3_INT_InitPins+0x60>)
 8001b5a:	f7ff fe8d 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40003c00 	.word	0x40003c00

08001b74 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001b84:	2305      	movs	r3, #5
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2164      	movs	r1, #100	; 0x64
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <TM_SPI4_INT_InitPins+0x58>)
 8001b94:	f7ff fa44 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10a      	bne.n	8001bb4 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <TM_SPI4_INT_InitPins+0x58>)
 8001bb0:	f7ff fa36 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d103      	bne.n	8001bc2 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8001bba:	2105      	movs	r1, #5
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <TM_SPI4_INT_InitPins+0x5c>)
 8001bbe:	f7ff fe5b 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40013400 	.word	0x40013400

08001bd4 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001be4:	2305      	movs	r3, #5
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2303      	movs	r3, #3
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001bf4:	4812      	ldr	r0, [pc, #72]	; (8001c40 <TM_SPI5_INT_InitPins+0x6c>)
 8001bf6:	f7ff fa13 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d114      	bne.n	8001c2a <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001c00:	2305      	movs	r3, #5
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2303      	movs	r3, #3
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <TM_SPI5_INT_InitPins+0x6c>)
 8001c12:	f7ff fa05 	bl	8001020 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001c16:	2305      	movs	r3, #5
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	21c0      	movs	r1, #192	; 0xc0
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <TM_SPI5_INT_InitPins+0x70>)
 8001c26:	f7ff f9fb 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d103      	bne.n	8001c38 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8001c30:	2105      	movs	r1, #5
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <TM_SPI5_INT_InitPins+0x74>)
 8001c34:	f7ff fe20 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021400 	.word	0x40021400
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40015000 	.word	0x40015000

08001c4c <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2303      	movs	r3, #3
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001c6c:	4806      	ldr	r0, [pc, #24]	; (8001c88 <TM_SPI6_INT_InitPins+0x3c>)
 8001c6e:	f7ff f9d7 	bl	8001020 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d103      	bne.n	8001c80 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8001c78:	2105      	movs	r1, #5
 8001c7a:	4804      	ldr	r0, [pc, #16]	; (8001c8c <TM_SPI6_INT_InitPins+0x40>)
 8001c7c:	f7ff fdfc 	bl	8001878 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40015400 	.word	0x40015400

08001c90 <setup>:
//
double smooth8Keinx[148] = {-0.3, 0.02, -0.28, -0.45, -0.5, -0.54, -0.59, -0.47, -0.35, -0.05, 0.18, 0.43, 0.68, 0.86, 1.0, 1.13, 1.11, 0.94, 0.73, 0.57, 0.51, 0.47, 0.44, 0.42, 0.36, 0.31, 0.33, 0.5, 0.5, 0.29, 0.17, 0.15, 0.1, -0.22, -0.57, -0.67, -0.77, -0.82, -0.99, -1.29, -1.4, -1.4, -1.42, -1.39, -1.25, -0.9, -0.72, -0.87, -0.84, -0.68, -0.46, -0.61, -0.73, -0.63, -0.59, -0.48, -0.56, -0.69, -0.69, -0.7, -0.87, -1.06, -1.05, -0.85, -0.66, -0.64, -0.58, -0.52, -0.52, -0.36, -0.27, -0.45, -0.58, -0.44, -0.21, -0.3, -0.33, -0.23, -0.09, 0.14, 0.36, 0.62, 0.63, 0.64, 0.69, 0.82, 0.94, 1.05, 1.14, 1.18, 1.13, 1.12, 1.24, 1.4, 1.71, 1.83, 1.64, 1.42, 1.26, 1.09, 0.83, 0.7, 1.06, 1.19, 1.11, 0.8, 0.86, 1.11, 1.18, 0.92, 0.47, 0.44, 0.87, 1.02, 0.66, 0.49, 0.75, 0.85, 0.5, 0.03, -0.03, 0.2, 0.35, 0.14, -0.28, -0.38, -0.06, 0.09, -0.05, -0.38, -0.53, -0.44, -0.35, -0.54, -0.76, -1.11, -1.17, -1.02, -0.82, -0.81, -0.79, -0.87, -0.94, -0.88, -0.82, -0.79, -0.71, -0.67};
double smooth8Keiny[148] = {-9.68, -9.73, -9.92, -9.93, -9.83, -9.8, -9.82, -9.93, -9.84, -9.86, -10.02, -10.01, -10.09, -10.09, -10.09, -10.15, -10.23, -10.47, -10.53, -10.6, -10.69, -10.67, -10.49, -10.36, -10.3, -10.3, -10.44, -10.54, -10.37, -10.31, -10.3, -10.43, -10.67, -10.88, -11.07, -11.15, -11.18, -11.16, -11.13, -11.14, -11.16, -11.21, -11.21, -11.18, -10.93, -10.64, -10.44, -10.38, -10.23, -10.03, -9.76, -9.61, -9.58, -9.39, -9.3, -9.18, -9.12, -9.1, -8.91, -8.7, -8.69, -8.78, -8.82, -8.72, -8.59, -8.52, -8.5, -8.42, -8.24, -8.26, -8.31, -8.29, -8.39, -8.24, -8.08, -7.9, -7.89, -8.07, -8.11, -8.12, -8.16, -8.24, -8.36, -8.57, -8.61, -8.55, -8.51, -8.67, -8.77, -9.04, -9.17, -9.17, -9.33, -9.37, -9.29, -9.22, -9.43, -9.73, -9.84, -9.87, -10.04, -10.11, -9.98, -9.75, -9.84, -9.97, -10.02, -9.98, -10.01, -10.34, -10.58, -10.7, -10.51, -10.42, -10.49, -10.46, -10.34, -10.33, -10.61, -10.85, -10.85, -10.71, -10.7, -10.75, -10.88, -10.9, -10.82, -10.7, -10.61, -10.58, -10.47, -10.22, -10.11, -10.02, -10.04, -10.17, -10.23, -10.21, -10.08, -9.98, -9.74, -9.54, -9.39, -9.39, -9.44, -9.56, -9.69, -9.82};
double smooth8Keinz[148] = {1.12, 0.95, 1.08, 1.22, 1.29, 1.35, 1.39, 1.24, 1.07, 0.84, 0.67, 0.86, 1.06, 1.35, 1.41, 1.19, 1.14, 1.06, 1.08, 1.06, 1.12, 1.26, 1.27, 1.21, 1.1, 1.1, 1.1, 1.28, 1.63, 1.81, 1.92, 1.65, 1.36, 1.32, 1.32, 1.23, 1.11, 0.99, 0.99, 0.76, 0.48, 0.27, 0.28, 0.51, 0.64, 0.67, 0.49, 0.24, 0.12, 0.18, 0.17, 0.14, 0.18, 0.06, 0.0, -0.3, -0.53, -0.69, -0.89, -1.16, -1.36, -1.51, -1.61, -1.69, -1.7, -1.63, -1.53, -1.48, -1.27, -1.23, -1.17, -1.25, -1.32, -1.44, -1.51, -1.44, -1.29, -1.26, -1.35, -1.43, -1.49, -1.58, -1.45, -1.57, -1.54, -1.55, -1.39, -1.35, -1.42, -1.21, -1.02, -0.92, -1.02, -1.03, -1.02, -1.01, -0.91, -0.8, -0.83, -0.61, -0.28, -0.17, -0.27, -0.07, 0.36, 0.61, 0.39, 0.03, 0.1, 0.42, 0.8, 0.72, 0.49, 0.94, 1.39, 1.32, 1.07, 1.01, 1.36, 1.62, 1.53, 1.29, 1.27, 1.49, 1.53, 1.45, 1.29, 1.38, 1.75, 2.1, 2.21, 2.04, 2.05, 2.24, 2.49, 2.62, 2.52, 2.36, 2.27, 2.28, 2.35, 2.39, 2.29, 2.29, 2.24, 2.2, 2.17, 2.24};

void setup() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	SystemInit();
 8001c94:	f000 f90e 	bl	8001eb4 <SystemInit>
	TM_DELAY_Init();
 8001c98:	f7ff f94c 	bl	8000f34 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 8001c9c:	f7ff f972 	bl	8000f84 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fb1c 	bl	80012e0 <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8001ca8:	f7ff f984 	bl	8000fb4 <TM_DISCO_ButtonInit>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <main>:

int main(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

	setup();
 8001cb4:	f7ff ffec 	bl	8001c90 <setup>

	init_USART1(9600); // initialize USART1 @ 9600 baud
 8001cb8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001cbc:	f000 f81c 	bl	8001cf8 <init_USART1>

	USART_puts(USART1, "Hello, World!\n");
 8001cc0:	4902      	ldr	r1, [pc, #8]	; (8001ccc <main+0x1c>)
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <main+0x20>)
 8001cc4:	f000 f874 	bl	8001db0 <USART_puts>
	//	// Calculating the smoothed values
	//	ewma(tempX, count, smoothX);
	//	ewma(tempY, count, smoothY);
	//	ewma(tempZ, count, smoothZ);

	while(1);
 8001cc8:	e7fe      	b.n	8001cc8 <main+0x18>
 8001cca:	bf00      	nop
 8001ccc:	08002068 	.word	0x08002068
 8001cd0:	40011000 	.word	0x40011000

08001cd4 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8001cde:	bf00      	nop
}
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8001cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <init_USART1>:
/* This funcion initializes the USART1 peripheral
 *
 * Arguments: baudrate --> the baudrate at which the USART is
 * 						   supposed to operate
 */
void init_USART1(uint32_t baudrate){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001d00:	2101      	movs	r1, #1
 8001d02:	2010      	movs	r0, #16
 8001d04:	f7fe fd6a 	bl	80007dc <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f7fe fd48 	bl	80007a0 <RCC_AHB1PeriphClockCmd>

	/* This sequence sets up the TX and RX pins
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8001d10:	23c0      	movs	r3, #192	; 0xc0
 8001d12:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8001d14:	2302      	movs	r3, #2
 8001d16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4619      	mov	r1, r3
 8001d32:	481d      	ldr	r0, [pc, #116]	; (8001da8 <init_USART1+0xb0>)
 8001d34:	f7fe fbb4 	bl	80004a0 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 8001d38:	2207      	movs	r2, #7
 8001d3a:	2106      	movs	r1, #6
 8001d3c:	481a      	ldr	r0, [pc, #104]	; (8001da8 <init_USART1+0xb0>)
 8001d3e:	f7fe fc3d 	bl	80005bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8001d42:	2207      	movs	r2, #7
 8001d44:	2107      	movs	r1, #7
 8001d46:	4818      	ldr	r0, [pc, #96]	; (8001da8 <init_USART1+0xb0>)
 8001d48:	f7fe fc38 	bl	80005bc <GPIO_PinAFConfig>

	/* Now the USART_InitStruct is used to define the
	 * properties of USART1
	 */
	USART_InitStruct.USART_BaudRate = baudrate;				// the baudrate is set to the value we passed into this init function
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8001d50:	2300      	movs	r3, #0
 8001d52:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8001d54:	2300      	movs	r3, #0
 8001d56:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8001d60:	230c      	movs	r3, #12
 8001d62:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4810      	ldr	r0, [pc, #64]	; (8001dac <init_USART1+0xb4>)
 8001d6c:	f7fe fde6 	bl	800093c <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8001d70:	2201      	movs	r2, #1
 8001d72:	f240 5125 	movw	r1, #1317	; 0x525
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <init_USART1+0xb4>)
 8001d78:	f7fe fecc 	bl	8000b14 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 8001d7c:	2325      	movs	r3, #37	; 0x25
 8001d7e:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
 8001d80:	2300      	movs	r3, #0
 8001d82:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 8001d84:	2300      	movs	r3, #0
 8001d86:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fa19 	bl	80001c8 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8001d96:	2101      	movs	r1, #1
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <init_USART1+0xb4>)
 8001d9a:	f7fe fe89 	bl	8000ab0 <USART_Cmd>
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40011000 	.word	0x40011000

08001db0 <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]

	while(*s){
 8001dba:	e013      	b.n	8001de4 <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8001dbc:	bf00      	nop
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f8      	beq.n	8001dbe <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fe8a 	bl	8000af0 <USART_SendData>
		*s++;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	603a      	str	r2, [r7, #0]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e6      	bne.n	8001dbc <USART_puts+0xc>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8001dfe:	f240 5125 	movw	r1, #1317	; 0x525
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <USART1_IRQHandler+0x5c>)
 8001e04:	f7fe fece 	bl	8000ba4 <USART_GetITStatus>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01e      	beq.n	8001e4c <USART1_IRQHandler+0x54>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <USART1_IRQHandler+0x5c>)
 8001e10:	889b      	ldrh	r3, [r3, #4]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b0a      	cmp	r3, #10
 8001e1a:	d010      	beq.n	8001e3e <USART1_IRQHandler+0x46>
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <USART1_IRQHandler+0x60>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b0b      	cmp	r3, #11
 8001e22:	d80c      	bhi.n	8001e3e <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <USART1_IRQHandler+0x60>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <USART1_IRQHandler+0x64>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	5453      	strb	r3, [r2, r1]
			cnt++;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <USART1_IRQHandler+0x60>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <USART1_IRQHandler+0x60>)
 8001e3a:	701a      	strb	r2, [r3, #0]
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}
 8001e3c:	e006      	b.n	8001e4c <USART1_IRQHandler+0x54>
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <USART1_IRQHandler+0x60>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
			USART_puts(USART1, received_string);
 8001e44:	4905      	ldr	r1, [pc, #20]	; (8001e5c <USART1_IRQHandler+0x64>)
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <USART1_IRQHandler+0x5c>)
 8001e48:	f7ff ffb2 	bl	8001db0 <USART_puts>
		}
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40011000 	.word	0x40011000
 8001e58:	2000007c 	.word	0x2000007c
 8001e5c:	20000104 	.word	0x20000104

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e66:	e003      	b.n	8001e70 <LoopCopyDataInit>

08001e68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e6e:	3104      	adds	r1, #4

08001e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e78:	d3f6      	bcc.n	8001e68 <CopyDataInit>
  ldr  r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e7c:	e002      	b.n	8001e84 <LoopFillZerobss>

08001e7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e80:	f842 3b04 	str.w	r3, [r2], #4

08001e84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e88:	d3f9      	bcc.n	8001e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e8a:	f000 f813 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f000 f8b9 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff ff0d 	bl	8001cb0 <main>
  bx  lr    
 8001e96:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e98:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001e9c:	08002080 	.word	0x08002080
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ea4:	20000024 	.word	0x20000024
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001ea8:	20000024 	.word	0x20000024
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eac:	20000114 	.word	0x20000114

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>
	...

08001eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <SystemInit+0x50>)
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <SystemInit+0x50>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <SystemInit+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <SystemInit+0x50>)
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <SystemInit+0x50>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <SystemInit+0x50>)
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SystemInit+0x54>)
 8001ede:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <SystemInit+0x50>)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <SystemInit+0x50>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SystemInit+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001ef2:	f000 f80d 	bl	8001f10 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SystemInit+0x58>)
 8001ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efc:	609a      	str	r2, [r3, #8]
#endif
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	24003010 	.word	0x24003010
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001f1e:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <SetSysClock+0xe4>)
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <SetSysClock+0xe4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <SetSysClock+0xe4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <SetSysClock+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f46:	d1f0      	bne.n	8001f2a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <SetSysClock+0xe4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001f54:	2301      	movs	r3, #1
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	e001      	b.n	8001f5e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d142      	bne.n	8001fea <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f64:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <SetSysClock+0xe4>)
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <SetSysClock+0xe4>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <SetSysClock+0xe8>)
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <SetSysClock+0xe8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f7a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <SetSysClock+0xe4>)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <SetSysClock+0xe4>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <SetSysClock+0xe4>)
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <SetSysClock+0xe4>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <SetSysClock+0xe4>)
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <SetSysClock+0xe4>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001f9a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <SetSysClock+0xe4>)
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <SetSysClock+0xec>)
 8001fa0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <SetSysClock+0xe4>)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <SetSysClock+0xe4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001fae:	bf00      	nop
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <SetSysClock+0xe4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f9      	beq.n	8001fb0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <SetSysClock+0xf0>)
 8001fbe:	f240 6205 	movw	r2, #1541	; 0x605
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <SetSysClock+0xe4>)
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <SetSysClock+0xe4>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001fd0:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <SetSysClock+0xe4>)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <SetSysClock+0xe4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001fdc:	bf00      	nop
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SetSysClock+0xe4>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d1f9      	bne.n	8001fde <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	07405408 	.word	0x07405408
 8002000:	40023c00 	.word	0x40023c00

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <__libc_init_array+0x3c>)
 8002008:	4c0e      	ldr	r4, [pc, #56]	; (8002044 <__libc_init_array+0x40>)
 800200a:	1ae4      	subs	r4, r4, r3
 800200c:	10a4      	asrs	r4, r4, #2
 800200e:	2500      	movs	r5, #0
 8002010:	461e      	mov	r6, r3
 8002012:	42a5      	cmp	r5, r4
 8002014:	d004      	beq.n	8002020 <__libc_init_array+0x1c>
 8002016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201a:	4798      	blx	r3
 800201c:	3501      	adds	r5, #1
 800201e:	e7f8      	b.n	8002012 <__libc_init_array+0xe>
 8002020:	f000 f816 	bl	8002050 <_init>
 8002024:	4c08      	ldr	r4, [pc, #32]	; (8002048 <__libc_init_array+0x44>)
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <__libc_init_array+0x48>)
 8002028:	1ae4      	subs	r4, r4, r3
 800202a:	10a4      	asrs	r4, r4, #2
 800202c:	2500      	movs	r5, #0
 800202e:	461e      	mov	r6, r3
 8002030:	42a5      	cmp	r5, r4
 8002032:	d004      	beq.n	800203e <__libc_init_array+0x3a>
 8002034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002038:	4798      	blx	r3
 800203a:	3501      	adds	r5, #1
 800203c:	e7f8      	b.n	8002030 <__libc_init_array+0x2c>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	08002078 	.word	0x08002078
 8002044:	08002078 	.word	0x08002078
 8002048:	0800207c 	.word	0x0800207c
 800204c:	08002078 	.word	0x08002078

08002050 <_init>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	bf00      	nop
 8002054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002056:	bc08      	pop	{r3}
 8002058:	469e      	mov	lr, r3
 800205a:	4770      	bx	lr

0800205c <_fini>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	bf00      	nop
 8002060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002062:	bc08      	pop	{r3}
 8002064:	469e      	mov	lr, r3
 8002066:	4770      	bx	lr
