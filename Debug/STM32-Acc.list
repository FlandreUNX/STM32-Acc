
C:\Users\Alan\Atollic\TrueSTUDIO\ARM_workspace_7.0\STM32-Acc\Debug\STM32-Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002c78  08002c78  00012c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000e58  20000000  08002d30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020e58  2**0
                  CONTENTS
  7 .bss          000000c8  20000e58  20000e58  00020e58  2**2
                  ALLOC
  8 ._user_heap_stack 00000d00  20000f20  20000f20  00020e58  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020e58  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000477f  00000000  00000000  00020e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e5e  00000000  00000000  00025601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000570  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d8  00000000  00000000  000269d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001fdf  00000000  00000000  00026ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000020c2  00000000  00000000  00028e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002af49  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a0c  00000000  00000000  0002afc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000e58 	.word	0x20000e58
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c60 	.word	0x08002c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000e5c 	.word	0x20000e5c
 80001c4:	08002c60 	.word	0x08002c60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_frsub>:
 8000b38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	e002      	b.n	8000b44 <__addsf3>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fsub>:
 8000b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b44 <__addsf3>:
 8000b44:	0042      	lsls	r2, r0, #1
 8000b46:	bf1f      	itttt	ne
 8000b48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b4c:	ea92 0f03 	teqne	r2, r3
 8000b50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b58:	d06a      	beq.n	8000c30 <__addsf3+0xec>
 8000b5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b62:	bfc1      	itttt	gt
 8000b64:	18d2      	addgt	r2, r2, r3
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	4048      	eorgt	r0, r1
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	bfb8      	it	lt
 8000b6e:	425b      	neglt	r3, r3
 8000b70:	2b19      	cmp	r3, #25
 8000b72:	bf88      	it	hi
 8000b74:	4770      	bxhi	lr
 8000b76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4249      	negne	r1, r1
 8000b96:	ea92 0f03 	teq	r2, r3
 8000b9a:	d03f      	beq.n	8000c1c <__addsf3+0xd8>
 8000b9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba4:	eb10 000c 	adds.w	r0, r0, ip
 8000ba8:	f1c3 0320 	rsb	r3, r3, #32
 8000bac:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__addsf3+0x78>
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc0:	d313      	bcc.n	8000bea <__addsf3+0xa6>
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d306      	bcc.n	8000bd6 <__addsf3+0x92>
 8000bc8:	0840      	lsrs	r0, r0, #1
 8000bca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bce:	f102 0201 	add.w	r2, r2, #1
 8000bd2:	2afe      	cmp	r2, #254	; 0xfe
 8000bd4:	d251      	bcs.n	8000c7a <__addsf3+0x136>
 8000bd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bde:	bf08      	it	eq
 8000be0:	f020 0001 	biceq.w	r0, r0, #1
 8000be4:	ea40 0003 	orr.w	r0, r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	0049      	lsls	r1, r1, #1
 8000bec:	eb40 0000 	adc.w	r0, r0, r0
 8000bf0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	d1ed      	bne.n	8000bd6 <__addsf3+0x92>
 8000bfa:	fab0 fc80 	clz	ip, r0
 8000bfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c02:	ebb2 020c 	subs.w	r2, r2, ip
 8000c06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0a:	bfaa      	itet	ge
 8000c0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c10:	4252      	neglt	r2, r2
 8000c12:	4318      	orrge	r0, r3
 8000c14:	bfbc      	itt	lt
 8000c16:	40d0      	lsrlt	r0, r2
 8000c18:	4318      	orrlt	r0, r3
 8000c1a:	4770      	bx	lr
 8000c1c:	f092 0f00 	teq	r2, #0
 8000c20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c24:	bf06      	itte	eq
 8000c26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2a:	3201      	addeq	r2, #1
 8000c2c:	3b01      	subne	r3, #1
 8000c2e:	e7b5      	b.n	8000b9c <__addsf3+0x58>
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d021      	beq.n	8000c84 <__addsf3+0x140>
 8000c40:	ea92 0f03 	teq	r2, r3
 8000c44:	d004      	beq.n	8000c50 <__addsf3+0x10c>
 8000c46:	f092 0f00 	teq	r2, #0
 8000c4a:	bf08      	it	eq
 8000c4c:	4608      	moveq	r0, r1
 8000c4e:	4770      	bx	lr
 8000c50:	ea90 0f01 	teq	r0, r1
 8000c54:	bf1c      	itt	ne
 8000c56:	2000      	movne	r0, #0
 8000c58:	4770      	bxne	lr
 8000c5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5e:	d104      	bne.n	8000c6a <__addsf3+0x126>
 8000c60:	0040      	lsls	r0, r0, #1
 8000c62:	bf28      	it	cs
 8000c64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6e:	bf3c      	itt	cc
 8000c70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bxcc	lr
 8000c76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	4770      	bx	lr
 8000c84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c88:	bf16      	itet	ne
 8000c8a:	4608      	movne	r0, r1
 8000c8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c90:	4601      	movne	r1, r0
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	bf06      	itte	eq
 8000c96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9a:	ea90 0f01 	teqeq	r0, r1
 8000c9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_ui2f>:
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e004      	b.n	8000cb4 <__aeabi_i2f+0x8>
 8000caa:	bf00      	nop

08000cac <__aeabi_i2f>:
 8000cac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb0:	bf48      	it	mi
 8000cb2:	4240      	negmi	r0, r0
 8000cb4:	ea5f 0c00 	movs.w	ip, r0
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	e01c      	b.n	8000d02 <__aeabi_l2f+0x2a>

08000cc8 <__aeabi_ul2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e00a      	b.n	8000cec <__aeabi_l2f+0x14>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_l2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_l2f+0x14>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	ea5f 0c01 	movs.w	ip, r1
 8000cf0:	bf02      	ittt	eq
 8000cf2:	4684      	moveq	ip, r0
 8000cf4:	4601      	moveq	r1, r0
 8000cf6:	2000      	moveq	r0, #0
 8000cf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cfc:	bf08      	it	eq
 8000cfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d06:	fabc f28c 	clz	r2, ip
 8000d0a:	3a08      	subs	r2, #8
 8000d0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d10:	db10      	blt.n	8000d34 <__aeabi_l2f+0x5c>
 8000d12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d16:	4463      	add	r3, ip
 8000d18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d24:	fa20 f202 	lsr.w	r2, r0, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	f020 0001 	biceq.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	f102 0220 	add.w	r2, r2, #32
 8000d38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d44:	fa21 f202 	lsr.w	r2, r1, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_f2iz>:
 8000d54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d5c:	d30f      	bcc.n	8000d7e <__aeabi_f2iz+0x2a>
 8000d5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d66:	d90d      	bls.n	8000d84 <__aeabi_f2iz+0x30>
 8000d68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d74:	fa23 f002 	lsr.w	r0, r3, r2
 8000d78:	bf18      	it	ne
 8000d7a:	4240      	negne	r0, r0
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2iz+0x3a>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d105      	bne.n	8000d9a <__aeabi_f2iz+0x46>
 8000d8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d98:	4770      	bx	lr
 8000d9a:	f04f 0000 	mov.w	r0, #0
 8000d9e:	4770      	bx	lr

08000da0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <DAC_SetChannel1Data+0x30>)
 8000db2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	3308      	adds	r3, #8
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40007400 	.word	0x40007400

08000dd4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <DMA_Init+0xa8>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000dfe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f023 0307 	bic.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60da      	str	r2, [r3, #12]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	f01c803f 	.word	0xf01c803f

08000e80 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000e9e:	e005      	b.n	8000eac <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 0201 	bic.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
  }
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <DMA_GetFlagStatus+0x68>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d802      	bhi.n	8000f08 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <DMA_GetFlagStatus+0x6c>)
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e001      	b.n	8000f0c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <DMA_GetFlagStatus+0x70>)
 8000f0a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e002      	b.n	8000f24 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f2a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
 8000f3e:	e001      	b.n	8000f44 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	4002640f 	.word	0x4002640f
 8000f54:	40026000 	.word	0x40026000
 8000f58:	40026400 	.word	0x40026400

08000f5c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <DMA_ClearFlag+0x50>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d802      	bhi.n	8000f74 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <DMA_ClearFlag+0x54>)
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e001      	b.n	8000f78 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <DMA_ClearFlag+0x58>)
 8000f76:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f88:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000f90:	e006      	b.n	8000fa0 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f98:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	6093      	str	r3, [r2, #8]
  }    
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	4002640f 	.word	0x4002640f
 8000fb0:	40026000 	.word	0x40026000
 8000fb4:	40026400 	.word	0x40026400

08000fb8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	819a      	strh	r2, [r3, #12]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	4013      	ands	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <Audio_MAL_IRQHandler+0xe8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f7ff ff64 	bl	8000ee8 <DMA_GetFlagStatus>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d062      	beq.n	80010ec <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d04a      	beq.n	80010c4 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800102e:	bf00      	nop
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff3f 	bl	8000eb8 <DMA_GetCmdStatus>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f7      	bne.n	8001030 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <Audio_MAL_IRQHandler+0xe8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f7ff ff86 	bl	8000f5c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <Audio_MAL_IRQHandler+0xf0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <Audio_MAL_IRQHandler+0xf4>)
 8001058:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001062:	4293      	cmp	r3, r2
 8001064:	bf28      	it	cs
 8001066:	4613      	movcs	r3, r2
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <Audio_MAL_IRQHandler+0xf4>)
 800106a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4923      	ldr	r1, [pc, #140]	; (8001100 <Audio_MAL_IRQHandler+0xf4>)
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff feae 	bl	8000dd4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fefe 	bl	8000e80 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <Audio_MAL_IRQHandler+0xf0>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001090:	428b      	cmp	r3, r1
 8001092:	bf28      	it	cs
 8001094:	460b      	movcs	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <Audio_MAL_IRQHandler+0xf0>)
 800109c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010aa:	428b      	cmp	r3, r1
 80010ac:	bf28      	it	cs
 80010ae:	460b      	movcs	r3, r1
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <Audio_MAL_IRQHandler+0xec>)
 80010b4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fedf 	bl	8000e80 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80010c2:	e013      	b.n	80010ec <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fed8 	bl	8000e80 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <Audio_MAL_IRQHandler+0xe4>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <Audio_MAL_IRQHandler+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4610      	mov	r0, r2
 80010dc:	f7ff ff3e 	bl	8000f5c <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Audio_MAL_IRQHandler+0xf0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fb8e 	bl	8001808 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000008 	.word	0x20000008
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000ea0 	.word	0x20000ea0
 8001100:	20000ee0 	.word	0x20000ee0

08001104 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001108:	f7ff ff80 	bl	800100c <Audio_MAL_IRQHandler>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001114:	f7ff ff7a 	bl	800100c <Audio_MAL_IRQHandler>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001120:	2102      	movs	r1, #2
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <SPI3_IRQHandler+0x3c>)
 8001124:	f7ff ff56 	bl	8000fd4 <SPI_I2S_GetFlagStatus>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d011      	beq.n	8001152 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <SPI3_IRQHandler+0x40>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d106      	bne.n	8001144 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001136:	f000 fb71 	bl	800181c <EVAL_AUDIO_GetSampleCallBack>
 800113a:	4603      	mov	r3, r0
 800113c:	4619      	mov	r1, r3
 800113e:	2004      	movs	r0, #4
 8001140:	f7ff fe2e 	bl	8000da0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001144:	f000 fb6a 	bl	800181c <EVAL_AUDIO_GetSampleCallBack>
 8001148:	4603      	mov	r3, r0
 800114a:	4619      	mov	r1, r3
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <SPI3_IRQHandler+0x3c>)
 800114e:	f7ff ff33 	bl	8000fb8 <SPI_I2S_SendData>
  }
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40003c00 	.word	0x40003c00
 800115c:	20000004 	.word	0x20000004

08001160 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <SysTick_Handler+0xe4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a35      	ldr	r2, [pc, #212]	; (8001244 <SysTick_Handler+0xe4>)
 800116e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <SysTick_Handler+0xe8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <SysTick_Handler+0x22>
		TM_Time2--;
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <SysTick_Handler+0xe8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <SysTick_Handler+0xe8>)
 8001180:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001182:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e052      	b.n	8001232 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <SysTick_Handler+0xec>)
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8001196:	2b00      	cmp	r3, #0
 8001198:	d048      	beq.n	800122c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <SysTick_Handler+0xec>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d040      	beq.n	800122c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <SysTick_Handler+0xec>)
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d038      	beq.n	800122c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a23      	ldr	r2, [pc, #140]	; (800124c <SysTick_Handler+0xec>)
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	3a01      	subs	r2, #1
 80011c8:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <SysTick_Handler+0xec>)
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d128      	bne.n	800122c <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <SysTick_Handler+0xec>)
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4918      	ldr	r1, [pc, #96]	; (800124c <SysTick_Handler+0xec>)
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4618      	mov	r0, r3
 80011f4:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <SysTick_Handler+0xec>)
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4912      	ldr	r1, [pc, #72]	; (800124c <SysTick_Handler+0xec>)
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <SysTick_Handler+0xec>)
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Handler+0xec>)
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3301      	adds	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <SysTick_Handler+0xec>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3a7      	bcc.n	800118c <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000e74 	.word	0x20000e74
 8001248:	20000e78 	.word	0x20000e78
 800124c:	20000e7c 	.word	0x20000e7c

08001250 <min>:
        sum += array[i];
    }
    return sum / (double) end - begin;
}

int16_t min(int16_t a, int16_t b, int16_t c) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	807b      	strh	r3, [r7, #2]
    if(a < b) {
 8001262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001266:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800126a:	429a      	cmp	r2, r3
 800126c:	da08      	bge.n	8001280 <min+0x30>
        return a < c ? a : c;
 800126e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001276:	4293      	cmp	r3, r2
 8001278:	bfa8      	it	ge
 800127a:	4613      	movge	r3, r2
 800127c:	b21b      	sxth	r3, r3
 800127e:	e007      	b.n	8001290 <min+0x40>
    }
    return b < c ? b : c;
 8001280:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001284:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001288:	4293      	cmp	r3, r2
 800128a:	bfa8      	it	ge
 800128c:	4613      	movge	r3, r2
 800128e:	b21b      	sxth	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <dtwDistance>:
        result[i - 1] = smoothed;
    }

}

double dtwDistance(double *ax, double *ay, double *az, int sa, double *bx, double *by, double *bz, int sb) {
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	b093      	sub	sp, #76	; 0x4c
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	61f8      	str	r0, [r7, #28]
 80012a6:	61b9      	str	r1, [r7, #24]
 80012a8:	617a      	str	r2, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	466b      	mov	r3, sp
 80012ae:	607b      	str	r3, [r7, #4]

	float acc[sb][sa];
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	461a      	mov	r2, r3
 80012b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4613      	mov	r3, r2
 80012ba:	3b01      	subs	r3, #1
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
 80012be:	4613      	mov	r3, r2
 80012c0:	f04f 0400 	mov.w	r4, #0
 80012c4:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 80012c8:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 80012cc:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80012d0:	4613      	mov	r3, r2
 80012d2:	009c      	lsls	r4, r3, #2
 80012d4:	60f9      	str	r1, [r7, #12]
 80012d6:	460b      	mov	r3, r1
 80012d8:	3b01      	subs	r3, #1
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f04f 0100 	mov.w	r1, #0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	461a      	mov	r2, r3
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	fb02 fc01 	mul.w	ip, r2, r1
 80012f2:	fb00 fe03 	mul.w	lr, r0, r3
 80012f6:	44e6      	add	lr, ip
 80012f8:	fba0 2302 	umull	r2, r3, r0, r2
 80012fc:	eb0e 0103 	add.w	r1, lr, r3
 8001300:	460b      	mov	r3, r1
 8001302:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8001306:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800130a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	461a      	mov	r2, r3
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	fb02 fc01 	mul.w	ip, r2, r1
 8001322:	fb00 fe03 	mul.w	lr, r0, r3
 8001326:	44e6      	add	lr, ip
 8001328:	fba0 2302 	umull	r2, r3, r0, r2
 800132c:	eb0e 0103 	add.w	r1, lr, r3
 8001330:	460b      	mov	r3, r1
 8001332:	015e      	lsls	r6, r3, #5
 8001334:	ea46 66d2 	orr.w	r6, r6, r2, lsr #27
 8001338:	0155      	lsls	r5, r2, #5
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	3303      	adds	r3, #3
 8001346:	3307      	adds	r3, #7
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	ebad 0d03 	sub.w	sp, sp, r3
 8001350:	466b      	mov	r3, sp
 8001352:	3303      	adds	r3, #3
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7fe ff33 	bl	80001d0 <__aeabi_dsub>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137a:	f000 fbfb 	bl	8001b74 <pow>
 800137e:	4605      	mov	r5, r0
 8001380:	460e      	mov	r6, r1
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7fe ff1f 	bl	80001d0 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a2:	f000 fbe7 	bl	8001b74 <pow>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4628      	mov	r0, r5
 80013ac:	4631      	mov	r1, r6
 80013ae:	f7fe ff11 	bl	80001d4 <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4615      	mov	r5, r2
 80013b8:	461e      	mov	r6, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7fe ff03 	bl	80001d0 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013da:	f000 fbcb 	bl	8001b74 <pow>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4628      	mov	r0, r5
 80013e4:	4631      	mov	r1, r6
 80013e6:	f7fe fef5 	bl	80001d4 <__adddf3>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fb51 	bl	8000a98 <__aeabi_d2f>
 80013f6:	4602      	mov	r2, r0
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	601a      	str	r2, [r3, #0]

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 80013fc:	2301      	movs	r3, #1
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001400:	e06a      	b.n	80014d8 <dtwDistance+0x23c>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
 8001402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe fedc 	bl	80001d0 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001428:	f000 fba4 	bl	8001b74 <pow>
 800142c:	4605      	mov	r5, r0
 800142e:	460e      	mov	r6, r1
 8001430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4413      	add	r3, r2
 8001438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7fe fec5 	bl	80001d0 <__aeabi_dsub>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001456:	f000 fb8d 	bl	8001b74 <pow>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4628      	mov	r0, r5
 8001460:	4631      	mov	r1, r6
 8001462:	f7fe feb7 	bl	80001d4 <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4615      	mov	r5, r2
 800146c:	461e      	mov	r6, r3
 800146e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4413      	add	r3, r2
 8001476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe fea6 	bl	80001d0 <__aeabi_dsub>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001494:	f000 fb6e 	bl	8001b74 <pow>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4628      	mov	r0, r5
 800149e:	4631      	mov	r1, r6
 80014a0:	f7fe fe98 	bl	80001d4 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff faf4 	bl	8000a98 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
        acc[0][i] = acc[0][i - 1] + dist;
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb3f 	bl	8000b44 <__addsf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	float dist;

	acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 80014d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d4:	3301      	adds	r3, #1
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
 80014d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	db90      	blt.n	8001402 <dtwDistance+0x166>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 80014e0:	2301      	movs	r3, #1
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
 80014e4:	e070      	b.n	80015c8 <dtwDistance+0x32c>
        dist = pow(ax[0] - bx[i], 2.0) + pow(ay[0] - by[i], 2.0) + pow(az[0] - bz[i], 2.0);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80014f2:	4413      	add	r3, r2
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7fe fe6a 	bl	80001d0 <__aeabi_dsub>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150c:	f000 fb32 	bl	8001b74 <pow>
 8001510:	4605      	mov	r5, r0
 8001512:	460e      	mov	r6, r1
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001520:	4413      	add	r3, r2
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe fe53 	bl	80001d0 <__aeabi_dsub>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153a:	f000 fb1b 	bl	8001b74 <pow>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4628      	mov	r0, r5
 8001544:	4631      	mov	r1, r6
 8001546:	f7fe fe45 	bl	80001d4 <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4615      	mov	r5, r2
 8001550:	461e      	mov	r6, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800155e:	4413      	add	r3, r2
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7fe fe34 	bl	80001d0 <__aeabi_dsub>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001578:	f000 fafc 	bl	8001b74 <pow>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4628      	mov	r0, r5
 8001582:	4631      	mov	r1, r6
 8001584:	f7fe fe26 	bl	80001d4 <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa82 	bl	8000a98 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
        acc[i][0] = acc[i - 1][0] + dist;
 8001598:	08a5      	lsrs	r5, r4, #2
 800159a:	08a2      	lsrs	r2, r4, #2
 800159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159e:	1e59      	subs	r1, r3, #1
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fac9 	bl	8000b44 <__addsf3>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ba:	fb02 f205 	mul.w	r2, r2, r5
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 80015c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c4:	3301      	adds	r3, #1
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
 80015c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015cc:	429a      	cmp	r2, r3
 80015ce:	db8a      	blt.n	80014e6 <dtwDistance+0x24a>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumulated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
 80015d0:	2301      	movs	r3, #1
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d4:	e0c0      	b.n	8001758 <dtwDistance+0x4bc>
        for (int j = 1; j < sa; j++) {
 80015d6:	2301      	movs	r3, #1
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015da:	e0b5      	b.n	8001748 <dtwDistance+0x4ac>
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
 80015dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015ee:	4413      	add	r3, r2
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7fe fdec 	bl	80001d0 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001608:	f000 fab4 	bl	8001b74 <pow>
 800160c:	4605      	mov	r5, r0
 800160e:	460e      	mov	r6, r1
 8001610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4413      	add	r3, r2
 8001618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001622:	4413      	add	r3, r2
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe fdd2 	bl	80001d0 <__aeabi_dsub>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	f000 fa9a 	bl	8001b74 <pow>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4628      	mov	r0, r5
 8001646:	4631      	mov	r1, r6
 8001648:	f7fe fdc4 	bl	80001d4 <__adddf3>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4615      	mov	r5, r2
 8001652:	461e      	mov	r6, r3
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001666:	4413      	add	r3, r2
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe fdb0 	bl	80001d0 <__aeabi_dsub>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001680:	f000 fa78 	bl	8001b74 <pow>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4628      	mov	r0, r5
 800168a:	4631      	mov	r1, r6
 800168c:	f7fe fda2 	bl	80001d4 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f9fe 	bl	8000a98 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
            m = min(acc[i - 1][j - 1],
 80016a0:	08a1      	lsrs	r1, r4, #2
 80016a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a4:	1e58      	subs	r0, r3, #1
 80016a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	fb00 f101 	mul.w	r1, r0, r1
 80016b0:	440a      	add	r2, r1
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb4c 	bl	8000d54 <__aeabi_f2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	b21d      	sxth	r5, r3
                    acc[i - 1][j],
 80016c0:	08a2      	lsrs	r2, r4, #2
 80016c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016c4:	1e59      	subs	r1, r3, #1
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	fb01 f102 	mul.w	r1, r1, r2
 80016cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ce:	440a      	add	r2, r1
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    // Accumulated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb3d 	bl	8000d54 <__aeabi_f2iz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b21e      	sxth	r6, r3
                    acc[i - 1][j],
                    acc[i][j - 1]);
 80016de:	08a1      	lsrs	r1, r4, #2
 80016e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016e8:	fb00 f101 	mul.w	r1, r0, r1
 80016ec:	440a      	add	r2, r1
 80016ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    // Accumulated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb2e 	bl	8000d54 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4631      	mov	r1, r6
 8001700:	4628      	mov	r0, r5
 8001702:	f7ff fda5 	bl	8001250 <min>
 8001706:	4603      	mov	r3, r0
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe feaf 	bl	800046c <__aeabi_i2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9c7 2308 	strd	r2, r3, [r7, #32]
                    acc[i - 1][j],
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
 8001716:	08a5      	lsrs	r5, r4, #2
 8001718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800171a:	f7fe feb9 	bl	8000490 <__aeabi_f2d>
 800171e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001722:	f7fe fd57 	bl	80001d4 <__adddf3>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f9b3 	bl	8000a98 <__aeabi_d2f>
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001736:	fb02 f105 	mul.w	r1, r2, r5
 800173a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800173c:	440a      	add	r2, r1
 800173e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    }

    // Accumulated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
 8001742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001744:	3301      	adds	r3, #1
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
 8001748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	f6ff af45 	blt.w	80015dc <dtwDistance+0x340>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumulated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
 8001752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001754:	3301      	adds	r3, #1
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800175a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800175c:	429a      	cmp	r2, r3
 800175e:	f6ff af3a 	blt.w	80015d6 <dtwDistance+0x33a>
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
        }
    }

    return sqrt(acc[sb - 1][sa - 1]);
 8001762:	08a1      	lsrs	r1, r4, #2
 8001764:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	fb00 f101 	mul.w	r1, r0, r1
 8001772:	440a      	add	r2, r1
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe89 	bl	8000490 <__aeabi_f2d>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	4618      	mov	r0, r3
 8001784:	4621      	mov	r1, r4
 8001786:	f000 fb5b 	bl	8001e40 <sqrt>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8001792:	4618      	mov	r0, r3
 8001794:	4621      	mov	r1, r4
 8001796:	374c      	adds	r7, #76	; 0x4c
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800179e:	bf00      	nop

080017a0 <main>:
}



int main(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af04      	add	r7, sp, #16

	int size = 500 * sizeof(int);
 80017a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017aa:	60fb      	str	r3, [r7, #12]
	int *x = (int) malloc(size);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f968 	bl	8001a84 <malloc>
 80017b4:	4603      	mov	r3, r0
 80017b6:	60bb      	str	r3, [r7, #8]
	*x = 100;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	601a      	str	r2, [r3, #0]

	double d = dtwDistance(smooth8Keinx, smooth8Keiny, smooth8Keinz, SAMPLEAMOUNT, smooth8Keinx, smooth8Keiny, smooth8Keinz, SAMPLEAMOUNT);
 80017be:	2394      	movs	r3, #148	; 0x94
 80017c0:	9303      	str	r3, [sp, #12]
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <main+0x58>)
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <main+0x5c>)
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <main+0x60>)
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2394      	movs	r3, #148	; 0x94
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <main+0x58>)
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <main+0x5c>)
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <main+0x60>)
 80017d6:	f7ff fd61 	bl	800129c <dtwDistance>
 80017da:	e9c7 0100 	strd	r0, r1, [r7]
	d += 1;
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <main+0x64>)
 80017e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e8:	f7fe fcf4 	bl	80001d4 <__adddf3>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	e887 0018 	stmia.w	r7, {r3, r4}

	//	float f =  pow(smooth8Keinx[0] - smooth2Lx[0], 2.0) + pow(smooth8Keiny[0] - smooth2Ly[0], 2.0) + pow(smooth8Keiny[0] - smooth2Ly[0], 2.0);

	while(1);
 80017f4:	e7fe      	b.n	80017f4 <main+0x54>
 80017f6:	bf00      	nop
 80017f8:	20000950 	.word	0x20000950
 80017fc:	200004b0 	.word	0x200004b0
 8001800:	20000010 	.word	0x20000010
 8001804:	3ff00000 	.word	0x3ff00000

08001808 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8001812:	bf00      	nop
}
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8001820:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001832:	e003      	b.n	800183c <LoopCopyDataInit>

08001834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800183a:	3104      	adds	r1, #4

0800183c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001844:	d3f6      	bcc.n	8001834 <CopyDataInit>
  ldr  r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001848:	e002      	b.n	8001850 <LoopFillZerobss>

0800184a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800184a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800184c:	f842 3b04 	str.w	r3, [r2], #4

08001850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001854:	d3f9      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001856:	f000 f847 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f000 f8ed 	bl	8001a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff ff9f 	bl	80017a0 <main>
  bx  lr    
 8001862:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001864:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001868:	08002d30 	.word	0x08002d30
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001870:	20000e58 	.word	0x20000e58
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001874:	20000e58 	.word	0x20000e58
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001878:	20000f20 	.word	0x20000f20

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <_sbrk+0x58>)
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <_sbrk+0x5c>)
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x60>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x1e>
    heap_end = &end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x60>)
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <_sbrk+0x58>)
 800189c:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_sbrk+0x60>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	441a      	add	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d905      	bls.n	80018be <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_sbrk+0x64>)
 80018b4:	220c      	movs	r2, #12
 80018b6:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	e006      	b.n	80018cc <_sbrk+0x4c>
  }

  heap_end += incr;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x60>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <_sbrk+0x60>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 80018ca:	68bb      	ldr	r3, [r7, #8]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000f20 	.word	0x20000f20
 80018dc:	00000900 	.word	0x00000900
 80018e0:	20000e94 	.word	0x20000e94
 80018e4:	20000f1c 	.word	0x20000f1c

080018e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <SystemInit+0x50>)
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <SystemInit+0x50>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <SystemInit+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <SystemInit+0x50>)
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <SystemInit+0x50>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <SystemInit+0x50>)
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SystemInit+0x54>)
 8001912:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <SystemInit+0x50>)
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <SystemInit+0x50>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SystemInit+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001926:	f000 f80d 	bl	8001944 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SystemInit+0x58>)
 800192c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001930:	609a      	str	r2, [r3, #8]
#endif
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	24003010 	.word	0x24003010
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001952:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <SetSysClock+0xe4>)
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <SetSysClock+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <SetSysClock+0xe4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3301      	adds	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <SetSysClock+0x38>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800197a:	d1f0      	bne.n	800195e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <SetSysClock+0xe4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001988:	2301      	movs	r3, #1
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	e001      	b.n	8001992 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d142      	bne.n	8001a1e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <SetSysClock+0xe4>)
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <SetSysClock+0xe4>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <SetSysClock+0xe8>)
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <SetSysClock+0xe8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ae:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <SetSysClock+0xe4>)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <SetSysClock+0xe4>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <SetSysClock+0xe4>)
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <SetSysClock+0xe4>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80019c4:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <SetSysClock+0xe4>)
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <SetSysClock+0xe4>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80019ce:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <SetSysClock+0xe4>)
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <SetSysClock+0xec>)
 80019d4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <SetSysClock+0xe4>)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <SetSysClock+0xe4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80019e2:	bf00      	nop
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <SetSysClock+0xe4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f9      	beq.n	80019e4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <SetSysClock+0xf0>)
 80019f2:	f240 6205 	movw	r2, #1541	; 0x605
 80019f6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <SetSysClock+0xe4>)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <SetSysClock+0xe4>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <SetSysClock+0xe4>)
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <SetSysClock+0xe4>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001a10:	bf00      	nop
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SetSysClock+0xe4>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d1f9      	bne.n	8001a12 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	07405408 	.word	0x07405408
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <__libc_init_array>:
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <__libc_init_array+0x3c>)
 8001a3c:	4c0e      	ldr	r4, [pc, #56]	; (8001a78 <__libc_init_array+0x40>)
 8001a3e:	1ae4      	subs	r4, r4, r3
 8001a40:	10a4      	asrs	r4, r4, #2
 8001a42:	2500      	movs	r5, #0
 8001a44:	461e      	mov	r6, r3
 8001a46:	42a5      	cmp	r5, r4
 8001a48:	d004      	beq.n	8001a54 <__libc_init_array+0x1c>
 8001a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a4e:	4798      	blx	r3
 8001a50:	3501      	adds	r5, #1
 8001a52:	e7f8      	b.n	8001a46 <__libc_init_array+0xe>
 8001a54:	f001 f904 	bl	8002c60 <_init>
 8001a58:	4c08      	ldr	r4, [pc, #32]	; (8001a7c <__libc_init_array+0x44>)
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <__libc_init_array+0x48>)
 8001a5c:	1ae4      	subs	r4, r4, r3
 8001a5e:	10a4      	asrs	r4, r4, #2
 8001a60:	2500      	movs	r5, #0
 8001a62:	461e      	mov	r6, r3
 8001a64:	42a5      	cmp	r5, r4
 8001a66:	d004      	beq.n	8001a72 <__libc_init_array+0x3a>
 8001a68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a6c:	4798      	blx	r3
 8001a6e:	3501      	adds	r5, #1
 8001a70:	e7f8      	b.n	8001a64 <__libc_init_array+0x2c>
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
 8001a74:	08002d28 	.word	0x08002d28
 8001a78:	08002d28 	.word	0x08002d28
 8001a7c:	08002d2c 	.word	0x08002d2c
 8001a80:	08002d28 	.word	0x08002d28

08001a84 <malloc>:
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <malloc+0xc>)
 8001a86:	4601      	mov	r1, r0
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f000 b803 	b.w	8001a94 <_malloc_r>
 8001a8e:	bf00      	nop
 8001a90:	20000e50 	.word	0x20000e50

08001a94 <_malloc_r>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	1ccd      	adds	r5, r1, #3
 8001a98:	f025 0503 	bic.w	r5, r5, #3
 8001a9c:	3508      	adds	r5, #8
 8001a9e:	2d0c      	cmp	r5, #12
 8001aa0:	bf38      	it	cc
 8001aa2:	250c      	movcc	r5, #12
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	4606      	mov	r6, r0
 8001aa8:	db01      	blt.n	8001aae <_malloc_r+0x1a>
 8001aaa:	42a9      	cmp	r1, r5
 8001aac:	d902      	bls.n	8001ab4 <_malloc_r+0x20>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	6033      	str	r3, [r6, #0]
 8001ab2:	e046      	b.n	8001b42 <_malloc_r+0xae>
 8001ab4:	f000 f85c 	bl	8001b70 <__malloc_lock>
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <_malloc_r+0xb4>)
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4621      	mov	r1, r4
 8001ac0:	b1a1      	cbz	r1, 8001aec <_malloc_r+0x58>
 8001ac2:	680b      	ldr	r3, [r1, #0]
 8001ac4:	1b5b      	subs	r3, r3, r5
 8001ac6:	d40e      	bmi.n	8001ae6 <_malloc_r+0x52>
 8001ac8:	2b0b      	cmp	r3, #11
 8001aca:	d903      	bls.n	8001ad4 <_malloc_r+0x40>
 8001acc:	600b      	str	r3, [r1, #0]
 8001ace:	18cc      	adds	r4, r1, r3
 8001ad0:	50cd      	str	r5, [r1, r3]
 8001ad2:	e01e      	b.n	8001b12 <_malloc_r+0x7e>
 8001ad4:	428c      	cmp	r4, r1
 8001ad6:	bf0d      	iteet	eq
 8001ad8:	6863      	ldreq	r3, [r4, #4]
 8001ada:	684b      	ldrne	r3, [r1, #4]
 8001adc:	6063      	strne	r3, [r4, #4]
 8001ade:	6013      	streq	r3, [r2, #0]
 8001ae0:	bf18      	it	ne
 8001ae2:	460c      	movne	r4, r1
 8001ae4:	e015      	b.n	8001b12 <_malloc_r+0x7e>
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	6849      	ldr	r1, [r1, #4]
 8001aea:	e7e9      	b.n	8001ac0 <_malloc_r+0x2c>
 8001aec:	4c17      	ldr	r4, [pc, #92]	; (8001b4c <_malloc_r+0xb8>)
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	b91b      	cbnz	r3, 8001afa <_malloc_r+0x66>
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 f82c 	bl	8001b50 <_sbrk_r>
 8001af8:	6020      	str	r0, [r4, #0]
 8001afa:	4629      	mov	r1, r5
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f827 	bl	8001b50 <_sbrk_r>
 8001b02:	1c43      	adds	r3, r0, #1
 8001b04:	d018      	beq.n	8001b38 <_malloc_r+0xa4>
 8001b06:	1cc4      	adds	r4, r0, #3
 8001b08:	f024 0403 	bic.w	r4, r4, #3
 8001b0c:	42a0      	cmp	r0, r4
 8001b0e:	d10d      	bne.n	8001b2c <_malloc_r+0x98>
 8001b10:	6025      	str	r5, [r4, #0]
 8001b12:	4630      	mov	r0, r6
 8001b14:	f000 f82d 	bl	8001b72 <__malloc_unlock>
 8001b18:	f104 000b 	add.w	r0, r4, #11
 8001b1c:	1d23      	adds	r3, r4, #4
 8001b1e:	f020 0007 	bic.w	r0, r0, #7
 8001b22:	1ac3      	subs	r3, r0, r3
 8001b24:	d00e      	beq.n	8001b44 <_malloc_r+0xb0>
 8001b26:	425a      	negs	r2, r3
 8001b28:	50e2      	str	r2, [r4, r3]
 8001b2a:	bd70      	pop	{r4, r5, r6, pc}
 8001b2c:	1a21      	subs	r1, r4, r0
 8001b2e:	4630      	mov	r0, r6
 8001b30:	f000 f80e 	bl	8001b50 <_sbrk_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1eb      	bne.n	8001b10 <_malloc_r+0x7c>
 8001b38:	230c      	movs	r3, #12
 8001b3a:	6033      	str	r3, [r6, #0]
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f000 f818 	bl	8001b72 <__malloc_unlock>
 8001b42:	2000      	movs	r0, #0
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
 8001b46:	bf00      	nop
 8001b48:	20000e9c 	.word	0x20000e9c
 8001b4c:	20000e98 	.word	0x20000e98

08001b50 <_sbrk_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4c06      	ldr	r4, [pc, #24]	; (8001b6c <_sbrk_r+0x1c>)
 8001b54:	2300      	movs	r3, #0
 8001b56:	4605      	mov	r5, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	6023      	str	r3, [r4, #0]
 8001b5c:	f7ff fe90 	bl	8001880 <_sbrk>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d102      	bne.n	8001b6a <_sbrk_r+0x1a>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	b103      	cbz	r3, 8001b6a <_sbrk_r+0x1a>
 8001b68:	602b      	str	r3, [r5, #0]
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	20000f1c 	.word	0x20000f1c

08001b70 <__malloc_lock>:
 8001b70:	4770      	bx	lr

08001b72 <__malloc_unlock>:
 8001b72:	4770      	bx	lr

08001b74 <pow>:
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b78:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8001e3c <pow+0x2c8>
 8001b7c:	b08f      	sub	sp, #60	; 0x3c
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4682      	mov	sl, r0
 8001b82:	468b      	mov	fp, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	f000 f9b3 	bl	8001ef0 <__ieee754_pow>
 8001b8a:	f999 3000 	ldrsb.w	r3, [r9]
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e9cd 0100 	strd	r0, r1, [sp]
 8001b96:	46c8      	mov	r8, r9
 8001b98:	f000 813d 	beq.w	8001e16 <pow+0x2a2>
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe ff62 	bl	8000a6c <__aeabi_dcmpun>
 8001ba8:	4606      	mov	r6, r0
 8001baa:	2800      	cmp	r0, #0
 8001bac:	f040 8133 	bne.w	8001e16 <pow+0x2a2>
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	465b      	mov	r3, fp
 8001bb4:	4650      	mov	r0, sl
 8001bb6:	4659      	mov	r1, fp
 8001bb8:	f7fe ff58 	bl	8000a6c <__aeabi_dcmpun>
 8001bbc:	9003      	str	r0, [sp, #12]
 8001bbe:	b1d0      	cbz	r0, 8001bf6 <pow+0x82>
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe ff1e 	bl	8000a08 <__aeabi_dcmpeq>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	f000 8122 	beq.w	8001e16 <pow+0x2a2>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9304      	str	r3, [sp, #16]
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <pow+0x2ac>)
 8001bd8:	9305      	str	r3, [sp, #20]
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <pow+0x2b0>)
 8001bdc:	960c      	str	r6, [sp, #48]	; 0x30
 8001bde:	2200      	movs	r2, #0
 8001be0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001be4:	9b02      	ldr	r3, [sp, #8]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001bec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001bf0:	f040 8084 	bne.w	8001cfc <pow+0x188>
 8001bf4:	e10c      	b.n	8001e10 <pow+0x29c>
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	2700      	movs	r7, #0
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4650      	mov	r0, sl
 8001c00:	4659      	mov	r1, fp
 8001c02:	f7fe ff01 	bl	8000a08 <__aeabi_dcmpeq>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d03f      	beq.n	8001c8a <pow+0x116>
 8001c0a:	4632      	mov	r2, r6
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fef9 	bl	8000a08 <__aeabi_dcmpeq>
 8001c16:	4680      	mov	r8, r0
 8001c18:	b198      	cbz	r0, 8001c42 <pow+0xce>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9304      	str	r3, [sp, #16]
 8001c1e:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <pow+0x2ac>)
 8001c20:	9305      	str	r3, [sp, #20]
 8001c22:	9b03      	ldr	r3, [sp, #12]
 8001c24:	930c      	str	r3, [sp, #48]	; 0x30
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001c2c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001c30:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d061      	beq.n	8001cfc <pow+0x188>
 8001c38:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <pow+0x2b0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001c40:	e0e0      	b.n	8001e04 <pow+0x290>
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f000 fef4 	bl	8002a32 <finite>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	f000 80e3 	beq.w	8001e16 <pow+0x2a2>
 8001c50:	4632      	mov	r2, r6
 8001c52:	463b      	mov	r3, r7
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fee0 	bl	8000a1c <__aeabi_dcmplt>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	f000 80da 	beq.w	8001e16 <pow+0x2a2>
 8001c62:	2301      	movs	r3, #1
 8001c64:	9304      	str	r3, [sp, #16]
 8001c66:	4b6e      	ldr	r3, [pc, #440]	; (8001e20 <pow+0x2ac>)
 8001c68:	9305      	str	r3, [sp, #20]
 8001c6a:	f999 3000 	ldrsb.w	r3, [r9]
 8001c6e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8001c72:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001c76:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d030      	beq.n	8001ce0 <pow+0x16c>
 8001c7e:	496a      	ldr	r1, [pc, #424]	; (8001e28 <pow+0x2b4>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	e037      	b.n	8001cfa <pow+0x186>
 8001c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001c8e:	f000 fed0 	bl	8002a32 <finite>
 8001c92:	9002      	str	r0, [sp, #8]
 8001c94:	2800      	cmp	r0, #0
 8001c96:	f040 808a 	bne.w	8001dae <pow+0x23a>
 8001c9a:	4650      	mov	r0, sl
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	f000 fec8 	bl	8002a32 <finite>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	f000 8083 	beq.w	8001dae <pow+0x23a>
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f000 fec1 	bl	8002a32 <finite>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d07c      	beq.n	8001dae <pow+0x23a>
 8001cb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7fe fed6 	bl	8000a6c <__aeabi_dcmpun>
 8001cc0:	f999 9000 	ldrsb.w	r9, [r9]
 8001cc4:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <pow+0x2ac>)
 8001cc6:	b310      	cbz	r0, 8001d0e <pow+0x19a>
 8001cc8:	2201      	movs	r2, #1
 8001cca:	9305      	str	r3, [sp, #20]
 8001ccc:	9b02      	ldr	r3, [sp, #8]
 8001cce:	9204      	str	r2, [sp, #16]
 8001cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8001cd2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001cd6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001cda:	f1b9 0f00 	cmp.w	r9, #0
 8001cde:	d102      	bne.n	8001ce6 <pow+0x172>
 8001ce0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8001ce4:	e00a      	b.n	8001cfc <pow+0x188>
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4630      	mov	r0, r6
 8001cec:	4639      	mov	r1, r7
 8001cee:	f7fe fd4d 	bl	800078c <__aeabi_ddiv>
 8001cf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001cf6:	f1b9 0f02 	cmp.w	r9, #2
 8001cfa:	d004      	beq.n	8001d06 <pow+0x192>
 8001cfc:	a804      	add	r0, sp, #16
 8001cfe:	f000 fe9e 	bl	8002a3e <matherr>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d17e      	bne.n	8001e04 <pow+0x290>
 8001d06:	f000 ffa5 	bl	8002c54 <__errno>
 8001d0a:	2321      	movs	r3, #33	; 0x21
 8001d0c:	e079      	b.n	8001e02 <pow+0x28e>
 8001d0e:	2203      	movs	r2, #3
 8001d10:	9204      	str	r2, [sp, #16]
 8001d12:	9305      	str	r3, [sp, #20]
 8001d14:	900c      	str	r0, [sp, #48]	; 0x30
 8001d16:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001d1a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001d1e:	f1b9 0f00 	cmp.w	r9, #0
 8001d22:	d122      	bne.n	8001d6a <pow+0x1f6>
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <pow+0x2b8>)
 8001d26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d2e:	4650      	mov	r0, sl
 8001d30:	4632      	mov	r2, r6
 8001d32:	463b      	mov	r3, r7
 8001d34:	4659      	mov	r1, fp
 8001d36:	f7fe fe71 	bl	8000a1c <__aeabi_dcmplt>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d05a      	beq.n	8001df4 <pow+0x280>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <pow+0x2bc>)
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fbf7 	bl	8000538 <__aeabi_dmul>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	f000 fe7f 	bl	8002a50 <rint>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fe55 	bl	8000a08 <__aeabi_dcmpeq>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d144      	bne.n	8001dec <pow+0x278>
 8001d62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <pow+0x2c0>)
 8001d68:	e01e      	b.n	8001da8 <pow+0x234>
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <pow+0x2c4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d72:	4650      	mov	r0, sl
 8001d74:	4632      	mov	r2, r6
 8001d76:	463b      	mov	r3, r7
 8001d78:	4659      	mov	r1, fp
 8001d7a:	f7fe fe4f 	bl	8000a1c <__aeabi_dcmplt>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d034      	beq.n	8001dec <pow+0x278>
 8001d82:	2200      	movs	r2, #0
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <pow+0x2bc>)
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fbd5 	bl	8000538 <__aeabi_dmul>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
 8001d92:	f000 fe5d 	bl	8002a50 <rint>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f7fe fe33 	bl	8000a08 <__aeabi_dcmpeq>
 8001da2:	bb18      	cbnz	r0, 8001dec <pow+0x278>
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <pow+0x2b4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001dac:	e01e      	b.n	8001dec <pow+0x278>
 8001dae:	2600      	movs	r6, #0
 8001db0:	2700      	movs	r7, #0
 8001db2:	4632      	mov	r2, r6
 8001db4:	463b      	mov	r3, r7
 8001db6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001dba:	f7fe fe25 	bl	8000a08 <__aeabi_dcmpeq>
 8001dbe:	b350      	cbz	r0, 8001e16 <pow+0x2a2>
 8001dc0:	4650      	mov	r0, sl
 8001dc2:	4659      	mov	r1, fp
 8001dc4:	f000 fe35 	bl	8002a32 <finite>
 8001dc8:	b328      	cbz	r0, 8001e16 <pow+0x2a2>
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	f000 fe30 	bl	8002a32 <finite>
 8001dd2:	b300      	cbz	r0, 8001e16 <pow+0x2a2>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <pow+0x2ac>)
 8001dde:	9305      	str	r3, [sp, #20]
 8001de0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001de4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8001de8:	2300      	movs	r3, #0
 8001dea:	930c      	str	r3, [sp, #48]	; 0x30
 8001dec:	f998 3000 	ldrsb.w	r3, [r8]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d003      	beq.n	8001dfc <pow+0x288>
 8001df4:	a804      	add	r0, sp, #16
 8001df6:	f000 fe22 	bl	8002a3e <matherr>
 8001dfa:	b918      	cbnz	r0, 8001e04 <pow+0x290>
 8001dfc:	f000 ff2a 	bl	8002c54 <__errno>
 8001e00:	2322      	movs	r3, #34	; 0x22
 8001e02:	6003      	str	r3, [r0, #0]
 8001e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e06:	b11b      	cbz	r3, 8001e10 <pow+0x29c>
 8001e08:	f000 ff24 	bl	8002c54 <__errno>
 8001e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e0e:	6003      	str	r3, [r0, #0]
 8001e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001e14:	e001      	b.n	8001e1a <pow+0x2a6>
 8001e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001e1a:	b00f      	add	sp, #60	; 0x3c
 8001e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e20:	08002cda 	.word	0x08002cda
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	fff00000 	.word	0xfff00000
 8001e2c:	47efffff 	.word	0x47efffff
 8001e30:	3fe00000 	.word	0x3fe00000
 8001e34:	c7efffff 	.word	0xc7efffff
 8001e38:	7ff00000 	.word	0x7ff00000
 8001e3c:	20000e54 	.word	0x20000e54

08001e40 <sqrt>:
 8001e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e44:	b08b      	sub	sp, #44	; 0x2c
 8001e46:	4606      	mov	r6, r0
 8001e48:	460f      	mov	r7, r1
 8001e4a:	f000 fd45 	bl	80028d8 <__ieee754_sqrt>
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <sqrt+0xa8>)
 8001e50:	f993 a000 	ldrsb.w	sl, [r3]
 8001e54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8001e58:	4604      	mov	r4, r0
 8001e5a:	460d      	mov	r5, r1
 8001e5c:	d03f      	beq.n	8001ede <sqrt+0x9e>
 8001e5e:	4632      	mov	r2, r6
 8001e60:	463b      	mov	r3, r7
 8001e62:	4630      	mov	r0, r6
 8001e64:	4639      	mov	r1, r7
 8001e66:	f7fe fe01 	bl	8000a6c <__aeabi_dcmpun>
 8001e6a:	4683      	mov	fp, r0
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d136      	bne.n	8001ede <sqrt+0x9e>
 8001e70:	f04f 0800 	mov.w	r8, #0
 8001e74:	f04f 0900 	mov.w	r9, #0
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	4639      	mov	r1, r7
 8001e80:	f7fe fdcc 	bl	8000a1c <__aeabi_dcmplt>
 8001e84:	b358      	cbz	r0, 8001ede <sqrt+0x9e>
 8001e86:	2301      	movs	r3, #1
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <sqrt+0xac>)
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f8cd b020 	str.w	fp, [sp, #32]
 8001e92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001e96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001e9a:	f1ba 0f00 	cmp.w	sl, #0
 8001e9e:	d102      	bne.n	8001ea6 <sqrt+0x66>
 8001ea0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001ea4:	e00a      	b.n	8001ebc <sqrt+0x7c>
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe fc6d 	bl	800078c <__aeabi_ddiv>
 8001eb2:	f1ba 0f02 	cmp.w	sl, #2
 8001eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001eba:	d003      	beq.n	8001ec4 <sqrt+0x84>
 8001ebc:	4668      	mov	r0, sp
 8001ebe:	f000 fdbe 	bl	8002a3e <matherr>
 8001ec2:	b918      	cbnz	r0, 8001ecc <sqrt+0x8c>
 8001ec4:	f000 fec6 	bl	8002c54 <__errno>
 8001ec8:	2321      	movs	r3, #33	; 0x21
 8001eca:	6003      	str	r3, [r0, #0]
 8001ecc:	9b08      	ldr	r3, [sp, #32]
 8001ece:	b11b      	cbz	r3, 8001ed8 <sqrt+0x98>
 8001ed0:	f000 fec0 	bl	8002c54 <__errno>
 8001ed4:	9b08      	ldr	r3, [sp, #32]
 8001ed6:	6003      	str	r3, [r0, #0]
 8001ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001edc:	e001      	b.n	8001ee2 <sqrt+0xa2>
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	b00b      	add	sp, #44	; 0x2c
 8001ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee8:	20000e54 	.word	0x20000e54
 8001eec:	08002cde 	.word	0x08002cde

08001ef0 <__ieee754_pow>:
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	b091      	sub	sp, #68	; 0x44
 8001ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8001efa:	e89d 0208 	ldmia.w	sp, {r3, r9}
 8001efe:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8001f02:	4607      	mov	r7, r0
 8001f04:	4682      	mov	sl, r0
 8001f06:	ea56 0003 	orrs.w	r0, r6, r3
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4688      	mov	r8, r1
 8001f0e:	f000 8497 	beq.w	8002840 <__ieee754_pow+0x950>
 8001f12:	4abd      	ldr	r2, [pc, #756]	; (8002208 <__ieee754_pow+0x318>)
 8001f14:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 8001f18:	4295      	cmp	r5, r2
 8001f1a:	dc08      	bgt.n	8001f2e <__ieee754_pow+0x3e>
 8001f1c:	d102      	bne.n	8001f24 <__ieee754_pow+0x34>
 8001f1e:	b937      	cbnz	r7, 8001f2e <__ieee754_pow+0x3e>
 8001f20:	f000 bc99 	b.w	8002856 <__ieee754_pow+0x966>
 8001f24:	4296      	cmp	r6, r2
 8001f26:	dc02      	bgt.n	8001f2e <__ieee754_pow+0x3e>
 8001f28:	4296      	cmp	r6, r2
 8001f2a:	d10e      	bne.n	8001f4a <__ieee754_pow+0x5a>
 8001f2c:	b16b      	cbz	r3, 8001f4a <__ieee754_pow+0x5a>
 8001f2e:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8001f32:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8001f36:	ea55 000a 	orrs.w	r0, r5, sl
 8001f3a:	f000 8481 	beq.w	8002840 <__ieee754_pow+0x950>
 8001f3e:	48b3      	ldr	r0, [pc, #716]	; (800220c <__ieee754_pow+0x31c>)
 8001f40:	b011      	add	sp, #68	; 0x44
 8001f42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f46:	f000 bd7d 	b.w	8002a44 <nan>
 8001f4a:	f1b8 0f00 	cmp.w	r8, #0
 8001f4e:	da2a      	bge.n	8001fa6 <__ieee754_pow+0xb6>
 8001f50:	4aaf      	ldr	r2, [pc, #700]	; (8002210 <__ieee754_pow+0x320>)
 8001f52:	4296      	cmp	r6, r2
 8001f54:	dc24      	bgt.n	8001fa0 <__ieee754_pow+0xb0>
 8001f56:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8001f5a:	4296      	cmp	r6, r2
 8001f5c:	dd23      	ble.n	8001fa6 <__ieee754_pow+0xb6>
 8001f5e:	1532      	asrs	r2, r6, #20
 8001f60:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8001f64:	2a14      	cmp	r2, #20
 8001f66:	dd0c      	ble.n	8001f82 <__ieee754_pow+0x92>
 8001f68:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8001f6c:	fa23 f102 	lsr.w	r1, r3, r2
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d116      	bne.n	8001fa6 <__ieee754_pow+0xb6>
 8001f78:	f001 0101 	and.w	r1, r1, #1
 8001f7c:	f1c1 0b02 	rsb	fp, r1, #2
 8001f80:	e013      	b.n	8001faa <__ieee754_pow+0xba>
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d155      	bne.n	8002032 <__ieee754_pow+0x142>
 8001f86:	f1c2 0214 	rsb	r2, r2, #20
 8001f8a:	fa46 f102 	asr.w	r1, r6, r2
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4296      	cmp	r6, r2
 8001f94:	d12a      	bne.n	8001fec <__ieee754_pow+0xfc>
 8001f96:	f001 0101 	and.w	r1, r1, #1
 8001f9a:	f1c1 0b02 	rsb	fp, r1, #2
 8001f9e:	e026      	b.n	8001fee <__ieee754_pow+0xfe>
 8001fa0:	f04f 0b02 	mov.w	fp, #2
 8001fa4:	e001      	b.n	8001faa <__ieee754_pow+0xba>
 8001fa6:	f04f 0b00 	mov.w	fp, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d143      	bne.n	8002036 <__ieee754_pow+0x146>
 8001fae:	4a96      	ldr	r2, [pc, #600]	; (8002208 <__ieee754_pow+0x318>)
 8001fb0:	4296      	cmp	r6, r2
 8001fb2:	d11c      	bne.n	8001fee <__ieee754_pow+0xfe>
 8001fb4:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8001fb8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fbc:	ea52 020a 	orrs.w	r2, r2, sl
 8001fc0:	f000 843f 	beq.w	8002842 <__ieee754_pow+0x952>
 8001fc4:	4b93      	ldr	r3, [pc, #588]	; (8002214 <__ieee754_pow+0x324>)
 8001fc6:	429d      	cmp	r5, r3
 8001fc8:	dd07      	ble.n	8001fda <__ieee754_pow+0xea>
 8001fca:	f1b9 0f00 	cmp.w	r9, #0
 8001fce:	f280 843a 	bge.w	8002846 <__ieee754_pow+0x956>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f000 bc43 	b.w	8002860 <__ieee754_pow+0x970>
 8001fda:	f1b9 0f00 	cmp.w	r9, #0
 8001fde:	daf8      	bge.n	8001fd2 <__ieee754_pow+0xe2>
 8001fe0:	9a01      	ldr	r2, [sp, #4]
 8001fe2:	9b00      	ldr	r3, [sp, #0]
 8001fe4:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8001fe8:	f000 bc3a 	b.w	8002860 <__ieee754_pow+0x970>
 8001fec:	469b      	mov	fp, r3
 8001fee:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <__ieee754_pow+0x328>)
 8001ff0:	429e      	cmp	r6, r3
 8001ff2:	d108      	bne.n	8002006 <__ieee754_pow+0x116>
 8001ff4:	f1b9 0f00 	cmp.w	r9, #0
 8001ff8:	f280 8428 	bge.w	800284c <__ieee754_pow+0x95c>
 8001ffc:	463a      	mov	r2, r7
 8001ffe:	4623      	mov	r3, r4
 8002000:	2000      	movs	r0, #0
 8002002:	4985      	ldr	r1, [pc, #532]	; (8002218 <__ieee754_pow+0x328>)
 8002004:	e03e      	b.n	8002084 <__ieee754_pow+0x194>
 8002006:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800200a:	d105      	bne.n	8002018 <__ieee754_pow+0x128>
 800200c:	463a      	mov	r2, r7
 800200e:	4623      	mov	r3, r4
 8002010:	4638      	mov	r0, r7
 8002012:	4621      	mov	r1, r4
 8002014:	f000 bc11 	b.w	800283a <__ieee754_pow+0x94a>
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <__ieee754_pow+0x32c>)
 800201a:	4599      	cmp	r9, r3
 800201c:	d10b      	bne.n	8002036 <__ieee754_pow+0x146>
 800201e:	f1b8 0f00 	cmp.w	r8, #0
 8002022:	db08      	blt.n	8002036 <__ieee754_pow+0x146>
 8002024:	4638      	mov	r0, r7
 8002026:	4621      	mov	r1, r4
 8002028:	b011      	add	sp, #68	; 0x44
 800202a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202e:	f000 bc53 	b.w	80028d8 <__ieee754_sqrt>
 8002032:	f04f 0b00 	mov.w	fp, #0
 8002036:	4638      	mov	r0, r7
 8002038:	4621      	mov	r1, r4
 800203a:	f000 fcf7 	bl	8002a2c <fabs>
 800203e:	f1ba 0f00 	cmp.w	sl, #0
 8002042:	d12a      	bne.n	800209a <__ieee754_pow+0x1aa>
 8002044:	b125      	cbz	r5, 8002050 <__ieee754_pow+0x160>
 8002046:	4b74      	ldr	r3, [pc, #464]	; (8002218 <__ieee754_pow+0x328>)
 8002048:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 800204c:	429a      	cmp	r2, r3
 800204e:	d124      	bne.n	800209a <__ieee754_pow+0x1aa>
 8002050:	f1b9 0f00 	cmp.w	r9, #0
 8002054:	da05      	bge.n	8002062 <__ieee754_pow+0x172>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	2000      	movs	r0, #0
 800205c:	496e      	ldr	r1, [pc, #440]	; (8002218 <__ieee754_pow+0x328>)
 800205e:	f7fe fb95 	bl	800078c <__aeabi_ddiv>
 8002062:	f1b8 0f00 	cmp.w	r8, #0
 8002066:	f280 83f4 	bge.w	8002852 <__ieee754_pow+0x962>
 800206a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800206e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002072:	ea55 030b 	orrs.w	r3, r5, fp
 8002076:	d108      	bne.n	800208a <__ieee754_pow+0x19a>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	f7fe f8a8 	bl	80001d0 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	f7fe fb82 	bl	800078c <__aeabi_ddiv>
 8002088:	e3e3      	b.n	8002852 <__ieee754_pow+0x962>
 800208a:	f1bb 0f01 	cmp.w	fp, #1
 800208e:	4603      	mov	r3, r0
 8002090:	f040 83e6 	bne.w	8002860 <__ieee754_pow+0x970>
 8002094:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002098:	e3e2      	b.n	8002860 <__ieee754_pow+0x970>
 800209a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800209e:	f108 33ff 	add.w	r3, r8, #4294967295
 80020a2:	930d      	str	r3, [sp, #52]	; 0x34
 80020a4:	ea5b 0303 	orrs.w	r3, fp, r3
 80020a8:	d104      	bne.n	80020b4 <__ieee754_pow+0x1c4>
 80020aa:	463a      	mov	r2, r7
 80020ac:	4623      	mov	r3, r4
 80020ae:	4638      	mov	r0, r7
 80020b0:	4621      	mov	r1, r4
 80020b2:	e7e3      	b.n	800207c <__ieee754_pow+0x18c>
 80020b4:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <__ieee754_pow+0x330>)
 80020b6:	429e      	cmp	r6, r3
 80020b8:	dd6d      	ble.n	8002196 <__ieee754_pow+0x2a6>
 80020ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80020be:	429e      	cmp	r6, r3
 80020c0:	dd0b      	ble.n	80020da <__ieee754_pow+0x1ea>
 80020c2:	4b54      	ldr	r3, [pc, #336]	; (8002214 <__ieee754_pow+0x324>)
 80020c4:	429d      	cmp	r5, r3
 80020c6:	dc0e      	bgt.n	80020e6 <__ieee754_pow+0x1f6>
 80020c8:	f1b9 0f00 	cmp.w	r9, #0
 80020cc:	da81      	bge.n	8001fd2 <__ieee754_pow+0xe2>
 80020ce:	a344      	add	r3, pc, #272	; (adr r3, 80021e0 <__ieee754_pow+0x2f0>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	e3af      	b.n	800283a <__ieee754_pow+0x94a>
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <__ieee754_pow+0x334>)
 80020dc:	429d      	cmp	r5, r3
 80020de:	ddf3      	ble.n	80020c8 <__ieee754_pow+0x1d8>
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <__ieee754_pow+0x328>)
 80020e2:	429d      	cmp	r5, r3
 80020e4:	dd03      	ble.n	80020ee <__ieee754_pow+0x1fe>
 80020e6:	f1b9 0f00 	cmp.w	r9, #0
 80020ea:	dcf0      	bgt.n	80020ce <__ieee754_pow+0x1de>
 80020ec:	e771      	b.n	8001fd2 <__ieee754_pow+0xe2>
 80020ee:	2200      	movs	r2, #0
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <__ieee754_pow+0x328>)
 80020f2:	f7fe f86d 	bl	80001d0 <__aeabi_dsub>
 80020f6:	a33c      	add	r3, pc, #240	; (adr r3, 80021e8 <__ieee754_pow+0x2f8>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	f7fe fa1a 	bl	8000538 <__aeabi_dmul>
 8002104:	a33a      	add	r3, pc, #232	; (adr r3, 80021f0 <__ieee754_pow+0x300>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4606      	mov	r6, r0
 800210c:	460f      	mov	r7, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe fa11 	bl	8000538 <__aeabi_dmul>
 8002116:	2200      	movs	r2, #0
 8002118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <__ieee754_pow+0x338>)
 800211e:	4620      	mov	r0, r4
 8002120:	4629      	mov	r1, r5
 8002122:	f7fe fa09 	bl	8000538 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	a133      	add	r1, pc, #204	; (adr r1, 80021f8 <__ieee754_pow+0x308>)
 800212c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002130:	f7fe f84e 	bl	80001d0 <__aeabi_dsub>
 8002134:	4622      	mov	r2, r4
 8002136:	462b      	mov	r3, r5
 8002138:	f7fe f9fe 	bl	8000538 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	2000      	movs	r0, #0
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <__ieee754_pow+0x32c>)
 8002144:	f7fe f844 	bl	80001d0 <__aeabi_dsub>
 8002148:	4622      	mov	r2, r4
 800214a:	462b      	mov	r3, r5
 800214c:	4680      	mov	r8, r0
 800214e:	4689      	mov	r9, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f9f0 	bl	8000538 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4640      	mov	r0, r8
 800215e:	4649      	mov	r1, r9
 8002160:	f7fe f9ea 	bl	8000538 <__aeabi_dmul>
 8002164:	a326      	add	r3, pc, #152	; (adr r3, 8002200 <__ieee754_pow+0x310>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe f9e5 	bl	8000538 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002176:	f7fe f82b 	bl	80001d0 <__aeabi_dsub>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
 8002182:	4630      	mov	r0, r6
 8002184:	4639      	mov	r1, r7
 8002186:	f7fe f825 	bl	80001d4 <__adddf3>
 800218a:	2000      	movs	r0, #0
 800218c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002190:	4632      	mov	r2, r6
 8002192:	463b      	mov	r3, r7
 8002194:	e1a7      	b.n	80024e6 <__ieee754_pow+0x5f6>
 8002196:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	da05      	bge.n	80021ac <__ieee754_pow+0x2bc>
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <__ieee754_pow+0x33c>)
 80021a2:	f7fe f9c9 	bl	8000538 <__aeabi_dmul>
 80021a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80021aa:	460d      	mov	r5, r1
 80021ac:	152b      	asrs	r3, r5, #20
 80021ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80021b2:	4413      	add	r3, r2
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <__ieee754_pow+0x340>)
 80021b6:	9307      	str	r3, [sp, #28]
 80021b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80021bc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80021c6:	dd07      	ble.n	80021d8 <__ieee754_pow+0x2e8>
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <__ieee754_pow+0x344>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	dd34      	ble.n	8002238 <__ieee754_pow+0x348>
 80021ce:	9b07      	ldr	r3, [sp, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	9307      	str	r3, [sp, #28]
 80021d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80021d8:	f04f 0a00 	mov.w	sl, #0
 80021dc:	e02e      	b.n	800223c <__ieee754_pow+0x34c>
 80021de:	bf00      	nop
 80021e0:	8800759c 	.word	0x8800759c
 80021e4:	7e37e43c 	.word	0x7e37e43c
 80021e8:	60000000 	.word	0x60000000
 80021ec:	3ff71547 	.word	0x3ff71547
 80021f0:	f85ddf44 	.word	0xf85ddf44
 80021f4:	3e54ae0b 	.word	0x3e54ae0b
 80021f8:	55555555 	.word	0x55555555
 80021fc:	3fd55555 	.word	0x3fd55555
 8002200:	652b82fe 	.word	0x652b82fe
 8002204:	3ff71547 	.word	0x3ff71547
 8002208:	7ff00000 	.word	0x7ff00000
 800220c:	08002cd9 	.word	0x08002cd9
 8002210:	433fffff 	.word	0x433fffff
 8002214:	3fefffff 	.word	0x3fefffff
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	3fe00000 	.word	0x3fe00000
 8002220:	41e00000 	.word	0x41e00000
 8002224:	3feffffe 	.word	0x3feffffe
 8002228:	3fd00000 	.word	0x3fd00000
 800222c:	43400000 	.word	0x43400000
 8002230:	0003988e 	.word	0x0003988e
 8002234:	000bb679 	.word	0x000bb679
 8002238:	f04f 0a01 	mov.w	sl, #1
 800223c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002240:	930c      	str	r3, [sp, #48]	; 0x30
 8002242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002244:	4bd0      	ldr	r3, [pc, #832]	; (8002588 <__ieee754_pow+0x698>)
 8002246:	4413      	add	r3, r2
 8002248:	cb18      	ldmia	r3, {r3, r4}
 800224a:	4629      	mov	r1, r5
 800224c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8002250:	461a      	mov	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002258:	f7fd ffba 	bl	80001d0 <__aeabi_dsub>
 800225c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002260:	4606      	mov	r6, r0
 8002262:	460f      	mov	r7, r1
 8002264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002268:	f7fd ffb4 	bl	80001d4 <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	2000      	movs	r0, #0
 8002272:	49c6      	ldr	r1, [pc, #792]	; (800258c <__ieee754_pow+0x69c>)
 8002274:	f7fe fa8a 	bl	800078c <__aeabi_ddiv>
 8002278:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4630      	mov	r0, r6
 8002282:	4639      	mov	r1, r7
 8002284:	f7fe f958 	bl	8000538 <__aeabi_dmul>
 8002288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800228c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002290:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002294:	2300      	movs	r3, #0
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800229c:	106d      	asrs	r5, r5, #1
 800229e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80022a2:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80022a6:	2200      	movs	r2, #0
 80022a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80022ac:	4640      	mov	r0, r8
 80022ae:	4649      	mov	r1, r9
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	f7fe f940 	bl	8000538 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4630      	mov	r0, r6
 80022be:	4639      	mov	r1, r7
 80022c0:	f7fd ff86 	bl	80001d0 <__aeabi_dsub>
 80022c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80022c8:	4606      	mov	r6, r0
 80022ca:	460f      	mov	r7, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fd ff7e 	bl	80001d0 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80022dc:	f7fd ff78 	bl	80001d0 <__aeabi_dsub>
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	f7fe f928 	bl	8000538 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4630      	mov	r0, r6
 80022ee:	4639      	mov	r1, r7
 80022f0:	f7fd ff6e 	bl	80001d0 <__aeabi_dsub>
 80022f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80022f8:	f7fe f91e 	bl	8000538 <__aeabi_dmul>
 80022fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002300:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe f916 	bl	8000538 <__aeabi_dmul>
 800230c:	a38c      	add	r3, pc, #560	; (adr r3, 8002540 <__ieee754_pow+0x650>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
 8002316:	f7fe f90f 	bl	8000538 <__aeabi_dmul>
 800231a:	a38b      	add	r3, pc, #556	; (adr r3, 8002548 <__ieee754_pow+0x658>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fd ff58 	bl	80001d4 <__adddf3>
 8002324:	4622      	mov	r2, r4
 8002326:	462b      	mov	r3, r5
 8002328:	f7fe f906 	bl	8000538 <__aeabi_dmul>
 800232c:	a388      	add	r3, pc, #544	; (adr r3, 8002550 <__ieee754_pow+0x660>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fd ff4f 	bl	80001d4 <__adddf3>
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f7fe f8fd 	bl	8000538 <__aeabi_dmul>
 800233e:	a386      	add	r3, pc, #536	; (adr r3, 8002558 <__ieee754_pow+0x668>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ff46 	bl	80001d4 <__adddf3>
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	f7fe f8f4 	bl	8000538 <__aeabi_dmul>
 8002350:	a383      	add	r3, pc, #524	; (adr r3, 8002560 <__ieee754_pow+0x670>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fd ff3d 	bl	80001d4 <__adddf3>
 800235a:	4622      	mov	r2, r4
 800235c:	462b      	mov	r3, r5
 800235e:	f7fe f8eb 	bl	8000538 <__aeabi_dmul>
 8002362:	a381      	add	r3, pc, #516	; (adr r3, 8002568 <__ieee754_pow+0x678>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fd ff34 	bl	80001d4 <__adddf3>
 800236c:	4622      	mov	r2, r4
 800236e:	4606      	mov	r6, r0
 8002370:	460f      	mov	r7, r1
 8002372:	462b      	mov	r3, r5
 8002374:	4620      	mov	r0, r4
 8002376:	4629      	mov	r1, r5
 8002378:	f7fe f8de 	bl	8000538 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4630      	mov	r0, r6
 8002382:	4639      	mov	r1, r7
 8002384:	f7fe f8d8 	bl	8000538 <__aeabi_dmul>
 8002388:	4642      	mov	r2, r8
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	464b      	mov	r3, r9
 8002390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002394:	f7fd ff1e 	bl	80001d4 <__adddf3>
 8002398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800239c:	f7fe f8cc 	bl	8000538 <__aeabi_dmul>
 80023a0:	4622      	mov	r2, r4
 80023a2:	462b      	mov	r3, r5
 80023a4:	f7fd ff16 	bl	80001d4 <__adddf3>
 80023a8:	4642      	mov	r2, r8
 80023aa:	4606      	mov	r6, r0
 80023ac:	460f      	mov	r7, r1
 80023ae:	464b      	mov	r3, r9
 80023b0:	4640      	mov	r0, r8
 80023b2:	4649      	mov	r1, r9
 80023b4:	f7fe f8c0 	bl	8000538 <__aeabi_dmul>
 80023b8:	2200      	movs	r2, #0
 80023ba:	4b75      	ldr	r3, [pc, #468]	; (8002590 <__ieee754_pow+0x6a0>)
 80023bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80023c0:	f7fd ff08 	bl	80001d4 <__adddf3>
 80023c4:	4632      	mov	r2, r6
 80023c6:	463b      	mov	r3, r7
 80023c8:	f7fd ff04 	bl	80001d4 <__adddf3>
 80023cc:	9802      	ldr	r0, [sp, #8]
 80023ce:	460d      	mov	r5, r1
 80023d0:	4604      	mov	r4, r0
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fe f8ad 	bl	8000538 <__aeabi_dmul>
 80023de:	2200      	movs	r2, #0
 80023e0:	4680      	mov	r8, r0
 80023e2:	4689      	mov	r9, r1
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <__ieee754_pow+0x6a0>)
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd fef1 	bl	80001d0 <__aeabi_dsub>
 80023ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80023f2:	f7fd feed 	bl	80001d0 <__aeabi_dsub>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4630      	mov	r0, r6
 80023fc:	4639      	mov	r1, r7
 80023fe:	f7fd fee7 	bl	80001d0 <__aeabi_dsub>
 8002402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002406:	f7fe f897 	bl	8000538 <__aeabi_dmul>
 800240a:	4622      	mov	r2, r4
 800240c:	4606      	mov	r6, r0
 800240e:	460f      	mov	r7, r1
 8002410:	462b      	mov	r3, r5
 8002412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002416:	f7fe f88f 	bl	8000538 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4630      	mov	r0, r6
 8002420:	4639      	mov	r1, r7
 8002422:	f7fd fed7 	bl	80001d4 <__adddf3>
 8002426:	4606      	mov	r6, r0
 8002428:	460f      	mov	r7, r1
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4640      	mov	r0, r8
 8002430:	4649      	mov	r1, r9
 8002432:	f7fd fecf 	bl	80001d4 <__adddf3>
 8002436:	9802      	ldr	r0, [sp, #8]
 8002438:	a34d      	add	r3, pc, #308	; (adr r3, 8002570 <__ieee754_pow+0x680>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	f7fe f879 	bl	8000538 <__aeabi_dmul>
 8002446:	4642      	mov	r2, r8
 8002448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800244c:	464b      	mov	r3, r9
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fd febd 	bl	80001d0 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4630      	mov	r0, r6
 800245c:	4639      	mov	r1, r7
 800245e:	f7fd feb7 	bl	80001d0 <__aeabi_dsub>
 8002462:	a345      	add	r3, pc, #276	; (adr r3, 8002578 <__ieee754_pow+0x688>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f866 	bl	8000538 <__aeabi_dmul>
 800246c:	a344      	add	r3, pc, #272	; (adr r3, 8002580 <__ieee754_pow+0x690>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	4606      	mov	r6, r0
 8002474:	460f      	mov	r7, r1
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fe f85d 	bl	8000538 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4630      	mov	r0, r6
 8002484:	4639      	mov	r1, r7
 8002486:	f7fd fea5 	bl	80001d4 <__adddf3>
 800248a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <__ieee754_pow+0x6a4>)
 800248e:	4413      	add	r3, r2
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fd fe9e 	bl	80001d4 <__adddf3>
 8002498:	4604      	mov	r4, r0
 800249a:	9807      	ldr	r0, [sp, #28]
 800249c:	460d      	mov	r5, r1
 800249e:	f7fd ffe5 	bl	800046c <__aeabi_i2d>
 80024a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <__ieee754_pow+0x6a8>)
 80024a6:	4413      	add	r3, r2
 80024a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80024ac:	4606      	mov	r6, r0
 80024ae:	460f      	mov	r7, r1
 80024b0:	4622      	mov	r2, r4
 80024b2:	462b      	mov	r3, r5
 80024b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80024b8:	f7fd fe8c 	bl	80001d4 <__adddf3>
 80024bc:	4642      	mov	r2, r8
 80024be:	464b      	mov	r3, r9
 80024c0:	f7fd fe88 	bl	80001d4 <__adddf3>
 80024c4:	4632      	mov	r2, r6
 80024c6:	463b      	mov	r3, r7
 80024c8:	f7fd fe84 	bl	80001d4 <__adddf3>
 80024cc:	9802      	ldr	r0, [sp, #8]
 80024ce:	4632      	mov	r2, r6
 80024d0:	463b      	mov	r3, r7
 80024d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80024d6:	f7fd fe7b 	bl	80001d0 <__aeabi_dsub>
 80024da:	4642      	mov	r2, r8
 80024dc:	464b      	mov	r3, r9
 80024de:	f7fd fe77 	bl	80001d0 <__aeabi_dsub>
 80024e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80024e6:	f7fd fe73 	bl	80001d0 <__aeabi_dsub>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fd fe6d 	bl	80001d0 <__aeabi_dsub>
 80024f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024f8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80024fc:	4313      	orrs	r3, r2
 80024fe:	bf0c      	ite	eq
 8002500:	4c26      	ldreq	r4, [pc, #152]	; (800259c <__ieee754_pow+0x6ac>)
 8002502:	4c22      	ldrne	r4, [pc, #136]	; (800258c <__ieee754_pow+0x69c>)
 8002504:	2300      	movs	r3, #0
 8002506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800250a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800250e:	2400      	movs	r4, #0
 8002510:	4606      	mov	r6, r0
 8002512:	460f      	mov	r7, r1
 8002514:	4622      	mov	r2, r4
 8002516:	462b      	mov	r3, r5
 8002518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800251c:	f7fd fe58 	bl	80001d0 <__aeabi_dsub>
 8002520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002524:	f7fe f808 	bl	8000538 <__aeabi_dmul>
 8002528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800252c:	4680      	mov	r8, r0
 800252e:	4689      	mov	r9, r1
 8002530:	4630      	mov	r0, r6
 8002532:	4639      	mov	r1, r7
 8002534:	f7fe f800 	bl	8000538 <__aeabi_dmul>
 8002538:	e032      	b.n	80025a0 <__ieee754_pow+0x6b0>
 800253a:	bf00      	nop
 800253c:	f3af 8000 	nop.w
 8002540:	4a454eef 	.word	0x4a454eef
 8002544:	3fca7e28 	.word	0x3fca7e28
 8002548:	93c9db65 	.word	0x93c9db65
 800254c:	3fcd864a 	.word	0x3fcd864a
 8002550:	a91d4101 	.word	0xa91d4101
 8002554:	3fd17460 	.word	0x3fd17460
 8002558:	518f264d 	.word	0x518f264d
 800255c:	3fd55555 	.word	0x3fd55555
 8002560:	db6fabff 	.word	0xdb6fabff
 8002564:	3fdb6db6 	.word	0x3fdb6db6
 8002568:	33333303 	.word	0x33333303
 800256c:	3fe33333 	.word	0x3fe33333
 8002570:	e0000000 	.word	0xe0000000
 8002574:	3feec709 	.word	0x3feec709
 8002578:	dc3a03fd 	.word	0xdc3a03fd
 800257c:	3feec709 	.word	0x3feec709
 8002580:	145b01f5 	.word	0x145b01f5
 8002584:	be3e2fe0 	.word	0xbe3e2fe0
 8002588:	08002d08 	.word	0x08002d08
 800258c:	3ff00000 	.word	0x3ff00000
 8002590:	40080000 	.word	0x40080000
 8002594:	08002cf8 	.word	0x08002cf8
 8002598:	08002ce8 	.word	0x08002ce8
 800259c:	bff00000 	.word	0xbff00000
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4640      	mov	r0, r8
 80025a6:	4649      	mov	r1, r9
 80025a8:	f7fd fe14 	bl	80001d4 <__adddf3>
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	4680      	mov	r8, r0
 80025b2:	4689      	mov	r9, r1
 80025b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80025b8:	f7fd ffbe 	bl	8000538 <__aeabi_dmul>
 80025bc:	460b      	mov	r3, r1
 80025be:	4604      	mov	r4, r0
 80025c0:	460d      	mov	r5, r1
 80025c2:	4602      	mov	r2, r0
 80025c4:	4649      	mov	r1, r9
 80025c6:	4640      	mov	r0, r8
 80025c8:	e9cd 4500 	strd	r4, r5, [sp]
 80025cc:	f7fd fe02 	bl	80001d4 <__adddf3>
 80025d0:	4bbb      	ldr	r3, [pc, #748]	; (80028c0 <__ieee754_pow+0x9d0>)
 80025d2:	4299      	cmp	r1, r3
 80025d4:	4682      	mov	sl, r0
 80025d6:	460f      	mov	r7, r1
 80025d8:	460e      	mov	r6, r1
 80025da:	dd26      	ble.n	800262a <__ieee754_pow+0x73a>
 80025dc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80025e0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80025e4:	4303      	orrs	r3, r0
 80025e6:	d115      	bne.n	8002614 <__ieee754_pow+0x724>
 80025e8:	a39f      	add	r3, pc, #636	; (adr r3, 8002868 <__ieee754_pow+0x978>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4640      	mov	r0, r8
 80025f0:	4649      	mov	r1, r9
 80025f2:	f7fd fdef 	bl	80001d4 <__adddf3>
 80025f6:	4622      	mov	r2, r4
 80025f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80025fc:	462b      	mov	r3, r5
 80025fe:	4650      	mov	r0, sl
 8002600:	4639      	mov	r1, r7
 8002602:	f7fd fde5 	bl	80001d0 <__aeabi_dsub>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800260e:	f7fe fa23 	bl	8000a58 <__aeabi_dcmpgt>
 8002612:	b348      	cbz	r0, 8002668 <__ieee754_pow+0x778>
 8002614:	a396      	add	r3, pc, #600	; (adr r3, 8002870 <__ieee754_pow+0x980>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800261e:	f7fd ff8b 	bl	8000538 <__aeabi_dmul>
 8002622:	a393      	add	r3, pc, #588	; (adr r3, 8002870 <__ieee754_pow+0x980>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	e107      	b.n	800283a <__ieee754_pow+0x94a>
 800262a:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <__ieee754_pow+0x9d4>)
 800262c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8002630:	429f      	cmp	r7, r3
 8002632:	dd19      	ble.n	8002668 <__ieee754_pow+0x778>
 8002634:	4ba4      	ldr	r3, [pc, #656]	; (80028c8 <__ieee754_pow+0x9d8>)
 8002636:	440b      	add	r3, r1
 8002638:	4303      	orrs	r3, r0
 800263a:	d10a      	bne.n	8002652 <__ieee754_pow+0x762>
 800263c:	4622      	mov	r2, r4
 800263e:	462b      	mov	r3, r5
 8002640:	f7fd fdc6 	bl	80001d0 <__aeabi_dsub>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4640      	mov	r0, r8
 800264a:	4649      	mov	r1, r9
 800264c:	f7fe f9f0 	bl	8000a30 <__aeabi_dcmple>
 8002650:	b150      	cbz	r0, 8002668 <__ieee754_pow+0x778>
 8002652:	a389      	add	r3, pc, #548	; (adr r3, 8002878 <__ieee754_pow+0x988>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800265c:	f7fd ff6c 	bl	8000538 <__aeabi_dmul>
 8002660:	a385      	add	r3, pc, #532	; (adr r3, 8002878 <__ieee754_pow+0x988>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e0e8      	b.n	800283a <__ieee754_pow+0x94a>
 8002668:	4a98      	ldr	r2, [pc, #608]	; (80028cc <__ieee754_pow+0x9dc>)
 800266a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800266e:	4293      	cmp	r3, r2
 8002670:	dd25      	ble.n	80026be <__ieee754_pow+0x7ce>
 8002672:	151b      	asrs	r3, r3, #20
 8002674:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002678:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800267c:	fa4a f303 	asr.w	r3, sl, r3
 8002680:	4433      	add	r3, r6
 8002682:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002686:	4f92      	ldr	r7, [pc, #584]	; (80028d0 <__ieee754_pow+0x9e0>)
 8002688:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800268c:	4117      	asrs	r7, r2
 800268e:	ea23 0107 	bic.w	r1, r3, r7
 8002692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002696:	ea43 030a 	orr.w	r3, r3, sl
 800269a:	2000      	movs	r0, #0
 800269c:	f1c2 0a14 	rsb	sl, r2, #20
 80026a0:	fa43 fa0a 	asr.w	sl, r3, sl
 80026a4:	2e00      	cmp	r6, #0
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4620      	mov	r0, r4
 80026ac:	4629      	mov	r1, r5
 80026ae:	bfb8      	it	lt
 80026b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80026b4:	f7fd fd8c 	bl	80001d0 <__aeabi_dsub>
 80026b8:	e9cd 0100 	strd	r0, r1, [sp]
 80026bc:	e001      	b.n	80026c2 <__ieee754_pow+0x7d2>
 80026be:	f04f 0a00 	mov.w	sl, #0
 80026c2:	4642      	mov	r2, r8
 80026c4:	464b      	mov	r3, r9
 80026c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80026ca:	f7fd fd83 	bl	80001d4 <__adddf3>
 80026ce:	2000      	movs	r0, #0
 80026d0:	a36b      	add	r3, pc, #428	; (adr r3, 8002880 <__ieee754_pow+0x990>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
 80026da:	f7fd ff2d 	bl	8000538 <__aeabi_dmul>
 80026de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80026e2:	4606      	mov	r6, r0
 80026e4:	460f      	mov	r7, r1
 80026e6:	4620      	mov	r0, r4
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7fd fd71 	bl	80001d0 <__aeabi_dsub>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4640      	mov	r0, r8
 80026f4:	4649      	mov	r1, r9
 80026f6:	f7fd fd6b 	bl	80001d0 <__aeabi_dsub>
 80026fa:	a363      	add	r3, pc, #396	; (adr r3, 8002888 <__ieee754_pow+0x998>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd ff1a 	bl	8000538 <__aeabi_dmul>
 8002704:	a362      	add	r3, pc, #392	; (adr r3, 8002890 <__ieee754_pow+0x9a0>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	4680      	mov	r8, r0
 800270c:	4689      	mov	r9, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fd ff11 	bl	8000538 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4640      	mov	r0, r8
 800271c:	4649      	mov	r1, r9
 800271e:	f7fd fd59 	bl	80001d4 <__adddf3>
 8002722:	4604      	mov	r4, r0
 8002724:	460d      	mov	r5, r1
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4630      	mov	r0, r6
 800272c:	4639      	mov	r1, r7
 800272e:	f7fd fd51 	bl	80001d4 <__adddf3>
 8002732:	4632      	mov	r2, r6
 8002734:	463b      	mov	r3, r7
 8002736:	4680      	mov	r8, r0
 8002738:	4689      	mov	r9, r1
 800273a:	f7fd fd49 	bl	80001d0 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4620      	mov	r0, r4
 8002744:	4629      	mov	r1, r5
 8002746:	f7fd fd43 	bl	80001d0 <__aeabi_dsub>
 800274a:	4642      	mov	r2, r8
 800274c:	4606      	mov	r6, r0
 800274e:	460f      	mov	r7, r1
 8002750:	464b      	mov	r3, r9
 8002752:	4640      	mov	r0, r8
 8002754:	4649      	mov	r1, r9
 8002756:	f7fd feef 	bl	8000538 <__aeabi_dmul>
 800275a:	a34f      	add	r3, pc, #316	; (adr r3, 8002898 <__ieee754_pow+0x9a8>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	4604      	mov	r4, r0
 8002762:	460d      	mov	r5, r1
 8002764:	f7fd fee8 	bl	8000538 <__aeabi_dmul>
 8002768:	a34d      	add	r3, pc, #308	; (adr r3, 80028a0 <__ieee754_pow+0x9b0>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd fd2f 	bl	80001d0 <__aeabi_dsub>
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f7fd fedf 	bl	8000538 <__aeabi_dmul>
 800277a:	a34b      	add	r3, pc, #300	; (adr r3, 80028a8 <__ieee754_pow+0x9b8>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fd fd28 	bl	80001d4 <__adddf3>
 8002784:	4622      	mov	r2, r4
 8002786:	462b      	mov	r3, r5
 8002788:	f7fd fed6 	bl	8000538 <__aeabi_dmul>
 800278c:	a348      	add	r3, pc, #288	; (adr r3, 80028b0 <__ieee754_pow+0x9c0>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd fd1d 	bl	80001d0 <__aeabi_dsub>
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	f7fd fecd 	bl	8000538 <__aeabi_dmul>
 800279e:	a346      	add	r3, pc, #280	; (adr r3, 80028b8 <__ieee754_pow+0x9c8>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd fd16 	bl	80001d4 <__adddf3>
 80027a8:	4622      	mov	r2, r4
 80027aa:	462b      	mov	r3, r5
 80027ac:	f7fd fec4 	bl	8000538 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4640      	mov	r0, r8
 80027b6:	4649      	mov	r1, r9
 80027b8:	f7fd fd0a 	bl	80001d0 <__aeabi_dsub>
 80027bc:	4604      	mov	r4, r0
 80027be:	460d      	mov	r5, r1
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4640      	mov	r0, r8
 80027c6:	4649      	mov	r1, r9
 80027c8:	f7fd feb6 	bl	8000538 <__aeabi_dmul>
 80027cc:	2200      	movs	r2, #0
 80027ce:	e9cd 0100 	strd	r0, r1, [sp]
 80027d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7fd fcf9 	bl	80001d0 <__aeabi_dsub>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027e6:	f7fd ffd1 	bl	800078c <__aeabi_ddiv>
 80027ea:	4632      	mov	r2, r6
 80027ec:	4604      	mov	r4, r0
 80027ee:	460d      	mov	r5, r1
 80027f0:	463b      	mov	r3, r7
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fd fe9f 	bl	8000538 <__aeabi_dmul>
 80027fa:	4632      	mov	r2, r6
 80027fc:	463b      	mov	r3, r7
 80027fe:	f7fd fce9 	bl	80001d4 <__adddf3>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fce1 	bl	80001d0 <__aeabi_dsub>
 800280e:	4642      	mov	r2, r8
 8002810:	464b      	mov	r3, r9
 8002812:	f7fd fcdd 	bl	80001d0 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	2000      	movs	r0, #0
 800281c:	492d      	ldr	r1, [pc, #180]	; (80028d4 <__ieee754_pow+0x9e4>)
 800281e:	f7fd fcd7 	bl	80001d0 <__aeabi_dsub>
 8002822:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002826:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800282a:	da03      	bge.n	8002834 <__ieee754_pow+0x944>
 800282c:	4652      	mov	r2, sl
 800282e:	f000 f99b 	bl	8002b68 <scalbn>
 8002832:	e000      	b.n	8002836 <__ieee754_pow+0x946>
 8002834:	4621      	mov	r1, r4
 8002836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800283a:	f7fd fe7d 	bl	8000538 <__aeabi_dmul>
 800283e:	e008      	b.n	8002852 <__ieee754_pow+0x962>
 8002840:	4603      	mov	r3, r0
 8002842:	4924      	ldr	r1, [pc, #144]	; (80028d4 <__ieee754_pow+0x9e4>)
 8002844:	e00c      	b.n	8002860 <__ieee754_pow+0x970>
 8002846:	9b00      	ldr	r3, [sp, #0]
 8002848:	9901      	ldr	r1, [sp, #4]
 800284a:	e009      	b.n	8002860 <__ieee754_pow+0x970>
 800284c:	463b      	mov	r3, r7
 800284e:	4621      	mov	r1, r4
 8002850:	e006      	b.n	8002860 <__ieee754_pow+0x970>
 8002852:	4603      	mov	r3, r0
 8002854:	e004      	b.n	8002860 <__ieee754_pow+0x970>
 8002856:	42ae      	cmp	r6, r5
 8002858:	f73f ab71 	bgt.w	8001f3e <__ieee754_pow+0x4e>
 800285c:	f7ff bb64 	b.w	8001f28 <__ieee754_pow+0x38>
 8002860:	4618      	mov	r0, r3
 8002862:	b011      	add	sp, #68	; 0x44
 8002864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002868:	652b82fe 	.word	0x652b82fe
 800286c:	3c971547 	.word	0x3c971547
 8002870:	8800759c 	.word	0x8800759c
 8002874:	7e37e43c 	.word	0x7e37e43c
 8002878:	c2f8f359 	.word	0xc2f8f359
 800287c:	01a56e1f 	.word	0x01a56e1f
 8002880:	00000000 	.word	0x00000000
 8002884:	3fe62e43 	.word	0x3fe62e43
 8002888:	fefa39ef 	.word	0xfefa39ef
 800288c:	3fe62e42 	.word	0x3fe62e42
 8002890:	0ca86c39 	.word	0x0ca86c39
 8002894:	be205c61 	.word	0xbe205c61
 8002898:	72bea4d0 	.word	0x72bea4d0
 800289c:	3e663769 	.word	0x3e663769
 80028a0:	c5d26bf1 	.word	0xc5d26bf1
 80028a4:	3ebbbd41 	.word	0x3ebbbd41
 80028a8:	af25de2c 	.word	0xaf25de2c
 80028ac:	3f11566a 	.word	0x3f11566a
 80028b0:	16bebd93 	.word	0x16bebd93
 80028b4:	3f66c16c 	.word	0x3f66c16c
 80028b8:	5555553e 	.word	0x5555553e
 80028bc:	3fc55555 	.word	0x3fc55555
 80028c0:	408fffff 	.word	0x408fffff
 80028c4:	4090cbff 	.word	0x4090cbff
 80028c8:	3f6f3400 	.word	0x3f6f3400
 80028cc:	3fe00000 	.word	0x3fe00000
 80028d0:	000fffff 	.word	0x000fffff
 80028d4:	3ff00000 	.word	0x3ff00000

080028d8 <__ieee754_sqrt>:
 80028d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028dc:	4f52      	ldr	r7, [pc, #328]	; (8002a28 <__ieee754_sqrt+0x150>)
 80028de:	f8df c148 	ldr.w	ip, [pc, #328]	; 8002a28 <__ieee754_sqrt+0x150>
 80028e2:	400f      	ands	r7, r1
 80028e4:	4567      	cmp	r7, ip
 80028e6:	4606      	mov	r6, r0
 80028e8:	460d      	mov	r5, r1
 80028ea:	4686      	mov	lr, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	460b      	mov	r3, r1
 80028f0:	4602      	mov	r2, r0
 80028f2:	d108      	bne.n	8002906 <__ieee754_sqrt+0x2e>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	f7fd fe1e 	bl	8000538 <__aeabi_dmul>
 80028fc:	4632      	mov	r2, r6
 80028fe:	462b      	mov	r3, r5
 8002900:	f7fd fc68 	bl	80001d4 <__adddf3>
 8002904:	e08d      	b.n	8002a22 <__ieee754_sqrt+0x14a>
 8002906:	2900      	cmp	r1, #0
 8002908:	dc0e      	bgt.n	8002928 <__ieee754_sqrt+0x50>
 800290a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800290e:	4307      	orrs	r7, r0
 8002910:	f000 8087 	beq.w	8002a22 <__ieee754_sqrt+0x14a>
 8002914:	b141      	cbz	r1, 8002928 <__ieee754_sqrt+0x50>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	f7fd fc59 	bl	80001d0 <__aeabi_dsub>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	f7fd ff33 	bl	800078c <__aeabi_ddiv>
 8002926:	e07c      	b.n	8002a22 <__ieee754_sqrt+0x14a>
 8002928:	1524      	asrs	r4, r4, #20
 800292a:	d112      	bne.n	8002952 <__ieee754_sqrt+0x7a>
 800292c:	b91b      	cbnz	r3, 8002936 <__ieee754_sqrt+0x5e>
 800292e:	0ad3      	lsrs	r3, r2, #11
 8002930:	3c15      	subs	r4, #21
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	e7fa      	b.n	800292c <__ieee754_sqrt+0x54>
 8002936:	2100      	movs	r1, #0
 8002938:	02d8      	lsls	r0, r3, #11
 800293a:	d402      	bmi.n	8002942 <__ieee754_sqrt+0x6a>
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	3101      	adds	r1, #1
 8002940:	e7fa      	b.n	8002938 <__ieee754_sqrt+0x60>
 8002942:	1e48      	subs	r0, r1, #1
 8002944:	1a24      	subs	r4, r4, r0
 8002946:	f1c1 0020 	rsb	r0, r1, #32
 800294a:	fa22 f000 	lsr.w	r0, r2, r0
 800294e:	4303      	orrs	r3, r0
 8002950:	408a      	lsls	r2, r1
 8002952:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295a:	07e1      	lsls	r1, r4, #31
 800295c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002960:	bf42      	ittt	mi
 8002962:	005b      	lslmi	r3, r3, #1
 8002964:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 8002968:	0052      	lslmi	r2, r2, #1
 800296a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 800296e:	f04f 0e00 	mov.w	lr, #0
 8002972:	440b      	add	r3, r1
 8002974:	0056      	lsls	r6, r2, #1
 8002976:	1064      	asrs	r4, r4, #1
 8002978:	2216      	movs	r2, #22
 800297a:	4677      	mov	r7, lr
 800297c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002980:	1878      	adds	r0, r7, r1
 8002982:	4298      	cmp	r0, r3
 8002984:	bfde      	ittt	le
 8002986:	1a1b      	suble	r3, r3, r0
 8002988:	1847      	addle	r7, r0, r1
 800298a:	448e      	addle	lr, r1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	3a01      	subs	r2, #1
 8002990:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8002994:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002998:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800299c:	d1f0      	bne.n	8002980 <__ieee754_sqrt+0xa8>
 800299e:	2520      	movs	r5, #32
 80029a0:	4694      	mov	ip, r2
 80029a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029a6:	429f      	cmp	r7, r3
 80029a8:	eb01 000c 	add.w	r0, r1, ip
 80029ac:	db02      	blt.n	80029b4 <__ieee754_sqrt+0xdc>
 80029ae:	d116      	bne.n	80029de <__ieee754_sqrt+0x106>
 80029b0:	42b0      	cmp	r0, r6
 80029b2:	d813      	bhi.n	80029dc <__ieee754_sqrt+0x104>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	eb00 0c01 	add.w	ip, r0, r1
 80029ba:	da05      	bge.n	80029c8 <__ieee754_sqrt+0xf0>
 80029bc:	f1bc 0f00 	cmp.w	ip, #0
 80029c0:	db02      	blt.n	80029c8 <__ieee754_sqrt+0xf0>
 80029c2:	f107 0801 	add.w	r8, r7, #1
 80029c6:	e000      	b.n	80029ca <__ieee754_sqrt+0xf2>
 80029c8:	46b8      	mov	r8, r7
 80029ca:	1bdb      	subs	r3, r3, r7
 80029cc:	42b0      	cmp	r0, r6
 80029ce:	bf88      	it	hi
 80029d0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80029d4:	1a36      	subs	r6, r6, r0
 80029d6:	440a      	add	r2, r1
 80029d8:	4647      	mov	r7, r8
 80029da:	e000      	b.n	80029de <__ieee754_sqrt+0x106>
 80029dc:	463b      	mov	r3, r7
 80029de:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 80029e2:	3d01      	subs	r5, #1
 80029e4:	4403      	add	r3, r0
 80029e6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80029ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80029ee:	d1da      	bne.n	80029a6 <__ieee754_sqrt+0xce>
 80029f0:	4333      	orrs	r3, r6
 80029f2:	d007      	beq.n	8002a04 <__ieee754_sqrt+0x12c>
 80029f4:	1c53      	adds	r3, r2, #1
 80029f6:	bf13      	iteet	ne
 80029f8:	f002 0301 	andne.w	r3, r2, #1
 80029fc:	f10e 0e01 	addeq.w	lr, lr, #1
 8002a00:	462a      	moveq	r2, r5
 8002a02:	18d2      	addne	r2, r2, r3
 8002a04:	ea4f 036e 	mov.w	r3, lr, asr #1
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002a0e:	f01e 0f01 	tst.w	lr, #1
 8002a12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002a16:	bf18      	it	ne
 8002a18:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 8002a1c:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 8002a20:	4610      	mov	r0, r2
 8002a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a26:	bf00      	nop
 8002a28:	7ff00000 	.word	0x7ff00000

08002a2c <fabs>:
 8002a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002a30:	4770      	bx	lr

08002a32 <finite>:
 8002a32:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002a36:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8002a3a:	0fc0      	lsrs	r0, r0, #31
 8002a3c:	4770      	bx	lr

08002a3e <matherr>:
 8002a3e:	2000      	movs	r0, #0
 8002a40:	4770      	bx	lr
	...

08002a44 <nan>:
 8002a44:	2000      	movs	r0, #0
 8002a46:	4901      	ldr	r1, [pc, #4]	; (8002a4c <nan+0x8>)
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	7ff80000 	.word	0x7ff80000

08002a50 <rint>:
 8002a50:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8002a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a56:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 8002a5a:	f1be 0f13 	cmp.w	lr, #19
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4607      	mov	r7, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	4606      	mov	r6, r0
 8002a68:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8002a6c:	dc44      	bgt.n	8002af8 <rint+0xa8>
 8002a6e:	f1be 0f00 	cmp.w	lr, #0
 8002a72:	da26      	bge.n	8002ac2 <rint+0x72>
 8002a74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002a78:	4301      	orrs	r1, r0
 8002a7a:	d06d      	beq.n	8002b58 <rint+0x108>
 8002a7c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8002a80:	430f      	orrs	r7, r1
 8002a82:	427b      	negs	r3, r7
 8002a84:	431f      	orrs	r7, r3
 8002a86:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <rint+0x110>)
 8002a88:	0b3f      	lsrs	r7, r7, #12
 8002a8a:	0c64      	lsrs	r4, r4, #17
 8002a8c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8002a90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002a94:	0464      	lsls	r4, r4, #17
 8002a96:	ea47 0104 	orr.w	r1, r7, r4
 8002a9a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	f7fd fb97 	bl	80001d4 <__adddf3>
 8002aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8002aaa:	4632      	mov	r2, r6
 8002aac:	463b      	mov	r3, r7
 8002aae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ab2:	f7fd fb8d 	bl	80001d0 <__aeabi_dsub>
 8002ab6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002aba:	4602      	mov	r2, r0
 8002abc:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8002ac0:	e04a      	b.n	8002b58 <rint+0x108>
 8002ac2:	4928      	ldr	r1, [pc, #160]	; (8002b64 <rint+0x114>)
 8002ac4:	fa41 f10e 	asr.w	r1, r1, lr
 8002ac8:	ea03 0001 	and.w	r0, r3, r1
 8002acc:	4310      	orrs	r0, r2
 8002ace:	d043      	beq.n	8002b58 <rint+0x108>
 8002ad0:	084b      	lsrs	r3, r1, #1
 8002ad2:	ea04 0203 	and.w	r2, r4, r3
 8002ad6:	ea52 0607 	orrs.w	r6, r2, r7
 8002ada:	d029      	beq.n	8002b30 <rint+0xe0>
 8002adc:	ea24 0303 	bic.w	r3, r4, r3
 8002ae0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8002ae4:	f1be 0f13 	cmp.w	lr, #19
 8002ae8:	fa44 f40e 	asr.w	r4, r4, lr
 8002aec:	bf0c      	ite	eq
 8002aee:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8002af2:	2600      	movne	r6, #0
 8002af4:	431c      	orrs	r4, r3
 8002af6:	e01b      	b.n	8002b30 <rint+0xe0>
 8002af8:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 8002afc:	dd05      	ble.n	8002b0a <rint+0xba>
 8002afe:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8002b02:	d129      	bne.n	8002b58 <rint+0x108>
 8002b04:	f7fd fb66 	bl	80001d4 <__adddf3>
 8002b08:	e028      	b.n	8002b5c <rint+0x10c>
 8002b0a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8002b0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b12:	fa21 f10c 	lsr.w	r1, r1, ip
 8002b16:	4208      	tst	r0, r1
 8002b18:	d01e      	beq.n	8002b58 <rint+0x108>
 8002b1a:	084b      	lsrs	r3, r1, #1
 8002b1c:	4218      	tst	r0, r3
 8002b1e:	bf1f      	itttt	ne
 8002b20:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8002b24:	ea20 0303 	bicne.w	r3, r0, r3
 8002b28:	fa46 fc0c 	asrne.w	ip, r6, ip
 8002b2c:	ea4c 0603 	orrne.w	r6, ip, r3
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <rint+0x110>)
 8002b32:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002b36:	4621      	mov	r1, r4
 8002b38:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002b3c:	4630      	mov	r0, r6
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f7fd fb47 	bl	80001d4 <__adddf3>
 8002b46:	e9cd 0100 	strd	r0, r1, [sp]
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b52:	f7fd fb3d 	bl	80001d0 <__aeabi_dsub>
 8002b56:	e001      	b.n	8002b5c <rint+0x10c>
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	b003      	add	sp, #12
 8002b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b60:	08002d18 	.word	0x08002d18
 8002b64:	000fffff 	.word	0x000fffff

08002b68 <scalbn>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	4616      	mov	r6, r2
 8002b6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002b70:	4604      	mov	r4, r0
 8002b72:	460d      	mov	r5, r1
 8002b74:	460b      	mov	r3, r1
 8002b76:	b98a      	cbnz	r2, 8002b9c <scalbn+0x34>
 8002b78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	d050      	beq.n	8002c22 <scalbn+0xba>
 8002b80:	2200      	movs	r2, #0
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <scalbn+0xd0>)
 8002b84:	f7fd fcd8 	bl	8000538 <__aeabi_dmul>
 8002b88:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <scalbn+0xd4>)
 8002b8a:	4296      	cmp	r6, r2
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	460d      	mov	r5, r1
 8002b90:	460b      	mov	r3, r1
 8002b92:	db34      	blt.n	8002bfe <scalbn+0x96>
 8002b94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002b98:	3a36      	subs	r2, #54	; 0x36
 8002b9a:	e008      	b.n	8002bae <scalbn+0x46>
 8002b9c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8002ba0:	42ba      	cmp	r2, r7
 8002ba2:	d104      	bne.n	8002bae <scalbn+0x46>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	f7fd fb14 	bl	80001d4 <__adddf3>
 8002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bae:	4432      	add	r2, r6
 8002bb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002bb4:	428a      	cmp	r2, r1
 8002bb6:	dd02      	ble.n	8002bbe <scalbn+0x56>
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	e011      	b.n	8002be2 <scalbn+0x7a>
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	dd06      	ble.n	8002bd0 <scalbn+0x68>
 8002bc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002bc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002bce:	e028      	b.n	8002c22 <scalbn+0xba>
 8002bd0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002bd4:	da17      	bge.n	8002c06 <scalbn+0x9e>
 8002bd6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002bda:	429e      	cmp	r6, r3
 8002bdc:	4622      	mov	r2, r4
 8002bde:	462b      	mov	r3, r5
 8002be0:	dd08      	ble.n	8002bf4 <scalbn+0x8c>
 8002be2:	a111      	add	r1, pc, #68	; (adr r1, 8002c28 <scalbn+0xc0>)
 8002be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002be8:	f000 f82c 	bl	8002c44 <copysign>
 8002bec:	a30e      	add	r3, pc, #56	; (adr r3, 8002c28 <scalbn+0xc0>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	e013      	b.n	8002c1c <scalbn+0xb4>
 8002bf4:	a10e      	add	r1, pc, #56	; (adr r1, 8002c30 <scalbn+0xc8>)
 8002bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bfa:	f000 f823 	bl	8002c44 <copysign>
 8002bfe:	a30c      	add	r3, pc, #48	; (adr r3, 8002c30 <scalbn+0xc8>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e00a      	b.n	8002c1c <scalbn+0xb4>
 8002c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002c0a:	3236      	adds	r2, #54	; 0x36
 8002c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <scalbn+0xd8>)
 8002c16:	4620      	mov	r0, r4
 8002c18:	4629      	mov	r1, r5
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f7fd fc8c 	bl	8000538 <__aeabi_dmul>
 8002c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c28:	8800759c 	.word	0x8800759c
 8002c2c:	7e37e43c 	.word	0x7e37e43c
 8002c30:	c2f8f359 	.word	0xc2f8f359
 8002c34:	01a56e1f 	.word	0x01a56e1f
 8002c38:	43500000 	.word	0x43500000
 8002c3c:	ffff3cb0 	.word	0xffff3cb0
 8002c40:	3c900000 	.word	0x3c900000

08002c44 <copysign>:
 8002c44:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c4c:	ea42 0103 	orr.w	r1, r2, r3
 8002c50:	4770      	bx	lr
	...

08002c54 <__errno>:
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <__errno+0x8>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000e50 	.word	0x20000e50

08002c60 <_init>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	bf00      	nop
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr

08002c6c <_fini>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr
