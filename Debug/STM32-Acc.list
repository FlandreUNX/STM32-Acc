
C:\Users\Alan\Atollic\TrueSTUDIO\ARM_workspace_7.0\STM32-Acc\Debug\STM32-Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  7 .bss          000000ec  20000078  20000078  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00005400  20000164  20000164  00020078  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007c51  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001996  00000000  00000000  00027cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009c0  00000000  00000000  00029690  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003835  00000000  00000000  0002a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003105  00000000  00000000  0002e13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031242  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a28  00000000  00000000  000312c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002db4 	.word	0x08002db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08002db4 	.word	0x08002db4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	d1ed      	bne.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_fmul>:
 8000b78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b80:	bf1e      	ittt	ne
 8000b82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b86:	ea92 0f0c 	teqne	r2, ip
 8000b8a:	ea93 0f0c 	teqne	r3, ip
 8000b8e:	d06f      	beq.n	8000c70 <__aeabi_fmul+0xf8>
 8000b90:	441a      	add	r2, r3
 8000b92:	ea80 0c01 	eor.w	ip, r0, r1
 8000b96:	0240      	lsls	r0, r0, #9
 8000b98:	bf18      	it	ne
 8000b9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b9e:	d01e      	beq.n	8000bde <__aeabi_fmul+0x66>
 8000ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ba8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bac:	fba0 3101 	umull	r3, r1, r0, r1
 8000bb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bb8:	bf3e      	ittt	cc
 8000bba:	0049      	lslcc	r1, r1, #1
 8000bbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bc0:	005b      	lslcc	r3, r3, #1
 8000bc2:	ea40 0001 	orr.w	r0, r0, r1
 8000bc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bca:	2afd      	cmp	r2, #253	; 0xfd
 8000bcc:	d81d      	bhi.n	8000c0a <__aeabi_fmul+0x92>
 8000bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	4770      	bx	lr
 8000bde:	f090 0f00 	teq	r0, #0
 8000be2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000be6:	bf08      	it	eq
 8000be8:	0249      	lsleq	r1, r1, #9
 8000bea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bf2:	3a7f      	subs	r2, #127	; 0x7f
 8000bf4:	bfc2      	ittt	gt
 8000bf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfe:	4770      	bxgt	lr
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	dc5d      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c0c:	f112 0f19 	cmn.w	r2, #25
 8000c10:	bfdc      	itt	le
 8000c12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c16:	4770      	bxle	lr
 8000c18:	f1c2 0200 	rsb	r2, r2, #0
 8000c1c:	0041      	lsls	r1, r0, #1
 8000c1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c22:	f1c2 0220 	rsb	r2, r2, #32
 8000c26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c2e:	f140 0000 	adc.w	r0, r0, #0
 8000c32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c36:	bf08      	it	eq
 8000c38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c3c:	4770      	bx	lr
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0040      	lsleq	r0, r0, #1
 8000c4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4e:	3a01      	subeq	r2, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xce>
 8000c52:	ea40 000c 	orr.w	r0, r0, ip
 8000c56:	f093 0f00 	teq	r3, #0
 8000c5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5e:	bf02      	ittt	eq
 8000c60:	0049      	lsleq	r1, r1, #1
 8000c62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c66:	3b01      	subeq	r3, #1
 8000c68:	d0f9      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c6a:	ea41 010c 	orr.w	r1, r1, ip
 8000c6e:	e78f      	b.n	8000b90 <__aeabi_fmul+0x18>
 8000c70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c74:	ea92 0f0c 	teq	r2, ip
 8000c78:	bf18      	it	ne
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d00a      	beq.n	8000c96 <__aeabi_fmul+0x11e>
 8000c80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c84:	bf18      	it	ne
 8000c86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	d1d8      	bne.n	8000c3e <__aeabi_fmul+0xc6>
 8000c8c:	ea80 0001 	eor.w	r0, r0, r1
 8000c90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	bf17      	itett	ne
 8000c9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ca0:	4608      	moveq	r0, r1
 8000ca2:	f091 0f00 	teqne	r1, #0
 8000ca6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000caa:	d014      	beq.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	d101      	bne.n	8000cb6 <__aeabi_fmul+0x13e>
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	d10f      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cb6:	ea93 0f0c 	teq	r3, ip
 8000cba:	d103      	bne.n	8000cc4 <__aeabi_fmul+0x14c>
 8000cbc:	024b      	lsls	r3, r1, #9
 8000cbe:	bf18      	it	ne
 8000cc0:	4608      	movne	r0, r1
 8000cc2:	d108      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cc4:	ea80 0001 	eor.w	r0, r0, r1
 8000cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fdiv>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d069      	beq.n	8000dcc <__aeabi_fdiv+0xec>
 8000cf8:	eba2 0203 	sub.w	r2, r2, r3
 8000cfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000d00:	0249      	lsls	r1, r1, #9
 8000d02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d06:	d037      	beq.n	8000d78 <__aeabi_fdiv+0x98>
 8000d08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	bf38      	it	cc
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d26:	428b      	cmp	r3, r1
 8000d28:	bf24      	itt	cs
 8000d2a:	1a5b      	subcs	r3, r3, r1
 8000d2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d34:	bf24      	itt	cs
 8000d36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d42:	bf24      	itt	cs
 8000d44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d50:	bf24      	itt	cs
 8000d52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d62:	d1e0      	bne.n	8000d26 <__aeabi_fdiv+0x46>
 8000d64:	2afd      	cmp	r2, #253	; 0xfd
 8000d66:	f63f af50 	bhi.w	8000c0a <__aeabi_fmul+0x92>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d80:	327f      	adds	r2, #127	; 0x7f
 8000d82:	bfc2      	ittt	gt
 8000d84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8c:	4770      	bxgt	lr
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	3a01      	subs	r2, #1
 8000d98:	e737      	b.n	8000c0a <__aeabi_fmul+0x92>
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xc2>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fdiv+0xda>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e795      	b.n	8000cf8 <__aeabi_fdiv+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d108      	bne.n	8000de8 <__aeabi_fdiv+0x108>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	f47f af7d 	bne.w	8000cd6 <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	f47f af70 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e776      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000de8:	ea93 0f0c 	teq	r3, ip
 8000dec:	d104      	bne.n	8000df8 <__aeabi_fdiv+0x118>
 8000dee:	024b      	lsls	r3, r1, #9
 8000df0:	f43f af4c 	beq.w	8000c8c <__aeabi_fmul+0x114>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e76e      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000df8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dfc:	bf18      	it	ne
 8000dfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	d1ca      	bne.n	8000d9a <__aeabi_fdiv+0xba>
 8000e04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e08:	f47f af5c 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000e0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e10:	f47f af3c 	bne.w	8000c8c <__aeabi_fmul+0x114>
 8000e14:	e75f      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000e16:	bf00      	nop

08000e18 <__aeabi_f2iz>:
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e20:	d30f      	bcc.n	8000e42 <__aeabi_f2iz+0x2a>
 8000e22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2a:	d90d      	bls.n	8000e48 <__aeabi_f2iz+0x30>
 8000e2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e38:	fa23 f002 	lsr.w	r0, r3, r2
 8000e3c:	bf18      	it	ne
 8000e3e:	4240      	negne	r0, r0
 8000e40:	4770      	bx	lr
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	4770      	bx	lr
 8000e48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e4c:	d101      	bne.n	8000e52 <__aeabi_f2iz+0x3a>
 8000e4e:	0242      	lsls	r2, r0, #9
 8000e50:	d105      	bne.n	8000e5e <__aeabi_f2iz+0x46>
 8000e52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	4770      	bx	lr

08000e64 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <DAC_SetChannel1Data+0x30>)
 8000e76:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3308      	adds	r3, #8
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	461a      	mov	r2, r3
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40007400 	.word	0x40007400

08000e98 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <DMA_Init+0xa8>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ec2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ece:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000eda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ee6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f023 0307 	bic.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4313      	orrs	r3, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	f01c803f 	.word	0xf01c803f

08000f44 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000f62:	e005      	b.n	8000f70 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f023 0201 	bic.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
  }
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e001      	b.n	8000f9e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <DMA_GetFlagStatus+0x68>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d802      	bhi.n	8000fcc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <DMA_GetFlagStatus+0x6c>)
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	e001      	b.n	8000fd0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <DMA_GetFlagStatus+0x70>)
 8000fce:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e002      	b.n	8000fe8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000fee:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
 8001002:	e001      	b.n	8001008 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001008:	7dfb      	ldrb	r3, [r7, #23]
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	4002640f 	.word	0x4002640f
 8001018:	40026000 	.word	0x40026000
 800101c:	40026400 	.word	0x40026400

08001020 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <DMA_ClearFlag+0x50>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d802      	bhi.n	8001038 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <DMA_ClearFlag+0x54>)
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e001      	b.n	800103c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <DMA_ClearFlag+0x58>)
 800103a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800104c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001054:	e006      	b.n	8001064 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800105c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	6093      	str	r3, [r2, #8]
  }    
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	4002640f 	.word	0x4002640f
 8001074:	40026000 	.word	0x40026000
 8001078:	40026400 	.word	0x40026400

0800107c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e076      	b.n	8001186 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001098:	2201      	movs	r2, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d165      	bne.n	8001180 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2103      	movs	r1, #3
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	4619      	mov	r1, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d003      	beq.n	80010f2 <GPIO_Init+0x76>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d12e      	bne.n	8001150 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2103      	movs	r1, #3
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	4619      	mov	r1, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	b29b      	uxth	r3, r3
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	4619      	mov	r1, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	b29b      	uxth	r3, r3
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	b29b      	uxth	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2103      	movs	r1, #3
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	79db      	ldrb	r3, [r3, #7]
 8001170:	4619      	mov	r1, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d985      	bls.n	8001098 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011aa:	4909      	ldr	r1, [pc, #36]	; (80011d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011b6:	e006      	b.n	80011c6 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011b8:	4905      	ldr	r1, [pc, #20]	; (80011d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80011bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4013      	ands	r3, r2
 80011c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40023800 	.word	0x40023800

080011d4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80011ee:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	885b      	ldrh	r3, [r3, #2]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001200:	4313      	orrs	r3, r2
 8001202:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001208:	4313      	orrs	r3, r2
 800120a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001210:	4313      	orrs	r3, r2
 8001212:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001218:	4313      	orrs	r3, r2
 800121a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001220:	4313      	orrs	r3, r2
 8001222:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001228:	4313      	orrs	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	4313      	orrs	r3, r2
 8001230:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	8b9b      	ldrh	r3, [r3, #28]
 800123c:	b29b      	uxth	r3, r3
 800123e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	8a1a      	ldrh	r2, [r3, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	821a      	strh	r2, [r3, #16]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2207      	movs	r2, #7
 8001298:	821a      	strh	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	819a      	strh	r2, [r3, #12]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	891b      	ldrh	r3, [r3, #8]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	4013      	ands	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <Audio_MAL_IRQHandler+0xe8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff fe50 	bl	8000fac <DMA_GetFlagStatus>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d062      	beq.n	80013d8 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04a      	beq.n	80013b0 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800131a:	bf00      	nop
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe2b 	bl	8000f7c <DMA_GetCmdStatus>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f7      	bne.n	800131c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <Audio_MAL_IRQHandler+0xe8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f7ff fe72 	bl	8001020 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <Audio_MAL_IRQHandler+0xf0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <Audio_MAL_IRQHandler+0xf4>)
 8001344:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134e:	4293      	cmp	r3, r2
 8001350:	bf28      	it	cs
 8001352:	4613      	movcs	r3, r2
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <Audio_MAL_IRQHandler+0xf4>)
 8001356:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4923      	ldr	r1, [pc, #140]	; (80013ec <Audio_MAL_IRQHandler+0xf4>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fd9a 	bl	8000e98 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fdea 	bl	8000f44 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <Audio_MAL_IRQHandler+0xf0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800137c:	428b      	cmp	r3, r1
 800137e:	bf28      	it	cs
 8001380:	460b      	movcs	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <Audio_MAL_IRQHandler+0xf0>)
 8001388:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001396:	428b      	cmp	r3, r1
 8001398:	bf28      	it	cs
 800139a:	460b      	movcs	r3, r1
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <Audio_MAL_IRQHandler+0xec>)
 80013a0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fdcb 	bl	8000f44 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80013ae:	e013      	b.n	80013d8 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fdc4 	bl	8000f44 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <Audio_MAL_IRQHandler+0xe4>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <Audio_MAL_IRQHandler+0xe8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff fe2a 	bl	8001020 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <Audio_MAL_IRQHandler+0xf0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fae2 	bl	800299c <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000008 	.word	0x20000008
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000000 	.word	0x20000000
 80013e8:	200000dc 	.word	0x200000dc
 80013ec:	2000011c 	.word	0x2000011c

080013f0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80013f4:	f7ff ff80 	bl	80012f8 <Audio_MAL_IRQHandler>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001400:	f7ff ff7a 	bl	80012f8 <Audio_MAL_IRQHandler>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800140c:	2102      	movs	r1, #2
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <SPI3_IRQHandler+0x3c>)
 8001410:	f7ff ff56 	bl	80012c0 <SPI_I2S_GetFlagStatus>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <SPI3_IRQHandler+0x40>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d106      	bne.n	8001430 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001422:	f001 fac5 	bl	80029b0 <EVAL_AUDIO_GetSampleCallBack>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	2004      	movs	r0, #4
 800142c:	f7ff fd1a 	bl	8000e64 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001430:	f001 fabe 	bl	80029b0 <EVAL_AUDIO_GetSampleCallBack>
 8001434:	4603      	mov	r3, r0
 8001436:	4619      	mov	r1, r3
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <SPI3_IRQHandler+0x3c>)
 800143a:	f7ff ff33 	bl	80012a4 <SPI_I2S_SendData>
  }
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40003c00 	.word	0x40003c00
 8001448:	20000004 	.word	0x20000004

0800144c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da0b      	bge.n	8001478 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001460:	490d      	ldr	r1, [pc, #52]	; (8001498 <NVIC_SetPriority+0x4c>)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	3b04      	subs	r3, #4
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001476:	e009      	b.n	800148c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001478:	4908      	ldr	r1, [pc, #32]	; (800149c <NVIC_SetPriority+0x50>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	e000e100 	.word	0xe000e100

080014a0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ae:	d301      	bcc.n	80014b4 <SysTick_Config+0x14>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e011      	b.n	80014d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014bc:	3b01      	subs	r3, #1
 80014be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80014c0:	210f      	movs	r1, #15
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
 80014c6:	f7ff ffc1 	bl	800144c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <SysTick_Config+0x40>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <SysTick_Handler+0xe4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <SysTick_Handler+0xe4>)
 80014f2:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <SysTick_Handler+0xe8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <SysTick_Handler+0x22>
		TM_Time2--;
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <SysTick_Handler+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <SysTick_Handler+0xe8>)
 8001504:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001506:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	e052      	b.n	80015b6 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <SysTick_Handler+0xec>)
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 800151a:	2b00      	cmp	r3, #0
 800151c:	d048      	beq.n	80015b0 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <SysTick_Handler+0xec>)
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <SysTick_Handler+0xec>)
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800153a:	2b00      	cmp	r3, #0
 800153c:	d038      	beq.n	80015b0 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <SysTick_Handler+0xec>)
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	3a01      	subs	r2, #1
 800154c:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <SysTick_Handler+0xec>)
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d128      	bne.n	80015b0 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <SysTick_Handler+0xec>)
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4918      	ldr	r1, [pc, #96]	; (80015d0 <SysTick_Handler+0xec>)
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4618      	mov	r0, r3
 8001578:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <SysTick_Handler+0xec>)
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4912      	ldr	r1, [pc, #72]	; (80015d0 <SysTick_Handler+0xec>)
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <SysTick_Handler+0xec>)
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Handler+0xec>)
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	3301      	adds	r3, #1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SysTick_Handler+0xec>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3a7      	bcc.n	8001510 <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000094 	.word	0x20000094
 80015cc:	20000098 	.word	0x20000098
 80015d0:	200000a0 	.word	0x200000a0

080015d4 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <TM_DELAY_Init+0x3c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <TM_DELAY_Init+0x40>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5b 	bl	80014a0 <SysTick_Config>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d000      	beq.n	80015f2 <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 80015f0:	e7fe      	b.n	80015f0 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <TM_DELAY_Init+0x3c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <TM_DELAY_Init+0x44>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a9b      	lsrs	r3, r3, #10
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <TM_DELAY_Init+0x48>)
 8001602:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <TM_DELAY_Init+0x4c>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000010 	.word	0x20000010
 8001614:	10624dd3 	.word	0x10624dd3
 8001618:	02659117 	.word	0x02659117
 800161c:	20000158 	.word	0x20000158
 8001620:	2000009c 	.word	0x2000009c

08001624 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 800162a:	2303      	movs	r3, #3
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <TM_DISCO_LedInit+0x2c>)
 800163c:	f000 f81c 	bl	8001678 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <TM_DISCO_LedInit+0x2c>)
 8001642:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001646:	835a      	strh	r2, [r3, #26]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020c00 	.word	0x40020c00

08001654 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 800165a:	2300      	movs	r3, #0
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	2302      	movs	r3, #2
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TM_DISCO_ButtonInit+0x20>)
 800166a:	f000 f805 	bl	8001678 <TM_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020000 	.word	0x40020000

08001678 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	460b      	mov	r3, r1
 800168c:	707b      	strb	r3, [r7, #1]
 800168e:	4613      	mov	r3, r2
 8001690:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f875 	bl	8001788 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800169e:	7838      	ldrb	r0, [r7, #0]
 80016a0:	787a      	ldrb	r2, [r7, #1]
 80016a2:	8879      	ldrh	r1, [r7, #2]
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	7c3b      	ldrb	r3, [r7, #16]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4603      	mov	r3, r0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f882 	bl	80017b8 <TM_GPIO_INT_Init>
 80016b4:	e000      	b.n	80016b8 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 80016b6:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	807b      	strh	r3, [r7, #2]
 80016d2:	460b      	mov	r3, r1
 80016d4:	707b      	strb	r3, [r7, #1]
 80016d6:	4613      	mov	r3, r2
 80016d8:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d03e      	beq.n	800175e <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f851 	bl	8001788 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e029      	b.n	8001740 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80016ec:	887a      	ldrh	r2, [r7, #2]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	fa42 f303 	asr.w	r3, r2, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01d      	beq.n	8001738 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	08d9      	lsrs	r1, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3108      	adds	r1, #8
 8001708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	f001 0107 	and.w	r1, r1, #7
 8001712:	0089      	lsls	r1, r1, #2
 8001714:	200f      	movs	r0, #15
 8001716:	fa00 f101 	lsl.w	r1, r0, r1
 800171a:	43c9      	mvns	r1, r1
 800171c:	400b      	ands	r3, r1
 800171e:	7f38      	ldrb	r0, [r7, #28]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	f001 0107 	and.w	r1, r1, #7
 8001726:	0089      	lsls	r1, r1, #2
 8001728:	fa00 f101 	lsl.w	r1, r0, r1
 800172c:	4319      	orrs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001736:	e000      	b.n	800173a <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001738:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	d9d2      	bls.n	80016ec <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	8879      	ldrh	r1, [r7, #2]
 800174a:	7e3b      	ldrb	r3, [r7, #24]
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	783b      	ldrb	r3, [r7, #0]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4613      	mov	r3, r2
 8001754:	2202      	movs	r2, #2
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f82e 	bl	80017b8 <TM_GPIO_INT_Init>
 800175c:	e000      	b.n	8001760 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 800175e:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop

08001768 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001776:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	b29b      	uxth	r3, r3
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe9 	bl	8001768 <TM_GPIO_GetPortSource>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	2301      	movs	r3, #1
 800179c:	fa03 f102 	lsl.w	r1, r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <TM_GPIO_INT_EnableClock+0x2c>)
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <TM_GPIO_INT_EnableClock+0x2c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	807b      	strh	r3, [r7, #2]
 80017ca:	460b      	mov	r3, r1
 80017cc:	707b      	strb	r3, [r7, #1]
 80017ce:	4613      	mov	r3, r2
 80017d0:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffc8 	bl	8001768 <TM_GPIO_GetPortSource>
 80017d8:	4603      	mov	r3, r0
 80017da:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e067      	b.n	80018b2 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	fa42 f303 	asr.w	r3, r2, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d05b      	beq.n	80018aa <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	7bba      	ldrb	r2, [r7, #14]
 80017f6:	4932      	ldr	r1, [pc, #200]	; (80018c0 <TM_GPIO_INT_Init+0x108>)
 80017f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80017fc:	b211      	sxth	r1, r2
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	b212      	sxth	r2, r2
 8001808:	430a      	orrs	r2, r1
 800180a:	b212      	sxth	r2, r2
 800180c:	b291      	uxth	r1, r2
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <TM_GPIO_INT_Init+0x108>)
 8001810:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	0052      	lsls	r2, r2, #1
 800181c:	2103      	movs	r1, #3
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	43d2      	mvns	r2, r2
 8001824:	4013      	ands	r3, r2
 8001826:	7e39      	ldrb	r1, [r7, #24]
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	0052      	lsls	r2, r2, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2103      	movs	r1, #3
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4013      	ands	r3, r2
 8001848:	7879      	ldrb	r1, [r7, #1]
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	0052      	lsls	r2, r2, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d002      	beq.n	8001864 <TM_GPIO_INT_Init+0xac>
 800185e:	787b      	ldrb	r3, [r7, #1]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	b292      	uxth	r2, r2
 8001872:	43d2      	mvns	r2, r2
 8001874:	401a      	ands	r2, r3
 8001876:	7839      	ldrb	r1, [r7, #0]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2103      	movs	r1, #3
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4013      	ands	r3, r2
 8001898:	7f39      	ldrb	r1, [r7, #28]
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e000      	b.n	80018ac <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80018aa:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	3301      	adds	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d994      	bls.n	80017e2 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000b8 	.word	0x200000b8

080018c4 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <TM_SPI_Send+0x1e>
 80018de:	2300      	movs	r3, #0
 80018e0:	e025      	b.n	800192e <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80018e2:	bf00      	nop
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	891b      	ldrh	r3, [r3, #8]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f8      	beq.n	80018e4 <TM_SPI_Send+0x20>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	891b      	ldrh	r3, [r3, #8]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f1      	bne.n	80018e4 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001908:	bf00      	nop
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	891b      	ldrh	r3, [r3, #8]
 800190e:	b29b      	uxth	r3, r3
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f8      	beq.n	800190a <TM_SPI_Send+0x46>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	891b      	ldrh	r3, [r3, #8]
 800191c:	b29b      	uxth	r3, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f1      	bne.n	800190a <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	899b      	ldrh	r3, [r3, #12]
 800192a:	b29b      	uxth	r3, r3
 800192c:	b2db      	uxtb	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 800193e:	f000 faf5 	bl	8001f2c <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001942:	f000 f86b 	bl	8001a1c <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	2201      	movs	r2, #1
 800194a:	210f      	movs	r1, #15
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f8c3 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b3b      	cmp	r3, #59	; 0x3b
 8001956:	d104      	bne.n	8001962 <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800195e:	2301      	movs	r3, #1
 8001960:	e008      	b.n	8001974 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b3f      	cmp	r3, #63	; 0x3f
 8001966:	d104      	bne.n	8001972 <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 800196e:	2302      	movs	r3, #2
 8001970:	e000      	b.n	8001974 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200000ce 	.word	0x200000ce

08001980 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001990:	f000 f844 	bl	8001a1c <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001994:	f000 faca 	bl	8001f2c <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001998:	f7ff ffce 	bl	8001938 <TM_LIS302DL_LIS3DSH_Detect>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 80019a2:	79ba      	ldrb	r2, [r7, #6]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f945 	bl	8001c38 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e010      	b.n	80019d4 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80019b2:	f7ff ffc1 	bl	8001938 <TM_LIS302DL_LIS3DSH_Detect>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d107      	bne.n	80019cc <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 80019bc:	79ba      	ldrb	r2, [r7, #6]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f8b4 	bl	8001b30 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80019c8:	2302      	movs	r3, #2
 80019ca:	e003      	b.n	80019d4 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200000ce 	.word	0x200000ce

080019e0 <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d104      	bne.n	80019fa <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fa2f 	bl	8001e54 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e009      	b.n	8001a0e <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d104      	bne.n	8001a0c <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f996 	bl	8001d34 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e000      	b.n	8001a0e <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000ce 	.word	0x200000ce

08001a1c <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11d      	bne.n	8001a66 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4811      	ldr	r0, [pc, #68]	; (8001a74 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8001a2e:	f000 fa8f 	bl	8001f50 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2010      	movs	r0, #16
 8001a36:	f7ff fbaf 	bl	8001198 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001a54:	f7ff fb12 	bl	800107c <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e000      	b.n	8001a68 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 8001a66:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000cf 	.word	0x200000cf
 8001a74:	40013000 	.word	0x40013000
 8001a78:	40021000 	.word	0x40021000

08001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001a8e:	2208      	movs	r2, #8
 8001a90:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d907      	bls.n	8001aa8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d103      	bne.n	8001aa8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001aae:	f7ff ff09 	bl	80018c4 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8001ab2:	78bb      	ldrb	r3, [r7, #2]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001aba:	f000 fab9 	bl	8002030 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	831a      	strh	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	200000ce 	.word	0x200000ce
 8001ad4:	40013000 	.word	0x40013000

08001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001aea:	2208      	movs	r2, #8
 8001aec:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001af4:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d903      	bls.n	8001b04 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001b0a:	f7ff fedb 	bl	80018c4 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8001b0e:	78bb      	ldrb	r3, [r7, #2]
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001b16:	f000 facf 	bl	80020b8 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001b1a:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	831a      	strh	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40013000 	.word	0x40013000

08001b30 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	460a      	mov	r2, r1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8001b40:	2367      	movs	r3, #103	; 0x67
 8001b42:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001b4c:	4a35      	ldr	r2, [pc, #212]	; (8001c24 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e02a      	b.n	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001b62:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e01f      	b.n	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001b78:	4a2c      	ldr	r2, [pc, #176]	; (8001c2c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e014      	b.n	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d107      	bne.n	8001b94 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	f043 0318 	orr.w	r3, r3, #24
 8001b8a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e009      	b.n	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d13b      	bne.n	8001c12 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8001ba6:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01a      	beq.n	8001be4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d104      	bne.n	8001bbe <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bba:	81fb      	strh	r3, [r7, #14]
 8001bbc:	e012      	b.n	8001be4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d106      	bne.n	8001bd2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bce:	81fb      	strh	r3, [r7, #14]
 8001bd0:	e008      	b.n	8001be4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d11e      	bne.n	8001c16 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8001bd8:	89fb      	ldrh	r3, [r7, #14]
 8001bda:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001bde:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001be2:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001bea:	f107 030d 	add.w	r3, r7, #13
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff42 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001c02:	f107 030d 	add.w	r3, r7, #13
 8001c06:	2201      	movs	r2, #1
 8001c08:	2124      	movs	r1, #36	; 0x24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff36 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001c10:	e002      	b.n	8001c18 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8001c16:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000015c 	.word	0x2000015c
 8001c24:	3d75c28f 	.word	0x3d75c28f
 8001c28:	3df5c28f 	.word	0x3df5c28f
 8001c2c:	3e3851ec 	.word	0x3e3851ec
 8001c30:	3e75c28f 	.word	0x3e75c28f
 8001c34:	3f3ae148 	.word	0x3f3ae148

08001c38 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001c48:	f107 030e 	add.w	r3, r7, #14
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2121      	movs	r1, #33	; 0x21
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff41 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001c60:	f107 030e 	add.w	r3, r7, #14
 8001c64:	2201      	movs	r2, #1
 8001c66:	2121      	movs	r1, #33	; 0x21
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff07 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8001c6e:	2347      	movs	r3, #71	; 0x47
 8001c70:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d105      	bne.n	8001c84 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00a      	b.n	8001c9a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d147      	bne.n	8001d1a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8001c96:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8001c98:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001c9a:	f107 030e 	add.w	r3, r7, #14
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff feea 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001ca8:	f107 030e 	add.w	r3, r7, #14
 8001cac:	2201      	movs	r2, #1
 8001cae:	2121      	movs	r1, #33	; 0x21
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fee3 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d102      	bne.n	8001cd6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	81fb      	strh	r3, [r7, #14]
 8001cd4:	e019      	b.n	8001d0a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d105      	bne.n	8001ce8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001cdc:	89fb      	ldrh	r3, [r7, #14]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	81fb      	strh	r3, [r7, #14]
 8001ce6:	e010      	b.n	8001d0a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d105      	bne.n	8001cfa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	81fb      	strh	r3, [r7, #14]
 8001cf8:	e007      	b.n	8001d0a <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d10e      	bne.n	8001d1e <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8001d00:	89fb      	ldrh	r3, [r7, #14]
 8001d02:	f043 0303 	orr.w	r3, r3, #3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001d0a:	f107 030e 	add.w	r3, r7, #14
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2121      	movs	r1, #33	; 0x21
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff feb2 	bl	8001a7c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001d18:	e002      	b.n	8001d20 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 8001d1e:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000015c 	.word	0x2000015c
 8001d2c:	41900000 	.word	0x41900000
 8001d30:	42900000 	.word	0x42900000

08001d34 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2201      	movs	r2, #1
 8001d42:	2128      	movs	r1, #40	; 0x28
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fec7 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	3301      	adds	r3, #1
 8001d50:	2201      	movs	r2, #1
 8001d52:	2129      	movs	r1, #41	; 0x29
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff febf 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	3302      	adds	r3, #2
 8001d60:	2201      	movs	r2, #1
 8001d62:	212a      	movs	r1, #42	; 0x2a
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff feb7 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	3303      	adds	r3, #3
 8001d70:	2201      	movs	r2, #1
 8001d72:	212b      	movs	r1, #43	; 0x2b
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff feaf 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	3304      	adds	r3, #4
 8001d80:	2201      	movs	r2, #1
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fea7 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	3305      	adds	r3, #5
 8001d90:	2201      	movs	r2, #1
 8001d92:	212d      	movs	r1, #45	; 0x2d
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fe9f 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001d9a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fe8d 	bl	8000ad0 <__aeabi_i2f>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f7fe feda 	bl	8000b78 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f826 	bl	8000e18 <__aeabi_f2iz>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8001dd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fe70 	bl	8000ad0 <__aeabi_i2f>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f7fe febd 	bl	8000b78 <__aeabi_fmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f809 	bl	8000e18 <__aeabi_f2iz>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 8001e0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fe53 	bl	8000ad0 <__aeabi_i2f>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7fe fea0 	bl	8000b78 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe ffec 	bl	8000e18 <__aeabi_f2iz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	809a      	strh	r2, [r3, #4]
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000015c 	.word	0x2000015c

08001e54 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	2201      	movs	r2, #1
 8001e62:	2129      	movs	r1, #41	; 0x29
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe37 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	3301      	adds	r3, #1
 8001e70:	2201      	movs	r2, #1
 8001e72:	212b      	movs	r1, #43	; 0x2b
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fe2f 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	3302      	adds	r3, #2
 8001e80:	2201      	movs	r2, #1
 8001e82:	212d      	movs	r1, #45	; 0x2d
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe27 	bl	8001ad8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001e8a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fe1e 	bl	8000ad0 <__aeabi_i2f>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f7fe fe6b 	bl	8000b78 <__aeabi_fmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ffb7 	bl	8000e18 <__aeabi_f2iz>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 8001eb2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fe0a 	bl	8000ad0 <__aeabi_i2f>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7fe fe57 	bl	8000b78 <__aeabi_fmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ffa3 	bl	8000e18 <__aeabi_f2iz>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 8001eda:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fdf6 	bl	8000ad0 <__aeabi_i2f>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7fe fe43 	bl	8000b78 <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe ff8f 	bl	8000e18 <__aeabi_f2iz>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	425b      	negs	r3, r3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	801a      	strh	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000015c 	.word	0x2000015c

08001f2c <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 8001f34:	607b      	str	r3, [r7, #4]
	while (delay--);
 8001f36:	bf00      	nop
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1fa      	bne.n	8001f38 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	000f4240 	.word	0x000f4240

08001f50 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <TM_SPI_Init+0xc8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10a      	bne.n	8001f7a <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8001f64:	78f9      	ldrb	r1, [r7, #3]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2320      	movs	r3, #32
 8001f72:	2200      	movs	r2, #0
 8001f74:	4828      	ldr	r0, [pc, #160]	; (8002018 <TM_SPI_Init+0xc8>)
 8001f76:	f000 f8f5 	bl	8002164 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <TM_SPI_Init+0xcc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8001f82:	78f9      	ldrb	r1, [r7, #3]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2320      	movs	r3, #32
 8001f90:	2200      	movs	r2, #0
 8001f92:	4822      	ldr	r0, [pc, #136]	; (800201c <TM_SPI_Init+0xcc>)
 8001f94:	f000 f8e6 	bl	8002164 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <TM_SPI_Init+0xd0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10a      	bne.n	8001fb6 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8001fa0:	78f9      	ldrb	r1, [r7, #3]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2320      	movs	r3, #32
 8001fae:	2200      	movs	r2, #0
 8001fb0:	481b      	ldr	r0, [pc, #108]	; (8002020 <TM_SPI_Init+0xd0>)
 8001fb2:	f000 f8d7 	bl	8002164 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <TM_SPI_Init+0xd4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10a      	bne.n	8001fd4 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 8001fbe:	78f9      	ldrb	r1, [r7, #3]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2320      	movs	r3, #32
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4815      	ldr	r0, [pc, #84]	; (8002024 <TM_SPI_Init+0xd4>)
 8001fd0:	f000 f8c8 	bl	8002164 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <TM_SPI_Init+0xd8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10a      	bne.n	8001ff2 <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8001fdc:	78f9      	ldrb	r1, [r7, #3]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2320      	movs	r3, #32
 8001fea:	2200      	movs	r2, #0
 8001fec:	480e      	ldr	r0, [pc, #56]	; (8002028 <TM_SPI_Init+0xd8>)
 8001fee:	f000 f8b9 	bl	8002164 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <TM_SPI_Init+0xdc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10a      	bne.n	8002010 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8001ffa:	78f9      	ldrb	r1, [r7, #3]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2320      	movs	r3, #32
 8002008:	2200      	movs	r2, #0
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <TM_SPI_Init+0xdc>)
 800200c:	f000 f8aa 	bl	8002164 <TM_SPIx_Init>
	}
#endif
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013000 	.word	0x40013000
 800201c:	40003800 	.word	0x40003800
 8002020:	40003c00 	.word	0x40003c00
 8002024:	40013400 	.word	0x40013400
 8002028:	40015000 	.word	0x40015000
 800202c:	40015400 	.word	0x40015400

08002030 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d031      	beq.n	80020ae <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800204a:	bf00      	nop
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	891b      	ldrh	r3, [r3, #8]
 8002050:	b29b      	uxth	r3, r3
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f8      	beq.n	800204c <TM_SPI_WriteMulti+0x1c>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f1      	bne.n	800204c <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e01a      	b.n	80020a4 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 800207c:	bf00      	nop
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	891b      	ldrh	r3, [r3, #8]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f8      	beq.n	800207e <TM_SPI_WriteMulti+0x4e>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	891b      	ldrh	r3, [r3, #8]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f1      	bne.n	800207e <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3e0      	bcc.n	800206e <TM_SPI_WriteMulti+0x3e>
 80020ac:	e000      	b.n	80020b0 <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80020ae:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d034      	beq.n	8002140 <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80020d6:	bf00      	nop
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	891b      	ldrh	r3, [r3, #8]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f8      	beq.n	80020d8 <TM_SPI_ReadMulti+0x20>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	891b      	ldrh	r3, [r3, #8]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f1      	bne.n	80020d8 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e01d      	b.n	8002136 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002102:	bf00      	nop
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	891b      	ldrh	r3, [r3, #8]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f8      	beq.n	8002104 <TM_SPI_ReadMulti+0x4c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	891b      	ldrh	r3, [r3, #8]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f1      	bne.n	8002104 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4413      	add	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	8992      	ldrh	r2, [r2, #12]
 800212a:	b292      	uxth	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3dd      	bcc.n	80020fa <TM_SPI_ReadMulti+0x42>
 800213e:	e000      	b.n	8002142 <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002140:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4603      	mov	r3, r0
 8002174:	70fb      	strb	r3, [r7, #3]
 8002176:	460b      	mov	r3, r1
 8002178:	70bb      	strb	r3, [r7, #2]
 800217a:	4613      	mov	r3, r2
 800217c:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f86a 	bl	800125c <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <TM_SPIx_Init+0x16c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10b      	bne.n	80021a8 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800219a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f8a4 	bl	80022ec <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <TM_SPIx_Init+0x174>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d10b      	bne.n	80021c8 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80021b0:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8c4 	bl	800234c <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a44      	ldr	r2, [pc, #272]	; (80022dc <TM_SPIx_Init+0x178>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d10b      	bne.n	80021e8 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80021d0:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f900 	bl	80023e4 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <TM_SPIx_Init+0x17c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10b      	bne.n	8002208 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <TM_SPIx_Init+0x170>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021fa:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f922 	bl	8002448 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8002204:	2300      	movs	r3, #0
 8002206:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <TM_SPIx_Init+0x180>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d10b      	bne.n	8002228 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8002210:	4a30      	ldr	r2, [pc, #192]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f942 	bl	80024a8 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 8002224:	2300      	movs	r3, #0
 8002226:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <TM_SPIx_Init+0x184>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10b      	bne.n	8002248 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <TM_SPIx_Init+0x170>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223a:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f96e 	bl	8002520 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 8002244:	2300      	movs	r3, #0
 8002246:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8002248:	883b      	ldrh	r3, [r7, #0]
 800224a:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800224c:	2300      	movs	r3, #0
 800224e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8002250:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002252:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 8002254:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002256:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8002258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225c:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 800225e:	78bb      	ldrb	r3, [r7, #2]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002264:	2300      	movs	r3, #0
 8002266:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002268:	2300      	movs	r3, #0
 800226a:	82bb      	strh	r3, [r7, #20]
 800226c:	e016      	b.n	800229c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d104      	bne.n	800227e <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002274:	2300      	movs	r3, #0
 8002276:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002278:	2301      	movs	r3, #1
 800227a:	82bb      	strh	r3, [r7, #20]
 800227c:	e00e      	b.n	800229c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 800227e:	78bb      	ldrb	r3, [r7, #2]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d104      	bne.n	800228e <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002284:	2302      	movs	r3, #2
 8002286:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002288:	2300      	movs	r3, #0
 800228a:	82bb      	strh	r3, [r7, #20]
 800228c:	e006      	b.n	800229c <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 800228e:	78bb      	ldrb	r3, [r7, #2]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d103      	bne.n	800229c <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002294:	2302      	movs	r3, #2
 8002296:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002298:	2301      	movs	r3, #1
 800229a:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe ff8e 	bl	80011d4 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	801a      	strh	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40013000 	.word	0x40013000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40003800 	.word	0x40003800
 80022dc:	40003c00 	.word	0x40003c00
 80022e0:	40013400 	.word	0x40013400
 80022e4:	40015000 	.word	0x40015000
 80022e8:	40015400 	.word	0x40015400

080022ec <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80022fc:	2305      	movs	r3, #5
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	2303      	movs	r3, #3
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	21e0      	movs	r1, #224	; 0xe0
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <TM_SPI1_INT_InitPins+0x54>)
 800230c:	f7ff f9d8 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d109      	bne.n	800232a <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002316:	2305      	movs	r3, #5
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2303      	movs	r3, #3
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2200      	movs	r2, #0
 8002322:	2138      	movs	r1, #56	; 0x38
 8002324:	4807      	ldr	r0, [pc, #28]	; (8002344 <TM_SPI1_INT_InitPins+0x58>)
 8002326:	f7ff f9cb 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d103      	bne.n	8002338 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 8002330:	2105      	movs	r1, #5
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <TM_SPI1_INT_InitPins+0x5c>)
 8002334:	f7ff ff0a 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40013000 	.word	0x40013000

0800234c <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d114      	bne.n	8002386 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 800235c:	2305      	movs	r3, #5
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2303      	movs	r3, #3
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236c:	4819      	ldr	r0, [pc, #100]	; (80023d4 <TM_SPI2_INT_InitPins+0x88>)
 800236e:	f7ff f9a7 	bl	80016c0 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002372:	2305      	movs	r3, #5
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2303      	movs	r3, #3
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	2200      	movs	r2, #0
 800237e:	210c      	movs	r1, #12
 8002380:	4815      	ldr	r0, [pc, #84]	; (80023d8 <TM_SPI2_INT_InitPins+0x8c>)
 8002382:	f7ff f99d 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10a      	bne.n	80023a2 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 800238c:	2305      	movs	r3, #5
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2303      	movs	r3, #3
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2300      	movs	r3, #0
 8002396:	2200      	movs	r2, #0
 8002398:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <TM_SPI2_INT_InitPins+0x88>)
 800239e:	f7ff f98f 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d109      	bne.n	80023bc <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 80023a8:	2305      	movs	r3, #5
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2303      	movs	r3, #3
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2300      	movs	r3, #0
 80023b2:	2200      	movs	r2, #0
 80023b4:	210d      	movs	r1, #13
 80023b6:	4809      	ldr	r0, [pc, #36]	; (80023dc <TM_SPI2_INT_InitPins+0x90>)
 80023b8:	f7ff f982 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d103      	bne.n	80023ca <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 80023c2:	2105      	movs	r1, #5
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <TM_SPI2_INT_InitPins+0x94>)
 80023c6:	f7ff fec1 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40003800 	.word	0x40003800

080023e4 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 80023f4:	2306      	movs	r3, #6
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2303      	movs	r3, #3
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	2138      	movs	r1, #56	; 0x38
 8002402:	480e      	ldr	r0, [pc, #56]	; (800243c <TM_SPI3_INT_InitPins+0x58>)
 8002404:	f7ff f95c 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10a      	bne.n	8002424 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 800240e:	2306      	movs	r3, #6
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2303      	movs	r3, #3
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <TM_SPI3_INT_InitPins+0x5c>)
 8002420:	f7ff f94e 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d103      	bne.n	8002432 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 800242a:	2106      	movs	r1, #6
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <TM_SPI3_INT_InitPins+0x60>)
 800242e:	f7ff fe8d 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40003c00 	.word	0x40003c00

08002448 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af02      	add	r7, sp, #8
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002458:	2305      	movs	r3, #5
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	2303      	movs	r3, #3
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	2200      	movs	r2, #0
 8002464:	2164      	movs	r1, #100	; 0x64
 8002466:	480e      	ldr	r0, [pc, #56]	; (80024a0 <TM_SPI4_INT_InitPins+0x58>)
 8002468:	f7ff f92a 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10a      	bne.n	8002488 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8002472:	2305      	movs	r3, #5
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2303      	movs	r3, #3
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <TM_SPI4_INT_InitPins+0x58>)
 8002484:	f7ff f91c 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d103      	bne.n	8002496 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 800248e:	2105      	movs	r1, #5
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <TM_SPI4_INT_InitPins+0x5c>)
 8002492:	f7ff fe5b 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40013400 	.word	0x40013400

080024a8 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 80024b8:	2305      	movs	r3, #5
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2303      	movs	r3, #3
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80024c8:	4812      	ldr	r0, [pc, #72]	; (8002514 <TM_SPI5_INT_InitPins+0x6c>)
 80024ca:	f7ff f8f9 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d114      	bne.n	80024fe <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 80024d4:	2305      	movs	r3, #5
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2303      	movs	r3, #3
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <TM_SPI5_INT_InitPins+0x6c>)
 80024e6:	f7ff f8eb 	bl	80016c0 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 80024ea:	2305      	movs	r3, #5
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	2303      	movs	r3, #3
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	21c0      	movs	r1, #192	; 0xc0
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <TM_SPI5_INT_InitPins+0x70>)
 80024fa:	f7ff f8e1 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d103      	bne.n	800250c <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8002504:	2105      	movs	r1, #5
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <TM_SPI5_INT_InitPins+0x74>)
 8002508:	f7ff fe20 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021400 	.word	0x40021400
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40015000 	.word	0x40015000

08002520 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af02      	add	r7, sp, #8
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8002530:	2305      	movs	r3, #5
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2303      	movs	r3, #3
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002540:	4806      	ldr	r0, [pc, #24]	; (800255c <TM_SPI6_INT_InitPins+0x3c>)
 8002542:	f7ff f8bd 	bl	80016c0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d103      	bne.n	8002554 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 800254c:	2105      	movs	r1, #5
 800254e:	4804      	ldr	r0, [pc, #16]	; (8002560 <TM_SPI6_INT_InitPins+0x40>)
 8002550:	f7ff fdfc 	bl	800214c <TM_SPI_InitCustomPinsCallback>
	}
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021800 	.word	0x40021800
 8002560:	40015400 	.word	0x40015400

08002564 <average>:
        }
        printf("\n");
    }
}

double average(double *array, int begin, int end) {
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
    double sum = 0;
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	f04f 0400 	mov.w	r4, #0
 8002578:	e9c7 3406 	strd	r3, r4, [r7, #24]
    int i;
    for(i = begin; i < end; i++) {
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e011      	b.n	80025a6 <average+0x42>
        sum += array[i];
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	cb18      	ldmia	r3, {r3, r4}
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002594:	f7fd fe1e 	bl	80001d4 <__adddf3>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	e9c7 3406 	strd	r3, r4, [r7, #24]
}

double average(double *array, int begin, int end) {
    double sum = 0;
    int i;
    for(i = begin; i < end; i++) {
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbe9      	blt.n	8002582 <average+0x1e>
        sum += array[i];
    }
    return sum / (double) end - begin;
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fd ff5c 	bl	800046c <__aeabi_i2d>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	461a      	mov	r2, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c0:	f7fe f8e4 	bl	800078c <__aeabi_ddiv>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	4625      	mov	r5, r4
 80025ca:	461c      	mov	r4, r3
 80025cc:	68b8      	ldr	r0, [r7, #8]
 80025ce:	f7fd ff4d 	bl	800046c <__aeabi_i2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fdf9 	bl	80001d0 <__aeabi_dsub>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bdb0      	pop	{r4, r5, r7, pc}
 80025ec:	0000      	movs	r0, r0
	...

080025f0 <ewma>:
        return a < c ? a : c;
    }
    return b < c ? b : c;
}

void ewma(double *array, int size, double *result) {
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]

    int s = size < 6 ? size : 6;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b06      	cmp	r3, #6
 8002600:	bfa8      	it	ge
 8002602:	2306      	movge	r3, #6
 8002604:	61bb      	str	r3, [r7, #24]
    double forecasted = average(array, 0, s);
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	2100      	movs	r1, #0
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff ffaa 	bl	8002564 <average>
 8002610:	e9c7 0108 	strd	r0, r1, [r7, #32]
    double smoothed = 0;
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	e9c7 3404 	strd	r3, r4, [r7, #16]

    int i;

    for (i = 1; i <= size; i++) {
 8002620:	2301      	movs	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e034      	b.n	8002690 <ewma+0xa0>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800262c:	3b01      	subs	r3, #1
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002638:	a319      	add	r3, pc, #100	; (adr r3, 80026a0 <ewma+0xb0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ff7b 	bl	8000538 <__aeabi_dmul>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	4625      	mov	r5, r4
 8002648:	461c      	mov	r4, r3
 800264a:	a317      	add	r3, pc, #92	; (adr r3, 80026a8 <ewma+0xb8>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002654:	f7fd ff70 	bl	8000538 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fd fdb8 	bl	80001d4 <__adddf3>
 8002664:	4603      	mov	r3, r0
 8002666:	460c      	mov	r4, r1
 8002668:	e9c7 3404 	strd	r3, r4, [r7, #16]
        forecasted = smoothed;
 800266c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002670:	e9c7 3408 	strd	r3, r4, [r7, #32]
        result[i - 1] = smoothed;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800267a:	3b01      	subs	r3, #1
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	441a      	add	r2, r3
 8002682:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002686:	e882 0018 	stmia.w	r2, {r3, r4}
    double forecasted = average(array, 0, s);
    double smoothed = 0;

    int i;

    for (i = 1; i <= size; i++) {
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	ddc6      	ble.n	8002626 <ewma+0x36>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
        forecasted = smoothed;
        result[i - 1] = smoothed;
    }

}
 8002698:	bf00      	nop
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bdb0      	pop	{r4, r5, r7, pc}
 80026a0:	33333333 	.word	0x33333333
 80026a4:	3fd33333 	.word	0x3fd33333
 80026a8:	66666666 	.word	0x66666666
 80026ac:	3fe66666 	.word	0x3fe66666

080026b0 <newLinkedList>:
 *      Author: Alan
 */

#include "LinkedList.h"

LinkedList * newLinkedList() {
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
    LinkedList *list = (LinkedList *) malloc(sizeof(LinkedList));
 80026b6:	2010      	movs	r0, #16
 80026b8:	f000 faae 	bl	8002c18 <malloc>
 80026bc:	4603      	mov	r3, r0
 80026be:	607b      	str	r3, [r7, #4]
    list->value = 0.0;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	e882 0018 	stmia.w	r2, {r3, r4}
    list->next = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    return list;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop

080026e0 <prependToLinkedList>:
        head = head->next;
    }
    printf("\n");
}

void prependToLinkedList(LinkedList *head, double value) {
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	e9c7 2300 	strd	r2, r3, [r7]

    if(!head) { return; }
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00f      	beq.n	8002712 <prependToLinkedList+0x32>

    LinkedList *new = newLinkedList();
 80026f2:	f7ff ffdd 	bl	80026b0 <newLinkedList>
 80026f6:	6178      	str	r0, [r7, #20]
    new->value = value;
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	e897 0018 	ldmia.w	r7, {r3, r4}
 80026fe:	e882 0018 	stmia.w	r2, {r3, r4}
    new->next = head->next;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	609a      	str	r2, [r3, #8]
    head->next = new;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e000      	b.n	8002714 <prependToLinkedList+0x34>
    printf("\n");
}

void prependToLinkedList(LinkedList *head, double value) {

    if(!head) { return; }
 8002712:	bf00      	nop
    LinkedList *new = newLinkedList();
    new->value = value;
    new->next = head->next;
    head->next = new;

}
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop

0800271c <arrayFromLinkedList>:
    new->value = value;
    head->next = new;

}

void arrayFromLinkedList(LinkedList *head, double *destination, int size) {
 800271c:	b490      	push	{r4, r7}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]

    if(!head) { return; }
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <arrayFromLinkedList+0x40>

    while (head->next && size > 0) {
 800272e:	e00d      	b.n	800274c <arrayFromLinkedList+0x30>
        head = head->next;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60fb      	str	r3, [r7, #12]
        destination[--size] = head->value;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3b01      	subs	r3, #1
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	441a      	add	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	cb18      	ldmia	r3, {r3, r4}
 8002748:	e882 0018 	stmia.w	r2, {r3, r4}

void arrayFromLinkedList(LinkedList *head, double *destination, int size) {

    if(!head) { return; }

    while (head->next && size > 0) {
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <arrayFromLinkedList+0x42>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	dcea      	bgt.n	8002730 <arrayFromLinkedList+0x14>
 800275a:	e000      	b.n	800275e <arrayFromLinkedList+0x42>

}

void arrayFromLinkedList(LinkedList *head, double *destination, int size) {

    if(!head) { return; }
 800275c:	bf00      	nop
    while (head->next && size > 0) {
        head = head->next;
        destination[--size] = head->value;
    }

}
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bc90      	pop	{r4, r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <freeLinkedList>:

void freeLinkedList(LinkedList *head) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

    if(!head) { return; }
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d014      	beq.n	80027a0 <freeLinkedList+0x38>

    LinkedList *current;
    current = head;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]
    head = head->next;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	607b      	str	r3, [r7, #4]
    current->next = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]

    while (head) {
 8002786:	e007      	b.n	8002798 <freeLinkedList+0x30>
        current = head;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60fb      	str	r3, [r7, #12]
        head = head->next;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	607b      	str	r3, [r7, #4]
        free(current);
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fa48 	bl	8002c28 <free>
    LinkedList *current;
    current = head;
    head = head->next;
    current->next = NULL;

    while (head) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f4      	bne.n	8002788 <freeLinkedList+0x20>
 800279e:	e000      	b.n	80027a2 <freeLinkedList+0x3a>

}

void freeLinkedList(LinkedList *head) {

    if(!head) { return; }
 80027a0:	bf00      	nop
        current = head;
        head = head->next;
        free(current);
    }

}
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <Delayms+0x50>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b6:	f3ef 8305 	mrs	r3, IPSR
 80027ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80027bc:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 80027c2:	bf00      	nop
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <Delayms+0x50>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3f8      	bcc.n	80027c4 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 80027d2:	e00b      	b.n	80027ec <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <Delayms+0x54>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <Delayms+0x3e>
				millis--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f3      	bne.n	80027d4 <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000094 	.word	0x20000094
 80027fc:	e000e010 	.word	0xe000e010

08002800 <setup>:
//
double smooth8Keinx[148] = {-0.3, 0.02, -0.28, -0.45, -0.5, -0.54, -0.59, -0.47, -0.35, -0.05, 0.18, 0.43, 0.68, 0.86, 1.0, 1.13, 1.11, 0.94, 0.73, 0.57, 0.51, 0.47, 0.44, 0.42, 0.36, 0.31, 0.33, 0.5, 0.5, 0.29, 0.17, 0.15, 0.1, -0.22, -0.57, -0.67, -0.77, -0.82, -0.99, -1.29, -1.4, -1.4, -1.42, -1.39, -1.25, -0.9, -0.72, -0.87, -0.84, -0.68, -0.46, -0.61, -0.73, -0.63, -0.59, -0.48, -0.56, -0.69, -0.69, -0.7, -0.87, -1.06, -1.05, -0.85, -0.66, -0.64, -0.58, -0.52, -0.52, -0.36, -0.27, -0.45, -0.58, -0.44, -0.21, -0.3, -0.33, -0.23, -0.09, 0.14, 0.36, 0.62, 0.63, 0.64, 0.69, 0.82, 0.94, 1.05, 1.14, 1.18, 1.13, 1.12, 1.24, 1.4, 1.71, 1.83, 1.64, 1.42, 1.26, 1.09, 0.83, 0.7, 1.06, 1.19, 1.11, 0.8, 0.86, 1.11, 1.18, 0.92, 0.47, 0.44, 0.87, 1.02, 0.66, 0.49, 0.75, 0.85, 0.5, 0.03, -0.03, 0.2, 0.35, 0.14, -0.28, -0.38, -0.06, 0.09, -0.05, -0.38, -0.53, -0.44, -0.35, -0.54, -0.76, -1.11, -1.17, -1.02, -0.82, -0.81, -0.79, -0.87, -0.94, -0.88, -0.82, -0.79, -0.71, -0.67};
double smooth8Keiny[148] = {-9.68, -9.73, -9.92, -9.93, -9.83, -9.8, -9.82, -9.93, -9.84, -9.86, -10.02, -10.01, -10.09, -10.09, -10.09, -10.15, -10.23, -10.47, -10.53, -10.6, -10.69, -10.67, -10.49, -10.36, -10.3, -10.3, -10.44, -10.54, -10.37, -10.31, -10.3, -10.43, -10.67, -10.88, -11.07, -11.15, -11.18, -11.16, -11.13, -11.14, -11.16, -11.21, -11.21, -11.18, -10.93, -10.64, -10.44, -10.38, -10.23, -10.03, -9.76, -9.61, -9.58, -9.39, -9.3, -9.18, -9.12, -9.1, -8.91, -8.7, -8.69, -8.78, -8.82, -8.72, -8.59, -8.52, -8.5, -8.42, -8.24, -8.26, -8.31, -8.29, -8.39, -8.24, -8.08, -7.9, -7.89, -8.07, -8.11, -8.12, -8.16, -8.24, -8.36, -8.57, -8.61, -8.55, -8.51, -8.67, -8.77, -9.04, -9.17, -9.17, -9.33, -9.37, -9.29, -9.22, -9.43, -9.73, -9.84, -9.87, -10.04, -10.11, -9.98, -9.75, -9.84, -9.97, -10.02, -9.98, -10.01, -10.34, -10.58, -10.7, -10.51, -10.42, -10.49, -10.46, -10.34, -10.33, -10.61, -10.85, -10.85, -10.71, -10.7, -10.75, -10.88, -10.9, -10.82, -10.7, -10.61, -10.58, -10.47, -10.22, -10.11, -10.02, -10.04, -10.17, -10.23, -10.21, -10.08, -9.98, -9.74, -9.54, -9.39, -9.39, -9.44, -9.56, -9.69, -9.82};
double smooth8Keinz[148] = {1.12, 0.95, 1.08, 1.22, 1.29, 1.35, 1.39, 1.24, 1.07, 0.84, 0.67, 0.86, 1.06, 1.35, 1.41, 1.19, 1.14, 1.06, 1.08, 1.06, 1.12, 1.26, 1.27, 1.21, 1.1, 1.1, 1.1, 1.28, 1.63, 1.81, 1.92, 1.65, 1.36, 1.32, 1.32, 1.23, 1.11, 0.99, 0.99, 0.76, 0.48, 0.27, 0.28, 0.51, 0.64, 0.67, 0.49, 0.24, 0.12, 0.18, 0.17, 0.14, 0.18, 0.06, 0.0, -0.3, -0.53, -0.69, -0.89, -1.16, -1.36, -1.51, -1.61, -1.69, -1.7, -1.63, -1.53, -1.48, -1.27, -1.23, -1.17, -1.25, -1.32, -1.44, -1.51, -1.44, -1.29, -1.26, -1.35, -1.43, -1.49, -1.58, -1.45, -1.57, -1.54, -1.55, -1.39, -1.35, -1.42, -1.21, -1.02, -0.92, -1.02, -1.03, -1.02, -1.01, -0.91, -0.8, -0.83, -0.61, -0.28, -0.17, -0.27, -0.07, 0.36, 0.61, 0.39, 0.03, 0.1, 0.42, 0.8, 0.72, 0.49, 0.94, 1.39, 1.32, 1.07, 1.01, 1.36, 1.62, 1.53, 1.29, 1.27, 1.49, 1.53, 1.45, 1.29, 1.38, 1.75, 2.1, 2.21, 2.04, 2.05, 2.24, 2.49, 2.62, 2.52, 2.36, 2.27, 2.28, 2.35, 2.39, 2.29, 2.29, 2.24, 2.2, 2.17, 2.24};

void setup() {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	SystemInit();
 8002804:	f000 f93a 	bl	8002a7c <SystemInit>
	TM_DELAY_Init();
 8002808:	f7fe fee4 	bl	80015d4 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 800280c:	f7fe ff0a 	bl	8001624 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_50Hz);
 8002810:	2103      	movs	r1, #3
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff f8b4 	bl	8001980 <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8002818:	f7fe ff1c 	bl	8001654 <TM_DISCO_ButtonInit>
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <main>:



int main(void) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08f      	sub	sp, #60	; 0x3c
 8002824:	af00      	add	r7, sp, #0

	setup();
 8002826:	f7ff ffeb 	bl	8002800 <setup>

	u_int16_t time = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	867b      	strh	r3, [r7, #50]	; 0x32
	int count = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34

	// Raw signals
	LinkedList *signalX = newLinkedList();
 8002832:	f7ff ff3d 	bl	80026b0 <newLinkedList>
 8002836:	62f8      	str	r0, [r7, #44]	; 0x2c
	LinkedList *signalY = newLinkedList();
 8002838:	f7ff ff3a 	bl	80026b0 <newLinkedList>
 800283c:	62b8      	str	r0, [r7, #40]	; 0x28
	LinkedList *signalZ = newLinkedList();
 800283e:	f7ff ff37 	bl	80026b0 <newLinkedList>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

	TM_LIS302DL_LIS3DSH_t Axes_Data;

	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());
 8002844:	bf00      	nop
 8002846:	4b52      	ldr	r3, [pc, #328]	; (8002990 <main+0x170>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f9      	beq.n	8002846 <main+0x26>

	TM_DISCO_LedOn(LED_RED | LED_GREEN);
 8002852:	4b50      	ldr	r3, [pc, #320]	; (8002994 <main+0x174>)
 8002854:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8002858:	831a      	strh	r2, [r3, #24]

	while(TM_DISCO_ButtonPressed()) {
 800285a:	e03c      	b.n	80028d6 <main+0xb6>

		// Adding accelerometer values
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f8be 	bl	80019e0 <TM_LIS302DL_LIS3DSH_ReadAxes>
		prependToLinkedList(signalX, (double) Axes_Data.X / ACCELEROMETER_DATA_DIVIDER);
 8002864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fdff 	bl	800046c <__aeabi_i2d>
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <main+0x178>)
 8002874:	f7fd ff8a 	bl	800078c <__aeabi_ddiv>
 8002878:	4603      	mov	r3, r0
 800287a:	460c      	mov	r4, r1
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002882:	f7ff ff2d 	bl	80026e0 <prependToLinkedList>
		prependToLinkedList(signalY, (double) Axes_Data.Y / ACCELEROMETER_DATA_DIVIDER);
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fdee 	bl	800046c <__aeabi_i2d>
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <main+0x178>)
 8002896:	f7fd ff79 	bl	800078c <__aeabi_ddiv>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	461a      	mov	r2, r3
 80028a0:	4623      	mov	r3, r4
 80028a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a4:	f7ff ff1c 	bl	80026e0 <prependToLinkedList>
		prependToLinkedList(signalZ, (double) Axes_Data.Z / ACCELEROMETER_DATA_DIVIDER);
 80028a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fddd 	bl	800046c <__aeabi_i2d>
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <main+0x178>)
 80028b8:	f7fd ff68 	bl	800078c <__aeabi_ddiv>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	461a      	mov	r2, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028c6:	f7ff ff0b 	bl	80026e0 <prependToLinkedList>
		count++;
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	3301      	adds	r3, #1
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34

		Delayms(SAMPLEPERIOD);
 80028d0:	2014      	movs	r0, #20
 80028d2:	f7ff ff69 	bl	80027a8 <Delayms>
	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());

	TM_DISCO_LedOn(LED_RED | LED_GREEN);

	while(TM_DISCO_ButtonPressed()) {
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <main+0x170>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1bc      	bne.n	800285c <main+0x3c>

		Delayms(SAMPLEPERIOD);

	}

	TM_DISCO_LedOff(LED_RED | LED_GREEN);
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <main+0x174>)
 80028e4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80028e8:	835a      	strh	r2, [r3, #26]

	// Allocating the temporary arrays to store the raw signal
	double *tempX = (double *) malloc(count * sizeof(double));
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f992 	bl	8002c18 <malloc>
 80028f4:	4603      	mov	r3, r0
 80028f6:	623b      	str	r3, [r7, #32]
	double *tempY = (double *) malloc(count * sizeof(double));
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f98b 	bl	8002c18 <malloc>
 8002902:	4603      	mov	r3, r0
 8002904:	61fb      	str	r3, [r7, #28]
	double *tempZ = (double *) malloc(count * sizeof(double));
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f984 	bl	8002c18 <malloc>
 8002910:	4603      	mov	r3, r0
 8002912:	61bb      	str	r3, [r7, #24]

	// Filling up the temporary raw signal arrays
	arrayFromLinkedList(signalX, tempX, count);
 8002914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002916:	6a39      	ldr	r1, [r7, #32]
 8002918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800291a:	f7ff feff 	bl	800271c <arrayFromLinkedList>
	arrayFromLinkedList(signalY, tempY, count);
 800291e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002924:	f7ff fefa 	bl	800271c <arrayFromLinkedList>
	arrayFromLinkedList(signalZ, tempZ, count);
 8002928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292e:	f7ff fef5 	bl	800271c <arrayFromLinkedList>

	// Freeing the memory for the linked lists
	freeLinkedList(signalX);
 8002932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002934:	f7ff ff18 	bl	8002768 <freeLinkedList>
	freeLinkedList(signalY);
 8002938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293a:	f7ff ff15 	bl	8002768 <freeLinkedList>
	freeLinkedList(signalZ);
 800293e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002940:	f7ff ff12 	bl	8002768 <freeLinkedList>

	// Allocating arrays for the smoothed signals
	double *smoothX = (double *) malloc(count * sizeof(double));
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f965 	bl	8002c18 <malloc>
 800294e:	4603      	mov	r3, r0
 8002950:	617b      	str	r3, [r7, #20]
	double *smoothY = (double *) malloc(count * sizeof(double));
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f95e 	bl	8002c18 <malloc>
 800295c:	4603      	mov	r3, r0
 800295e:	613b      	str	r3, [r7, #16]
	double *smoothZ = (double *) malloc(count * sizeof(double));
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f957 	bl	8002c18 <malloc>
 800296a:	4603      	mov	r3, r0
 800296c:	60fb      	str	r3, [r7, #12]

	// Calculating the smoothed values
	ewma(tempX, count, smoothX);
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002972:	6a38      	ldr	r0, [r7, #32]
 8002974:	f7ff fe3c 	bl	80025f0 <ewma>
	ewma(tempY, count, smoothY);
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800297c:	69f8      	ldr	r0, [r7, #28]
 800297e:	f7ff fe37 	bl	80025f0 <ewma>
	ewma(tempZ, count, smoothZ);
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f7ff fe32 	bl	80025f0 <ewma>

	while(1);
 800298c:	e7fe      	b.n	800298c <main+0x16c>
 800298e:	bf00      	nop
 8002990:	40020000 	.word	0x40020000
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40590000 	.word	0x40590000

0800299c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 80029a6:	bf00      	nop
}
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 80029b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c6:	e003      	b.n	80029d0 <LoopCopyDataInit>

080029c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ce:	3104      	adds	r1, #4

080029d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d8:	d3f6      	bcc.n	80029c8 <CopyDataInit>
  ldr  r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029dc:	e002      	b.n	80029e4 <LoopFillZerobss>

080029de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e0:	f842 3b04 	str.w	r3, [r2], #4

080029e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e8:	d3f9      	bcc.n	80029de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ea:	f000 f847 	bl	8002a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f000 f8ed 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff ff15 	bl	8002820 <main>
  bx  lr    
 80029f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029f8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80029fc:	08002e38 	.word	0x08002e38
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a04:	20000078 	.word	0x20000078
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002a08:	20000078 	.word	0x20000078
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a0c:	20000164 	.word	0x20000164

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <_sbrk>:
  /* Implement your write code here, this is used by puts and printf for example */
  return len;
}

caddr_t _sbrk(int32_t incr)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <_sbrk+0x58>)
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <_sbrk+0x5c>)
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <_sbrk+0x60>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <_sbrk+0x1e>
    heap_end = &end;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <_sbrk+0x60>)
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <_sbrk+0x58>)
 8002a30:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_sbrk+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <_sbrk+0x60>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	441a      	add	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d905      	bls.n	8002a52 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <_sbrk+0x64>)
 8002a48:	220c      	movs	r2, #12
 8002a4a:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	e006      	b.n	8002a60 <_sbrk+0x4c>
  }

  heap_end += incr;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <_sbrk+0x60>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a06      	ldr	r2, [pc, #24]	; (8002a74 <_sbrk+0x60>)
 8002a5c:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000164 	.word	0x20000164
 8002a70:	00005000 	.word	0x00005000
 8002a74:	200000d0 	.word	0x200000d0
 8002a78:	20000160 	.word	0x20000160

08002a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <SystemInit+0x50>)
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <SystemInit+0x50>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <SystemInit+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <SystemInit+0x50>)
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <SystemInit+0x50>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <SystemInit+0x50>)
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SystemInit+0x54>)
 8002aa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <SystemInit+0x50>)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <SystemInit+0x50>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <SystemInit+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002aba:	f000 f80d 	bl	8002ad8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SystemInit+0x58>)
 8002ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ac4:	609a      	str	r2, [r3, #8]
#endif
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	24003010 	.word	0x24003010
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <SetSysClock+0xe4>)
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <SetSysClock+0xe4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <SetSysClock+0xe4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <SetSysClock+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b0e:	d1f0      	bne.n	8002af2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <SetSysClock+0xe4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	e001      	b.n	8002b26 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d142      	bne.n	8002bb2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <SetSysClock+0xe4>)
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <SetSysClock+0xe4>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002b38:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <SetSysClock+0xe8>)
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <SetSysClock+0xe8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b42:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <SetSysClock+0xe4>)
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <SetSysClock+0xe4>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <SetSysClock+0xe4>)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <SetSysClock+0xe4>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002b58:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <SetSysClock+0xe4>)
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <SetSysClock+0xe4>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002b62:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <SetSysClock+0xe4>)
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <SetSysClock+0xec>)
 8002b68:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <SetSysClock+0xe4>)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <SetSysClock+0xe4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002b76:	bf00      	nop
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <SetSysClock+0xe4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f9      	beq.n	8002b78 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <SetSysClock+0xf0>)
 8002b86:	f240 6205 	movw	r2, #1541	; 0x605
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <SetSysClock+0xe4>)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <SetSysClock+0xe4>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <SetSysClock+0xe4>)
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <SetSysClock+0xe4>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002ba4:	bf00      	nop
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SetSysClock+0xe4>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d1f9      	bne.n	8002ba6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	07405408 	.word	0x07405408
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <__libc_init_array+0x3c>)
 8002bd0:	4c0e      	ldr	r4, [pc, #56]	; (8002c0c <__libc_init_array+0x40>)
 8002bd2:	1ae4      	subs	r4, r4, r3
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	2500      	movs	r5, #0
 8002bd8:	461e      	mov	r6, r3
 8002bda:	42a5      	cmp	r5, r4
 8002bdc:	d004      	beq.n	8002be8 <__libc_init_array+0x1c>
 8002bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be2:	4798      	blx	r3
 8002be4:	3501      	adds	r5, #1
 8002be6:	e7f8      	b.n	8002bda <__libc_init_array+0xe>
 8002be8:	f000 f8e4 	bl	8002db4 <_init>
 8002bec:	4c08      	ldr	r4, [pc, #32]	; (8002c10 <__libc_init_array+0x44>)
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <__libc_init_array+0x48>)
 8002bf0:	1ae4      	subs	r4, r4, r3
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	461e      	mov	r6, r3
 8002bf8:	42a5      	cmp	r5, r4
 8002bfa:	d004      	beq.n	8002c06 <__libc_init_array+0x3a>
 8002bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c00:	4798      	blx	r3
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7f8      	b.n	8002bf8 <__libc_init_array+0x2c>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	08002e30 	.word	0x08002e30
 8002c0c:	08002e30 	.word	0x08002e30
 8002c10:	08002e34 	.word	0x08002e34
 8002c14:	08002e30 	.word	0x08002e30

08002c18 <malloc>:
 8002c18:	4b02      	ldr	r3, [pc, #8]	; (8002c24 <malloc+0xc>)
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	f000 b859 	b.w	8002cd4 <_malloc_r>
 8002c22:	bf00      	nop
 8002c24:	20000074 	.word	0x20000074

08002c28 <free>:
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <free+0xc>)
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f000 b803 	b.w	8002c38 <_free_r>
 8002c32:	bf00      	nop
 8002c34:	20000074 	.word	0x20000074

08002c38 <_free_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d046      	beq.n	8002cce <_free_r+0x96>
 8002c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c44:	1f0c      	subs	r4, r1, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bfb8      	it	lt
 8002c4a:	18e4      	addlt	r4, r4, r3
 8002c4c:	f000 f8b0 	bl	8002db0 <__malloc_lock>
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <_free_r+0x98>)
 8002c52:	6813      	ldr	r3, [r2, #0]
 8002c54:	4611      	mov	r1, r2
 8002c56:	b913      	cbnz	r3, 8002c5e <_free_r+0x26>
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6014      	str	r4, [r2, #0]
 8002c5c:	e032      	b.n	8002cc4 <_free_r+0x8c>
 8002c5e:	42a3      	cmp	r3, r4
 8002c60:	d90e      	bls.n	8002c80 <_free_r+0x48>
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	18a0      	adds	r0, r4, r2
 8002c66:	4283      	cmp	r3, r0
 8002c68:	bf04      	itt	eq
 8002c6a:	6818      	ldreq	r0, [r3, #0]
 8002c6c:	685b      	ldreq	r3, [r3, #4]
 8002c6e:	6063      	str	r3, [r4, #4]
 8002c70:	bf04      	itt	eq
 8002c72:	1812      	addeq	r2, r2, r0
 8002c74:	6022      	streq	r2, [r4, #0]
 8002c76:	600c      	str	r4, [r1, #0]
 8002c78:	e024      	b.n	8002cc4 <_free_r+0x8c>
 8002c7a:	42a2      	cmp	r2, r4
 8002c7c:	d803      	bhi.n	8002c86 <_free_r+0x4e>
 8002c7e:	4613      	mov	r3, r2
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	d1f9      	bne.n	8002c7a <_free_r+0x42>
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	1819      	adds	r1, r3, r0
 8002c8a:	42a1      	cmp	r1, r4
 8002c8c:	d10b      	bne.n	8002ca6 <_free_r+0x6e>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	4401      	add	r1, r0
 8002c92:	1858      	adds	r0, r3, r1
 8002c94:	4282      	cmp	r2, r0
 8002c96:	6019      	str	r1, [r3, #0]
 8002c98:	d114      	bne.n	8002cc4 <_free_r+0x8c>
 8002c9a:	6810      	ldr	r0, [r2, #0]
 8002c9c:	6852      	ldr	r2, [r2, #4]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	4401      	add	r1, r0
 8002ca2:	6019      	str	r1, [r3, #0]
 8002ca4:	e00e      	b.n	8002cc4 <_free_r+0x8c>
 8002ca6:	d902      	bls.n	8002cae <_free_r+0x76>
 8002ca8:	230c      	movs	r3, #12
 8002caa:	602b      	str	r3, [r5, #0]
 8002cac:	e00a      	b.n	8002cc4 <_free_r+0x8c>
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	1860      	adds	r0, r4, r1
 8002cb2:	4282      	cmp	r2, r0
 8002cb4:	bf04      	itt	eq
 8002cb6:	6810      	ldreq	r0, [r2, #0]
 8002cb8:	6852      	ldreq	r2, [r2, #4]
 8002cba:	6062      	str	r2, [r4, #4]
 8002cbc:	bf04      	itt	eq
 8002cbe:	1809      	addeq	r1, r1, r0
 8002cc0:	6021      	streq	r1, [r4, #0]
 8002cc2:	605c      	str	r4, [r3, #4]
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cca:	f000 b872 	b.w	8002db2 <__malloc_unlock>
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	200000d8 	.word	0x200000d8

08002cd4 <_malloc_r>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	1ccd      	adds	r5, r1, #3
 8002cd8:	f025 0503 	bic.w	r5, r5, #3
 8002cdc:	3508      	adds	r5, #8
 8002cde:	2d0c      	cmp	r5, #12
 8002ce0:	bf38      	it	cc
 8002ce2:	250c      	movcc	r5, #12
 8002ce4:	2d00      	cmp	r5, #0
 8002ce6:	4606      	mov	r6, r0
 8002ce8:	db01      	blt.n	8002cee <_malloc_r+0x1a>
 8002cea:	42a9      	cmp	r1, r5
 8002cec:	d902      	bls.n	8002cf4 <_malloc_r+0x20>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	6033      	str	r3, [r6, #0]
 8002cf2:	e046      	b.n	8002d82 <_malloc_r+0xae>
 8002cf4:	f000 f85c 	bl	8002db0 <__malloc_lock>
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <_malloc_r+0xb4>)
 8002cfa:	681c      	ldr	r4, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4621      	mov	r1, r4
 8002d00:	b1a1      	cbz	r1, 8002d2c <_malloc_r+0x58>
 8002d02:	680b      	ldr	r3, [r1, #0]
 8002d04:	1b5b      	subs	r3, r3, r5
 8002d06:	d40e      	bmi.n	8002d26 <_malloc_r+0x52>
 8002d08:	2b0b      	cmp	r3, #11
 8002d0a:	d903      	bls.n	8002d14 <_malloc_r+0x40>
 8002d0c:	600b      	str	r3, [r1, #0]
 8002d0e:	18cc      	adds	r4, r1, r3
 8002d10:	50cd      	str	r5, [r1, r3]
 8002d12:	e01e      	b.n	8002d52 <_malloc_r+0x7e>
 8002d14:	428c      	cmp	r4, r1
 8002d16:	bf0d      	iteet	eq
 8002d18:	6863      	ldreq	r3, [r4, #4]
 8002d1a:	684b      	ldrne	r3, [r1, #4]
 8002d1c:	6063      	strne	r3, [r4, #4]
 8002d1e:	6013      	streq	r3, [r2, #0]
 8002d20:	bf18      	it	ne
 8002d22:	460c      	movne	r4, r1
 8002d24:	e015      	b.n	8002d52 <_malloc_r+0x7e>
 8002d26:	460c      	mov	r4, r1
 8002d28:	6849      	ldr	r1, [r1, #4]
 8002d2a:	e7e9      	b.n	8002d00 <_malloc_r+0x2c>
 8002d2c:	4c17      	ldr	r4, [pc, #92]	; (8002d8c <_malloc_r+0xb8>)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	b91b      	cbnz	r3, 8002d3a <_malloc_r+0x66>
 8002d32:	4630      	mov	r0, r6
 8002d34:	f000 f82c 	bl	8002d90 <_sbrk_r>
 8002d38:	6020      	str	r0, [r4, #0]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f000 f827 	bl	8002d90 <_sbrk_r>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	d018      	beq.n	8002d78 <_malloc_r+0xa4>
 8002d46:	1cc4      	adds	r4, r0, #3
 8002d48:	f024 0403 	bic.w	r4, r4, #3
 8002d4c:	42a0      	cmp	r0, r4
 8002d4e:	d10d      	bne.n	8002d6c <_malloc_r+0x98>
 8002d50:	6025      	str	r5, [r4, #0]
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 f82d 	bl	8002db2 <__malloc_unlock>
 8002d58:	f104 000b 	add.w	r0, r4, #11
 8002d5c:	1d23      	adds	r3, r4, #4
 8002d5e:	f020 0007 	bic.w	r0, r0, #7
 8002d62:	1ac3      	subs	r3, r0, r3
 8002d64:	d00e      	beq.n	8002d84 <_malloc_r+0xb0>
 8002d66:	425a      	negs	r2, r3
 8002d68:	50e2      	str	r2, [r4, r3]
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	1a21      	subs	r1, r4, r0
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f000 f80e 	bl	8002d90 <_sbrk_r>
 8002d74:	3001      	adds	r0, #1
 8002d76:	d1eb      	bne.n	8002d50 <_malloc_r+0x7c>
 8002d78:	230c      	movs	r3, #12
 8002d7a:	6033      	str	r3, [r6, #0]
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f000 f818 	bl	8002db2 <__malloc_unlock>
 8002d82:	2000      	movs	r0, #0
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
 8002d86:	bf00      	nop
 8002d88:	200000d8 	.word	0x200000d8
 8002d8c:	200000d4 	.word	0x200000d4

08002d90 <_sbrk_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4c06      	ldr	r4, [pc, #24]	; (8002dac <_sbrk_r+0x1c>)
 8002d94:	2300      	movs	r3, #0
 8002d96:	4605      	mov	r5, r0
 8002d98:	4608      	mov	r0, r1
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	f7ff fe3a 	bl	8002a14 <_sbrk>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d102      	bne.n	8002daa <_sbrk_r+0x1a>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	b103      	cbz	r3, 8002daa <_sbrk_r+0x1a>
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	20000160 	.word	0x20000160

08002db0 <__malloc_lock>:
 8002db0:	4770      	bx	lr

08002db2 <__malloc_unlock>:
 8002db2:	4770      	bx	lr

08002db4 <_init>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr

08002dc0 <_fini>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr
