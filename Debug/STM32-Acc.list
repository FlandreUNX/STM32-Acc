
C:\Users\Alan\Atollic\TrueSTUDIO\ARM_workspace_7.0\STM32-Acc\Debug\STM32-Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004268  08004268  00014268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000076c  20000000  08004320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002076c  2**0
                  CONTENTS
  7 .bss          000000dc  2000076c  2000076c  0002076c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000848  20000848  0002076c  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  0002076c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007434  00000000  00000000  00020796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001786  00000000  00000000  00027bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  00029350  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007e0  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000034bb  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ecc  00000000  00000000  0002d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003077f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000272c  00000000  00000000  00030800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000076c 	.word	0x2000076c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004250 	.word	0x08004250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000770 	.word	0x20000770
 80001c4:	08004250 	.word	0x08004250

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <DAC_SetChannel1Data+0x30>)
 8001002:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	3308      	adds	r3, #8
 800100c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	6013      	str	r3, [r2, #0]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	40007400 	.word	0x40007400

08001024 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <DMA_Init+0xa8>)
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800104e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800105a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001066:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001072:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001078:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f023 0307 	bic.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4313      	orrs	r3, r2
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60da      	str	r2, [r3, #12]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	f01c803f 	.word	0xf01c803f

080010d0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80010ee:	e005      	b.n	80010fc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 0201 	bic.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	601a      	str	r2, [r3, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e001      	b.n	800112a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <DMA_GetFlagStatus+0x68>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d802      	bhi.n	8001158 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <DMA_GetFlagStatus+0x6c>)
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	e001      	b.n	800115c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <DMA_GetFlagStatus+0x70>)
 800115a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e002      	b.n	8001174 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800117a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800117e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
 800118e:	e001      	b.n	8001194 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	4002640f 	.word	0x4002640f
 80011a4:	40026000 	.word	0x40026000
 80011a8:	40026400 	.word	0x40026400

080011ac <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a10      	ldr	r2, [pc, #64]	; (80011fc <DMA_ClearFlag+0x50>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d802      	bhi.n	80011c4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <DMA_ClearFlag+0x54>)
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e001      	b.n	80011c8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <DMA_ClearFlag+0x58>)
 80011c6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011d8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80011e0:	e006      	b.n	80011f0 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011e8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	6093      	str	r3, [r2, #8]
  }    
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	4002640f 	.word	0x4002640f
 8001200:	40026000 	.word	0x40026000
 8001204:	40026400 	.word	0x40026400

08001208 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e076      	b.n	8001312 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001224:	2201      	movs	r2, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d165      	bne.n	800130c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2103      	movs	r1, #3
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	4619      	mov	r1, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d003      	beq.n	800127e <GPIO_Init+0x76>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d12e      	bne.n	80012dc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2103      	movs	r1, #3
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	795b      	ldrb	r3, [r3, #5]
 800129c:	4619      	mov	r1, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	4619      	mov	r1, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2103      	movs	r1, #3
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	79db      	ldrb	r3, [r3, #7]
 80012fc:	4619      	mov	r1, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d985      	bls.n	8001224 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001336:	4909      	ldr	r1, [pc, #36]	; (800135c <RCC_AHB1PeriphClockCmd+0x38>)
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <RCC_AHB1PeriphClockCmd+0x38>)
 800133a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4313      	orrs	r3, r2
 8001340:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001342:	e006      	b.n	8001352 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <RCC_AHB1PeriphClockCmd+0x38>)
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <RCC_AHB1PeriphClockCmd+0x38>)
 8001348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	43db      	mvns	r3, r3
 800134e:	4013      	ands	r3, r2
 8001350:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800

08001360 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800137a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	4313      	orrs	r3, r2
 8001386:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800138c:	4313      	orrs	r3, r2
 800138e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001394:	4313      	orrs	r3, r2
 8001396:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800139c:	4313      	orrs	r3, r2
 800139e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	89fa      	ldrh	r2, [r7, #14]
 80013c2:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	8b9b      	ldrh	r3, [r3, #28]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	8a1a      	ldrh	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	821a      	strh	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2207      	movs	r2, #7
 8001424:	821a      	strh	r2, [r3, #16]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	819a      	strh	r2, [r3, #12]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	891b      	ldrh	r3, [r3, #8]
 8001460:	b29a      	uxth	r2, r3
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	4013      	ands	r3, r2
 8001466:	b29b      	uxth	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <Audio_MAL_IRQHandler+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fe50 	bl	8001138 <DMA_GetFlagStatus>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d062      	beq.n	8001564 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d04a      	beq.n	800153c <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80014a6:	bf00      	nop
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe2b 	bl	8001108 <DMA_GetCmdStatus>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f7      	bne.n	80014a8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <Audio_MAL_IRQHandler+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fe72 	bl	80011ac <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <Audio_MAL_IRQHandler+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <Audio_MAL_IRQHandler+0xf4>)
 80014d0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	4293      	cmp	r3, r2
 80014dc:	bf28      	it	cs
 80014de:	4613      	movcs	r3, r2
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <Audio_MAL_IRQHandler+0xf4>)
 80014e2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4923      	ldr	r1, [pc, #140]	; (8001578 <Audio_MAL_IRQHandler+0xf4>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd9a 	bl	8001024 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fdea 	bl	80010d0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <Audio_MAL_IRQHandler+0xf0>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001508:	428b      	cmp	r3, r1
 800150a:	bf28      	it	cs
 800150c:	460b      	movcs	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <Audio_MAL_IRQHandler+0xf0>)
 8001514:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001522:	428b      	cmp	r3, r1
 8001524:	bf28      	it	cs
 8001526:	460b      	movcs	r3, r1
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <Audio_MAL_IRQHandler+0xec>)
 800152c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fdcb 	bl	80010d0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800153a:	e013      	b.n	8001564 <Audio_MAL_IRQHandler+0xe0>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fdc4 	bl	80010d0 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <Audio_MAL_IRQHandler+0xe4>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <Audio_MAL_IRQHandler+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f7ff fe2a 	bl	80011ac <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <Audio_MAL_IRQHandler+0xf0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fcf6 	bl	8002f50 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000008 	.word	0x20000008
 800156c:	2000000c 	.word	0x2000000c
 8001570:	20000000 	.word	0x20000000
 8001574:	200007c4 	.word	0x200007c4
 8001578:	20000804 	.word	0x20000804

0800157c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001580:	f7ff ff80 	bl	8001484 <Audio_MAL_IRQHandler>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800158c:	f7ff ff7a 	bl	8001484 <Audio_MAL_IRQHandler>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001598:	2102      	movs	r1, #2
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <SPI3_IRQHandler+0x3c>)
 800159c:	f7ff ff56 	bl	800144c <SPI_I2S_GetFlagStatus>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d011      	beq.n	80015ca <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <SPI3_IRQHandler+0x40>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d106      	bne.n	80015bc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80015ae:	f001 fcd9 	bl	8002f64 <EVAL_AUDIO_GetSampleCallBack>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	2004      	movs	r0, #4
 80015b8:	f7ff fd1a 	bl	8000ff0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80015bc:	f001 fcd2 	bl	8002f64 <EVAL_AUDIO_GetSampleCallBack>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <SPI3_IRQHandler+0x3c>)
 80015c6:	f7ff ff33 	bl	8001430 <SPI_I2S_SendData>
  }
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40003c00 	.word	0x40003c00
 80015d4:	20000004 	.word	0x20000004

080015d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da0b      	bge.n	8001604 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80015ec:	490d      	ldr	r1, [pc, #52]	; (8001624 <NVIC_SetPriority+0x4c>)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	3b04      	subs	r3, #4
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001602:	e009      	b.n	8001618 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <NVIC_SetPriority+0x50>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	e000e100 	.word	0xe000e100

0800162c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163a:	d301      	bcc.n	8001640 <SysTick_Config+0x14>
 800163c:	2301      	movs	r3, #1
 800163e:	e011      	b.n	8001664 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001648:	3b01      	subs	r3, #1
 800164a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800164c:	210f      	movs	r1, #15
 800164e:	f04f 30ff 	mov.w	r0, #4294967295
 8001652:	f7ff ffc1 	bl	80015d8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <SysTick_Config+0x40>)
 800165e:	2207      	movs	r2, #7
 8001660:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000e010 	.word	0xe000e010

08001670 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <SysTick_Handler+0xe4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a35      	ldr	r2, [pc, #212]	; (8001754 <SysTick_Handler+0xe4>)
 800167e:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <SysTick_Handler+0xe8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <SysTick_Handler+0x22>
		TM_Time2--;
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <SysTick_Handler+0xe8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3b01      	subs	r3, #1
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <SysTick_Handler+0xe8>)
 8001690:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8001692:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e052      	b.n	8001742 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <SysTick_Handler+0xec>)
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d048      	beq.n	800173c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a2b      	ldr	r2, [pc, #172]	; (800175c <SysTick_Handler+0xec>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d040      	beq.n	800173c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a27      	ldr	r2, [pc, #156]	; (800175c <SysTick_Handler+0xec>)
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d038      	beq.n	800173c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4a23      	ldr	r2, [pc, #140]	; (800175c <SysTick_Handler+0xec>)
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	3a01      	subs	r2, #1
 80016d8:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	; (800175c <SysTick_Handler+0xec>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d128      	bne.n	800173c <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <SysTick_Handler+0xec>)
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4918      	ldr	r1, [pc, #96]	; (800175c <SysTick_Handler+0xec>)
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4618      	mov	r0, r3
 8001704:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <SysTick_Handler+0xec>)
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4912      	ldr	r1, [pc, #72]	; (800175c <SysTick_Handler+0xec>)
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <SysTick_Handler+0xec>)
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Handler+0xec>)
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3301      	adds	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <SysTick_Handler+0xec>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3a7      	bcc.n	800169c <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000788 	.word	0x20000788
 8001758:	2000078c 	.word	0x2000078c
 800175c:	20000794 	.word	0x20000794

08001760 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <TM_DELAY_Init+0x3c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <TM_DELAY_Init+0x40>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5b 	bl	800162c <SysTick_Config>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d000      	beq.n	800177e <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 800177c:	e7fe      	b.n	800177c <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <TM_DELAY_Init+0x3c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <TM_DELAY_Init+0x44>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0a9b      	lsrs	r3, r3, #10
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <TM_DELAY_Init+0x48>)
 800178e:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <TM_DELAY_Init+0x4c>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000700 	.word	0x20000700
 80017a0:	10624dd3 	.word	0x10624dd3
 80017a4:	02659117 	.word	0x02659117
 80017a8:	20000840 	.word	0x20000840
 80017ac:	20000790 	.word	0x20000790

080017b0 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 80017b6:	2303      	movs	r3, #3
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <TM_DISCO_LedInit+0x2c>)
 80017c8:	f000 f81c 	bl	8001804 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <TM_DISCO_LedInit+0x2c>)
 80017ce:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80017d2:	835a      	strh	r2, [r3, #26]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <TM_DISCO_ButtonInit>:

void TM_DISCO_ButtonInit(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af02      	add	r7, sp, #8
	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 80017e6:	2300      	movs	r3, #0
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2302      	movs	r3, #2
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2200      	movs	r2, #0
 80017f2:	2101      	movs	r1, #1
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TM_DISCO_ButtonInit+0x20>)
 80017f6:	f000 f805 	bl	8001804 <TM_GPIO_Init>
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020000 	.word	0x40020000

08001804 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4603      	mov	r3, r0
 8001814:	807b      	strh	r3, [r7, #2]
 8001816:	460b      	mov	r3, r1
 8001818:	707b      	strb	r3, [r7, #1]
 800181a:	4613      	mov	r3, r2
 800181c:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00e      	beq.n	8001842 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f875 	bl	8001914 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800182a:	7838      	ldrb	r0, [r7, #0]
 800182c:	787a      	ldrb	r2, [r7, #1]
 800182e:	8879      	ldrh	r1, [r7, #2]
 8001830:	7d3b      	ldrb	r3, [r7, #20]
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4603      	mov	r3, r0
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f882 	bl	8001944 <TM_GPIO_INT_Init>
 8001840:	e000      	b.n	8001844 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001842:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop

0800184c <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	460b      	mov	r3, r1
 8001860:	707b      	strb	r3, [r7, #1]
 8001862:	4613      	mov	r3, r2
 8001864:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03e      	beq.n	80018ea <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f851 	bl	8001914 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e029      	b.n	80018cc <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	fa42 f303 	asr.w	r3, r2, r3
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01d      	beq.n	80018c4 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	08d9      	lsrs	r1, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3108      	adds	r1, #8
 8001894:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	f001 0107 	and.w	r1, r1, #7
 800189e:	0089      	lsls	r1, r1, #2
 80018a0:	200f      	movs	r0, #15
 80018a2:	fa00 f101 	lsl.w	r1, r0, r1
 80018a6:	43c9      	mvns	r1, r1
 80018a8:	400b      	ands	r3, r1
 80018aa:	7f38      	ldrb	r0, [r7, #28]
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	f001 0107 	and.w	r1, r1, #7
 80018b2:	0089      	lsls	r1, r1, #2
 80018b4:	fa00 f101 	lsl.w	r1, r0, r1
 80018b8:	4319      	orrs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018c2:	e000      	b.n	80018c6 <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80018c4:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d9d2      	bls.n	8001878 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80018d2:	787a      	ldrb	r2, [r7, #1]
 80018d4:	8879      	ldrh	r1, [r7, #2]
 80018d6:	7e3b      	ldrb	r3, [r7, #24]
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	783b      	ldrb	r3, [r7, #0]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	2202      	movs	r2, #2
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f82e 	bl	8001944 <TM_GPIO_INT_Init>
 80018e8:	e000      	b.n	80018ec <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 80018ea:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop

080018f4 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001902:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	b29b      	uxth	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe9 	bl	80018f4 <TM_GPIO_GetPortSource>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	fa03 f102 	lsl.w	r1, r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <TM_GPIO_INT_EnableClock+0x2c>)
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <TM_GPIO_INT_EnableClock+0x2c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	430b      	orrs	r3, r1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	460b      	mov	r3, r1
 8001958:	707b      	strb	r3, [r7, #1]
 800195a:	4613      	mov	r3, r2
 800195c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffc8 	bl	80018f4 <TM_GPIO_GetPortSource>
 8001964:	4603      	mov	r3, r0
 8001966:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e067      	b.n	8001a3e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	fa42 f303 	asr.w	r3, r2, r3
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d05b      	beq.n	8001a36 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	7bba      	ldrb	r2, [r7, #14]
 8001982:	4932      	ldr	r1, [pc, #200]	; (8001a4c <TM_GPIO_INT_Init+0x108>)
 8001984:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001988:	b211      	sxth	r1, r2
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	b212      	sxth	r2, r2
 8001994:	430a      	orrs	r2, r1
 8001996:	b212      	sxth	r2, r2
 8001998:	b291      	uxth	r1, r2
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <TM_GPIO_INT_Init+0x108>)
 800199c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	2103      	movs	r1, #3
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	43d2      	mvns	r2, r2
 80019b0:	4013      	ands	r3, r2
 80019b2:	7e39      	ldrb	r1, [r7, #24]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	0052      	lsls	r2, r2, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2103      	movs	r1, #3
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4013      	ands	r3, r2
 80019d4:	7879      	ldrb	r1, [r7, #1]
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	0052      	lsls	r2, r2, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d002      	beq.n	80019f0 <TM_GPIO_INT_Init+0xac>
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d123      	bne.n	8001a38 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	b292      	uxth	r2, r2
 80019fe:	43d2      	mvns	r2, r2
 8001a00:	401a      	ands	r2, r3
 8001a02:	7839      	ldrb	r1, [r7, #0]
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4013      	ands	r3, r2
 8001a24:	7f39      	ldrb	r1, [r7, #28]
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	0052      	lsls	r2, r2, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	e000      	b.n	8001a38 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001a36:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d994      	bls.n	800196e <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200007ac 	.word	0x200007ac

08001a50 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <TM_SPI_Send+0x1e>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e025      	b.n	8001aba <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8001a6e:	bf00      	nop
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f8      	beq.n	8001a70 <TM_SPI_Send+0x20>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	891b      	ldrh	r3, [r3, #8]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f1      	bne.n	8001a70 <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8001a94:	bf00      	nop
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	891b      	ldrh	r3, [r3, #8]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f8      	beq.n	8001a96 <TM_SPI_Send+0x46>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	891b      	ldrh	r3, [r3, #8]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f1      	bne.n	8001a96 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	899b      	ldrh	r3, [r3, #12]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001aca:	f000 faf5 	bl	80020b8 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001ace:	f000 f86b 	bl	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f8c3 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ae2:	d104      	bne.n	8001aee <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e008      	b.n	8001b00 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b3f      	cmp	r3, #63	; 0x3f
 8001af2:	d104      	bne.n	8001afe <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001afa:	2302      	movs	r3, #2
 8001afc:	e000      	b.n	8001b00 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200007c2 	.word	0x200007c2

08001b0c <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8001b1c:	f000 f844 	bl	8001ba8 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8001b20:	f000 faca 	bl	80020b8 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001b24:	f7ff ffce 	bl	8001ac4 <TM_LIS302DL_LIS3DSH_Detect>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8001b2e:	79ba      	ldrb	r2, [r7, #6]
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f945 	bl	8001dc4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e010      	b.n	8001b60 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001b3e:	f7ff ffc1 	bl	8001ac4 <TM_LIS302DL_LIS3DSH_Detect>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d107      	bne.n	8001b58 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8001b48:	79ba      	ldrb	r2, [r7, #6]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8b4 	bl	8001cbc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e003      	b.n	8001b60 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200007c2 	.word	0x200007c2

08001b6c <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d104      	bne.n	8001b86 <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fa2f 	bl	8001fe0 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e009      	b.n	8001b9a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d104      	bne.n	8001b98 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f996 	bl	8001ec0 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8001b94:	2302      	movs	r3, #2
 8001b96:	e000      	b.n	8001b9a <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200007c2 	.word	0x200007c2

08001ba8 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d11d      	bne.n	8001bf2 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8001bba:	f000 fa8f 	bl	80020dc <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2010      	movs	r0, #16
 8001bc2:	f7ff fbaf 	bl	8001324 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001be0:	f7ff fb12 	bl	8001208 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8001be6:	2208      	movs	r2, #8
 8001be8:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e000      	b.n	8001bf4 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
		return;
 8001bf2:	bf00      	nop
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
	
	initialized = 1;
}
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200007c3 	.word	0x200007c3
 8001c00:	40013000 	.word	0x40013000
 8001c04:	40021000 	.word	0x40021000

08001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	4613      	mov	r3, r2
 8001c16:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8001c1e:	78bb      	ldrb	r3, [r7, #2]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d907      	bls.n	8001c34 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d103      	bne.n	8001c34 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c32:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001c3a:	f7ff ff09 	bl	8001a50 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	461a      	mov	r2, r3
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8001c46:	f000 fab9 	bl	80021bc <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001c4a:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	831a      	strh	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	200007c2 	.word	0x200007c2
 8001c60:	40013000 	.word	0x40013000

08001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
 8001c70:	4613      	mov	r3, r2
 8001c72:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001c76:	2208      	movs	r2, #8
 8001c78:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c80:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d903      	bls.n	8001c90 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001c96:	f7ff fedb 	bl	8001a50 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8001c9a:	78bb      	ldrb	r3, [r7, #2]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8001ca2:	f000 facf 	bl	8002244 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8001ca6:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8001ca8:	2208      	movs	r2, #8
 8001caa:	831a      	strh	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013000 	.word	0x40013000

08001cbc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8001ccc:	2367      	movs	r3, #103	; 0x67
 8001cce:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001cd6:	4b35      	ldr	r3, [pc, #212]	; (8001dac <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001cd8:	4a35      	ldr	r2, [pc, #212]	; (8001db0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e02a      	b.n	8001d34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8001ce4:	89fb      	ldrh	r3, [r7, #14]
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001cec:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001cee:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e01f      	b.n	8001d34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001d04:	4a2c      	ldr	r2, [pc, #176]	; (8001db8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e014      	b.n	8001d34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d107      	bne.n	8001d20 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	f043 0318 	orr.w	r3, r3, #24
 8001d16:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e009      	b.n	8001d34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d13b      	bne.n	8001d9e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8001d32:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01a      	beq.n	8001d70 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d104      	bne.n	8001d4a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d46:	81fb      	strh	r3, [r7, #14]
 8001d48:	e012      	b.n	8001d70 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d106      	bne.n	8001d5e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8001d50:	89fb      	ldrh	r3, [r7, #14]
 8001d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5a:	81fb      	strh	r3, [r7, #14]
 8001d5c:	e008      	b.n	8001d70 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d11e      	bne.n	8001da2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001d6a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001d6e:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001d76:	f107 030d 	add.w	r3, r7, #13
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff42 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001d8e:	f107 030d 	add.w	r3, r7, #13
 8001d92:	2201      	movs	r2, #1
 8001d94:	2124      	movs	r1, #36	; 0x24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff36 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001d9c:	e002      	b.n	8001da4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
	} else {
		return;
 8001d9e:	bf00      	nop
 8001da0:	e000      	b.n	8001da4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
	} else {
		return;
 8001da2:	bf00      	nop
	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
}
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000844 	.word	0x20000844
 8001db0:	3d75c28f 	.word	0x3d75c28f
 8001db4:	3df5c28f 	.word	0x3df5c28f
 8001db8:	3e3851ec 	.word	0x3e3851ec
 8001dbc:	3e75c28f 	.word	0x3e75c28f
 8001dc0:	3f3ae148 	.word	0x3f3ae148

08001dc4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460a      	mov	r2, r1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001dd4:	f107 030e 	add.w	r3, r7, #14
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2121      	movs	r1, #33	; 0x21
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff41 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001dec:	f107 030e 	add.w	r3, r7, #14
 8001df0:	2201      	movs	r2, #1
 8001df2:	2121      	movs	r1, #33	; 0x21
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff07 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8001dfa:	2347      	movs	r3, #71	; 0x47
 8001dfc:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d105      	bne.n	8001e10 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00a      	b.n	8001e26 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d147      	bne.n	8001ea6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8001e22:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8001e24:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001e26:	f107 030e 	add.w	r3, r7, #14
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff feea 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001e34:	f107 030e 	add.w	r3, r7, #14
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2121      	movs	r1, #33	; 0x21
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fee3 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d102      	bne.n	8001e62 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	81fb      	strh	r3, [r7, #14]
 8001e60:	e019      	b.n	8001e96 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d105      	bne.n	8001e74 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	81fb      	strh	r3, [r7, #14]
 8001e72:	e010      	b.n	8001e96 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d105      	bne.n	8001e86 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	81fb      	strh	r3, [r7, #14]
 8001e84:	e007      	b.n	8001e96 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d10e      	bne.n	8001eaa <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0303 	orr.w	r3, r3, #3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001e96:	f107 030e 	add.w	r3, r7, #14
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2121      	movs	r1, #33	; 0x21
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff feb2 	bl	8001c08 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8001ea4:	e002      	b.n	8001eac <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
	} else {
		return;
 8001ea6:	bf00      	nop
 8001ea8:	e000      	b.n	8001eac <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
	} else {
		return;
 8001eaa:	bf00      	nop
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
}
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000844 	.word	0x20000844
 8001eb8:	41900000 	.word	0x41900000
 8001ebc:	42900000 	.word	0x42900000

08001ec0 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2128      	movs	r1, #40	; 0x28
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fec7 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	3301      	adds	r3, #1
 8001edc:	2201      	movs	r2, #1
 8001ede:	2129      	movs	r1, #41	; 0x29
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff febf 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	3302      	adds	r3, #2
 8001eec:	2201      	movs	r2, #1
 8001eee:	212a      	movs	r1, #42	; 0x2a
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff feb7 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	3303      	adds	r3, #3
 8001efc:	2201      	movs	r2, #1
 8001efe:	212b      	movs	r1, #43	; 0x2b
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff feaf 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fea7 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	3305      	adds	r3, #5
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	212d      	movs	r1, #45	; 0x2d
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe9f 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001f26:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fe8d 	bl	8000c5c <__aeabi_i2f>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe feda 	bl	8000d04 <__aeabi_fmul>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f826 	bl	8000fa4 <__aeabi_f2iz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8001f60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fe70 	bl	8000c5c <__aeabi_i2f>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7fe febd 	bl	8000d04 <__aeabi_fmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f809 	bl	8000fa4 <__aeabi_f2iz>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 8001f9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fe53 	bl	8000c5c <__aeabi_i2f>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <TM_LIS3DSH_INT_ReadAxes+0x11c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f7fe fea0 	bl	8000d04 <__aeabi_fmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ffec 	bl	8000fa4 <__aeabi_f2iz>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	809a      	strh	r2, [r3, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000844 	.word	0x20000844

08001fe0 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	2201      	movs	r2, #1
 8001fee:	2129      	movs	r1, #41	; 0x29
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe37 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	212b      	movs	r1, #43	; 0x2b
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe2f 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	3302      	adds	r3, #2
 800200c:	2201      	movs	r2, #1
 800200e:	212d      	movs	r1, #45	; 0x2d
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe27 	bl	8001c64 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8002016:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe1e 	bl	8000c5c <__aeabi_i2f>
 8002020:	4602      	mov	r2, r0
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7fe fe6b 	bl	8000d04 <__aeabi_fmul>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ffb7 	bl	8000fa4 <__aeabi_f2iz>
 8002036:	4603      	mov	r3, r0
 8002038:	b21a      	sxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 800203e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe0a 	bl	8000c5c <__aeabi_i2f>
 8002048:	4602      	mov	r2, r0
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7fe fe57 	bl	8000d04 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe ffa3 	bl	8000fa4 <__aeabi_f2iz>
 800205e:	4603      	mov	r3, r0
 8002060:	b21a      	sxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 8002066:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fdf6 	bl	8000c5c <__aeabi_i2f>
 8002070:	4602      	mov	r2, r0
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <TM_LIS302DL_INT_ReadAxes+0xd4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f7fe fe43 	bl	8000d04 <__aeabi_fmul>
 800207e:	4603      	mov	r3, r0
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe ff8f 	bl	8000fa4 <__aeabi_f2iz>
 8002086:	4603      	mov	r3, r0
 8002088:	b21a      	sxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 800209e:	89fb      	ldrh	r3, [r7, #14]
 80020a0:	425b      	negs	r3, r3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b21a      	sxth	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	801a      	strh	r2, [r3, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000844 	.word	0x20000844

080020b8 <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <TM_LIS302DL_LIS3DSH_INT_Delay+0x20>)
 80020c0:	607b      	str	r3, [r7, #4]
	while (delay--);
 80020c2:	bf00      	nop
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1fa      	bne.n	80020c4 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	000f4240 	.word	0x000f4240

080020dc <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <TM_SPI_Init+0xc8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10a      	bne.n	8002106 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 80020f0:	78f9      	ldrb	r1, [r7, #3]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2320      	movs	r3, #32
 80020fe:	2200      	movs	r2, #0
 8002100:	4828      	ldr	r0, [pc, #160]	; (80021a4 <TM_SPI_Init+0xc8>)
 8002102:	f000 f8f5 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <TM_SPI_Init+0xcc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10a      	bne.n	8002124 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 800210e:	78f9      	ldrb	r1, [r7, #3]
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2320      	movs	r3, #32
 800211c:	2200      	movs	r2, #0
 800211e:	4822      	ldr	r0, [pc, #136]	; (80021a8 <TM_SPI_Init+0xcc>)
 8002120:	f000 f8e6 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <TM_SPI_Init+0xd0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d10a      	bne.n	8002142 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 800212c:	78f9      	ldrb	r1, [r7, #3]
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2320      	movs	r3, #32
 800213a:	2200      	movs	r2, #0
 800213c:	481b      	ldr	r0, [pc, #108]	; (80021ac <TM_SPI_Init+0xd0>)
 800213e:	f000 f8d7 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <TM_SPI_Init+0xd4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10a      	bne.n	8002160 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 800214a:	78f9      	ldrb	r1, [r7, #3]
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2320      	movs	r3, #32
 8002158:	2200      	movs	r2, #0
 800215a:	4815      	ldr	r0, [pc, #84]	; (80021b0 <TM_SPI_Init+0xd4>)
 800215c:	f000 f8c8 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <TM_SPI_Init+0xd8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d10a      	bne.n	800217e <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8002168:	78f9      	ldrb	r1, [r7, #3]
 800216a:	2300      	movs	r3, #0
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2320      	movs	r3, #32
 8002176:	2200      	movs	r2, #0
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <TM_SPI_Init+0xd8>)
 800217a:	f000 f8b9 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <TM_SPI_Init+0xdc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10a      	bne.n	800219c <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8002186:	78f9      	ldrb	r1, [r7, #3]
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2320      	movs	r3, #32
 8002194:	2200      	movs	r2, #0
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <TM_SPI_Init+0xdc>)
 8002198:	f000 f8aa 	bl	80022f0 <TM_SPIx_Init>
	}
#endif
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40013000 	.word	0x40013000
 80021a8:	40003800 	.word	0x40003800
 80021ac:	40003c00 	.word	0x40003c00
 80021b0:	40013400 	.word	0x40013400
 80021b4:	40015000 	.word	0x40015000
 80021b8:	40015400 	.word	0x40015400

080021bc <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d031      	beq.n	800223a <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80021d6:	bf00      	nop
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	891b      	ldrh	r3, [r3, #8]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f8      	beq.n	80021d8 <TM_SPI_WriteMulti+0x1c>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	891b      	ldrh	r3, [r3, #8]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f1      	bne.n	80021d8 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e01a      	b.n	8002230 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8002208:	bf00      	nop
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	891b      	ldrh	r3, [r3, #8]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f8      	beq.n	800220a <TM_SPI_WriteMulti+0x4e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	891b      	ldrh	r3, [r3, #8]
 800221c:	b29b      	uxth	r3, r3
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f1      	bne.n	800220a <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	899b      	ldrh	r3, [r3, #12]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	d3e0      	bcc.n	80021fa <TM_SPI_WriteMulti+0x3e>
 8002238:	e000      	b.n	800223c <TM_SPI_WriteMulti+0x80>

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800223a:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Read data register */
		(void)SPIx->DR;
	}
}
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d034      	beq.n	80022cc <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8002262:	bf00      	nop
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	891b      	ldrh	r3, [r3, #8]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f8      	beq.n	8002264 <TM_SPI_ReadMulti+0x20>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	891b      	ldrh	r3, [r3, #8]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f1      	bne.n	8002264 <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e01d      	b.n	80022c2 <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 800228e:	bf00      	nop
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	891b      	ldrh	r3, [r3, #8]
 8002294:	b29b      	uxth	r3, r3
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f8      	beq.n	8002290 <TM_SPI_ReadMulti+0x4c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	891b      	ldrh	r3, [r3, #8]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f1      	bne.n	8002290 <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4413      	add	r3, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	8992      	ldrh	r2, [r2, #12]
 80022b6:	b292      	uxth	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
	SPI_CHECK_ENABLED(SPIx);
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
	
	for (i = 0; i < count; i++) {
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3dd      	bcc.n	8002286 <TM_SPI_ReadMulti+0x42>
 80022ca:	e000      	b.n	80022ce <TM_SPI_ReadMulti+0x8a>

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80022cc:	bf00      	nop
		SPI_WAIT(SPIx);
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	70fb      	strb	r3, [r7, #3]
 8002302:	460b      	mov	r3, r1
 8002304:	70bb      	strb	r3, [r7, #2]
 8002306:	4613      	mov	r3, r2
 8002308:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f86a 	bl	80013e8 <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a51      	ldr	r2, [pc, #324]	; (800245c <TM_SPIx_Init+0x16c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d10b      	bne.n	8002334 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <TM_SPIx_Init+0x170>)
 800231e:	4b50      	ldr	r3, [pc, #320]	; (8002460 <TM_SPIx_Init+0x170>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002326:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f8a4 	bl	8002478 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 8002330:	2300      	movs	r3, #0
 8002332:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <TM_SPIx_Init+0x174>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10b      	bne.n	8002354 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <TM_SPIx_Init+0x170>)
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <TM_SPIx_Init+0x170>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002346:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f8c4 	bl	80024d8 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8002350:	2300      	movs	r3, #0
 8002352:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a44      	ldr	r2, [pc, #272]	; (8002468 <TM_SPIx_Init+0x178>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10b      	bne.n	8002374 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 800235c:	4a40      	ldr	r2, [pc, #256]	; (8002460 <TM_SPIx_Init+0x170>)
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <TM_SPIx_Init+0x170>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f900 	bl	8002570 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 8002370:	2300      	movs	r3, #0
 8002372:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <TM_SPIx_Init+0x17c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10b      	bne.n	8002394 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <TM_SPIx_Init+0x170>)
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <TM_SPIx_Init+0x170>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002386:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f922 	bl	80025d4 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 8002390:	2300      	movs	r3, #0
 8002392:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <TM_SPIx_Init+0x180>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10b      	bne.n	80023b4 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 800239c:	4a30      	ldr	r2, [pc, #192]	; (8002460 <TM_SPIx_Init+0x170>)
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <TM_SPIx_Init+0x170>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a6:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f942 	bl	8002634 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <TM_SPIx_Init+0x184>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d10b      	bne.n	80023d4 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 80023bc:	4a28      	ldr	r2, [pc, #160]	; (8002460 <TM_SPIx_Init+0x170>)
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <TM_SPIx_Init+0x170>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c6:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f96e 	bl	80026ac <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 80023d4:	883b      	ldrh	r3, [r7, #0]
 80023d6:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80023d8:	2300      	movs	r3, #0
 80023da:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 80023dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023de:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 80023e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e2:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80023e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e8:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80023f0:	2300      	movs	r3, #0
 80023f2:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80023f4:	2300      	movs	r3, #0
 80023f6:	82bb      	strh	r3, [r7, #20]
 80023f8:	e016      	b.n	8002428 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 80023fa:	78bb      	ldrb	r3, [r7, #2]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d104      	bne.n	800240a <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002400:	2300      	movs	r3, #0
 8002402:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002404:	2301      	movs	r3, #1
 8002406:	82bb      	strh	r3, [r7, #20]
 8002408:	e00e      	b.n	8002428 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 800240a:	78bb      	ldrb	r3, [r7, #2]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d104      	bne.n	800241a <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002410:	2302      	movs	r3, #2
 8002412:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002414:	2300      	movs	r3, #0
 8002416:	82bb      	strh	r3, [r7, #20]
 8002418:	e006      	b.n	8002428 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 800241a:	78bb      	ldrb	r3, [r7, #2]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d103      	bne.n	8002428 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002420:	2302      	movs	r3, #2
 8002422:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002424:	2301      	movs	r3, #1
 8002426:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe ff8e 	bl	8001360 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	801a      	strh	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013000 	.word	0x40013000
 8002460:	40023800 	.word	0x40023800
 8002464:	40003800 	.word	0x40003800
 8002468:	40003c00 	.word	0x40003c00
 800246c:	40013400 	.word	0x40013400
 8002470:	40015000 	.word	0x40015000
 8002474:	40015400 	.word	0x40015400

08002478 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af02      	add	r7, sp, #8
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 8002488:	2305      	movs	r3, #5
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2303      	movs	r3, #3
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2300      	movs	r3, #0
 8002492:	2200      	movs	r2, #0
 8002494:	21e0      	movs	r1, #224	; 0xe0
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <TM_SPI1_INT_InitPins+0x54>)
 8002498:	f7ff f9d8 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d109      	bne.n	80024b6 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80024a2:	2305      	movs	r3, #5
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2303      	movs	r3, #3
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	2138      	movs	r1, #56	; 0x38
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <TM_SPI1_INT_InitPins+0x58>)
 80024b2:	f7ff f9cb 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d103      	bne.n	80024c4 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 80024bc:	2105      	movs	r1, #5
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <TM_SPI1_INT_InitPins+0x5c>)
 80024c0:	f7ff ff0a 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40013000 	.word	0x40013000

080024d8 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af02      	add	r7, sp, #8
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d114      	bne.n	8002512 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 80024e8:	2305      	movs	r3, #5
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	2303      	movs	r3, #3
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <TM_SPI2_INT_InitPins+0x88>)
 80024fa:	f7ff f9a7 	bl	800184c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 80024fe:	2305      	movs	r3, #5
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2303      	movs	r3, #3
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	210c      	movs	r1, #12
 800250c:	4815      	ldr	r0, [pc, #84]	; (8002564 <TM_SPI2_INT_InitPins+0x8c>)
 800250e:	f7ff f99d 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10a      	bne.n	800252e <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002518:	2305      	movs	r3, #5
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2303      	movs	r3, #3
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <TM_SPI2_INT_InitPins+0x88>)
 800252a:	f7ff f98f 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d109      	bne.n	8002548 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8002534:	2305      	movs	r3, #5
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2303      	movs	r3, #3
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	2200      	movs	r2, #0
 8002540:	210d      	movs	r1, #13
 8002542:	4809      	ldr	r0, [pc, #36]	; (8002568 <TM_SPI2_INT_InitPins+0x90>)
 8002544:	f7ff f982 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d103      	bne.n	8002556 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 800254e:	2105      	movs	r1, #5
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <TM_SPI2_INT_InitPins+0x94>)
 8002552:	f7ff fec1 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40022000 	.word	0x40022000
 800256c:	40003800 	.word	0x40003800

08002570 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af02      	add	r7, sp, #8
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 8002580:	2306      	movs	r3, #6
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2303      	movs	r3, #3
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2300      	movs	r3, #0
 800258a:	2200      	movs	r2, #0
 800258c:	2138      	movs	r1, #56	; 0x38
 800258e:	480e      	ldr	r0, [pc, #56]	; (80025c8 <TM_SPI3_INT_InitPins+0x58>)
 8002590:	f7ff f95c 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10a      	bne.n	80025b0 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 800259a:	2306      	movs	r3, #6
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2303      	movs	r3, #3
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <TM_SPI3_INT_InitPins+0x5c>)
 80025ac:	f7ff f94e 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d103      	bne.n	80025be <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 80025b6:	2106      	movs	r1, #6
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <TM_SPI3_INT_InitPins+0x60>)
 80025ba:	f7ff fe8d 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020400 	.word	0x40020400
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40003c00 	.word	0x40003c00

080025d4 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 80025e4:	2305      	movs	r3, #5
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2303      	movs	r3, #3
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	2200      	movs	r2, #0
 80025f0:	2164      	movs	r1, #100	; 0x64
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <TM_SPI4_INT_InitPins+0x58>)
 80025f4:	f7ff f92a 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10a      	bne.n	8002614 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 80025fe:	2305      	movs	r3, #5
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2303      	movs	r3, #3
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800260e:	4807      	ldr	r0, [pc, #28]	; (800262c <TM_SPI4_INT_InitPins+0x58>)
 8002610:	f7ff f91c 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d103      	bne.n	8002622 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 800261a:	2105      	movs	r1, #5
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <TM_SPI4_INT_InitPins+0x5c>)
 800261e:	f7ff fe5b 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40013400 	.word	0x40013400

08002634 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af02      	add	r7, sp, #8
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002644:	2305      	movs	r3, #5
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	2303      	movs	r3, #3
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	2200      	movs	r2, #0
 8002650:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002654:	4812      	ldr	r0, [pc, #72]	; (80026a0 <TM_SPI5_INT_InitPins+0x6c>)
 8002656:	f7ff f8f9 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d114      	bne.n	800268a <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002660:	2305      	movs	r3, #5
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2303      	movs	r3, #3
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <TM_SPI5_INT_InitPins+0x6c>)
 8002672:	f7ff f8eb 	bl	800184c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8002676:	2305      	movs	r3, #5
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2303      	movs	r3, #3
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2200      	movs	r2, #0
 8002682:	21c0      	movs	r1, #192	; 0xc0
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <TM_SPI5_INT_InitPins+0x70>)
 8002686:	f7ff f8e1 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d103      	bne.n	8002698 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8002690:	2105      	movs	r1, #5
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <TM_SPI5_INT_InitPins+0x74>)
 8002694:	f7ff fe20 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40015000 	.word	0x40015000

080026ac <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 80026bc:	2305      	movs	r3, #5
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	2303      	movs	r3, #3
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2300      	movs	r3, #0
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <TM_SPI6_INT_InitPins+0x3c>)
 80026ce:	f7ff f8bd 	bl	800184c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d103      	bne.n	80026e0 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 80026d8:	2105      	movs	r1, #5
 80026da:	4804      	ldr	r0, [pc, #16]	; (80026ec <TM_SPI6_INT_InitPins+0x40>)
 80026dc:	f7ff fdfc 	bl	80022d8 <TM_SPI_InitCustomPinsCallback>
	}
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40015400 	.word	0x40015400

080026f0 <average>:
        }
        printf("\n");
    }
}

int16_t average(int16_t *array, int begin, int end) {
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
    int16_t sum = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	82fb      	strh	r3, [r7, #22]
    int i;
    for(i = begin; i < end; i++) {
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	e00d      	b.n	8002722 <average+0x32>
        sum += array[i];
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002712:	b29a      	uxth	r2, r3
 8002714:	8afb      	ldrh	r3, [r7, #22]
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	82fb      	strh	r3, [r7, #22]
}

int16_t average(int16_t *array, int begin, int end) {
    int16_t sum = 0;
    int i;
    for(i = begin; i < end; i++) {
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	3301      	adds	r3, #1
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbed      	blt.n	8002706 <average+0x16>
        sum += array[i];
    }
    return sum / (int16_t) end - begin;
 800272a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	b212      	sxth	r2, r2
 8002732:	fb93 f3f2 	sdiv	r3, r3, r2
 8002736:	b29a      	uxth	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	b29b      	uxth	r3, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	b29b      	uxth	r3, r3
 8002740:	b21b      	sxth	r3, r3
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <min>:

int16_t min(int16_t a, int16_t b, int16_t c) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
 8002756:	460b      	mov	r3, r1
 8002758:	80bb      	strh	r3, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	807b      	strh	r3, [r7, #2]
    if(a < b) {
 800275e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	da08      	bge.n	800277c <min+0x30>
        return a < c ? a : c;
 800276a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800276e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002772:	4293      	cmp	r3, r2
 8002774:	bfa8      	it	ge
 8002776:	4613      	movge	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	e007      	b.n	800278c <min+0x40>
    }
    return b < c ? b : c;
 800277c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002784:	4293      	cmp	r3, r2
 8002786:	bfa8      	it	ge
 8002788:	4613      	movge	r3, r2
 800278a:	b21b      	sxth	r3, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <ewma>:

void ewma(int16_t *array, int size, int16_t *result) {
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]

    int s = size < 6 ? size : 6;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	bfa8      	it	ge
 80027aa:	2306      	movge	r3, #6
 80027ac:	617b      	str	r3, [r7, #20]
    int16_t forecasted = average(array, 0, s);
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	2100      	movs	r1, #0
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff ff9c 	bl	80026f0 <average>
 80027b8:	4603      	mov	r3, r0
 80027ba:	83fb      	strh	r3, [r7, #30]
    int16_t smoothed = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	827b      	strh	r3, [r7, #18]

    int i;

    for (i = 1; i <= size; i++) {
 80027c0:	2301      	movs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e03a      	b.n	800283c <ewma+0xa4>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027cc:	3b01      	subs	r3, #1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe47 	bl	800046c <__aeabi_i2d>
 80027de:	a31c      	add	r3, pc, #112	; (adr r3, 8002850 <ewma+0xb8>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fd fea8 	bl	8000538 <__aeabi_dmul>
 80027e8:	4603      	mov	r3, r0
 80027ea:	460c      	mov	r4, r1
 80027ec:	4625      	mov	r5, r4
 80027ee:	461c      	mov	r4, r3
 80027f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fe39 	bl	800046c <__aeabi_i2d>
 80027fa:	a317      	add	r3, pc, #92	; (adr r3, 8002858 <ewma+0xc0>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f7fd fe9a 	bl	8000538 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fce2 	bl	80001d4 <__adddf3>
 8002810:	4603      	mov	r3, r0
 8002812:	460c      	mov	r4, r1
 8002814:	4618      	mov	r0, r3
 8002816:	4621      	mov	r1, r4
 8002818:	f7fe f93e 	bl	8000a98 <__aeabi_d2iz>
 800281c:	4603      	mov	r3, r0
 800281e:	827b      	strh	r3, [r7, #18]
        forecasted = smoothed;
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	83fb      	strh	r3, [r7, #30]
        result[i - 1] = smoothed;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800282a:	3b01      	subs	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	8a7a      	ldrh	r2, [r7, #18]
 8002834:	801a      	strh	r2, [r3, #0]
    int16_t forecasted = average(array, 0, s);
    int16_t smoothed = 0;

    int i;

    for (i = 1; i <= size; i++) {
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3301      	adds	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	ddc0      	ble.n	80027c6 <ewma+0x2e>
        smoothed = EWMA_ALPHA * array[i - 1] + (1.0 - EWMA_ALPHA) * forecasted;
        forecasted = smoothed;
        result[i - 1] = smoothed;
    }

}
 8002844:	bf00      	nop
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bdb0      	pop	{r4, r5, r7, pc}
 800284c:	f3af 8000 	nop.w
 8002850:	33333333 	.word	0x33333333
 8002854:	3fd33333 	.word	0x3fd33333
 8002858:	66666666 	.word	0x66666666
 800285c:	3fe66666 	.word	0x3fe66666

08002860 <dtwDistance>:

double dtwDistance(int16_t *ax, int16_t *ay, int16_t *az, int sa, int16_t *bx, int16_t *by, int16_t *bz, int sb) {
 8002860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002864:	b093      	sub	sp, #76	; 0x4c
 8002866:	af00      	add	r7, sp, #0
 8002868:	61f8      	str	r0, [r7, #28]
 800286a:	61b9      	str	r1, [r7, #24]
 800286c:	617a      	str	r2, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	466b      	mov	r3, sp
 8002872:	607b      	str	r3, [r7, #4]

	int16_t acc[sb][sa];
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	461a      	mov	r2, r3
 8002878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800287a:	4619      	mov	r1, r3
 800287c:	4613      	mov	r3, r2
 800287e:	3b01      	subs	r3, #1
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
 8002882:	4613      	mov	r3, r2
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	ea4f 1b04 	mov.w	fp, r4, lsl #4
 800288c:	ea4b 7b13 	orr.w	fp, fp, r3, lsr #28
 8002890:	ea4f 1a03 	mov.w	sl, r3, lsl #4
 8002894:	4613      	mov	r3, r2
 8002896:	005c      	lsls	r4, r3, #1
 8002898:	60f9      	str	r1, [r7, #12]
 800289a:	460b      	mov	r3, r1
 800289c:	3b01      	subs	r3, #1
 800289e:	633b      	str	r3, [r7, #48]	; 0x30
 80028a0:	60ba      	str	r2, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	461a      	mov	r2, r3
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	fb02 fc01 	mul.w	ip, r2, r1
 80028b6:	fb00 fe03 	mul.w	lr, r0, r3
 80028ba:	44e6      	add	lr, ip
 80028bc:	fba0 2302 	umull	r2, r3, r0, r2
 80028c0:	eb0e 0103 	add.w	r1, lr, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	ea4f 1903 	mov.w	r9, r3, lsl #4
 80028ca:	ea49 7912 	orr.w	r9, r9, r2, lsr #28
 80028ce:	ea4f 1802 	mov.w	r8, r2, lsl #4
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	461a      	mov	r2, r3
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	fb02 fc01 	mul.w	ip, r2, r1
 80028e6:	fb00 fe03 	mul.w	lr, r0, r3
 80028ea:	44e6      	add	lr, ip
 80028ec:	fba0 2302 	umull	r2, r3, r0, r2
 80028f0:	eb0e 0103 	add.w	r1, lr, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	011e      	lsls	r6, r3, #4
 80028f8:	ea46 7612 	orr.w	r6, r6, r2, lsr #28
 80028fc:	0115      	lsls	r5, r2, #4
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	3301      	adds	r3, #1
 800290a:	3307      	adds	r3, #7
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	ebad 0d03 	sub.w	sp, sp, r3
 8002914:	466b      	mov	r3, sp
 8002916:	3301      	adds	r3, #1
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t dist;

    acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002924:	461a      	mov	r2, r3
 8002926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fd9c 	bl	800046c <__aeabi_i2d>
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293c:	f000 fc12 	bl	8003164 <pow>
 8002940:	4605      	mov	r5, r0
 8002942:	460e      	mov	r6, r1
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294a:	461a      	mov	r2, r3
 800294c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fd89 	bl	800046c <__aeabi_i2d>
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002962:	f000 fbff 	bl	8003164 <pow>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4628      	mov	r0, r5
 800296c:	4631      	mov	r1, r6
 800296e:	f7fd fc31 	bl	80001d4 <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4615      	mov	r5, r2
 8002978:	461e      	mov	r6, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	461a      	mov	r2, r3
 8002982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fd6e 	bl	800046c <__aeabi_i2d>
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002998:	f000 fbe4 	bl	8003164 <pow>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4628      	mov	r0, r5
 80029a2:	4631      	mov	r1, r6
 80029a4:	f7fd fc16 	bl	80001d4 <__adddf3>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f872 	bl	8000a98 <__aeabi_d2iz>
 80029b4:	4603      	mov	r3, r0
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	801a      	strh	r2, [r3, #0]

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 80029bc:	2301      	movs	r3, #1
 80029be:	647b      	str	r3, [r7, #68]	; 0x44
 80029c0:	e066      	b.n	8002a90 <dtwDistance+0x230>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
 80029c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	461a      	mov	r2, r3
 80029d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fd47 	bl	800046c <__aeabi_i2d>
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e6:	f000 fbbd 	bl	8003164 <pow>
 80029ea:	4605      	mov	r5, r0
 80029ec:	460e      	mov	r6, r1
 80029ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fa:	461a      	mov	r2, r3
 80029fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fd31 	bl	800046c <__aeabi_i2d>
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a12:	f000 fba7 	bl	8003164 <pow>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	f7fd fbd9 	bl	80001d4 <__adddf3>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4615      	mov	r5, r2
 8002a28:	461e      	mov	r6, r3
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4413      	add	r3, r2
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	461a      	mov	r2, r3
 8002a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd13 	bl	800046c <__aeabi_i2d>
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a4e:	f000 fb89 	bl	8003164 <pow>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4628      	mov	r0, r5
 8002a58:	4631      	mov	r1, r6
 8002a5a:	f7fd fbbb 	bl	80001d4 <__adddf3>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f817 	bl	8000a98 <__aeabi_d2iz>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
        acc[0][i] = acc[0][i - 1] + dist;
 8002a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b219      	sxth	r1, r3
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	int16_t dist;

    acc[0][0] = pow(ax[0] - bx[0], 2.0) + pow(ay[0] - by[0], 2.0) + pow(az[0] - bz[0], 2.0);

    // Accumulated distance - Row 0
    for (int i = 1; i < sa; i++) {
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	db94      	blt.n	80029c2 <dtwDistance+0x162>
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 8002a98:	2301      	movs	r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9c:	e06d      	b.n	8002b7a <dtwDistance+0x31a>
        dist = pow(ax[0] - bx[i], 2.0) + pow(ay[0] - by[i], 2.0) + pow(az[0] - bz[i], 2.0);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002aac:	4413      	add	r3, r2
 8002aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab2:	1acb      	subs	r3, r1, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fcd9 	bl	800046c <__aeabi_i2d>
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ac2:	f000 fb4f 	bl	8003164 <pow>
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	460e      	mov	r6, r1
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ad8:	4413      	add	r3, r2
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fcc3 	bl	800046c <__aeabi_i2d>
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aee:	f000 fb39 	bl	8003164 <pow>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4628      	mov	r0, r5
 8002af8:	4631      	mov	r1, r6
 8002afa:	f7fd fb6b 	bl	80001d4 <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4615      	mov	r5, r2
 8002b04:	461e      	mov	r6, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b14:	4413      	add	r3, r2
 8002b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fca5 	bl	800046c <__aeabi_i2d>
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2a:	f000 fb1b 	bl	8003164 <pow>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4628      	mov	r0, r5
 8002b34:	4631      	mov	r1, r6
 8002b36:	f7fd fb4d 	bl	80001d4 <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fd ffa9 	bl	8000a98 <__aeabi_d2iz>
 8002b46:	4603      	mov	r3, r0
 8002b48:	857b      	strh	r3, [r7, #42]	; 0x2a
        acc[i][0] = acc[i - 1][0] + dist;
 8002b4a:	0862      	lsrs	r2, r4, #1
 8002b4c:	0861      	lsrs	r1, r4, #1
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	fb00 f101 	mul.w	r1, r0, r1
 8002b58:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8002b5c:	b299      	uxth	r1, r3
 8002b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b60:	440b      	add	r3, r1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b218      	sxth	r0, r3
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b6a:	fb01 f202 	mul.w	r2, r1, r2
 8002b6e:	4601      	mov	r1, r0
 8002b70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dist = pow(ax[i] - bx[0], 2.0) + pow(ay[i] - by[0], 2.0) + pow(az[i] - bz[0], 2.0);
        acc[0][i] = acc[0][i - 1] + dist;
    }

    // Accumulated distance - Row 0
    for (int i = 1; i < sb; i++) {
 8002b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b76:	3301      	adds	r3, #1
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
 8002b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	db8d      	blt.n	8002a9e <dtwDistance+0x23e>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumlated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
 8002b82:	2301      	movs	r3, #1
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	e0b3      	b.n	8002cf0 <dtwDistance+0x490>
        for (int j = 1; j < sa; j++) {
 8002b88:	2301      	movs	r3, #1
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8c:	e0a8      	b.n	8002ce0 <dtwDistance+0x480>
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	1acb      	subs	r3, r1, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fc5e 	bl	800046c <__aeabi_i2d>
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bb8:	f000 fad4 	bl	8003164 <pow>
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	460e      	mov	r6, r1
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	1acb      	subs	r3, r1, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fc45 	bl	800046c <__aeabi_i2d>
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bea:	f000 fabb 	bl	8003164 <pow>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	f7fd faed 	bl	80001d4 <__adddf3>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4615      	mov	r5, r2
 8002c00:	461e      	mov	r6, r3
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c16:	4413      	add	r3, r2
 8002c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1c:	1acb      	subs	r3, r1, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc24 	bl	800046c <__aeabi_i2d>
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c2c:	f000 fa9a 	bl	8003164 <pow>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4628      	mov	r0, r5
 8002c36:	4631      	mov	r1, r6
 8002c38:	f7fd facc 	bl	80001d4 <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ff28 	bl	8000a98 <__aeabi_d2iz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	857b      	strh	r3, [r7, #42]	; 0x2a
            m = min(acc[i - 1][j - 1],
 8002c4c:	0861      	lsrs	r1, r4, #1
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	1e58      	subs	r0, r3, #1
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	fb00 f101 	mul.w	r1, r0, r1
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f933 5012 	ldrsh.w	r5, [r3, r2, lsl #1]
 8002c62:	0862      	lsrs	r2, r4, #1
                    acc[i - 1][j],
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	1e59      	subs	r1, r3, #1
    // Accumlated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	fb01 f102 	mul.w	r1, r1, r2
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	440a      	add	r2, r1
 8002c72:	f933 6012 	ldrsh.w	r6, [r3, r2, lsl #1]
 8002c76:	0861      	lsrs	r1, r4, #1
                    acc[i - 1][j],
                    acc[i][j - 1]);
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	1e5a      	subs	r2, r3, #1
    // Accumlated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
            dist = pow(ax[j] - bx[i], 2.0) + pow(ay[j] - by[i], 2.0) + pow(az[j] - bz[i], 2.0);
            m = min(acc[i - 1][j - 1],
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c80:	fb00 f101 	mul.w	r1, r0, r1
 8002c84:	440a      	add	r2, r1
 8002c86:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fd5c 	bl	800274c <min>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbe8 	bl	800046c <__aeabi_i2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	e9c7 2308 	strd	r2, r3, [r7, #32]
                    acc[i - 1][j],
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
 8002ca4:	0865      	lsrs	r5, r4, #1
 8002ca6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fbde 	bl	800046c <__aeabi_i2d>
 8002cb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb4:	f7fd fa8e 	bl	80001d4 <__adddf3>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd feea 	bl	8000a98 <__aeabi_d2iz>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b218      	sxth	r0, r3
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ccc:	fb02 f105 	mul.w	r1, r2, r5
 8002cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cd2:	440a      	add	r2, r1
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    }

    // Accumlated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
        for (int j = 1; j < sa; j++) {
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	3301      	adds	r3, #1
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f6ff af52 	blt.w	8002b8e <dtwDistance+0x32e>
        acc[i][0] = acc[i - 1][0] + dist;
    }

    // Accumlated distance - Remaining
    double m;
    for (int i = 1; i < sb; i++) {
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cec:	3301      	adds	r3, #1
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f6ff af47 	blt.w	8002b88 <dtwDistance+0x328>
                    acc[i][j - 1]);
            acc[i][j] = m + dist;
        }
    }

    return sqrt((double) acc[sb - 1][sa - 1]);
 8002cfa:	0861      	lsrs	r1, r4, #1
 8002cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	fb00 f101 	mul.w	r1, r0, r1
 8002d0a:	440a      	add	r2, r1
 8002d0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbab 	bl	800046c <__aeabi_i2d>
 8002d16:	4603      	mov	r3, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	f000 fb87 	bl	8003430 <sqrt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	460c      	mov	r4, r1
 8002d26:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	374c      	adds	r7, #76	; 0x4c
 8002d30:	46bd      	mov	sp, r7
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d36:	bf00      	nop

08002d38 <knn>:

int knn(int16_t *inputX, int16_t *inputY, int16_t *inputZ, int size) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b08d      	sub	sp, #52	; 0x34
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	double distanceO = dtwDistance(smooth8Ox, smooth8Oy, smooth8Oz, 148, inputX, inputY, inputZ, size);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	9303      	str	r3, [sp, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2394      	movs	r3, #148	; 0x94
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <knn+0x78>)
 8002d5a:	4916      	ldr	r1, [pc, #88]	; (8002db4 <knn+0x7c>)
 8002d5c:	4816      	ldr	r0, [pc, #88]	; (8002db8 <knn+0x80>)
 8002d5e:	f7ff fd7f 	bl	8002860 <dtwDistance>
 8002d62:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double distanceL = dtwDistance(smooth8Lx, smooth8Ly, smooth8Lz, 148, inputX, inputY, inputZ, size);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9303      	str	r3, [sp, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2394      	movs	r3, #148	; 0x94
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <knn+0x84>)
 8002d7a:	4911      	ldr	r1, [pc, #68]	; (8002dc0 <knn+0x88>)
 8002d7c:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <knn+0x8c>)
 8002d7e:	f7ff fd6f 	bl	8002860 <dtwDistance>
 8002d82:	e9c7 0104 	strd	r0, r1, [r7, #16]
    return distanceO < distanceL ? 0 : 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	461c      	mov	r4, r3
 8002d8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d92:	f7fd fe43 	bl	8000a1c <__aeabi_dcmplt>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <knn+0x68>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	461c      	mov	r4, r3
 8002da0:	b2e3      	uxtb	r3, r4
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	20000260 	.word	0x20000260
 8002db4:	20000138 	.word	0x20000138
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	200005d8 	.word	0x200005d8
 8002dc0:	200004b0 	.word	0x200004b0
 8002dc4:	20000388 	.word	0x20000388

08002dc8 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <Delayms+0x50>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd6:	f3ef 8305 	mrs	r3, IPSR
 8002dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ddc:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d111      	bne.n	8002e06 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8002de2:	bf00      	nop
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <Delayms+0x50>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3f8      	bcc.n	8002de4 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8002df2:	e00b      	b.n	8002e0c <Delayms+0x44>
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <Delayms+0x54>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <Delayms+0x3e>
				millis--;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	607b      	str	r3, [r7, #4]
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f3      	bne.n	8002df4 <Delayms+0x2c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000788 	.word	0x20000788
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <setup>:
#include "tm_stm32f4_lis302dl_lis3dsh.h"
#include "TestSeries.h"
#include "DTW.h"
#include "LinkedList.h"

void setup() {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	SystemInit();
 8002e24:	f000 f8d0 	bl	8002fc8 <SystemInit>
	TM_DELAY_Init();
 8002e28:	f7fe fc9a 	bl	8001760 <TM_DELAY_Init>
	TM_DISCO_LedInit();
 8002e2c:	f7fe fcc0 	bl	80017b0 <TM_DISCO_LedInit>
	TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_8G, TM_LIS3DSH_Filter_50Hz);
 8002e30:	2103      	movs	r1, #3
 8002e32:	2003      	movs	r0, #3
 8002e34:	f7fe fe6a 	bl	8001b0c <TM_LIS302DL_LIS3DSH_Init>
	TM_DISCO_ButtonInit();
 8002e38:	f7fe fcd2 	bl	80017e0 <TM_DISCO_ButtonInit>
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <main>:



int main(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	f5ad 6de1 	sub.w	sp, sp, #1800	; 0x708
 8002e46:	af00      	add	r7, sp, #0

	u_int16_t time = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8a7 3706 	strh.w	r3, [r7, #1798]	; 0x706
	int16_t signalY[SAMPLEAMOUNT];
	int16_t signalZ[SAMPLEAMOUNT];

	TM_LIS302DL_LIS3DSH_t Axes_Data;

	setup();
 8002e4e:	f7ff ffe7 	bl	8002e20 <setup>

	TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <main+0x108>)
 8002e54:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002e58:	831a      	strh	r2, [r3, #24]

	// Waiting for blue button to start sampling
	while(!TM_DISCO_ButtonPressed());
 8002e5a:	bf00      	nop
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <main+0x10c>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f9      	beq.n	8002e5c <main+0x1c>

	TM_DISCO_LedOff(LED_BLUE | LED_ORANGE);
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <main+0x108>)
 8002e6a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002e6e:	835a      	strh	r2, [r3, #26]
	TM_DISCO_LedOn(LED_RED | LED_GREEN);
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <main+0x108>)
 8002e72:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8002e76:	831a      	strh	r2, [r3, #24]

	int i = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
	do {

		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8002e7e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fe72 	bl	8001b6c <TM_LIS302DL_LIS3DSH_ReadAxes>
		signalX[i] = Axes_Data.X;
 8002e88:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002e8c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002e90:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8002e94:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
 8002e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		signalY[i] = Axes_Data.Y;
 8002e9c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002ea0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002ea4:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002ea8:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
 8002eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		signalZ[i++] = Axes_Data.Z;
 8002eb0:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	f8c7 2700 	str.w	r2, [r7, #1792]	; 0x700
 8002eba:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8002ebe:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8002ec2:	f507 7261 	add.w	r2, r7, #900	; 0x384
 8002ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		Delayms(SAMPLEPERIOD);
 8002eca:	2014      	movs	r0, #20
 8002ecc:	f7ff ff7c 	bl	8002dc8 <Delayms>
		time += SAMPLEPERIOD;
 8002ed0:	f8b7 3706 	ldrh.w	r3, [r7, #1798]	; 0x706
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	f8a7 3706 	strh.w	r3, [r7, #1798]	; 0x706

	} while(time < SAMPLETOTALTIME);
 8002eda:	f8b7 3706 	ldrh.w	r3, [r7, #1798]	; 0x706
 8002ede:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002ee2:	d3cc      	bcc.n	8002e7e <main+0x3e>

	TM_DISCO_LedOff(LED_RED | LED_GREEN);
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <main+0x108>)
 8002ee6:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8002eea:	835a      	strh	r2, [r3, #26]

	int16_t smoothX[SAMPLEAMOUNT];
	int16_t smoothY[SAMPLEAMOUNT];
	int16_t smoothZ[SAMPLEAMOUNT];

	ewma(signalX, SAMPLEAMOUNT, smoothX);
 8002eec:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8002ef0:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8002ef4:	2194      	movs	r1, #148	; 0x94
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fc4e 	bl	8002798 <ewma>
	ewma(signalY, SAMPLEAMOUNT, smoothY);
 8002efc:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8002f00:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002f04:	2194      	movs	r1, #148	; 0x94
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fc46 	bl	8002798 <ewma>
	ewma(signalZ, SAMPLEAMOUNT, smoothZ);
 8002f0c:	1d3a      	adds	r2, r7, #4
 8002f0e:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8002f12:	2194      	movs	r1, #148	; 0x94
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fc3f 	bl	8002798 <ewma>

	int gesture = knn(smoothX, smoothY, smoothZ, SAMPLEAMOUNT);
 8002f1a:	1d3a      	adds	r2, r7, #4
 8002f1c:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8002f20:	f507 7015 	add.w	r0, r7, #596	; 0x254
 8002f24:	2394      	movs	r3, #148	; 0x94
 8002f26:	f7ff ff07 	bl	8002d38 <knn>
 8002f2a:	f8c7 06fc 	str.w	r0, [r7, #1788]	; 0x6fc

	while(1) {
		TM_DISCO_LedOn(gesture == 0 ? LED_ORANGE : LED_BLUE);
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <main+0x108>)
 8002f30:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	; 0x6fc
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <main+0xfe>
 8002f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3c:	e001      	b.n	8002f42 <main+0x102>
 8002f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f42:	8313      	strh	r3, [r2, #24]
	}
 8002f44:	e7f3      	b.n	8002f2e <main+0xee>
 8002f46:	bf00      	nop
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40020000 	.word	0x40020000

08002f50 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8002f5a:	bf00      	nop
}
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8002f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f7a:	e003      	b.n	8002f84 <LoopCopyDataInit>

08002f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f82:	3104      	adds	r1, #4

08002f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f84:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f8c:	d3f6      	bcc.n	8002f7c <CopyDataInit>
  ldr  r2, =_sbss
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f90:	e002      	b.n	8002f98 <LoopFillZerobss>

08002f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f94:	f842 3b04 	str.w	r3, [r2], #4

08002f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f9c:	d3f9      	bcc.n	8002f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f9e:	f000 f813 	bl	8002fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f000 f8b9 	bl	8003118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa6:	f7ff ff4b 	bl	8002e40 <main>
  bx  lr    
 8002faa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fac:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002fb0:	08004320 	.word	0x08004320
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fb8:	2000076c 	.word	0x2000076c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002fbc:	2000076c 	.word	0x2000076c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fc0:	20000848 	.word	0x20000848

08002fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC_IRQHandler>
	...

08002fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <SystemInit+0x50>)
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <SystemInit+0x50>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <SystemInit+0x50>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fde:	4a0e      	ldr	r2, [pc, #56]	; (8003018 <SystemInit+0x50>)
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <SystemInit+0x50>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <SystemInit+0x50>)
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <SystemInit+0x54>)
 8002ff2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ff4:	4a08      	ldr	r2, [pc, #32]	; (8003018 <SystemInit+0x50>)
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <SystemInit+0x50>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SystemInit+0x50>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003006:	f000 f80d 	bl	8003024 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SystemInit+0x58>)
 800300c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003010:	609a      	str	r2, [r3, #8]
#endif
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	24003010 	.word	0x24003010
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003032:	4a35      	ldr	r2, [pc, #212]	; (8003108 <SetSysClock+0xe4>)
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <SetSysClock+0xe4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <SetSysClock+0xe4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3301      	adds	r3, #1
 800304c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <SetSysClock+0x38>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800305a:	d1f0      	bne.n	800303e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <SetSysClock+0xe4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003068:	2301      	movs	r3, #1
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	e001      	b.n	8003072 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d142      	bne.n	80030fe <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003078:	4a23      	ldr	r2, [pc, #140]	; (8003108 <SetSysClock+0xe4>)
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <SetSysClock+0xe4>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003084:	4a21      	ldr	r2, [pc, #132]	; (800310c <SetSysClock+0xe8>)
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <SetSysClock+0xe8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <SetSysClock+0xe4>)
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <SetSysClock+0xe4>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003098:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <SetSysClock+0xe4>)
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <SetSysClock+0xe4>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <SetSysClock+0xe4>)
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <SetSysClock+0xe4>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80030ae:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <SetSysClock+0xe4>)
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <SetSysClock+0xec>)
 80030b4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <SetSysClock+0xe4>)
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <SetSysClock+0xe4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80030c2:	bf00      	nop
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <SetSysClock+0xe4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f9      	beq.n	80030c4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <SetSysClock+0xf0>)
 80030d2:	f240 6205 	movw	r2, #1541	; 0x605
 80030d6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <SetSysClock+0xe4>)
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <SetSysClock+0xe4>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <SetSysClock+0xe4>)
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <SetSysClock+0xe4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80030f0:	bf00      	nop
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <SetSysClock+0xe4>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d1f9      	bne.n	80030f2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	07405408 	.word	0x07405408
 8003114:	40023c00 	.word	0x40023c00

08003118 <__libc_init_array>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <__libc_init_array+0x3c>)
 800311c:	4c0e      	ldr	r4, [pc, #56]	; (8003158 <__libc_init_array+0x40>)
 800311e:	1ae4      	subs	r4, r4, r3
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	2500      	movs	r5, #0
 8003124:	461e      	mov	r6, r3
 8003126:	42a5      	cmp	r5, r4
 8003128:	d004      	beq.n	8003134 <__libc_init_array+0x1c>
 800312a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312e:	4798      	blx	r3
 8003130:	3501      	adds	r5, #1
 8003132:	e7f8      	b.n	8003126 <__libc_init_array+0xe>
 8003134:	f001 f88c 	bl	8004250 <_init>
 8003138:	4c08      	ldr	r4, [pc, #32]	; (800315c <__libc_init_array+0x44>)
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <__libc_init_array+0x48>)
 800313c:	1ae4      	subs	r4, r4, r3
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	2500      	movs	r5, #0
 8003142:	461e      	mov	r6, r3
 8003144:	42a5      	cmp	r5, r4
 8003146:	d004      	beq.n	8003152 <__libc_init_array+0x3a>
 8003148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800314c:	4798      	blx	r3
 800314e:	3501      	adds	r5, #1
 8003150:	e7f8      	b.n	8003144 <__libc_init_array+0x2c>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	08004318 	.word	0x08004318
 8003158:	08004318 	.word	0x08004318
 800315c:	0800431c 	.word	0x0800431c
 8003160:	08004318 	.word	0x08004318

08003164 <pow>:
 8003164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800342c <pow+0x2c8>
 800316c:	b08f      	sub	sp, #60	; 0x3c
 800316e:	461d      	mov	r5, r3
 8003170:	4682      	mov	sl, r0
 8003172:	468b      	mov	fp, r1
 8003174:	4614      	mov	r4, r2
 8003176:	f000 f9b3 	bl	80034e0 <__ieee754_pow>
 800317a:	f999 3000 	ldrsb.w	r3, [r9]
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	e9cd 0100 	strd	r0, r1, [sp]
 8003186:	46c8      	mov	r8, r9
 8003188:	f000 813d 	beq.w	8003406 <pow+0x2a2>
 800318c:	4622      	mov	r2, r4
 800318e:	462b      	mov	r3, r5
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	f7fd fc6a 	bl	8000a6c <__aeabi_dcmpun>
 8003198:	4606      	mov	r6, r0
 800319a:	2800      	cmp	r0, #0
 800319c:	f040 8133 	bne.w	8003406 <pow+0x2a2>
 80031a0:	4652      	mov	r2, sl
 80031a2:	465b      	mov	r3, fp
 80031a4:	4650      	mov	r0, sl
 80031a6:	4659      	mov	r1, fp
 80031a8:	f7fd fc60 	bl	8000a6c <__aeabi_dcmpun>
 80031ac:	9003      	str	r0, [sp, #12]
 80031ae:	b1d0      	cbz	r0, 80031e6 <pow+0x82>
 80031b0:	2200      	movs	r2, #0
 80031b2:	2300      	movs	r3, #0
 80031b4:	4620      	mov	r0, r4
 80031b6:	4629      	mov	r1, r5
 80031b8:	f7fd fc26 	bl	8000a08 <__aeabi_dcmpeq>
 80031bc:	2800      	cmp	r0, #0
 80031be:	f000 8122 	beq.w	8003406 <pow+0x2a2>
 80031c2:	2301      	movs	r3, #1
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	4b92      	ldr	r3, [pc, #584]	; (8003410 <pow+0x2ac>)
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	4b92      	ldr	r3, [pc, #584]	; (8003414 <pow+0x2b0>)
 80031cc:	960c      	str	r6, [sp, #48]	; 0x30
 80031ce:	2200      	movs	r2, #0
 80031d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031d4:	9b02      	ldr	r3, [sp, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80031dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80031e0:	f040 8084 	bne.w	80032ec <pow+0x188>
 80031e4:	e10c      	b.n	8003400 <pow+0x29c>
 80031e6:	2600      	movs	r6, #0
 80031e8:	2700      	movs	r7, #0
 80031ea:	4632      	mov	r2, r6
 80031ec:	463b      	mov	r3, r7
 80031ee:	4650      	mov	r0, sl
 80031f0:	4659      	mov	r1, fp
 80031f2:	f7fd fc09 	bl	8000a08 <__aeabi_dcmpeq>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d03f      	beq.n	800327a <pow+0x116>
 80031fa:	4632      	mov	r2, r6
 80031fc:	463b      	mov	r3, r7
 80031fe:	4620      	mov	r0, r4
 8003200:	4629      	mov	r1, r5
 8003202:	f7fd fc01 	bl	8000a08 <__aeabi_dcmpeq>
 8003206:	4680      	mov	r8, r0
 8003208:	b198      	cbz	r0, 8003232 <pow+0xce>
 800320a:	2301      	movs	r3, #1
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	4b80      	ldr	r3, [pc, #512]	; (8003410 <pow+0x2ac>)
 8003210:	9305      	str	r3, [sp, #20]
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	930c      	str	r3, [sp, #48]	; 0x30
 8003216:	9b02      	ldr	r3, [sp, #8]
 8003218:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800321c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003220:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d061      	beq.n	80032ec <pow+0x188>
 8003228:	4b7a      	ldr	r3, [pc, #488]	; (8003414 <pow+0x2b0>)
 800322a:	2200      	movs	r2, #0
 800322c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003230:	e0e0      	b.n	80033f4 <pow+0x290>
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f000 fef4 	bl	8004022 <finite>
 800323a:	2800      	cmp	r0, #0
 800323c:	f000 80e3 	beq.w	8003406 <pow+0x2a2>
 8003240:	4632      	mov	r2, r6
 8003242:	463b      	mov	r3, r7
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd fbe8 	bl	8000a1c <__aeabi_dcmplt>
 800324c:	2800      	cmp	r0, #0
 800324e:	f000 80da 	beq.w	8003406 <pow+0x2a2>
 8003252:	2301      	movs	r3, #1
 8003254:	9304      	str	r3, [sp, #16]
 8003256:	4b6e      	ldr	r3, [pc, #440]	; (8003410 <pow+0x2ac>)
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	f999 3000 	ldrsb.w	r3, [r9]
 800325e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003262:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003266:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d030      	beq.n	80032d0 <pow+0x16c>
 800326e:	496a      	ldr	r1, [pc, #424]	; (8003418 <pow+0x2b4>)
 8003270:	2000      	movs	r0, #0
 8003272:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003276:	2b02      	cmp	r3, #2
 8003278:	e037      	b.n	80032ea <pow+0x186>
 800327a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800327e:	f000 fed0 	bl	8004022 <finite>
 8003282:	9002      	str	r0, [sp, #8]
 8003284:	2800      	cmp	r0, #0
 8003286:	f040 808a 	bne.w	800339e <pow+0x23a>
 800328a:	4650      	mov	r0, sl
 800328c:	4659      	mov	r1, fp
 800328e:	f000 fec8 	bl	8004022 <finite>
 8003292:	2800      	cmp	r0, #0
 8003294:	f000 8083 	beq.w	800339e <pow+0x23a>
 8003298:	4620      	mov	r0, r4
 800329a:	4629      	mov	r1, r5
 800329c:	f000 fec1 	bl	8004022 <finite>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d07c      	beq.n	800339e <pow+0x23a>
 80032a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7fd fbde 	bl	8000a6c <__aeabi_dcmpun>
 80032b0:	f999 9000 	ldrsb.w	r9, [r9]
 80032b4:	4b56      	ldr	r3, [pc, #344]	; (8003410 <pow+0x2ac>)
 80032b6:	b310      	cbz	r0, 80032fe <pow+0x19a>
 80032b8:	2201      	movs	r2, #1
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	9b02      	ldr	r3, [sp, #8]
 80032be:	9204      	str	r2, [sp, #16]
 80032c0:	930c      	str	r3, [sp, #48]	; 0x30
 80032c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80032c6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80032ca:	f1b9 0f00 	cmp.w	r9, #0
 80032ce:	d102      	bne.n	80032d6 <pow+0x172>
 80032d0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80032d4:	e00a      	b.n	80032ec <pow+0x188>
 80032d6:	4632      	mov	r2, r6
 80032d8:	463b      	mov	r3, r7
 80032da:	4630      	mov	r0, r6
 80032dc:	4639      	mov	r1, r7
 80032de:	f7fd fa55 	bl	800078c <__aeabi_ddiv>
 80032e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032e6:	f1b9 0f02 	cmp.w	r9, #2
 80032ea:	d004      	beq.n	80032f6 <pow+0x192>
 80032ec:	a804      	add	r0, sp, #16
 80032ee:	f000 fe9e 	bl	800402e <matherr>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d17e      	bne.n	80033f4 <pow+0x290>
 80032f6:	f000 ffa5 	bl	8004244 <__errno>
 80032fa:	2321      	movs	r3, #33	; 0x21
 80032fc:	e079      	b.n	80033f2 <pow+0x28e>
 80032fe:	2203      	movs	r2, #3
 8003300:	9204      	str	r2, [sp, #16]
 8003302:	9305      	str	r3, [sp, #20]
 8003304:	900c      	str	r0, [sp, #48]	; 0x30
 8003306:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800330a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800330e:	f1b9 0f00 	cmp.w	r9, #0
 8003312:	d122      	bne.n	800335a <pow+0x1f6>
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <pow+0x2b8>)
 8003316:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800331a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800331e:	4650      	mov	r0, sl
 8003320:	4632      	mov	r2, r6
 8003322:	463b      	mov	r3, r7
 8003324:	4659      	mov	r1, fp
 8003326:	f7fd fb79 	bl	8000a1c <__aeabi_dcmplt>
 800332a:	2800      	cmp	r0, #0
 800332c:	d05a      	beq.n	80033e4 <pow+0x280>
 800332e:	2200      	movs	r2, #0
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <pow+0x2bc>)
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f7fd f8ff 	bl	8000538 <__aeabi_dmul>
 800333a:	4604      	mov	r4, r0
 800333c:	460d      	mov	r5, r1
 800333e:	f000 fe7f 	bl	8004040 <rint>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f7fd fb5d 	bl	8000a08 <__aeabi_dcmpeq>
 800334e:	2800      	cmp	r0, #0
 8003350:	d144      	bne.n	80033dc <pow+0x278>
 8003352:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <pow+0x2c0>)
 8003358:	e01e      	b.n	8003398 <pow+0x234>
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <pow+0x2c4>)
 800335c:	2200      	movs	r2, #0
 800335e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003362:	4650      	mov	r0, sl
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	4659      	mov	r1, fp
 800336a:	f7fd fb57 	bl	8000a1c <__aeabi_dcmplt>
 800336e:	2800      	cmp	r0, #0
 8003370:	d034      	beq.n	80033dc <pow+0x278>
 8003372:	2200      	movs	r2, #0
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <pow+0x2bc>)
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	f7fd f8dd 	bl	8000538 <__aeabi_dmul>
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	f000 fe5d 	bl	8004040 <rint>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fd fb3b 	bl	8000a08 <__aeabi_dcmpeq>
 8003392:	bb18      	cbnz	r0, 80033dc <pow+0x278>
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <pow+0x2b4>)
 8003396:	2200      	movs	r2, #0
 8003398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800339c:	e01e      	b.n	80033dc <pow+0x278>
 800339e:	2600      	movs	r6, #0
 80033a0:	2700      	movs	r7, #0
 80033a2:	4632      	mov	r2, r6
 80033a4:	463b      	mov	r3, r7
 80033a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033aa:	f7fd fb2d 	bl	8000a08 <__aeabi_dcmpeq>
 80033ae:	b350      	cbz	r0, 8003406 <pow+0x2a2>
 80033b0:	4650      	mov	r0, sl
 80033b2:	4659      	mov	r1, fp
 80033b4:	f000 fe35 	bl	8004022 <finite>
 80033b8:	b328      	cbz	r0, 8003406 <pow+0x2a2>
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f000 fe30 	bl	8004022 <finite>
 80033c2:	b300      	cbz	r0, 8003406 <pow+0x2a2>
 80033c4:	2304      	movs	r3, #4
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <pow+0x2ac>)
 80033ce:	9305      	str	r3, [sp, #20]
 80033d0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80033d4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80033d8:	2300      	movs	r3, #0
 80033da:	930c      	str	r3, [sp, #48]	; 0x30
 80033dc:	f998 3000 	ldrsb.w	r3, [r8]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d003      	beq.n	80033ec <pow+0x288>
 80033e4:	a804      	add	r0, sp, #16
 80033e6:	f000 fe22 	bl	800402e <matherr>
 80033ea:	b918      	cbnz	r0, 80033f4 <pow+0x290>
 80033ec:	f000 ff2a 	bl	8004244 <__errno>
 80033f0:	2322      	movs	r3, #34	; 0x22
 80033f2:	6003      	str	r3, [r0, #0]
 80033f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033f6:	b11b      	cbz	r3, 8003400 <pow+0x29c>
 80033f8:	f000 ff24 	bl	8004244 <__errno>
 80033fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033fe:	6003      	str	r3, [r0, #0]
 8003400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003404:	e001      	b.n	800340a <pow+0x2a6>
 8003406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800340a:	b00f      	add	sp, #60	; 0x3c
 800340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003410:	080042ca 	.word	0x080042ca
 8003414:	3ff00000 	.word	0x3ff00000
 8003418:	fff00000 	.word	0xfff00000
 800341c:	47efffff 	.word	0x47efffff
 8003420:	3fe00000 	.word	0x3fe00000
 8003424:	c7efffff 	.word	0xc7efffff
 8003428:	7ff00000 	.word	0x7ff00000
 800342c:	20000768 	.word	0x20000768

08003430 <sqrt>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	b08b      	sub	sp, #44	; 0x2c
 8003436:	4606      	mov	r6, r0
 8003438:	460f      	mov	r7, r1
 800343a:	f000 fd45 	bl	8003ec8 <__ieee754_sqrt>
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <sqrt+0xa8>)
 8003440:	f993 a000 	ldrsb.w	sl, [r3]
 8003444:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003448:	4604      	mov	r4, r0
 800344a:	460d      	mov	r5, r1
 800344c:	d03f      	beq.n	80034ce <sqrt+0x9e>
 800344e:	4632      	mov	r2, r6
 8003450:	463b      	mov	r3, r7
 8003452:	4630      	mov	r0, r6
 8003454:	4639      	mov	r1, r7
 8003456:	f7fd fb09 	bl	8000a6c <__aeabi_dcmpun>
 800345a:	4683      	mov	fp, r0
 800345c:	2800      	cmp	r0, #0
 800345e:	d136      	bne.n	80034ce <sqrt+0x9e>
 8003460:	f04f 0800 	mov.w	r8, #0
 8003464:	f04f 0900 	mov.w	r9, #0
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	4630      	mov	r0, r6
 800346e:	4639      	mov	r1, r7
 8003470:	f7fd fad4 	bl	8000a1c <__aeabi_dcmplt>
 8003474:	b358      	cbz	r0, 80034ce <sqrt+0x9e>
 8003476:	2301      	movs	r3, #1
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <sqrt+0xac>)
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	f8cd b020 	str.w	fp, [sp, #32]
 8003482:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003486:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800348a:	f1ba 0f00 	cmp.w	sl, #0
 800348e:	d102      	bne.n	8003496 <sqrt+0x66>
 8003490:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003494:	e00a      	b.n	80034ac <sqrt+0x7c>
 8003496:	4642      	mov	r2, r8
 8003498:	464b      	mov	r3, r9
 800349a:	4640      	mov	r0, r8
 800349c:	4649      	mov	r1, r9
 800349e:	f7fd f975 	bl	800078c <__aeabi_ddiv>
 80034a2:	f1ba 0f02 	cmp.w	sl, #2
 80034a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80034aa:	d003      	beq.n	80034b4 <sqrt+0x84>
 80034ac:	4668      	mov	r0, sp
 80034ae:	f000 fdbe 	bl	800402e <matherr>
 80034b2:	b918      	cbnz	r0, 80034bc <sqrt+0x8c>
 80034b4:	f000 fec6 	bl	8004244 <__errno>
 80034b8:	2321      	movs	r3, #33	; 0x21
 80034ba:	6003      	str	r3, [r0, #0]
 80034bc:	9b08      	ldr	r3, [sp, #32]
 80034be:	b11b      	cbz	r3, 80034c8 <sqrt+0x98>
 80034c0:	f000 fec0 	bl	8004244 <__errno>
 80034c4:	9b08      	ldr	r3, [sp, #32]
 80034c6:	6003      	str	r3, [r0, #0]
 80034c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034cc:	e001      	b.n	80034d2 <sqrt+0xa2>
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	b00b      	add	sp, #44	; 0x2c
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	20000768 	.word	0x20000768
 80034dc:	080042ce 	.word	0x080042ce

080034e0 <__ieee754_pow>:
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e4:	b091      	sub	sp, #68	; 0x44
 80034e6:	e9cd 2300 	strd	r2, r3, [sp]
 80034ea:	e89d 0208 	ldmia.w	sp, {r3, r9}
 80034ee:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80034f2:	4607      	mov	r7, r0
 80034f4:	4682      	mov	sl, r0
 80034f6:	ea56 0003 	orrs.w	r0, r6, r3
 80034fa:	460c      	mov	r4, r1
 80034fc:	4688      	mov	r8, r1
 80034fe:	f000 8497 	beq.w	8003e30 <__ieee754_pow+0x950>
 8003502:	4abd      	ldr	r2, [pc, #756]	; (80037f8 <__ieee754_pow+0x318>)
 8003504:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 8003508:	4295      	cmp	r5, r2
 800350a:	dc08      	bgt.n	800351e <__ieee754_pow+0x3e>
 800350c:	d102      	bne.n	8003514 <__ieee754_pow+0x34>
 800350e:	b937      	cbnz	r7, 800351e <__ieee754_pow+0x3e>
 8003510:	f000 bc99 	b.w	8003e46 <__ieee754_pow+0x966>
 8003514:	4296      	cmp	r6, r2
 8003516:	dc02      	bgt.n	800351e <__ieee754_pow+0x3e>
 8003518:	4296      	cmp	r6, r2
 800351a:	d10e      	bne.n	800353a <__ieee754_pow+0x5a>
 800351c:	b16b      	cbz	r3, 800353a <__ieee754_pow+0x5a>
 800351e:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003522:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003526:	ea55 000a 	orrs.w	r0, r5, sl
 800352a:	f000 8481 	beq.w	8003e30 <__ieee754_pow+0x950>
 800352e:	48b3      	ldr	r0, [pc, #716]	; (80037fc <__ieee754_pow+0x31c>)
 8003530:	b011      	add	sp, #68	; 0x44
 8003532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003536:	f000 bd7d 	b.w	8004034 <nan>
 800353a:	f1b8 0f00 	cmp.w	r8, #0
 800353e:	da2a      	bge.n	8003596 <__ieee754_pow+0xb6>
 8003540:	4aaf      	ldr	r2, [pc, #700]	; (8003800 <__ieee754_pow+0x320>)
 8003542:	4296      	cmp	r6, r2
 8003544:	dc24      	bgt.n	8003590 <__ieee754_pow+0xb0>
 8003546:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 800354a:	4296      	cmp	r6, r2
 800354c:	dd23      	ble.n	8003596 <__ieee754_pow+0xb6>
 800354e:	1532      	asrs	r2, r6, #20
 8003550:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003554:	2a14      	cmp	r2, #20
 8003556:	dd0c      	ble.n	8003572 <__ieee754_pow+0x92>
 8003558:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 800355c:	fa23 f102 	lsr.w	r1, r3, r2
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	4293      	cmp	r3, r2
 8003566:	d116      	bne.n	8003596 <__ieee754_pow+0xb6>
 8003568:	f001 0101 	and.w	r1, r1, #1
 800356c:	f1c1 0b02 	rsb	fp, r1, #2
 8003570:	e013      	b.n	800359a <__ieee754_pow+0xba>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d155      	bne.n	8003622 <__ieee754_pow+0x142>
 8003576:	f1c2 0214 	rsb	r2, r2, #20
 800357a:	fa46 f102 	asr.w	r1, r6, r2
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4296      	cmp	r6, r2
 8003584:	d12a      	bne.n	80035dc <__ieee754_pow+0xfc>
 8003586:	f001 0101 	and.w	r1, r1, #1
 800358a:	f1c1 0b02 	rsb	fp, r1, #2
 800358e:	e026      	b.n	80035de <__ieee754_pow+0xfe>
 8003590:	f04f 0b02 	mov.w	fp, #2
 8003594:	e001      	b.n	800359a <__ieee754_pow+0xba>
 8003596:	f04f 0b00 	mov.w	fp, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d143      	bne.n	8003626 <__ieee754_pow+0x146>
 800359e:	4a96      	ldr	r2, [pc, #600]	; (80037f8 <__ieee754_pow+0x318>)
 80035a0:	4296      	cmp	r6, r2
 80035a2:	d11c      	bne.n	80035de <__ieee754_pow+0xfe>
 80035a4:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 80035a8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80035ac:	ea52 020a 	orrs.w	r2, r2, sl
 80035b0:	f000 843f 	beq.w	8003e32 <__ieee754_pow+0x952>
 80035b4:	4b93      	ldr	r3, [pc, #588]	; (8003804 <__ieee754_pow+0x324>)
 80035b6:	429d      	cmp	r5, r3
 80035b8:	dd07      	ble.n	80035ca <__ieee754_pow+0xea>
 80035ba:	f1b9 0f00 	cmp.w	r9, #0
 80035be:	f280 843a 	bge.w	8003e36 <__ieee754_pow+0x956>
 80035c2:	2300      	movs	r3, #0
 80035c4:	4619      	mov	r1, r3
 80035c6:	f000 bc43 	b.w	8003e50 <__ieee754_pow+0x970>
 80035ca:	f1b9 0f00 	cmp.w	r9, #0
 80035ce:	daf8      	bge.n	80035c2 <__ieee754_pow+0xe2>
 80035d0:	9a01      	ldr	r2, [sp, #4]
 80035d2:	9b00      	ldr	r3, [sp, #0]
 80035d4:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80035d8:	f000 bc3a 	b.w	8003e50 <__ieee754_pow+0x970>
 80035dc:	469b      	mov	fp, r3
 80035de:	4b8a      	ldr	r3, [pc, #552]	; (8003808 <__ieee754_pow+0x328>)
 80035e0:	429e      	cmp	r6, r3
 80035e2:	d108      	bne.n	80035f6 <__ieee754_pow+0x116>
 80035e4:	f1b9 0f00 	cmp.w	r9, #0
 80035e8:	f280 8428 	bge.w	8003e3c <__ieee754_pow+0x95c>
 80035ec:	463a      	mov	r2, r7
 80035ee:	4623      	mov	r3, r4
 80035f0:	2000      	movs	r0, #0
 80035f2:	4985      	ldr	r1, [pc, #532]	; (8003808 <__ieee754_pow+0x328>)
 80035f4:	e03e      	b.n	8003674 <__ieee754_pow+0x194>
 80035f6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80035fa:	d105      	bne.n	8003608 <__ieee754_pow+0x128>
 80035fc:	463a      	mov	r2, r7
 80035fe:	4623      	mov	r3, r4
 8003600:	4638      	mov	r0, r7
 8003602:	4621      	mov	r1, r4
 8003604:	f000 bc11 	b.w	8003e2a <__ieee754_pow+0x94a>
 8003608:	4b80      	ldr	r3, [pc, #512]	; (800380c <__ieee754_pow+0x32c>)
 800360a:	4599      	cmp	r9, r3
 800360c:	d10b      	bne.n	8003626 <__ieee754_pow+0x146>
 800360e:	f1b8 0f00 	cmp.w	r8, #0
 8003612:	db08      	blt.n	8003626 <__ieee754_pow+0x146>
 8003614:	4638      	mov	r0, r7
 8003616:	4621      	mov	r1, r4
 8003618:	b011      	add	sp, #68	; 0x44
 800361a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361e:	f000 bc53 	b.w	8003ec8 <__ieee754_sqrt>
 8003622:	f04f 0b00 	mov.w	fp, #0
 8003626:	4638      	mov	r0, r7
 8003628:	4621      	mov	r1, r4
 800362a:	f000 fcf7 	bl	800401c <fabs>
 800362e:	f1ba 0f00 	cmp.w	sl, #0
 8003632:	d12a      	bne.n	800368a <__ieee754_pow+0x1aa>
 8003634:	b125      	cbz	r5, 8003640 <__ieee754_pow+0x160>
 8003636:	4b74      	ldr	r3, [pc, #464]	; (8003808 <__ieee754_pow+0x328>)
 8003638:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 800363c:	429a      	cmp	r2, r3
 800363e:	d124      	bne.n	800368a <__ieee754_pow+0x1aa>
 8003640:	f1b9 0f00 	cmp.w	r9, #0
 8003644:	da05      	bge.n	8003652 <__ieee754_pow+0x172>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	2000      	movs	r0, #0
 800364c:	496e      	ldr	r1, [pc, #440]	; (8003808 <__ieee754_pow+0x328>)
 800364e:	f7fd f89d 	bl	800078c <__aeabi_ddiv>
 8003652:	f1b8 0f00 	cmp.w	r8, #0
 8003656:	f280 83f4 	bge.w	8003e42 <__ieee754_pow+0x962>
 800365a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800365e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003662:	ea55 030b 	orrs.w	r3, r5, fp
 8003666:	d108      	bne.n	800367a <__ieee754_pow+0x19a>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	f7fc fdb0 	bl	80001d0 <__aeabi_dsub>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	f7fd f88a 	bl	800078c <__aeabi_ddiv>
 8003678:	e3e3      	b.n	8003e42 <__ieee754_pow+0x962>
 800367a:	f1bb 0f01 	cmp.w	fp, #1
 800367e:	4603      	mov	r3, r0
 8003680:	f040 83e6 	bne.w	8003e50 <__ieee754_pow+0x970>
 8003684:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003688:	e3e2      	b.n	8003e50 <__ieee754_pow+0x970>
 800368a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800368e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003692:	930d      	str	r3, [sp, #52]	; 0x34
 8003694:	ea5b 0303 	orrs.w	r3, fp, r3
 8003698:	d104      	bne.n	80036a4 <__ieee754_pow+0x1c4>
 800369a:	463a      	mov	r2, r7
 800369c:	4623      	mov	r3, r4
 800369e:	4638      	mov	r0, r7
 80036a0:	4621      	mov	r1, r4
 80036a2:	e7e3      	b.n	800366c <__ieee754_pow+0x18c>
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <__ieee754_pow+0x330>)
 80036a6:	429e      	cmp	r6, r3
 80036a8:	dd6d      	ble.n	8003786 <__ieee754_pow+0x2a6>
 80036aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80036ae:	429e      	cmp	r6, r3
 80036b0:	dd0b      	ble.n	80036ca <__ieee754_pow+0x1ea>
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <__ieee754_pow+0x324>)
 80036b4:	429d      	cmp	r5, r3
 80036b6:	dc0e      	bgt.n	80036d6 <__ieee754_pow+0x1f6>
 80036b8:	f1b9 0f00 	cmp.w	r9, #0
 80036bc:	da81      	bge.n	80035c2 <__ieee754_pow+0xe2>
 80036be:	a344      	add	r3, pc, #272	; (adr r3, 80037d0 <__ieee754_pow+0x2f0>)
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	e3af      	b.n	8003e2a <__ieee754_pow+0x94a>
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <__ieee754_pow+0x334>)
 80036cc:	429d      	cmp	r5, r3
 80036ce:	ddf3      	ble.n	80036b8 <__ieee754_pow+0x1d8>
 80036d0:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <__ieee754_pow+0x328>)
 80036d2:	429d      	cmp	r5, r3
 80036d4:	dd03      	ble.n	80036de <__ieee754_pow+0x1fe>
 80036d6:	f1b9 0f00 	cmp.w	r9, #0
 80036da:	dcf0      	bgt.n	80036be <__ieee754_pow+0x1de>
 80036dc:	e771      	b.n	80035c2 <__ieee754_pow+0xe2>
 80036de:	2200      	movs	r2, #0
 80036e0:	4b49      	ldr	r3, [pc, #292]	; (8003808 <__ieee754_pow+0x328>)
 80036e2:	f7fc fd75 	bl	80001d0 <__aeabi_dsub>
 80036e6:	a33c      	add	r3, pc, #240	; (adr r3, 80037d8 <__ieee754_pow+0x2f8>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	4604      	mov	r4, r0
 80036ee:	460d      	mov	r5, r1
 80036f0:	f7fc ff22 	bl	8000538 <__aeabi_dmul>
 80036f4:	a33a      	add	r3, pc, #232	; (adr r3, 80037e0 <__ieee754_pow+0x300>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	4606      	mov	r6, r0
 80036fc:	460f      	mov	r7, r1
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	f7fc ff19 	bl	8000538 <__aeabi_dmul>
 8003706:	2200      	movs	r2, #0
 8003708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <__ieee754_pow+0x338>)
 800370e:	4620      	mov	r0, r4
 8003710:	4629      	mov	r1, r5
 8003712:	f7fc ff11 	bl	8000538 <__aeabi_dmul>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	a133      	add	r1, pc, #204	; (adr r1, 80037e8 <__ieee754_pow+0x308>)
 800371c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003720:	f7fc fd56 	bl	80001d0 <__aeabi_dsub>
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	f7fc ff06 	bl	8000538 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	2000      	movs	r0, #0
 8003732:	4936      	ldr	r1, [pc, #216]	; (800380c <__ieee754_pow+0x32c>)
 8003734:	f7fc fd4c 	bl	80001d0 <__aeabi_dsub>
 8003738:	4622      	mov	r2, r4
 800373a:	462b      	mov	r3, r5
 800373c:	4680      	mov	r8, r0
 800373e:	4689      	mov	r9, r1
 8003740:	4620      	mov	r0, r4
 8003742:	4629      	mov	r1, r5
 8003744:	f7fc fef8 	bl	8000538 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4640      	mov	r0, r8
 800374e:	4649      	mov	r1, r9
 8003750:	f7fc fef2 	bl	8000538 <__aeabi_dmul>
 8003754:	a326      	add	r3, pc, #152	; (adr r3, 80037f0 <__ieee754_pow+0x310>)
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f7fc feed 	bl	8000538 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003766:	f7fc fd33 	bl	80001d0 <__aeabi_dsub>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4604      	mov	r4, r0
 8003770:	460d      	mov	r5, r1
 8003772:	4630      	mov	r0, r6
 8003774:	4639      	mov	r1, r7
 8003776:	f7fc fd2d 	bl	80001d4 <__adddf3>
 800377a:	2000      	movs	r0, #0
 800377c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003780:	4632      	mov	r2, r6
 8003782:	463b      	mov	r3, r7
 8003784:	e1a7      	b.n	8003ad6 <__ieee754_pow+0x5f6>
 8003786:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	da05      	bge.n	800379c <__ieee754_pow+0x2bc>
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <__ieee754_pow+0x33c>)
 8003792:	f7fc fed1 	bl	8000538 <__aeabi_dmul>
 8003796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800379a:	460d      	mov	r5, r1
 800379c:	152b      	asrs	r3, r5, #20
 800379e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80037a2:	4413      	add	r3, r2
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <__ieee754_pow+0x340>)
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80037ac:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80037b6:	dd07      	ble.n	80037c8 <__ieee754_pow+0x2e8>
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <__ieee754_pow+0x344>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	dd34      	ble.n	8003828 <__ieee754_pow+0x348>
 80037be:	9b07      	ldr	r3, [sp, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	9307      	str	r3, [sp, #28]
 80037c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80037c8:	f04f 0a00 	mov.w	sl, #0
 80037cc:	e02e      	b.n	800382c <__ieee754_pow+0x34c>
 80037ce:	bf00      	nop
 80037d0:	8800759c 	.word	0x8800759c
 80037d4:	7e37e43c 	.word	0x7e37e43c
 80037d8:	60000000 	.word	0x60000000
 80037dc:	3ff71547 	.word	0x3ff71547
 80037e0:	f85ddf44 	.word	0xf85ddf44
 80037e4:	3e54ae0b 	.word	0x3e54ae0b
 80037e8:	55555555 	.word	0x55555555
 80037ec:	3fd55555 	.word	0x3fd55555
 80037f0:	652b82fe 	.word	0x652b82fe
 80037f4:	3ff71547 	.word	0x3ff71547
 80037f8:	7ff00000 	.word	0x7ff00000
 80037fc:	080042c9 	.word	0x080042c9
 8003800:	433fffff 	.word	0x433fffff
 8003804:	3fefffff 	.word	0x3fefffff
 8003808:	3ff00000 	.word	0x3ff00000
 800380c:	3fe00000 	.word	0x3fe00000
 8003810:	41e00000 	.word	0x41e00000
 8003814:	3feffffe 	.word	0x3feffffe
 8003818:	3fd00000 	.word	0x3fd00000
 800381c:	43400000 	.word	0x43400000
 8003820:	0003988e 	.word	0x0003988e
 8003824:	000bb679 	.word	0x000bb679
 8003828:	f04f 0a01 	mov.w	sl, #1
 800382c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003830:	930c      	str	r3, [sp, #48]	; 0x30
 8003832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003834:	4bd0      	ldr	r3, [pc, #832]	; (8003b78 <__ieee754_pow+0x698>)
 8003836:	4413      	add	r3, r2
 8003838:	cb18      	ldmia	r3, {r3, r4}
 800383a:	4629      	mov	r1, r5
 800383c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003840:	461a      	mov	r2, r3
 8003842:	4623      	mov	r3, r4
 8003844:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003848:	f7fc fcc2 	bl	80001d0 <__aeabi_dsub>
 800384c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003850:	4606      	mov	r6, r0
 8003852:	460f      	mov	r7, r1
 8003854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003858:	f7fc fcbc 	bl	80001d4 <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	2000      	movs	r0, #0
 8003862:	49c6      	ldr	r1, [pc, #792]	; (8003b7c <__ieee754_pow+0x69c>)
 8003864:	f7fc ff92 	bl	800078c <__aeabi_ddiv>
 8003868:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4630      	mov	r0, r6
 8003872:	4639      	mov	r1, r7
 8003874:	f7fc fe60 	bl	8000538 <__aeabi_dmul>
 8003878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800387c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003880:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003884:	2300      	movs	r3, #0
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800388c:	106d      	asrs	r5, r5, #1
 800388e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003892:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003896:	2200      	movs	r2, #0
 8003898:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	f7fc fe48 	bl	8000538 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4630      	mov	r0, r6
 80038ae:	4639      	mov	r1, r7
 80038b0:	f7fc fc8e 	bl	80001d0 <__aeabi_dsub>
 80038b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80038b8:	4606      	mov	r6, r0
 80038ba:	460f      	mov	r7, r1
 80038bc:	4620      	mov	r0, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	f7fc fc86 	bl	80001d0 <__aeabi_dsub>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80038cc:	f7fc fc80 	bl	80001d0 <__aeabi_dsub>
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	f7fc fe30 	bl	8000538 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4630      	mov	r0, r6
 80038de:	4639      	mov	r1, r7
 80038e0:	f7fc fc76 	bl	80001d0 <__aeabi_dsub>
 80038e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80038e8:	f7fc fe26 	bl	8000538 <__aeabi_dmul>
 80038ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7fc fe1e 	bl	8000538 <__aeabi_dmul>
 80038fc:	a38c      	add	r3, pc, #560	; (adr r3, 8003b30 <__ieee754_pow+0x650>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	f7fc fe17 	bl	8000538 <__aeabi_dmul>
 800390a:	a38b      	add	r3, pc, #556	; (adr r3, 8003b38 <__ieee754_pow+0x658>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fc60 	bl	80001d4 <__adddf3>
 8003914:	4622      	mov	r2, r4
 8003916:	462b      	mov	r3, r5
 8003918:	f7fc fe0e 	bl	8000538 <__aeabi_dmul>
 800391c:	a388      	add	r3, pc, #544	; (adr r3, 8003b40 <__ieee754_pow+0x660>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f7fc fc57 	bl	80001d4 <__adddf3>
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	f7fc fe05 	bl	8000538 <__aeabi_dmul>
 800392e:	a386      	add	r3, pc, #536	; (adr r3, 8003b48 <__ieee754_pow+0x668>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fc4e 	bl	80001d4 <__adddf3>
 8003938:	4622      	mov	r2, r4
 800393a:	462b      	mov	r3, r5
 800393c:	f7fc fdfc 	bl	8000538 <__aeabi_dmul>
 8003940:	a383      	add	r3, pc, #524	; (adr r3, 8003b50 <__ieee754_pow+0x670>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f7fc fc45 	bl	80001d4 <__adddf3>
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	f7fc fdf3 	bl	8000538 <__aeabi_dmul>
 8003952:	a381      	add	r3, pc, #516	; (adr r3, 8003b58 <__ieee754_pow+0x678>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fc3c 	bl	80001d4 <__adddf3>
 800395c:	4622      	mov	r2, r4
 800395e:	4606      	mov	r6, r0
 8003960:	460f      	mov	r7, r1
 8003962:	462b      	mov	r3, r5
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	f7fc fde6 	bl	8000538 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4630      	mov	r0, r6
 8003972:	4639      	mov	r1, r7
 8003974:	f7fc fde0 	bl	8000538 <__aeabi_dmul>
 8003978:	4642      	mov	r2, r8
 800397a:	4604      	mov	r4, r0
 800397c:	460d      	mov	r5, r1
 800397e:	464b      	mov	r3, r9
 8003980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003984:	f7fc fc26 	bl	80001d4 <__adddf3>
 8003988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800398c:	f7fc fdd4 	bl	8000538 <__aeabi_dmul>
 8003990:	4622      	mov	r2, r4
 8003992:	462b      	mov	r3, r5
 8003994:	f7fc fc1e 	bl	80001d4 <__adddf3>
 8003998:	4642      	mov	r2, r8
 800399a:	4606      	mov	r6, r0
 800399c:	460f      	mov	r7, r1
 800399e:	464b      	mov	r3, r9
 80039a0:	4640      	mov	r0, r8
 80039a2:	4649      	mov	r1, r9
 80039a4:	f7fc fdc8 	bl	8000538 <__aeabi_dmul>
 80039a8:	2200      	movs	r2, #0
 80039aa:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <__ieee754_pow+0x6a0>)
 80039ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039b0:	f7fc fc10 	bl	80001d4 <__adddf3>
 80039b4:	4632      	mov	r2, r6
 80039b6:	463b      	mov	r3, r7
 80039b8:	f7fc fc0c 	bl	80001d4 <__adddf3>
 80039bc:	9802      	ldr	r0, [sp, #8]
 80039be:	460d      	mov	r5, r1
 80039c0:	4604      	mov	r4, r0
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4640      	mov	r0, r8
 80039c8:	4649      	mov	r1, r9
 80039ca:	f7fc fdb5 	bl	8000538 <__aeabi_dmul>
 80039ce:	2200      	movs	r2, #0
 80039d0:	4680      	mov	r8, r0
 80039d2:	4689      	mov	r9, r1
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <__ieee754_pow+0x6a0>)
 80039d6:	4620      	mov	r0, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	f7fc fbf9 	bl	80001d0 <__aeabi_dsub>
 80039de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039e2:	f7fc fbf5 	bl	80001d0 <__aeabi_dsub>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4630      	mov	r0, r6
 80039ec:	4639      	mov	r1, r7
 80039ee:	f7fc fbef 	bl	80001d0 <__aeabi_dsub>
 80039f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f6:	f7fc fd9f 	bl	8000538 <__aeabi_dmul>
 80039fa:	4622      	mov	r2, r4
 80039fc:	4606      	mov	r6, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	462b      	mov	r3, r5
 8003a02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a06:	f7fc fd97 	bl	8000538 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4630      	mov	r0, r6
 8003a10:	4639      	mov	r1, r7
 8003a12:	f7fc fbdf 	bl	80001d4 <__adddf3>
 8003a16:	4606      	mov	r6, r0
 8003a18:	460f      	mov	r7, r1
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	f7fc fbd7 	bl	80001d4 <__adddf3>
 8003a26:	9802      	ldr	r0, [sp, #8]
 8003a28:	a34d      	add	r3, pc, #308	; (adr r3, 8003b60 <__ieee754_pow+0x680>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	f7fc fd81 	bl	8000538 <__aeabi_dmul>
 8003a36:	4642      	mov	r2, r8
 8003a38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fbc5 	bl	80001d0 <__aeabi_dsub>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	f7fc fbbf 	bl	80001d0 <__aeabi_dsub>
 8003a52:	a345      	add	r3, pc, #276	; (adr r3, 8003b68 <__ieee754_pow+0x688>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fd6e 	bl	8000538 <__aeabi_dmul>
 8003a5c:	a344      	add	r3, pc, #272	; (adr r3, 8003b70 <__ieee754_pow+0x690>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	4606      	mov	r6, r0
 8003a64:	460f      	mov	r7, r1
 8003a66:	4620      	mov	r0, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f7fc fd65 	bl	8000538 <__aeabi_dmul>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4630      	mov	r0, r6
 8003a74:	4639      	mov	r1, r7
 8003a76:	f7fc fbad 	bl	80001d4 <__adddf3>
 8003a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a7c:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <__ieee754_pow+0x6a4>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f7fc fba6 	bl	80001d4 <__adddf3>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	9807      	ldr	r0, [sp, #28]
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	f7fc fced 	bl	800046c <__aeabi_i2d>
 8003a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a94:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <__ieee754_pow+0x6a8>)
 8003a96:	4413      	add	r3, r2
 8003a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	460f      	mov	r7, r1
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003aa8:	f7fc fb94 	bl	80001d4 <__adddf3>
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	f7fc fb90 	bl	80001d4 <__adddf3>
 8003ab4:	4632      	mov	r2, r6
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	f7fc fb8c 	bl	80001d4 <__adddf3>
 8003abc:	9802      	ldr	r0, [sp, #8]
 8003abe:	4632      	mov	r2, r6
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ac6:	f7fc fb83 	bl	80001d0 <__aeabi_dsub>
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	f7fc fb7f 	bl	80001d0 <__aeabi_dsub>
 8003ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ad6:	f7fc fb7b 	bl	80001d0 <__aeabi_dsub>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4620      	mov	r0, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fc fb75 	bl	80001d0 <__aeabi_dsub>
 8003ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ae8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003aec:	4313      	orrs	r3, r2
 8003aee:	bf0c      	ite	eq
 8003af0:	4c26      	ldreq	r4, [pc, #152]	; (8003b8c <__ieee754_pow+0x6ac>)
 8003af2:	4c22      	ldrne	r4, [pc, #136]	; (8003b7c <__ieee754_pow+0x69c>)
 8003af4:	2300      	movs	r3, #0
 8003af6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003afa:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003afe:	2400      	movs	r4, #0
 8003b00:	4606      	mov	r6, r0
 8003b02:	460f      	mov	r7, r1
 8003b04:	4622      	mov	r2, r4
 8003b06:	462b      	mov	r3, r5
 8003b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b0c:	f7fc fb60 	bl	80001d0 <__aeabi_dsub>
 8003b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b14:	f7fc fd10 	bl	8000538 <__aeabi_dmul>
 8003b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b1c:	4680      	mov	r8, r0
 8003b1e:	4689      	mov	r9, r1
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc fd08 	bl	8000538 <__aeabi_dmul>
 8003b28:	e032      	b.n	8003b90 <__ieee754_pow+0x6b0>
 8003b2a:	bf00      	nop
 8003b2c:	f3af 8000 	nop.w
 8003b30:	4a454eef 	.word	0x4a454eef
 8003b34:	3fca7e28 	.word	0x3fca7e28
 8003b38:	93c9db65 	.word	0x93c9db65
 8003b3c:	3fcd864a 	.word	0x3fcd864a
 8003b40:	a91d4101 	.word	0xa91d4101
 8003b44:	3fd17460 	.word	0x3fd17460
 8003b48:	518f264d 	.word	0x518f264d
 8003b4c:	3fd55555 	.word	0x3fd55555
 8003b50:	db6fabff 	.word	0xdb6fabff
 8003b54:	3fdb6db6 	.word	0x3fdb6db6
 8003b58:	33333303 	.word	0x33333303
 8003b5c:	3fe33333 	.word	0x3fe33333
 8003b60:	e0000000 	.word	0xe0000000
 8003b64:	3feec709 	.word	0x3feec709
 8003b68:	dc3a03fd 	.word	0xdc3a03fd
 8003b6c:	3feec709 	.word	0x3feec709
 8003b70:	145b01f5 	.word	0x145b01f5
 8003b74:	be3e2fe0 	.word	0xbe3e2fe0
 8003b78:	080042f8 	.word	0x080042f8
 8003b7c:	3ff00000 	.word	0x3ff00000
 8003b80:	40080000 	.word	0x40080000
 8003b84:	080042e8 	.word	0x080042e8
 8003b88:	080042d8 	.word	0x080042d8
 8003b8c:	bff00000 	.word	0xbff00000
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4640      	mov	r0, r8
 8003b96:	4649      	mov	r1, r9
 8003b98:	f7fc fb1c 	bl	80001d4 <__adddf3>
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	4689      	mov	r9, r1
 8003ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba8:	f7fc fcc6 	bl	8000538 <__aeabi_dmul>
 8003bac:	460b      	mov	r3, r1
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	e9cd 4500 	strd	r4, r5, [sp]
 8003bbc:	f7fc fb0a 	bl	80001d4 <__adddf3>
 8003bc0:	4bbb      	ldr	r3, [pc, #748]	; (8003eb0 <__ieee754_pow+0x9d0>)
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	4682      	mov	sl, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	460e      	mov	r6, r1
 8003bca:	dd26      	ble.n	8003c1a <__ieee754_pow+0x73a>
 8003bcc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003bd0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003bd4:	4303      	orrs	r3, r0
 8003bd6:	d115      	bne.n	8003c04 <__ieee754_pow+0x724>
 8003bd8:	a39f      	add	r3, pc, #636	; (adr r3, 8003e58 <__ieee754_pow+0x978>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f7fc faf7 	bl	80001d4 <__adddf3>
 8003be6:	4622      	mov	r2, r4
 8003be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bec:	462b      	mov	r3, r5
 8003bee:	4650      	mov	r0, sl
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	f7fc faed 	bl	80001d0 <__aeabi_dsub>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bfe:	f7fc ff2b 	bl	8000a58 <__aeabi_dcmpgt>
 8003c02:	b348      	cbz	r0, 8003c58 <__ieee754_pow+0x778>
 8003c04:	a396      	add	r3, pc, #600	; (adr r3, 8003e60 <__ieee754_pow+0x980>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c0e:	f7fc fc93 	bl	8000538 <__aeabi_dmul>
 8003c12:	a393      	add	r3, pc, #588	; (adr r3, 8003e60 <__ieee754_pow+0x980>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	e107      	b.n	8003e2a <__ieee754_pow+0x94a>
 8003c1a:	4ba6      	ldr	r3, [pc, #664]	; (8003eb4 <__ieee754_pow+0x9d4>)
 8003c1c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003c20:	429f      	cmp	r7, r3
 8003c22:	dd19      	ble.n	8003c58 <__ieee754_pow+0x778>
 8003c24:	4ba4      	ldr	r3, [pc, #656]	; (8003eb8 <__ieee754_pow+0x9d8>)
 8003c26:	440b      	add	r3, r1
 8003c28:	4303      	orrs	r3, r0
 8003c2a:	d10a      	bne.n	8003c42 <__ieee754_pow+0x762>
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	462b      	mov	r3, r5
 8003c30:	f7fc face 	bl	80001d0 <__aeabi_dsub>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	f7fc fef8 	bl	8000a30 <__aeabi_dcmple>
 8003c40:	b150      	cbz	r0, 8003c58 <__ieee754_pow+0x778>
 8003c42:	a389      	add	r3, pc, #548	; (adr r3, 8003e68 <__ieee754_pow+0x988>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c4c:	f7fc fc74 	bl	8000538 <__aeabi_dmul>
 8003c50:	a385      	add	r3, pc, #532	; (adr r3, 8003e68 <__ieee754_pow+0x988>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	e0e8      	b.n	8003e2a <__ieee754_pow+0x94a>
 8003c58:	4a98      	ldr	r2, [pc, #608]	; (8003ebc <__ieee754_pow+0x9dc>)
 8003c5a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	dd25      	ble.n	8003cae <__ieee754_pow+0x7ce>
 8003c62:	151b      	asrs	r3, r3, #20
 8003c64:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003c68:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003c6c:	fa4a f303 	asr.w	r3, sl, r3
 8003c70:	4433      	add	r3, r6
 8003c72:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003c76:	4f92      	ldr	r7, [pc, #584]	; (8003ec0 <__ieee754_pow+0x9e0>)
 8003c78:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003c7c:	4117      	asrs	r7, r2
 8003c7e:	ea23 0107 	bic.w	r1, r3, r7
 8003c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c86:	ea43 030a 	orr.w	r3, r3, sl
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f1c2 0a14 	rsb	sl, r2, #20
 8003c90:	fa43 fa0a 	asr.w	sl, r3, sl
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	bfb8      	it	lt
 8003ca0:	f1ca 0a00 	rsblt	sl, sl, #0
 8003ca4:	f7fc fa94 	bl	80001d0 <__aeabi_dsub>
 8003ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8003cac:	e001      	b.n	8003cb2 <__ieee754_pow+0x7d2>
 8003cae:	f04f 0a00 	mov.w	sl, #0
 8003cb2:	4642      	mov	r2, r8
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cba:	f7fc fa8b 	bl	80001d4 <__adddf3>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	a36b      	add	r3, pc, #428	; (adr r3, 8003e70 <__ieee754_pow+0x990>)
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	460d      	mov	r5, r1
 8003cca:	f7fc fc35 	bl	8000538 <__aeabi_dmul>
 8003cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460f      	mov	r7, r1
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fa79 	bl	80001d0 <__aeabi_dsub>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fa73 	bl	80001d0 <__aeabi_dsub>
 8003cea:	a363      	add	r3, pc, #396	; (adr r3, 8003e78 <__ieee754_pow+0x998>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f7fc fc22 	bl	8000538 <__aeabi_dmul>
 8003cf4:	a362      	add	r3, pc, #392	; (adr r3, 8003e80 <__ieee754_pow+0x9a0>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	4689      	mov	r9, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fc fc19 	bl	8000538 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fa61 	bl	80001d4 <__adddf3>
 8003d12:	4604      	mov	r4, r0
 8003d14:	460d      	mov	r5, r1
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	f7fc fa59 	bl	80001d4 <__adddf3>
 8003d22:	4632      	mov	r2, r6
 8003d24:	463b      	mov	r3, r7
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	f7fc fa51 	bl	80001d0 <__aeabi_dsub>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fa4b 	bl	80001d0 <__aeabi_dsub>
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	460f      	mov	r7, r1
 8003d40:	464b      	mov	r3, r9
 8003d42:	4640      	mov	r0, r8
 8003d44:	4649      	mov	r1, r9
 8003d46:	f7fc fbf7 	bl	8000538 <__aeabi_dmul>
 8003d4a:	a34f      	add	r3, pc, #316	; (adr r3, 8003e88 <__ieee754_pow+0x9a8>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	4604      	mov	r4, r0
 8003d52:	460d      	mov	r5, r1
 8003d54:	f7fc fbf0 	bl	8000538 <__aeabi_dmul>
 8003d58:	a34d      	add	r3, pc, #308	; (adr r3, 8003e90 <__ieee754_pow+0x9b0>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fa37 	bl	80001d0 <__aeabi_dsub>
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	f7fc fbe7 	bl	8000538 <__aeabi_dmul>
 8003d6a:	a34b      	add	r3, pc, #300	; (adr r3, 8003e98 <__ieee754_pow+0x9b8>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa30 	bl	80001d4 <__adddf3>
 8003d74:	4622      	mov	r2, r4
 8003d76:	462b      	mov	r3, r5
 8003d78:	f7fc fbde 	bl	8000538 <__aeabi_dmul>
 8003d7c:	a348      	add	r3, pc, #288	; (adr r3, 8003ea0 <__ieee754_pow+0x9c0>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fa25 	bl	80001d0 <__aeabi_dsub>
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	f7fc fbd5 	bl	8000538 <__aeabi_dmul>
 8003d8e:	a346      	add	r3, pc, #280	; (adr r3, 8003ea8 <__ieee754_pow+0x9c8>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f7fc fa1e 	bl	80001d4 <__adddf3>
 8003d98:	4622      	mov	r2, r4
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	f7fc fbcc 	bl	8000538 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4640      	mov	r0, r8
 8003da6:	4649      	mov	r1, r9
 8003da8:	f7fc fa12 	bl	80001d0 <__aeabi_dsub>
 8003dac:	4604      	mov	r4, r0
 8003dae:	460d      	mov	r5, r1
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc fbbe 	bl	8000538 <__aeabi_dmul>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8003dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fa01 	bl	80001d0 <__aeabi_dsub>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dd6:	f7fc fcd9 	bl	800078c <__aeabi_ddiv>
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4604      	mov	r4, r0
 8003dde:	460d      	mov	r5, r1
 8003de0:	463b      	mov	r3, r7
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fba7 	bl	8000538 <__aeabi_dmul>
 8003dea:	4632      	mov	r2, r6
 8003dec:	463b      	mov	r3, r7
 8003dee:	f7fc f9f1 	bl	80001d4 <__adddf3>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4620      	mov	r0, r4
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc f9e9 	bl	80001d0 <__aeabi_dsub>
 8003dfe:	4642      	mov	r2, r8
 8003e00:	464b      	mov	r3, r9
 8003e02:	f7fc f9e5 	bl	80001d0 <__aeabi_dsub>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	492d      	ldr	r1, [pc, #180]	; (8003ec4 <__ieee754_pow+0x9e4>)
 8003e0e:	f7fc f9df 	bl	80001d0 <__aeabi_dsub>
 8003e12:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003e16:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003e1a:	da03      	bge.n	8003e24 <__ieee754_pow+0x944>
 8003e1c:	4652      	mov	r2, sl
 8003e1e:	f000 f99b 	bl	8004158 <scalbn>
 8003e22:	e000      	b.n	8003e26 <__ieee754_pow+0x946>
 8003e24:	4621      	mov	r1, r4
 8003e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e2a:	f7fc fb85 	bl	8000538 <__aeabi_dmul>
 8003e2e:	e008      	b.n	8003e42 <__ieee754_pow+0x962>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4924      	ldr	r1, [pc, #144]	; (8003ec4 <__ieee754_pow+0x9e4>)
 8003e34:	e00c      	b.n	8003e50 <__ieee754_pow+0x970>
 8003e36:	9b00      	ldr	r3, [sp, #0]
 8003e38:	9901      	ldr	r1, [sp, #4]
 8003e3a:	e009      	b.n	8003e50 <__ieee754_pow+0x970>
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	4621      	mov	r1, r4
 8003e40:	e006      	b.n	8003e50 <__ieee754_pow+0x970>
 8003e42:	4603      	mov	r3, r0
 8003e44:	e004      	b.n	8003e50 <__ieee754_pow+0x970>
 8003e46:	42ae      	cmp	r6, r5
 8003e48:	f73f ab71 	bgt.w	800352e <__ieee754_pow+0x4e>
 8003e4c:	f7ff bb64 	b.w	8003518 <__ieee754_pow+0x38>
 8003e50:	4618      	mov	r0, r3
 8003e52:	b011      	add	sp, #68	; 0x44
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e58:	652b82fe 	.word	0x652b82fe
 8003e5c:	3c971547 	.word	0x3c971547
 8003e60:	8800759c 	.word	0x8800759c
 8003e64:	7e37e43c 	.word	0x7e37e43c
 8003e68:	c2f8f359 	.word	0xc2f8f359
 8003e6c:	01a56e1f 	.word	0x01a56e1f
 8003e70:	00000000 	.word	0x00000000
 8003e74:	3fe62e43 	.word	0x3fe62e43
 8003e78:	fefa39ef 	.word	0xfefa39ef
 8003e7c:	3fe62e42 	.word	0x3fe62e42
 8003e80:	0ca86c39 	.word	0x0ca86c39
 8003e84:	be205c61 	.word	0xbe205c61
 8003e88:	72bea4d0 	.word	0x72bea4d0
 8003e8c:	3e663769 	.word	0x3e663769
 8003e90:	c5d26bf1 	.word	0xc5d26bf1
 8003e94:	3ebbbd41 	.word	0x3ebbbd41
 8003e98:	af25de2c 	.word	0xaf25de2c
 8003e9c:	3f11566a 	.word	0x3f11566a
 8003ea0:	16bebd93 	.word	0x16bebd93
 8003ea4:	3f66c16c 	.word	0x3f66c16c
 8003ea8:	5555553e 	.word	0x5555553e
 8003eac:	3fc55555 	.word	0x3fc55555
 8003eb0:	408fffff 	.word	0x408fffff
 8003eb4:	4090cbff 	.word	0x4090cbff
 8003eb8:	3f6f3400 	.word	0x3f6f3400
 8003ebc:	3fe00000 	.word	0x3fe00000
 8003ec0:	000fffff 	.word	0x000fffff
 8003ec4:	3ff00000 	.word	0x3ff00000

08003ec8 <__ieee754_sqrt>:
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	4f52      	ldr	r7, [pc, #328]	; (8004018 <__ieee754_sqrt+0x150>)
 8003ece:	f8df c148 	ldr.w	ip, [pc, #328]	; 8004018 <__ieee754_sqrt+0x150>
 8003ed2:	400f      	ands	r7, r1
 8003ed4:	4567      	cmp	r7, ip
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	460d      	mov	r5, r1
 8003eda:	4686      	mov	lr, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	d108      	bne.n	8003ef6 <__ieee754_sqrt+0x2e>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	f7fc fb26 	bl	8000538 <__aeabi_dmul>
 8003eec:	4632      	mov	r2, r6
 8003eee:	462b      	mov	r3, r5
 8003ef0:	f7fc f970 	bl	80001d4 <__adddf3>
 8003ef4:	e08d      	b.n	8004012 <__ieee754_sqrt+0x14a>
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	dc0e      	bgt.n	8003f18 <__ieee754_sqrt+0x50>
 8003efa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003efe:	4307      	orrs	r7, r0
 8003f00:	f000 8087 	beq.w	8004012 <__ieee754_sqrt+0x14a>
 8003f04:	b141      	cbz	r1, 8003f18 <__ieee754_sqrt+0x50>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	f7fc f961 	bl	80001d0 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	f7fc fc3b 	bl	800078c <__aeabi_ddiv>
 8003f16:	e07c      	b.n	8004012 <__ieee754_sqrt+0x14a>
 8003f18:	1524      	asrs	r4, r4, #20
 8003f1a:	d112      	bne.n	8003f42 <__ieee754_sqrt+0x7a>
 8003f1c:	b91b      	cbnz	r3, 8003f26 <__ieee754_sqrt+0x5e>
 8003f1e:	0ad3      	lsrs	r3, r2, #11
 8003f20:	3c15      	subs	r4, #21
 8003f22:	0552      	lsls	r2, r2, #21
 8003f24:	e7fa      	b.n	8003f1c <__ieee754_sqrt+0x54>
 8003f26:	2100      	movs	r1, #0
 8003f28:	02d8      	lsls	r0, r3, #11
 8003f2a:	d402      	bmi.n	8003f32 <__ieee754_sqrt+0x6a>
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	3101      	adds	r1, #1
 8003f30:	e7fa      	b.n	8003f28 <__ieee754_sqrt+0x60>
 8003f32:	1e48      	subs	r0, r1, #1
 8003f34:	1a24      	subs	r4, r4, r0
 8003f36:	f1c1 0020 	rsb	r0, r1, #32
 8003f3a:	fa22 f000 	lsr.w	r0, r2, r0
 8003f3e:	4303      	orrs	r3, r0
 8003f40:	408a      	lsls	r2, r1
 8003f42:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f4a:	07e1      	lsls	r1, r4, #31
 8003f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f50:	bf42      	ittt	mi
 8003f52:	005b      	lslmi	r3, r3, #1
 8003f54:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 8003f58:	0052      	lslmi	r2, r2, #1
 8003f5a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8003f5e:	f04f 0e00 	mov.w	lr, #0
 8003f62:	440b      	add	r3, r1
 8003f64:	0056      	lsls	r6, r2, #1
 8003f66:	1064      	asrs	r4, r4, #1
 8003f68:	2216      	movs	r2, #22
 8003f6a:	4677      	mov	r7, lr
 8003f6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f70:	1878      	adds	r0, r7, r1
 8003f72:	4298      	cmp	r0, r3
 8003f74:	bfde      	ittt	le
 8003f76:	1a1b      	suble	r3, r3, r0
 8003f78:	1847      	addle	r7, r0, r1
 8003f7a:	448e      	addle	lr, r1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	3a01      	subs	r2, #1
 8003f80:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8003f84:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003f88:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8003f8c:	d1f0      	bne.n	8003f70 <__ieee754_sqrt+0xa8>
 8003f8e:	2520      	movs	r5, #32
 8003f90:	4694      	mov	ip, r2
 8003f92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f96:	429f      	cmp	r7, r3
 8003f98:	eb01 000c 	add.w	r0, r1, ip
 8003f9c:	db02      	blt.n	8003fa4 <__ieee754_sqrt+0xdc>
 8003f9e:	d116      	bne.n	8003fce <__ieee754_sqrt+0x106>
 8003fa0:	42b0      	cmp	r0, r6
 8003fa2:	d813      	bhi.n	8003fcc <__ieee754_sqrt+0x104>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	eb00 0c01 	add.w	ip, r0, r1
 8003faa:	da05      	bge.n	8003fb8 <__ieee754_sqrt+0xf0>
 8003fac:	f1bc 0f00 	cmp.w	ip, #0
 8003fb0:	db02      	blt.n	8003fb8 <__ieee754_sqrt+0xf0>
 8003fb2:	f107 0801 	add.w	r8, r7, #1
 8003fb6:	e000      	b.n	8003fba <__ieee754_sqrt+0xf2>
 8003fb8:	46b8      	mov	r8, r7
 8003fba:	1bdb      	subs	r3, r3, r7
 8003fbc:	42b0      	cmp	r0, r6
 8003fbe:	bf88      	it	hi
 8003fc0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003fc4:	1a36      	subs	r6, r6, r0
 8003fc6:	440a      	add	r2, r1
 8003fc8:	4647      	mov	r7, r8
 8003fca:	e000      	b.n	8003fce <__ieee754_sqrt+0x106>
 8003fcc:	463b      	mov	r3, r7
 8003fce:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8003fd2:	3d01      	subs	r5, #1
 8003fd4:	4403      	add	r3, r0
 8003fd6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8003fda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003fde:	d1da      	bne.n	8003f96 <__ieee754_sqrt+0xce>
 8003fe0:	4333      	orrs	r3, r6
 8003fe2:	d007      	beq.n	8003ff4 <__ieee754_sqrt+0x12c>
 8003fe4:	1c53      	adds	r3, r2, #1
 8003fe6:	bf13      	iteet	ne
 8003fe8:	f002 0301 	andne.w	r3, r2, #1
 8003fec:	f10e 0e01 	addeq.w	lr, lr, #1
 8003ff0:	462a      	moveq	r2, r5
 8003ff2:	18d2      	addne	r2, r2, r3
 8003ff4:	ea4f 036e 	mov.w	r3, lr, asr #1
 8003ff8:	0852      	lsrs	r2, r2, #1
 8003ffa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003ffe:	f01e 0f01 	tst.w	lr, #1
 8004002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004006:	bf18      	it	ne
 8004008:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 800400c:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 8004010:	4610      	mov	r0, r2
 8004012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004016:	bf00      	nop
 8004018:	7ff00000 	.word	0x7ff00000

0800401c <fabs>:
 800401c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004020:	4770      	bx	lr

08004022 <finite>:
 8004022:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004026:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800402a:	0fc0      	lsrs	r0, r0, #31
 800402c:	4770      	bx	lr

0800402e <matherr>:
 800402e:	2000      	movs	r0, #0
 8004030:	4770      	bx	lr
	...

08004034 <nan>:
 8004034:	2000      	movs	r0, #0
 8004036:	4901      	ldr	r1, [pc, #4]	; (800403c <nan+0x8>)
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	7ff80000 	.word	0x7ff80000

08004040 <rint>:
 8004040:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8004044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004046:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 800404a:	f1be 0f13 	cmp.w	lr, #19
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4607      	mov	r7, r0
 8004054:	460c      	mov	r4, r1
 8004056:	4606      	mov	r6, r0
 8004058:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800405c:	dc44      	bgt.n	80040e8 <rint+0xa8>
 800405e:	f1be 0f00 	cmp.w	lr, #0
 8004062:	da26      	bge.n	80040b2 <rint+0x72>
 8004064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004068:	4301      	orrs	r1, r0
 800406a:	d06d      	beq.n	8004148 <rint+0x108>
 800406c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8004070:	430f      	orrs	r7, r1
 8004072:	427b      	negs	r3, r7
 8004074:	431f      	orrs	r7, r3
 8004076:	4b36      	ldr	r3, [pc, #216]	; (8004150 <rint+0x110>)
 8004078:	0b3f      	lsrs	r7, r7, #12
 800407a:	0c64      	lsrs	r4, r4, #17
 800407c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8004080:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004084:	0464      	lsls	r4, r4, #17
 8004086:	ea47 0104 	orr.w	r1, r7, r4
 800408a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800408e:	4632      	mov	r2, r6
 8004090:	463b      	mov	r3, r7
 8004092:	f7fc f89f 	bl	80001d4 <__adddf3>
 8004096:	e9cd 0100 	strd	r0, r1, [sp]
 800409a:	4632      	mov	r2, r6
 800409c:	463b      	mov	r3, r7
 800409e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040a2:	f7fc f895 	bl	80001d0 <__aeabi_dsub>
 80040a6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80040aa:	4602      	mov	r2, r0
 80040ac:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80040b0:	e04a      	b.n	8004148 <rint+0x108>
 80040b2:	4928      	ldr	r1, [pc, #160]	; (8004154 <rint+0x114>)
 80040b4:	fa41 f10e 	asr.w	r1, r1, lr
 80040b8:	ea03 0001 	and.w	r0, r3, r1
 80040bc:	4310      	orrs	r0, r2
 80040be:	d043      	beq.n	8004148 <rint+0x108>
 80040c0:	084b      	lsrs	r3, r1, #1
 80040c2:	ea04 0203 	and.w	r2, r4, r3
 80040c6:	ea52 0607 	orrs.w	r6, r2, r7
 80040ca:	d029      	beq.n	8004120 <rint+0xe0>
 80040cc:	ea24 0303 	bic.w	r3, r4, r3
 80040d0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80040d4:	f1be 0f13 	cmp.w	lr, #19
 80040d8:	fa44 f40e 	asr.w	r4, r4, lr
 80040dc:	bf0c      	ite	eq
 80040de:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80040e2:	2600      	movne	r6, #0
 80040e4:	431c      	orrs	r4, r3
 80040e6:	e01b      	b.n	8004120 <rint+0xe0>
 80040e8:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 80040ec:	dd05      	ble.n	80040fa <rint+0xba>
 80040ee:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80040f2:	d129      	bne.n	8004148 <rint+0x108>
 80040f4:	f7fc f86e 	bl	80001d4 <__adddf3>
 80040f8:	e028      	b.n	800414c <rint+0x10c>
 80040fa:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80040fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004102:	fa21 f10c 	lsr.w	r1, r1, ip
 8004106:	4208      	tst	r0, r1
 8004108:	d01e      	beq.n	8004148 <rint+0x108>
 800410a:	084b      	lsrs	r3, r1, #1
 800410c:	4218      	tst	r0, r3
 800410e:	bf1f      	itttt	ne
 8004110:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8004114:	ea20 0303 	bicne.w	r3, r0, r3
 8004118:	fa46 fc0c 	asrne.w	ip, r6, ip
 800411c:	ea4c 0603 	orrne.w	r6, ip, r3
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <rint+0x110>)
 8004122:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004126:	4621      	mov	r1, r4
 8004128:	e9d5 4500 	ldrd	r4, r5, [r5]
 800412c:	4630      	mov	r0, r6
 800412e:	4622      	mov	r2, r4
 8004130:	462b      	mov	r3, r5
 8004132:	f7fc f84f 	bl	80001d4 <__adddf3>
 8004136:	e9cd 0100 	strd	r0, r1, [sp]
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004142:	f7fc f845 	bl	80001d0 <__aeabi_dsub>
 8004146:	e001      	b.n	800414c <rint+0x10c>
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	b003      	add	sp, #12
 800414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004150:	08004308 	.word	0x08004308
 8004154:	000fffff 	.word	0x000fffff

08004158 <scalbn>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	4616      	mov	r6, r2
 800415c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	460b      	mov	r3, r1
 8004166:	b98a      	cbnz	r2, 800418c <scalbn+0x34>
 8004168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800416c:	4303      	orrs	r3, r0
 800416e:	d050      	beq.n	8004212 <scalbn+0xba>
 8004170:	2200      	movs	r2, #0
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <scalbn+0xd0>)
 8004174:	f7fc f9e0 	bl	8000538 <__aeabi_dmul>
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <scalbn+0xd4>)
 800417a:	4296      	cmp	r6, r2
 800417c:	4604      	mov	r4, r0
 800417e:	460d      	mov	r5, r1
 8004180:	460b      	mov	r3, r1
 8004182:	db34      	blt.n	80041ee <scalbn+0x96>
 8004184:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004188:	3a36      	subs	r2, #54	; 0x36
 800418a:	e008      	b.n	800419e <scalbn+0x46>
 800418c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004190:	42ba      	cmp	r2, r7
 8004192:	d104      	bne.n	800419e <scalbn+0x46>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	f7fc f81c 	bl	80001d4 <__adddf3>
 800419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419e:	4432      	add	r2, r6
 80041a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80041a4:	428a      	cmp	r2, r1
 80041a6:	dd02      	ble.n	80041ae <scalbn+0x56>
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	e011      	b.n	80041d2 <scalbn+0x7a>
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	dd06      	ble.n	80041c0 <scalbn+0x68>
 80041b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041be:	e028      	b.n	8004212 <scalbn+0xba>
 80041c0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80041c4:	da17      	bge.n	80041f6 <scalbn+0x9e>
 80041c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80041ca:	429e      	cmp	r6, r3
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	dd08      	ble.n	80041e4 <scalbn+0x8c>
 80041d2:	a111      	add	r1, pc, #68	; (adr r1, 8004218 <scalbn+0xc0>)
 80041d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041d8:	f000 f82c 	bl	8004234 <copysign>
 80041dc:	a30e      	add	r3, pc, #56	; (adr r3, 8004218 <scalbn+0xc0>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	e013      	b.n	800420c <scalbn+0xb4>
 80041e4:	a10e      	add	r1, pc, #56	; (adr r1, 8004220 <scalbn+0xc8>)
 80041e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041ea:	f000 f823 	bl	8004234 <copysign>
 80041ee:	a30c      	add	r3, pc, #48	; (adr r3, 8004220 <scalbn+0xc8>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	e00a      	b.n	800420c <scalbn+0xb4>
 80041f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80041fa:	3236      	adds	r2, #54	; 0x36
 80041fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004200:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <scalbn+0xd8>)
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	2200      	movs	r2, #0
 800420c:	f7fc f994 	bl	8000538 <__aeabi_dmul>
 8004210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004218:	8800759c 	.word	0x8800759c
 800421c:	7e37e43c 	.word	0x7e37e43c
 8004220:	c2f8f359 	.word	0xc2f8f359
 8004224:	01a56e1f 	.word	0x01a56e1f
 8004228:	43500000 	.word	0x43500000
 800422c:	ffff3cb0 	.word	0xffff3cb0
 8004230:	3c900000 	.word	0x3c900000

08004234 <copysign>:
 8004234:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800423c:	ea42 0103 	orr.w	r1, r2, r3
 8004240:	4770      	bx	lr
	...

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000764 	.word	0x20000764

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
